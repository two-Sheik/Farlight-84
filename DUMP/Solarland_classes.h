// Class Solarland.3DMeshWidget
// Size: 0x238 (Inherited: 0x228)
struct A3DMeshWidget : AActor {
	struct USceneComponent* DefaultSceneRoot; // 0x228(0x08)
	struct UStaticMeshComponent* StaticMeshComp; // 0x230(0x08)
};

// Class Solarland.3DMeshWidgetTrack
// Size: 0x2d8 (Inherited: 0x238)
struct A3DMeshWidgetTrack : A3DMeshWidget {
	char pad_238[0x8]; // 0x238(0x08)
	struct FVector BoxHalfExtent; // 0x240(0x0c)
	float PlayerNearbyAlpha; // 0x24c(0x04)
	bool bDebugCollision; // 0x250(0x01)
	char pad_251[0x3]; // 0x251(0x03)
	struct FName MaterialAlphaParamName; // 0x254(0x08)
	struct FName MaterialCountDownName; // 0x25c(0x08)
	float MaxTraceDist; // 0x264(0x04)
	float DistFromGround; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct UStaticMeshComponent* StaticMeshCountDown; // 0x270(0x08)
	struct UTextRenderComponent* DistTextComp; // 0x278(0x08)
	struct UMaterialInstanceDynamic* DynamicMaterialIcon; // 0x280(0x08)
	struct UMaterialInstanceDynamic* DynamicMaterialCountDown; // 0x288(0x08)
	struct UMaterialInstanceDynamic* DynamicMaterialDistText; // 0x290(0x08)
	char pad_298[0x40]; // 0x298(0x40)
};

// Class Solarland.AbilityTask_WaitAbilityEnd
// Size: 0x148 (Inherited: 0x80)
struct UAbilityTask_WaitAbilityEnd : UAbilityTask {
	struct FMulticastInlineDelegate OnEnd; // 0x80(0x10)
	char pad_90[0xb8]; // 0x90(0xb8)

	struct UAbilityTask_WaitAbilityEnd* WaitForAbilityEndWithTagRequirements(struct UGameplayAbility* OwningAbility, struct FGameplayTagRequirements TagRequirements, bool InIncludeTriggeredAbilities, bool InTriggerOnce); // Function Solarland.AbilityTask_WaitAbilityEnd.WaitForAbilityEndWithTagRequirements // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f99c10
	struct UAbilityTask_WaitAbilityEnd* WaitForAbilityEnd_Query(struct UGameplayAbility* OwningAbility, struct FGameplayTagQuery Query, bool InIncludeTriggeredAbilities, bool InTriggerOnce); // Function Solarland.AbilityTask_WaitAbilityEnd.WaitForAbilityEnd_Query // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f99e20
	struct UAbilityTask_WaitAbilityEnd* WaitForAbilityEnd(struct UGameplayAbility* OwningAbility, struct FGameplayTag InWithTag, struct FGameplayTag InWithoutTag, bool InIncludeTriggeredAbilities, bool InTriggerOnce); // Function Solarland.AbilityTask_WaitAbilityEnd.WaitForAbilityEnd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f99a70
	void OnAbilityEnd(struct FAbilityEndedData& EndedData); // Function Solarland.AbilityTask_WaitAbilityEnd.OnAbilityEnd // (Final|Native|Protected|HasOutParms) // @ game+0x1f994f0
};

// Class Solarland.SolarAbilityTask
// Size: 0x80 (Inherited: 0x80)
struct USolarAbilityTask : UAbilityTask {
};

// Class Solarland.AbilityTask_WaitAttributeChangeWithOldValue
// Size: 0xf8 (Inherited: 0x80)
struct UAbilityTask_WaitAttributeChangeWithOldValue : USolarAbilityTask {
	struct FMulticastInlineDelegate OnChange; // 0x80(0x10)
	char pad_90[0x60]; // 0x90(0x60)
	struct UAbilitySystemComponent* ExternalOwner; // 0xf0(0x08)

	struct UAbilityTask_WaitAttributeChangeWithOldValue* WaitForAttributeChangeWithComparison(struct UGameplayAbility* OwningAbility, struct FGameplayAttribute InAttribute, struct FGameplayTag InWithTag, struct FGameplayTag InWithoutTag, enum class EWaitAttributeChangeComparison InComparisonType, float InComparisonValue, bool bTriggerOnce, struct AActor* OptionalExternalOwner); // Function Solarland.AbilityTask_WaitAttributeChangeWithOldValue.WaitForAttributeChangeWithComparison // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f9a2d0
	struct UAbilityTask_WaitAttributeChangeWithOldValue* WaitForAttributeChange(struct UGameplayAbility* OwningAbility, struct FGameplayAttribute InAttribute, struct FGameplayTag InWithTag, struct FGameplayTag InWithoutTag, bool bTriggerOnce, struct AActor* OptionalExternalOwner); // Function Solarland.AbilityTask_WaitAttributeChangeWithOldValue.WaitForAttributeChange // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f99ff0
};

// Class Solarland.AbilityTask_WaitDelayAndResetOnGameplayEvent
// Size: 0xc0 (Inherited: 0x80)
struct UAbilityTask_WaitDelayAndResetOnGameplayEvent : USolarAbilityTask {
	struct FMulticastInlineDelegate OnFinish; // 0x80(0x10)
	struct FDelegate OnRecalculateWaitDelayOnEventTriggered; // 0x90(0x10)
	char pad_A0[0x20]; // 0xa0(0x20)

	struct UAbilityTask_WaitDelayAndResetOnGameplayEvent* CreateTask(struct UGameplayAbility* OwningAbility, float DelayTime, struct FGameplayTag& EventTag); // Function Solarland.AbilityTask_WaitDelayAndResetOnGameplayEvent.CreateTask // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1f98af0
};

// Class Solarland.AbilityTask_WaitEvaluation
// Size: 0xa8 (Inherited: 0x80)
struct UAbilityTask_WaitEvaluation : USolarAbilityTask {
	struct FMulticastInlineDelegate OnGotDesiredValue; // 0x80(0x10)
	struct FDelegate EvaluationFunction; // 0x90(0x10)
	char pad_A0[0x8]; // 0xa0(0x08)

	struct UAbilityTask_WaitEvaluation* CreateTask(struct UGameplayAbility* OwningAbility, bool bDesiredValue, bool bTriggerOnce); // Function Solarland.AbilityTask_WaitEvaluation.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f98c00
};

// Class Solarland.AbilityTask_WaitInputAction
// Size: 0xa8 (Inherited: 0x80)
struct UAbilityTask_WaitInputAction : USolarAbilityTask {
	struct FMulticastInlineDelegate OnInputAction; // 0x80(0x10)
	char pad_90[0x18]; // 0x90(0x18)

	struct UAbilityTask_WaitInputAction* CreateTask(struct UGameplayAbility* OwningAbility, struct FName ActionName, enum class EInputEvent InputEvent, bool bTriggerOnce); // Function Solarland.AbilityTask_WaitInputAction.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f98d20
};

// Class Solarland.AbilityTask_WaitTagRequirementsMetStatusChange
// Size: 0xf0 (Inherited: 0x80)
struct UAbilityTask_WaitTagRequirementsMetStatusChange : USolarAbilityTask {
	struct FMulticastInlineDelegate OnMetStatusChange; // 0x80(0x10)
	struct FGameplayTagRequirements TagRequirements; // 0x90(0x50)
	char pad_E0[0x10]; // 0xe0(0x10)

	struct UAbilityTask_WaitTagRequirementsMetStatusChange* CreateTask(struct UGameplayAbility* OwningAbility, struct FGameplayTagRequirements& TagRequirements, bool bMetInitially); // Function Solarland.AbilityTask_WaitTagRequirementsMetStatusChange.CreateTask // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1f98e70
};

// Class Solarland.ActionNode
// Size: 0x70 (Inherited: 0x28)
struct UActionNode : UObject {
	struct FMulticastInlineDelegate OnBeganCallback; // 0x28(0x10)
	struct FMulticastInlineDelegate OnEndedCallback; // 0x38(0x10)
	struct FMulticastInlineDelegate OnResetCallback; // 0x48(0x10)
	struct FMulticastInlineDelegate OnDisposedCallback; // 0x58(0x10)
	char pad_68[0x8]; // 0x68(0x08)

	void Reset(); // Function Solarland.ActionNode.Reset // (Final|Native|Public) // @ game+0x1f99850
	bool Finished(); // Function Solarland.ActionNode.Finished // (Final|Native|Public|Const) // @ game+0x1f99180
	void Finish(); // Function Solarland.ActionNode.Finish // (Native|Public) // @ game+0x1f990c0
	bool Execute(float DeltaTime); // Function Solarland.ActionNode.Execute // (Final|Native|Public) // @ game+0x1f99030
	bool Disposed(); // Function Solarland.ActionNode.Disposed // (Final|Native|Public|Const) // @ game+0x1f99010
	void Dispose(); // Function Solarland.ActionNode.Dispose // (Final|Native|Public) // @ game+0x1f98ff0
};

// Class Solarland.ActionWheelWidgetFunctionBase
// Size: 0x38 (Inherited: 0x28)
struct UActionWheelWidgetFunctionBase : UObject {
	struct TWeakObjectPtr<struct USolarUserWidget> BindedWidget; // 0x28(0x08)
	int32_t LastSelectedIndex; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	int32_t GetSuggestActionIndex(); // Function Solarland.ActionWheelWidgetFunctionBase.GetSuggestActionIndex // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetQuickActionIndex(); // Function Solarland.ActionWheelWidgetFunctionBase.GetQuickActionIndex // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetAutoSelectedActionIndex(); // Function Solarland.ActionWheelWidgetFunctionBase.GetAutoSelectedActionIndex // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	bool ExecUseCustomItemCommand(int32_t InItemID); // Function Solarland.ActionWheelWidgetFunctionBase.ExecUseCustomItemCommand // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	bool CheckCommandCanExec(struct ASCMPlayerState* InPlayerState, int32_t InIndex, struct FActionWheelCommand InCommand); // Function Solarland.ActionWheelWidgetFunctionBase.CheckCommandCanExec // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarUserWidget
// Size: 0x348 (Inherited: 0x260)
struct USolarUserWidget : UUserWidget {
	enum class EWidgetLayerLevel WidgetLayerLevel; // 0x260(0x01)
	bool bIsPersistent; // 0x261(0x01)
	enum class EWidgetScope WidgetScope; // 0x262(0x01)
	enum class EInputCapture CaptureInput; // 0x263(0x01)
	bool bHideCursorDuringCapture; // 0x264(0x01)
	char pad_265[0x3]; // 0x265(0x03)
	int32_t MyRoot; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct FString widgetkey; // 0x270(0x10)
	bool bReceiveKeyMap; // 0x280(0x01)
	bool bReceiveShowMouse; // 0x281(0x01)
	enum class EScope ShowScope; // 0x282(0x01)
	bool bShowTransBlackAnim; // 0x283(0x01)
	char pad_284[0x4]; // 0x284(0x04)
	struct UWidgetInputManager* InputManagerClass; // 0x288(0x08)
	struct UWidgetInputManager* InputManager; // 0x290(0x08)
	struct TMap<struct FName, struct UWidgetAnimation*> AnimationsMap; // 0x298(0x50)
	struct TWeakObjectPtr<struct UWidgetAnimation> PlayingAnimation; // 0x2e8(0x08)
	char pad_2F0[0x18]; // 0x2f0(0x18)
	struct TArray<struct FPlayAnimationParams> PendingPlayAnimations; // 0x308(0x10)
	bool WidgetTickEnabled; // 0x318(0x01)
	char pad_319[0x7]; // 0x319(0x07)
	struct USolarInputActionContext* InputActionContext; // 0x320(0x08)
	char pad_328[0x10]; // 0x328(0x10)
	struct TArray<struct USolarUserWidget*> AllSolarUserWidgetChilds; // 0x338(0x10)

	void StopListeningForInputHandle(int32_t Handle); // Function Solarland.SolarUserWidget.StopListeningForInputHandle // (Final|Native|Protected|BlueprintCallable) // @ game+0x2256b40
	void StopListeningForInputActionEx(struct FName ActionName, enum class EInputEvent EventType); // Function Solarland.SolarUserWidget.StopListeningForInputActionEx // (Final|Native|Protected|BlueprintCallable) // @ game+0x2256a70
	void ShowSelfPanelUI(); // Function Solarland.SolarUserWidget.ShowSelfPanelUI // (Final|Native|Public|BlueprintCallable) // @ game+0x2256a50
	void ShowMouseCursor(); // Function Solarland.SolarUserWidget.ShowMouseCursor // (Final|Native|Protected|BlueprintCallable) // @ game+0x2256a30
	void SetZOrder(int32_t ZOrder); // Function Solarland.SolarUserWidget.SetZOrder // (Final|Native|Public) // @ game+0x22569a0
	void SetWidgetVisible(struct UWidget* Widget, bool bVisible, bool bHitTest); // Function Solarland.SolarUserWidget.SetWidgetVisible // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x2256890
	void SetWidgetTickEnabled(bool bEnabled); // Function Solarland.SolarUserWidget.SetWidgetTickEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x2256800
	void SetWidgetKey(struct FString InWidgetKey); // Function Solarland.SolarUserWidget.SetWidgetKey // (Final|Native|Public) // @ game+0x2256760
	void SetInputActionIsEnabled(struct FName ActionName, enum class EInputEvent EventType, bool bInIsEnabled); // Function Solarland.SolarUserWidget.SetInputActionIsEnabled // (Final|Native|Protected|BlueprintCallable) // @ game+0x2256640
	void SetBlockInputForOneTick(); // Function Solarland.SolarUserWidget.SetBlockInputForOneTick // (Final|Native|Public) // @ game+0x2256620
	void ReceiveTick(struct FGeometry& MyGeometry, float InDeltaTime); // Function Solarland.SolarUserWidget.ReceiveTick // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveShow(); // Function Solarland.SolarUserWidget.ReceiveShow // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveHide(); // Function Solarland.SolarUserWidget.ReceiveHide // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	bool PlayAnimationByName(struct FName& AnimationName, float StartAtTime, int32_t NumLoopsToPlay, enum class EUMGSequencePlayMode PlayMode, float PlaybackSpeed); // Function Solarland.SolarUserWidget.PlayAnimationByName // (Final|Native|Public|HasOutParms) // @ game+0x2256260
	void PlayAnimationByExclusively(struct UWidgetAnimation* InAnimation, float StartAtTime, int32_t NumLoopsToPlay, enum class EUMGSequencePlayMode PlayMode, float PlaybackSpeed, bool bRestoreState); // Function Solarland.SolarUserWidget.PlayAnimationByExclusively // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2256090
	void OnTouchManagerInitialized(); // Function Solarland.SolarUserWidget.OnTouchManagerInitialized // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnSynchronizeProperties(); // Function Solarland.SolarUserWidget.OnSynchronizeProperties // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnSolarUIOpened(); // Function Solarland.SolarUserWidget.OnSolarUIOpened // (Native|Event|Protected|BlueprintEvent) // @ game+0x81c3f0
	void OnSolarUIClosed(); // Function Solarland.SolarUserWidget.OnSolarUIClosed // (Native|Event|Protected|BlueprintEvent) // @ game+0x1548170
	void OnShow(); // Function Solarland.SolarUserWidget.OnShow // (Native|Event|Protected|BlueprintEvent) // @ game+0x1547e10
	void OnHide(); // Function Solarland.SolarUserWidget.OnHide // (Native|Event|Protected|BlueprintEvent) // @ game+0x1547e30
	void OnExclusivelyAnimationFinished(); // Function Solarland.SolarUserWidget.OnExclusivelyAnimationFinished // (Final|Native|Protected) // @ game+0x2256010
	void OnDeinitialize(); // Function Solarland.SolarUserWidget.OnDeinitialize // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnBackKey(enum class EWidgetBackKeyType BackKeyType); // Function Solarland.SolarUserWidget.OnBackKey // (Native|Event|Protected|BlueprintEvent) // @ game+0x2255b80
	int32_t ListenForInputActionEx(struct FName ActionName, enum class EInputEvent EventType, bool bInIsEnabled, struct FDelegate Callback); // Function Solarland.SolarUserWidget.ListenForInputActionEx // (Final|Native|Protected|BlueprintCallable) // @ game+0x22559e0
	bool IsWidgetTickEnabled(); // Function Solarland.SolarUserWidget.IsWidgetTickEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21a3020
	bool IsSolarUserWidgetAndBindLua(struct UWidget* InWidget); // Function Solarland.SolarUserWidget.IsSolarUserWidgetAndBindLua // (Final|Native|Static|Public) // @ game+0x2255950
	bool IsPlatformDesktop(); // Function Solarland.SolarUserWidget.IsPlatformDesktop // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2255920
	void HideMouseCursor(); // Function Solarland.SolarUserWidget.HideMouseCursor // (Final|Native|Protected|BlueprintCallable) // @ game+0x2255770
	struct FString GetWidgetKeyByPanelName(enum class EUIPanelName PanelName); // Function Solarland.SolarUserWidget.GetWidgetKeyByPanelName // (Final|Native|Static|Public) // @ game+0x22556a0
	struct FString GetWidgetKey(); // Function Solarland.SolarUserWidget.GetWidgetKey // (Final|Native|Public|Const) // @ game+0x2255620
	struct TArray<struct FVector2D> GetTouchedLocation(); // Function Solarland.SolarUserWidget.GetTouchedLocation // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x22555a0
	enum class EScope GetShowScope(); // Function Solarland.SolarUserWidget.GetShowScope // (Final|Native|Public|Const) // @ game+0x2255570
	struct TArray<struct FVector2D> GetPointerLocation(); // Function Solarland.SolarUserWidget.GetPointerLocation // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x22554c0
	struct ASolarPlayerState* GetOwningSolarPlayerState(); // Function Solarland.SolarUserWidget.GetOwningSolarPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2255490
	struct ASolarCharacter* GetOwningSolarPlayerCharacter(); // Function Solarland.SolarUserWidget.GetOwningSolarPlayerCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2255460
	struct UWidgetAnimation* GetAnimationByName(struct FName& AnimationName); // Function Solarland.SolarUserWidget.GetAnimationByName // (Final|Native|Public|HasOutParms|Const) // @ game+0x22552f0
	struct TArray<struct USolarUserWidget*> GetAllSolarUserWidgetChilds(); // Function Solarland.SolarUserWidget.GetAllSolarUserWidgetChilds // (Final|Native|Public) // @ game+0x2255270
	struct UWidget* FindWidgetFromName(struct FName& Name); // Function Solarland.SolarUserWidget.FindWidgetFromName // (Final|Native|Public|HasOutParms|Const) // @ game+0x22551d0
	void ExecuteSolarUIShow(); // Function Solarland.SolarUserWidget.ExecuteSolarUIShow // (Final|Native|Public) // @ game+0x22551b0
	void ExecuteSolarUIOpened(); // Function Solarland.SolarUserWidget.ExecuteSolarUIOpened // (Final|Native|Public) // @ game+0x2255190
	void ExecuteSolarUIHide(); // Function Solarland.SolarUserWidget.ExecuteSolarUIHide // (Final|Native|Public) // @ game+0x2255170
	void ExecuteSolarUIClosed(); // Function Solarland.SolarUserWidget.ExecuteSolarUIClosed // (Final|Native|Public) // @ game+0x2255150
	void ExecuteSolarUIClean(); // Function Solarland.SolarUserWidget.ExecuteSolarUIClean // (Final|Native|Public) // @ game+0x2255130
	void ExecuteBindCustomControl(); // Function Solarland.SolarUserWidget.ExecuteBindCustomControl // (Final|Native|Public) // @ game+0x2255110
	void CloseSelfPanelUI(); // Function Solarland.SolarUserWidget.CloseSelfPanelUI // (Final|Native|Public|BlueprintCallable) // @ game+0x22550f0
	struct TArray<struct USolarUserWidget*> CacheAllSolarUserWidgetChilds(); // Function Solarland.SolarUserWidget.CacheAllSolarUserWidgetChilds // (Final|Native|Public) // @ game+0x2255070
};

// Class Solarland.ActionWheelWidget
// Size: 0x528 (Inherited: 0x348)
struct UActionWheelWidget : USolarUserWidget {
	char pad_348[0x10]; // 0x348(0x10)
	struct UOverlay* Overlay_Point; // 0x358(0x08)
	char pad_360[0x58]; // 0x360(0x58)
	int32_t SelectedIndex; // 0x3b8(0x04)
	int32_t WheelActionItemCount; // 0x3bc(0x04)
	int32_t WheelActionItemCountMax; // 0x3c0(0x04)
	float OperationAreaRadius; // 0x3c4(0x04)
	float CancelAreaRadius; // 0x3c8(0x04)
	float PointMoveSensitivity; // 0x3cc(0x04)
	float ManualSwitchThreshold_PC; // 0x3d0(0x04)
	float ManualSwitchThreshold_GamePad; // 0x3d4(0x04)
	float ManualSwitchThreshold_Mobile; // 0x3d8(0x04)
	int32_t groupid; // 0x3dc(0x04)
	int32_t PageCount; // 0x3e0(0x04)
	int32_t CurrentPage; // 0x3e4(0x04)
	char pad_3E8[0x8]; // 0x3e8(0x08)
	struct FActionWheelConfig WheelConfigs; // 0x3f0(0xd8)
	struct TMap<int32_t, struct UActionWheelWidgetFunctionBase*> ActionWheelWidgetFunctionObjs; // 0x4c8(0x50)
	struct UDataTable* ActionWheelConfigDataTable; // 0x518(0x08)
	bool ActionWheelIsOpened; // 0x520(0x01)
	char pad_521[0x3]; // 0x521(0x03)
	float ValidEmojiUseDistance; // 0x524(0x04)

	void UpdateWheelArrowAngle(float Degree); // Function Solarland.ActionWheelWidget.UpdateWheelArrowAngle // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetInputActionGroupEnable(bool InEnable); // Function Solarland.ActionWheelWidget.SetInputActionGroupEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x1f99870
	void SelecteActionWheelItem(int32_t page, int32_t Index); // Function Solarland.ActionWheelWidget.SelecteActionWheelItem // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveActionWheelTouchMoved(struct FVector2D& TouchLocalPos); // Function Solarland.ActionWheelWidget.ReceiveActionWheelTouchMoved // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1f997c0
	void OnConsumeItemUpdated(); // Function Solarland.ActionWheelWidget.OnConsumeItemUpdated // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnCommandExec(int32_t InGroupID, int32_t InSelectedIndex); // Function Solarland.ActionWheelWidget.OnCommandExec // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnBindedInputActionReleased(int32_t InGroupID); // Function Solarland.ActionWheelWidget.OnBindedInputActionReleased // (Native|Event|Public|BlueprintEvent) // @ game+0x1f99730
	void OnBindedInputActionPressed(int32_t InGroupID); // Function Solarland.ActionWheelWidget.OnBindedInputActionPressed // (Native|Event|Public|BlueprintEvent) // @ game+0x1f996a0
	void OnBattleHUDVisibilityChanged(bool Visible); // Function Solarland.ActionWheelWidget.OnBattleHUDVisibilityChanged // (Final|Native|Public) // @ game+0x1f99610
	void OnActionWheelPreviousPage(); // Function Solarland.ActionWheelWidget.OnActionWheelPreviousPage // (Final|Native|Public) // @ game+0x1f995f0
	void OnActionWheelOpened(); // Function Solarland.ActionWheelWidget.OnActionWheelOpened // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnActionWheelNextPage(); // Function Solarland.ActionWheelWidget.OnActionWheelNextPage // (Final|Native|Public) // @ game+0x1f995d0
	void OnActionWheelMouseRightClicked(); // Function Solarland.ActionWheelWidget.OnActionWheelMouseRightClicked // (Final|Native|Public) // @ game+0x1f995b0
	void OnActionWheelMouseLeftClicked(); // Function Solarland.ActionWheelWidget.OnActionWheelMouseLeftClicked // (Final|Native|Public) // @ game+0x1f99590
	void OnActionWheelConfigInit(); // Function Solarland.ActionWheelWidget.OnActionWheelConfigInit // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnActionWheelClosed(); // Function Solarland.ActionWheelWidget.OnActionWheelClosed // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void LoadCustomActionCommandInfo(struct FActionWheelConfig& ActionWheelConfig); // Function Solarland.ActionWheelWidget.LoadCustomActionCommandInfo // (Final|Native|Public|HasOutParms) // @ game+0x1f993b0
	void InitActionWheelConfigByGroupID(int32_t InGroupID, int32_t InPage); // Function Solarland.ActionWheelWidget.InitActionWheelConfigByGroupID // (Final|Native|Public|BlueprintCallable) // @ game+0x1f992e0
	int32_t GetItemNumById(int32_t InItemID); // Function Solarland.ActionWheelWidget.GetItemNumById // (Final|Native|Public|BlueprintCallable) // @ game+0x1f99240
	struct UActionWheelWidgetFunctionBase* GetActionWheelWidgetFunctionObj(int32_t InGroupID); // Function Solarland.ActionWheelWidget.GetActionWheelWidgetFunctionObj // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f991a0
	void CommandExec(int32_t InGroupID, int32_t InSelectedIndex); // Function Solarland.ActionWheelWidget.CommandExec // (Final|Native|Public|BlueprintCallable) // @ game+0x1f98a20
	void ChangeWheelVisibility(bool Visible); // Function Solarland.ActionWheelWidget.ChangeWheelVisibility // (Final|Native|Public) // @ game+0x1f98990
	void ActionWheelYAxis(float Movement); // Function Solarland.ActionWheelWidget.ActionWheelYAxis // (Final|Native|Protected) // @ game+0x1f98910
	void ActionWheelXAxis(float Movement); // Function Solarland.ActionWheelWidget.ActionWheelXAxis // (Final|Native|Protected) // @ game+0x1f98890
};

// Class Solarland.ActorEffect
// Size: 0x50 (Inherited: 0x28)
struct UActorEffect : UObject {
	struct UActorEffectController* ControllerClass; // 0x28(0x08)
	struct UActorEffectController* Controller; // 0x30(0x08)
	char pad_38[0x18]; // 0x38(0x18)
};

// Class Solarland.ActorEffectController
// Size: 0x28 (Inherited: 0x28)
struct UActorEffectController : UObject {
};

// Class Solarland.ActorEffectSubsystem
// Size: 0x50 (Inherited: 0x30)
struct UActorEffectSubsystem : UWorldSubsystem {
	char pad_30[0x10]; // 0x30(0x10)
	struct TArray<struct UActorEffect*> Effects; // 0x40(0x10)

	bool Stop(struct UActorEffect* EffectInstance); // Function Solarland.ActorEffectSubsystem.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x1f999d0
	struct UActorEffect* Start(struct UActorEffect* EffectClass, struct AActor* AffectedActor); // Function Solarland.ActorEffectSubsystem.Start // (Final|Native|Public|BlueprintCallable) // @ game+0x1f99900
	bool Finish(struct UActorEffect* EffectInstance); // Function Solarland.ActorEffectSubsystem.Finish // (Final|Native|Public|BlueprintCallable) // @ game+0x1f990e0
};

// Class Solarland.ActorMarkBase
// Size: 0x3a0 (Inherited: 0x348)
struct UActorMarkBase : USolarUserWidget {
	char pad_348[0x18]; // 0x348(0x18)
	struct AActor* CurrentFollowActor; // 0x360(0x08)
	struct APlayerController* CurrentPlayerController; // 0x368(0x08)
	struct FVector2D MarkIconAlignment; // 0x370(0x08)
	struct FVector2D MarkPanelSize; // 0x378(0x08)
	char pad_380[0x18]; // 0x380(0x18)
	float MaxVisibleDis; // 0x398(0x04)
	char pad_39C[0x4]; // 0x39c(0x04)

	void SetUpdateState(bool InShouldUpdateLocation); // Function Solarland.ActorMarkBase.SetUpdateState // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa0510
	void InitActorMarkBaseByFixedPos(struct FVector Pos, struct APlayerController* Controller); // Function Solarland.ActorMarkBase.InitActorMarkBaseByFixedPos // (Final|Native|Public|HasDefaults) // @ game+0x1f9e4e0
	void InitActorMarkBase(struct AActor* InActor, struct APlayerController* Controller); // Function Solarland.ActorMarkBase.InitActorMarkBase // (Final|Native|Public) // @ game+0x1f9e410
	struct FVector GetFollowActorLocation(); // Function Solarland.ActorMarkBase.GetFollowActorLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f9e330
	float GetDistance(bool bIncludeZ); // Function Solarland.ActorMarkBase.GetDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f9e290
	struct AActor* GetCurrentFollowActor(); // Function Solarland.ActorMarkBase.GetCurrentFollowActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f9e260
};

// Class Solarland.ActorMaterialSubsystemSettings
// Size: 0x90 (Inherited: 0x38)
struct UActorMaterialSubsystemSettings : UDeveloperSettings {
	struct FGameplayTag DefaultMaterialChangePriorityTag; // 0x38(0x08)
	struct TArray<struct FMaterialChangePriorityGroup> OrderedMaterialChangePriorityGroups; // 0x40(0x10)
	struct TArray<struct FSoftObjectPath> GlobalNoChangeMaterials; // 0x50(0x10)
	struct TArray<struct FForceChangeMaterialInfos> GlobalForceChangeMaterials; // 0x60(0x10)
	char pad_70[0x20]; // 0x70(0x20)

	int32_t GetMaterialChangePriority(struct FGameplayTag& Tag); // Function Solarland.ActorMaterialSubsystemSettings.GetMaterialChangePriority // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f9e370
};

// Class Solarland.ActorMaterialSubsystem
// Size: 0x90 (Inherited: 0x30)
struct UActorMaterialSubsystem : UWorldSubsystem {
	struct TMap<struct AActor*, struct FActorMaterialInfo> ActorMaterialsMap; // 0x30(0x50)
	char pad_80[0x10]; // 0x80(0x10)

	bool SetStaticMesh(struct AActor* Actor, struct UStaticMeshComponent* MeshComp, struct UStaticMesh* NewMesh); // Function Solarland.ActorMaterialSubsystem.SetStaticMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa0400
	bool SetSkeletalMesh(struct AActor* Actor, struct USkeletalMeshComponent* MeshComp, struct USkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation); // Function Solarland.ActorMaterialSubsystem.SetSkeletalMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa0240
	bool SetOriginalMultiplePassMaterial(struct AActor* Actor, struct UMeshComponent* MeshComp, struct UMaterialInterface* Material, bool bNeedMultiplePass); // Function Solarland.ActorMaterialSubsystem.SetOriginalMultiplePassMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa00e0
	bool SetOriginalMaterials(struct AActor* Actor, struct UMeshComponent* MeshComp, struct TArray<struct UMaterialInterface*>& Materials); // Function Solarland.ActorMaterialSubsystem.SetOriginalMaterials // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1f9ffb0
	bool SetOriginalMaterial(struct AActor* Actor, struct UMeshComponent* MeshComp, int32_t MaterialIndex, struct UMaterialInterface* Material); // Function Solarland.ActorMaterialSubsystem.SetOriginalMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x1f9fe50
	void RemoveNoChangeMaterials(struct TArray<struct FSoftObjectPath>& Materials); // Function Solarland.ActorMaterialSubsystem.RemoveNoChangeMaterials // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1f9fd80
	bool RemoveMaterialChange(struct AActor* Actor, struct FMaterialChangeHandle Handle); // Function Solarland.ActorMaterialSubsystem.RemoveMaterialChange // (Final|Native|Public|BlueprintCallable) // @ game+0x1f9fcb0
	bool RemoveAllMaterialChanges(struct AActor* Actor); // Function Solarland.ActorMaterialSubsystem.RemoveAllMaterialChanges // (Final|Native|Public|BlueprintCallable) // @ game+0x1f9fc10
	void RebuildMaterialChangesOnMeshAddedOrRemoved(struct AActor* Actor); // Function Solarland.ActorMaterialSubsystem.RebuildMaterialChangesOnMeshAddedOrRemoved // (Final|Native|Public|BlueprintCallable) // @ game+0x1f9fb80
	void RebuildMaterialChangesOnAllOriginalMaterialsChanged(struct AActor* Actor); // Function Solarland.ActorMaterialSubsystem.RebuildMaterialChangesOnAllOriginalMaterialsChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1f9faf0
	struct UMaterialInstanceDynamic* OverrideDynamicMaterialInstanceParameterByIndex(struct UMaterialInstanceDynamic* TargetMaterial, struct UPrimitiveComponent* SourcePrimitiveComponent, int32_t SourceElementIndex, struct FName ParameterName, enum class EMaterialParameterType2 ParameterType, bool bOverridenOnly); // Function Solarland.ActorMaterialSubsystem.OverrideDynamicMaterialInstanceParameterByIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f9f920
	struct UMaterialInstanceDynamic* OverrideDynamicMaterialInstanceParameter(struct UMaterialInstanceDynamic* TargetMaterial, struct UMaterialInterface* SourceMaterial, struct FName ParameterName, enum class EMaterialParameterType2 ParameterType, bool bOverridenOnly); // Function Solarland.ActorMaterialSubsystem.OverrideDynamicMaterialInstanceParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f9f790
	void OnActorEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.ActorMaterialSubsystem.OnActorEndPlay // (Final|Native|Private) // @ game+0x1f9f6c0
	bool K2_SetVectorMaterialParameter(struct AActor* Actor, struct FMaterialChangeHandle Handle, struct FName ParameterName, struct FVector ParameterValue, struct FMaterialFilter Filter); // Function Solarland.ActorMaterialSubsystem.K2_SetVectorMaterialParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1f9f3c0
	bool K2_SetScalarMaterialParameter(struct AActor* Actor, struct FMaterialChangeHandle Handle, struct FName ParameterName, float ParameterValue, struct FMaterialFilter Filter); // Function Solarland.ActorMaterialSubsystem.K2_SetScalarMaterialParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x1f9f0d0
	void K2_RebuildMaterialChangesOnOriginalMaterialChanged(struct AActor* Actor, struct TArray<struct UMeshComponent*> ChangedMeshes); // Function Solarland.ActorMaterialSubsystem.K2_RebuildMaterialChangesOnOriginalMaterialChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1f9efa0
	struct UMaterialInstanceDynamic* K2_OverrideDynamicMaterialInstanceAllParametersByIndex(struct UMaterialInstanceDynamic* TargetMaterial, struct UPrimitiveComponent* PrimitiveComponent, int32_t SourceElementIndex, int32_t ParameterTypeFlags, struct FMaterialParameterFilter& ParameterFilter, bool bOverridenOnly); // Function Solarland.ActorMaterialSubsystem.K2_OverrideDynamicMaterialInstanceAllParametersByIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1f9eda0
	struct UMaterialInstanceDynamic* K2_OverrideDynamicMaterialInstanceAllParameters(struct UMaterialInstanceDynamic* TargetMaterial, struct UMaterialInterface* SourceMaterial, int32_t ParameterTypeFlags, struct FMaterialParameterFilter& ParameterFilter, bool bOverridenOnly); // Function Solarland.ActorMaterialSubsystem.K2_OverrideDynamicMaterialInstanceAllParameters // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1f9ebe0
	struct UMaterialInstanceDynamic* K2_CreateDynamicMaterialInstanceOverrideAllParameters(struct UPrimitiveComponent* TargetPrimitiveComponent, struct UMaterialInterface* SourceMaterial, int32_t ParameterTypeFlags, struct FMaterialParameterFilter& ParameterFilter, int32_t TargetElementIndex, bool bOverridenOnly, struct FName OptionalMaterialName); // Function Solarland.ActorMaterialSubsystem.K2_CreateDynamicMaterialInstanceOverrideAllParameters // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1f9e980
	struct FMaterialChangeHandle K2_AddMaterialChangeByPath(struct AActor* Actor, struct FSoftObjectPath& MaterialPath, struct FAddMaterialChangeParams Params); // Function Solarland.ActorMaterialSubsystem.K2_AddMaterialChangeByPath // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1f9e790
	struct FMaterialChangeHandle K2_AddMaterialChange(struct AActor* Actor, struct UMaterialInterface* SourceMaterial, struct FAddMaterialChangeParams Params); // Function Solarland.ActorMaterialSubsystem.K2_AddMaterialChange // (Final|Native|Public|BlueprintCallable) // @ game+0x1f9e5c0
	bool EmptyOriginalOverrideMaterials(struct AActor* Actor, struct UMeshComponent* MeshComp); // Function Solarland.ActorMaterialSubsystem.EmptyOriginalOverrideMaterials // (Final|Native|Public|BlueprintCallable) // @ game+0x1f9e190
	bool ContainsMaterialChangeByPriority(struct AActor* Actor, int32_t Priority); // Function Solarland.ActorMaterialSubsystem.ContainsMaterialChangeByPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f9e0c0
	bool ContainsMaterialChange(struct AActor* Actor, struct FMaterialChangeHandle Handle); // Function Solarland.ActorMaterialSubsystem.ContainsMaterialChange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f9dff0
	bool ContainsAnyMaterialChange(struct AActor* Actor); // Function Solarland.ActorMaterialSubsystem.ContainsAnyMaterialChange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f9df50
	void AddNoChangeMaterials(struct TArray<struct FSoftObjectPath>& Materials); // Function Solarland.ActorMaterialSubsystem.AddNoChangeMaterials // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1f9de80
};

// Class Solarland.ActorMaterialSubsystemAgentInterface
// Size: 0x28 (Inherited: 0x28)
struct UActorMaterialSubsystemAgentInterface : UInterface {
};

// Class Solarland.ActorMaterialSubsystemAgentComponentInterface
// Size: 0x28 (Inherited: 0x28)
struct UActorMaterialSubsystemAgentComponentInterface : UInterface {

	struct UMaterialInterface* AMS_GetAlternativeSourceMaterial(struct UMaterialInterface* OriginalSourceMaterial); // Function Solarland.ActorMaterialSubsystemAgentComponentInterface.AMS_GetAlternativeSourceMaterial // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1f9dde0
};

// Class Solarland.ActorParticleEffectSpawner
// Size: 0xb0 (Inherited: 0x28)
struct UActorParticleEffectSpawner : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct FActorParticleEffectSpawnInfo Info; // 0x38(0x70)
	char pad_A8[0x8]; // 0xa8(0x08)
};

// Class Solarland.ActorParticleEffectSubsystem
// Size: 0x50 (Inherited: 0x30)
struct UActorParticleEffectSubsystem : UWorldSubsystem {
	char pad_30[0x10]; // 0x30(0x10)
	struct TArray<struct UActorParticleEffectSpawner*> Spawners; // 0x40(0x10)

	struct FActorParticleEffectSpawnHandle K2_RequestParticleEffectSpawn(struct AActor* Actor, struct FActorParticleEffectSpawnInfo SpawnInfo); // Function Solarland.ActorParticleEffectSubsystem.K2_RequestParticleEffectSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa5850
	void CancelParticleEffectSpawn(struct FActorParticleEffectSpawnHandle Handle); // Function Solarland.ActorParticleEffectSubsystem.CancelParticleEffectSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa4000
};

// Class Solarland.AdvProgressBase
// Size: 0x310 (Inherited: 0x260)
struct UAdvProgressBase : UUserWidget {
	struct UImage* Progress; // 0x260(0x08)
	struct UMaterialInstance* ProgressShader; // 0x268(0x08)
	float Speed; // 0x270(0x04)
	float CurrentHP; // 0x274(0x04)
	float MaxHP; // 0x278(0x04)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct TMap<int32_t, float> ActionMap; // 0x280(0x50)
	float AnimCurrentHP; // 0x2d0(0x04)
	float ProgressAdd; // 0x2d4(0x04)
	float ProgressMinus; // 0x2d8(0x04)
	char pad_2DC[0x34]; // 0x2dc(0x34)

	void UpdateMaxHPLength(float NewHPMax, float NewCurrentHP); // Function Solarland.AdvProgressBase.UpdateMaxHPLength // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa6120
	void SetProgress(float _PreMinus, float _CurrentHP, float _PreAdd); // Function Solarland.AdvProgressBase.SetProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa6000
	int32_t PreAction(float Number); // Function Solarland.AdvProgressBase.PreAction // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa5f70
	void Init(float _DefaultHP, float _MaxHP); // Function Solarland.AdvProgressBase.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa43a0
	float GetMaxHP(); // Function Solarland.AdvProgressBase.GetMaxHP // (Final|Native|Public|Const) // @ game+0x1fa42d0
	float GetCurrentHPPercent(); // Function Solarland.AdvProgressBase.GetCurrentHPPercent // (Final|Native|Public|Const) // @ game+0x1fa42b0
	void DoActionSmoothly(float Number); // Function Solarland.AdvProgressBase.DoActionSmoothly // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa4200
	void DoActionDirectly(float Number); // Function Solarland.AdvProgressBase.DoActionDirectly // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa4180
	void DoAction(int32_t ID); // Function Solarland.AdvProgressBase.DoAction // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa40f0
	struct FLinearColor Debug(); // Function Solarland.AdvProgressBase.Debug // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1fa40b0
	void CleanPreActions(); // Function Solarland.AdvProgressBase.CleanPreActions // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa4090
	void CancelAction(int32_t ID); // Function Solarland.AdvProgressBase.CancelAction // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa3ed0
};

// Class Solarland.AerialReconnaissanceMarkWidget
// Size: 0x348 (Inherited: 0x348)
struct UAerialReconnaissanceMarkWidget : USolarUserWidget {

	void K2_MarkStateChanged(bool bInStart); // Function Solarland.AerialReconnaissanceMarkWidget.K2_MarkStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.AirDropAudioActor
// Size: 0x2c0 (Inherited: 0x228)
struct AAirDropAudioActor : AActor {
	struct FVector DropBeginLocation; // 0x228(0x0c)
	struct FVector DropEndLocation; // 0x234(0x0c)
	float CurrZ; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)
	struct AActor* SpawnedWarningEffect; // 0x248(0x08)
	struct AActor* WarningEffect; // 0x250(0x08)
	int32_t ThisID; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)
	bool bSummonedByCharacter; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)
	struct FString SNameAirDropSpawnWarning; // 0x268(0x10)
	struct FString SNameAirDropStopSpawnWarning; // 0x278(0x10)
	struct FString SNameAirDropApprochWarning; // 0x288(0x10)
	struct FString SNameAirDropStopApprochWarning; // 0x298(0x10)
	struct UAkComponent* AkAudioComponent; // 0x2a8(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x2b0(0x08)
	char pad_2B8[0x1]; // 0x2b8(0x01)
	bool bHasLanded; // 0x2b9(0x01)
	char pad_2BA[0x6]; // 0x2ba(0x06)

	void OnAirDropTreasureBoxStateChanged(int32_t ItemID, enum class EAirDropMovementState MovementState, enum class EAirDropOpenState OpenState); // Function Solarland.AirDropAudioActor.OnAirDropTreasureBoxStateChanged // (Final|Native|Public) // @ game+0x1fa5b50
	void OnAirDropApproch(int32_t InThisID); // Function Solarland.AirDropAudioActor.OnAirDropApproch // (Final|Native|Public) // @ game+0x1fa5ac0
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.AirDropAudioActor.InitSolarAkGameObject // (Final|Native|Public) // @ game+0x1fa5260
};

// Class Solarland.SolarDormantActor
// Size: 0x228 (Inherited: 0x228)
struct ASolarDormantActor : AActor {
};

// Class Solarland.SolarItemActor
// Size: 0x3d8 (Inherited: 0x228)
struct ASolarItemActor : ASolarDormantActor {
	char pad_228[0x40]; // 0x228(0x40)
	struct FSolarItemData ItemData; // 0x268(0xb8)
	float SpawnOffset; // 0x320(0x04)
	char pad_324[0x4]; // 0x324(0x04)
	struct TArray<struct FSoftObjectPath> DiscardMatPath; // 0x328(0x10)
	struct FSoftObjectPath OutlineMatPath; // 0x338(0x18)
	struct FSoftObjectPath FXPath; // 0x350(0x18)
	struct FString FXBPPath; // 0x368(0x10)
	struct USphereComponent* SphereComponent; // 0x378(0x08)
	char pad_380[0x4]; // 0x380(0x04)
	struct TWeakObjectPtr<struct AActor> FXActor; // 0x384(0x08)
	enum class EItemState ItemCurrentState; // 0x38c(0x01)
	char pad_38D[0xb]; // 0x38d(0x0b)
	struct TArray<char> MarkedTeamIdList; // 0x398(0x10)
	char pad_3A8[0x8]; // 0x3a8(0x08)
	struct UStaticMeshComponent* StaticMeshComp; // 0x3b0(0x08)
	struct TArray<struct UMaterialInstanceDynamic*> NormalMats; // 0x3b8(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> OutlineMats; // 0x3c8(0x10)

	void UnMarkThisItem(char TeamID); // Function Solarland.SolarItemActor.UnMarkThisItem // (Native|Public) // @ game+0x21117f0
	void SwitchDiscardMaterials(); // Function Solarland.SolarItemActor.SwitchDiscardMaterials // (Final|Native|Protected) // @ game+0x2128620
	void SetOutlineMeshVisible(bool Visible); // Function Solarland.SolarItemActor.SetOutlineMeshVisible // (Native|Public) // @ game+0x2128470
	void SetItemData(struct FSolarItemData& _ItemData); // Function Solarland.SolarItemActor.SetItemData // (Native|Public|HasOutParms) // @ game+0x2110940
	void OnServerPawned(); // Function Solarland.SolarItemActor.OnServerPawned // (Native|Public) // @ game+0x21103f0
	void OnRep_ItemDataChange(); // Function Solarland.SolarItemActor.OnRep_ItemDataChange // (Native|Public) // @ game+0x80df50
	void OnRep_ItemCurrentStateChanged(); // Function Solarland.SolarItemActor.OnRep_ItemCurrentStateChanged // (Native|Protected) // @ game+0x1555e80
	void NotifyThisItemWasPickedUp(); // Function Solarland.SolarItemActor.NotifyThisItemWasPickedUp // (Final|Native|Public) // @ game+0x2127c50
	void MarkThisItem(char TeamID); // Function Solarland.SolarItemActor.MarkThisItem // (Native|Public) // @ game+0x210f960
	struct UStaticMeshComponent* GetStaticMeshComp(); // Function Solarland.SolarItemActor.GetStaticMeshComp // (Final|Native|Public) // @ game+0x2127ba0
	int32_t GetQuality(); // Function Solarland.SolarItemActor.GetQuality // (Native|Public) // @ game+0x210f320
};

// Class Solarland.SolarTreasureBoxActor
// Size: 0x5c8 (Inherited: 0x3d8)
struct ASolarTreasureBoxActor : ASolarItemActor {
	enum class ETreasureBoxState CurrentState; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
	struct FSolarItemDataArray ItemDataList; // 0x3e0(0x118)
	struct TArray<struct FSolarItemData> SortedGameItemDatas; // 0x4f8(0x10)
	char pad_508[0x20]; // 0x508(0x20)
	int32_t DataLeng; // 0x528(0x04)
	enum class ECostType CostType; // 0x52c(0x01)
	char pad_52D[0x3]; // 0x52d(0x03)
	int32_t CostNum; // 0x530(0x04)
	char pad_534[0x54]; // 0x534(0x54)
	int32_t HighestItemQuality; // 0x588(0x04)
	float BurstRadius; // 0x58c(0x04)
	float BurstRadiusRandScale; // 0x590(0x04)
	float BurstLocalHeight; // 0x594(0x04)
	float BurstEulerAngle; // 0x598(0x04)
	bool bBurstSplitItem; // 0x59c(0x01)
	enum class EBurstMethod BurstMethod; // 0x59d(0x01)
	char pad_59E[0x2]; // 0x59e(0x02)
	float RadSafeSlopeToBurstOn; // 0x5a0(0x04)
	float GoldenSpiralMinRadiusSquared; // 0x5a4(0x04)
	struct TArray<struct ASolarBurstItemActor*> BurstItemActors; // 0x5a8(0x10)
	struct UAkComponent* AkAudioComponent; // 0x5b8(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x5c0(0x08)

	void UpdateTreasureBoxInternal(); // Function Solarland.SolarTreasureBoxActor.UpdateTreasureBoxInternal // (Native|Public) // @ game+0x7dd5a0
	void UpdateOpenBoxUIByState(enum class ETreasureBoxState NewState); // Function Solarland.SolarTreasureBoxActor.UpdateOpenBoxUIByState // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UpdateItemDataListInternal(); // Function Solarland.SolarTreasureBoxActor.UpdateItemDataListInternal // (Final|Native|Public) // @ game+0x22494a0
	void ServerSetState(enum class ETreasureBoxState NewState, struct ASolarCharacter* RequestCharacter); // Function Solarland.SolarTreasureBoxActor.ServerSetState // (Final|Native|Public) // @ game+0x2248630
	void ServerNotifyPlayerOpen(struct ASolarCharacter* RequestCharacter, enum class EItemType InItemType); // Function Solarland.SolarTreasureBoxActor.ServerNotifyPlayerOpen // (Final|Native|Public) // @ game+0x2248490
	void PlayOpenAnimation(); // Function Solarland.SolarTreasureBoxActor.PlayOpenAnimation // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnRep_ItemDataList(); // Function Solarland.SolarTreasureBoxActor.OnRep_ItemDataList // (Final|Native|Public) // @ game+0x22482f0
	void OnRep_CurrentState(); // Function Solarland.SolarTreasureBoxActor.OnRep_CurrentState // (Final|Native|Public) // @ game+0x2248230
	void OnClientItemHighestQualityChanged(int32_t NewQuality, int32_t PrevQuality); // Function Solarland.SolarTreasureBoxActor.OnClientItemHighestQualityChanged // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x2248090
	bool IsEmpty(); // Function Solarland.SolarTreasureBoxActor.IsEmpty // (Final|Native|Public) // @ game+0x2247c80
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarTreasureBoxActor.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x20b5ca0
	int32_t GetNumCost(); // Function Solarland.SolarTreasureBoxActor.GetNumCost // (Final|Native|Public|Const) // @ game+0x2247b80
	struct TArray<struct FSolarItemData> GetItemList(); // Function Solarland.SolarTreasureBoxActor.GetItemList // (Final|Native|Public) // @ game+0x2247a20
	enum class ECostType GetCostType(); // Function Solarland.SolarTreasureBoxActor.GetCostType // (Final|Native|Public|Const) // @ game+0x22479a0
	void ConstructTreasureBoxTest(struct TArray<int32_t>& itemIdList); // Function Solarland.SolarTreasureBoxActor.ConstructTreasureBoxTest // (Final|Native|Public|HasOutParms) // @ game+0xb28460
	void ConstructTreasureBox(int32_t dropId); // Function Solarland.SolarTreasureBoxActor.ConstructTreasureBox // (Final|Native|Public) // @ game+0x15936f0
	bool BOpened(); // Function Solarland.SolarTreasureBoxActor.BOpened // (Native|Public) // @ game+0x2247790
};

// Class Solarland.AirDropTreasureBox
// Size: 0xcb0 (Inherited: 0x5c8)
struct AAirDropTreasureBox : ASolarTreasureBoxActor {
	bool bPendingDestroy; // 0x5c8(0x01)
	bool bIsOpening; // 0x5c9(0x01)
	char pad_5CA[0x2]; // 0x5ca(0x02)
	float openProgress; // 0x5cc(0x04)
	struct ASolarCharacter* OpeningCharacter; // 0x5d0(0x08)
	float OpenTime; // 0x5d8(0x04)
	float ProtectionTime; // 0x5dc(0x04)
	char pad_5E0[0xd]; // 0x5e0(0x0d)
	bool bBoxLanded; // 0x5ed(0x01)
	char pad_5EE[0x5a]; // 0x5ee(0x5a)
	struct FString SummonPlayerID; // 0x648(0x10)
	float StartDropHeight; // 0x658(0x04)
	struct FRotator TargetRotation; // 0x65c(0x0c)
	struct FVector TargetLocation; // 0x668(0x0c)
	char pad_674[0x4]; // 0x674(0x04)
	struct TSoftObjectPtr<UParticleSystem> OpenAirdropEffect; // 0x678(0x28)
	struct TSoftObjectPtr<UParticleSystem> LandHitEffect; // 0x6a0(0x28)
	struct TSoftObjectPtr<UParticleSystem> LandSmokeEffect; // 0x6c8(0x28)
	struct TSoftObjectPtr<UParticleSystem> PendingDestroyEffect; // 0x6f0(0x28)
	struct TSoftObjectPtr<UParticleSystem> DestroyEffect; // 0x718(0x28)
	struct TSoftObjectPtr<UParticleSystem> FallingEffect; // 0x740(0x28)
	struct TSoftObjectPtr<UParticleSystem> FallingImpulseEffect; // 0x768(0x28)
	struct TSoftObjectPtr<UParticleSystem> LightBeamEffect; // 0x790(0x28)
	char pad_7B8[0x8]; // 0x7b8(0x08)
	struct FTransform FallingEffectOffset; // 0x7c0(0x30)
	struct FTransform FallingImpulseEffectOffset; // 0x7f0(0x30)
	struct FTransform LightBeamEffectOffset; // 0x820(0x30)
	struct FTransform PendingDestroyEffectOffset; // 0x850(0x30)
	struct UAnimationAsset* LandAnimation; // 0x880(0x08)
	struct UAnimationAsset* OpenAnimation; // 0x888(0x08)
	float dropGravity; // 0x890(0x04)
	float maxDropSpeed; // 0x894(0x04)
	float originHeight; // 0x898(0x04)
	float DecelerateHeight; // 0x89c(0x04)
	float ShowLandSmokeHeight; // 0x8a0(0x04)
	float DecelerateTime; // 0x8a4(0x04)
	struct UCurveFloat* DecelerateCurve; // 0x8a8(0x08)
	float AirDropSpawnDelay; // 0x8b0(0x04)
	float AudioActorHeightOffset; // 0x8b4(0x04)
	float AudioActorFallSpeed; // 0x8b8(0x04)
	char pad_8BC[0x4]; // 0x8bc(0x04)
	struct FSoftClassPath AirDropGuideMeshBPClassPath; // 0x8c0(0x18)
	float DropApprochDuration; // 0x8d8(0x04)
	float FallingEffectDelay; // 0x8dc(0x04)
	bool bSummonBySkill; // 0x8e0(0x01)
	char pad_8E1[0x3]; // 0x8e1(0x03)
	float YawOffset; // 0x8e4(0x04)
	enum class EAirDropMovementState MovementState; // 0x8e8(0x01)
	enum class EAirDropOpenState OpenState; // 0x8e9(0x01)
	char pad_8EA[0x6]; // 0x8ea(0x06)
	struct USkeletalMeshComponent* SkeletalMeshComp; // 0x8f0(0x08)
	char pad_8F8[0x50]; // 0x8f8(0x50)
	struct UParticleSystemComponent* FallingPSC; // 0x948(0x08)
	char pad_950[0x18]; // 0x950(0x18)
	struct FSolarDamageInfo DamageInfo; // 0x968(0x40)
	struct FString SNameAirDropOpen; // 0x9a8(0x10)
	struct FString SNameLandHit; // 0x9b8(0x10)
	struct FString SNameAirDropSpawn; // 0x9c8(0x10)
	struct FString SNameAirDropSpawnWarning; // 0x9d8(0x10)
	struct FString SNameAirDropStopSpawnWarning; // 0x9e8(0x10)
	struct FString SNameAirDropApprochWarning; // 0x9f8(0x10)
	struct FString SNameAirDropStopApprochWarning; // 0xa08(0x10)
	struct FString SNameStartDrop; // 0xa18(0x10)
	struct FString SNameStopDrop; // 0xa28(0x10)
	struct FString SNameDecelerateAudio; // 0xa38(0x10)
	struct FString SNamePlayLandedLoopAudio; // 0xa48(0x10)
	struct FString SNameStopLandedLoopAudio; // 0xa58(0x10)
	struct FString SNamePlayOnGroundBroadcastLoopAudio; // 0xa68(0x10)
	struct FString SNameStopOnGroundBroadcastLoopAudio; // 0xa78(0x10)
	struct FString SNamePlayStartHackAudio; // 0xa88(0x10)
	struct FString SNameStopStartHackAudio; // 0xa98(0x10)
	struct FString SNamePlayHackingLoopAudio; // 0xaa8(0x10)
	struct FString SNameStopHackingLoopAudio; // 0xab8(0x10)
	struct FString SNameStopHackingLoopAudioAux; // 0xac8(0x10)
	struct FString PendingDestroyLoopStart; // 0xad8(0x10)
	struct FString PendingDestroyLoopEnd; // 0xae8(0x10)
	struct FString SNameDestroySound; // 0xaf8(0x10)
	char pad_B08[0x68]; // 0xb08(0x68)
	struct FName ColorKeyTag1; // 0xb70(0x08)
	struct FName ColorKeyTag2; // 0xb78(0x08)
	struct FName ColorKeyGlow; // 0xb80(0x08)
	struct FName ColorKeyMesh; // 0xb88(0x08)
	struct FName AlphaKey; // 0xb90(0x08)
	struct FName LightBeamAlphaKey; // 0xb98(0x08)
	struct FName ColorKeyTagFlow1; // 0xba0(0x08)
	struct FName ColorKeyTagFlow2; // 0xba8(0x08)
	struct FName ColorKeyLightEffect; // 0xbb0(0x08)
	float FadeTweenDuration; // 0xbb8(0x04)
	float RedTweenDuration; // 0xbbc(0x04)
	struct FLinearColor BlueColorTag1; // 0xbc0(0x10)
	struct FLinearColor RedColorTag1; // 0xbd0(0x10)
	struct FLinearColor BlueColorTag2; // 0xbe0(0x10)
	struct FLinearColor RedColorTag2; // 0xbf0(0x10)
	struct FLinearColor BlueColorGlow; // 0xc00(0x10)
	struct FLinearColor RedColorGlow; // 0xc10(0x10)
	struct FLinearColor BlueColorMesh; // 0xc20(0x10)
	struct FLinearColor RedColorMesh; // 0xc30(0x10)
	struct FLinearColor RedColorTagFlow1; // 0xc40(0x10)
	struct FLinearColor RedColorTagFlow2; // 0xc50(0x10)
	struct FLinearColor BlueColorTagFlow1; // 0xc60(0x10)
	struct FLinearColor BlueColorTagFlow2; // 0xc70(0x10)
	struct FLinearColor RedColorLightEffect; // 0xc80(0x10)
	struct FLinearColor BlueColorLightEffect; // 0xc90(0x10)
	char pad_CA0[0x10]; // 0xca0(0x10)

	void PlayLandingAnimation(); // Function Solarland.AirDropTreasureBox.PlayLandingAnimation // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	bool OpenAirDropTreasureBox(struct ASolarCharacter* _OpeningCharacter); // Function Solarland.AirDropTreasureBox.OpenAirDropTreasureBox // (Final|Native|Public) // @ game+0x1fa5ed0
	void OnStateChanged(); // Function Solarland.AirDropTreasureBox.OnStateChanged // (Native|Public) // @ game+0x1554aa0
	void OnRep_TargetLocation(); // Function Solarland.AirDropTreasureBox.OnRep_TargetLocation // (Final|Native|Public) // @ game+0x8e9ae0
	void OnRep_SummonPlayerID(); // Function Solarland.AirDropTreasureBox.OnRep_SummonPlayerID // (Final|Native|Public) // @ game+0x1fa5e90
	void OnRep_StartDropHeight(); // Function Solarland.AirDropTreasureBox.OnRep_StartDropHeight // (Final|Native|Public) // @ game+0x1fa5e70
	void OnRep_PendingDestroy(); // Function Solarland.AirDropTreasureBox.OnRep_PendingDestroy // (Final|Native|Public) // @ game+0x1fa5e50
	void OnRep_OpenState(enum class EAirDropOpenState OpenState); // Function Solarland.AirDropTreasureBox.OnRep_OpenState // (Final|Native|Public) // @ game+0x1fa5dd0
	void OnRep_OpenProgressChange(); // Function Solarland.AirDropTreasureBox.OnRep_OpenProgressChange // (Final|Native|Public) // @ game+0x1fa5db0
	void OnRep_OpenCharacterChange(); // Function Solarland.AirDropTreasureBox.OnRep_OpenCharacterChange // (Final|Native|Public) // @ game+0x1fa5d90
	void OnRep_MovementState(enum class EAirDropMovementState MovementState); // Function Solarland.AirDropTreasureBox.OnRep_MovementState // (Final|Native|Public) // @ game+0x1fa5d10
	void OnRep_IsOpening(); // Function Solarland.AirDropTreasureBox.OnRep_IsOpening // (Final|Native|Public) // @ game+0x1fa5cf0
	void OnRep_bBoxLanded(); // Function Solarland.AirDropTreasureBox.OnRep_bBoxLanded // (Final|Native|Public) // @ game+0x1fa5eb0
	void OnOpenStateChanged(enum class EAirDropOpenState InPrevOpenState, enum class EAirDropOpenState InCurrOpenState); // Function Solarland.AirDropTreasureBox.OnOpenStateChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnMovementStateChanged(enum class EAirDropMovementState InPrevMovementState, enum class EAirDropMovementState InCurrMovementState); // Function Solarland.AirDropTreasureBox.OnMovementStateChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnFadeOutFallingEffect(); // Function Solarland.AirDropTreasureBox.OnFadeOutFallingEffect // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	bool IsSummonedByCharacter(); // Function Solarland.AirDropTreasureBox.IsSummonedByCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa5820
	bool IsOpenningCharacterOffline(); // Function Solarland.AirDropTreasureBox.IsOpenningCharacterOffline // (Final|Native|Protected) // @ game+0x1fa57f0
	bool IsCharacterInRange(struct ASolarCharacter* InCheckCharacter); // Function Solarland.AirDropTreasureBox.IsCharacterInRange // (Final|Native|Protected) // @ game+0x1fa5750
	bool CancelOpenAirDropTreasureBox(struct ASolarCharacter* _OpeningCharacter); // Function Solarland.AirDropTreasureBox.CancelOpenAirDropTreasureBox // (Final|Native|Public) // @ game+0x1fa3f60
};

// Class Solarland.AirlineCruiseCompInterface
// Size: 0x28 (Inherited: 0x28)
struct UAirlineCruiseCompInterface : UInterface {

	struct UAirlineCruiseComponent* GetAirlineCruiseComponent(); // Function Solarland.AirlineCruiseCompInterface.GetAirlineCruiseComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1fa4280
};

// Class Solarland.GameModeCompBase
// Size: 0xd0 (Inherited: 0xb0)
struct UGameModeCompBase : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	bool bPreStartPlay; // 0xb8(0x01)
	bool bTakeChargeStartPlay; // 0xb9(0x01)
	bool bPostStartPlay; // 0xba(0x01)
	char pad_BB[0x2]; // 0xbb(0x02)
	bool bPreHandleMatchHasStarted; // 0xbd(0x01)
	bool bTakeChargeHandleMatchHasStarted; // 0xbe(0x01)
	bool bPostHandleMatchHasStarted; // 0xbf(0x01)
	char pad_C0[0x2]; // 0xc0(0x02)
	bool bPreRestartPlayer; // 0xc2(0x01)
	bool bTakeChargeRestartPlayer; // 0xc3(0x01)
	bool bPostRestartPlayer; // 0xc4(0x01)
	char pad_C5[0x2]; // 0xc5(0x02)
	bool bPreEndPlay; // 0xc7(0x01)
	bool bTakeChargeEndPlay; // 0xc8(0x01)
	bool bPostEndPlay; // 0xc9(0x01)
	char pad_CA[0x6]; // 0xca(0x06)

	void PreStartPlayBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PreStartPlayBind // (Final|Native|Protected|HasOutParms) // @ game+0x1fef760
	void PreRestartPlayerBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.PreRestartPlayerBind // (Final|Native|Protected|HasOutParms) // @ game+0x1fef660
	void PreHandleMatchHasStartedBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PreHandleMatchHasStartedBind // (Final|Native|Protected|HasOutParms) // @ game+0x1fef5b0
	void PreGameModeStartPlay(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PreGameModeStartPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1fef500
	void PreGameModeRestartPlayer(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.PreGameModeRestartPlayer // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1fef400
	void PreGameModeHandleMatchHasStarted(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PreGameModeHandleMatchHasStarted // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1fef350
	void PreGameModeEndPlay(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.PreGameModeEndPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1fef250
	void PreEndPlayBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.PreEndPlayBind // (Final|Native|Protected|HasOutParms) // @ game+0x1fef150
	void PostStartPlayBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PostStartPlayBind // (Final|Native|Protected|HasOutParms) // @ game+0x1feee70
	void PostRestartPlayerBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.PostRestartPlayerBind // (Final|Native|Protected|HasOutParms) // @ game+0x1feed70
	void PostHandleMatchHasStartedBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PostHandleMatchHasStartedBind // (Final|Native|Protected|HasOutParms) // @ game+0x1feecc0
	void PostGameModeStartPlay(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PostGameModeStartPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1feec10
	void PostGameModeRestartPlayer(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.PostGameModeRestartPlayer // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1feeb10
	void PostGameModeHandleMatchHasStarted(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PostGameModeHandleMatchHasStarted // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1feea60
	void PostGameModeEndPlay(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.PostGameModeEndPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1fee960
	void PostEndPlayBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.PostEndPlayBind // (Final|Native|Protected|HasOutParms) // @ game+0x1fee860
	void OnGameModeStartPlay(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.OnGameModeStartPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1fee4f0
	void OnGameModeRestartPlayer(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.OnGameModeRestartPlayer // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1fee3a0
	void OnGameModeHandleMatchHasStarted(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.OnGameModeHandleMatchHasStarted // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1fee290
	void OnGameModeEndPlay(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.OnGameModeEndPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1fee140
	struct ASolarGameMode* GetGameModeOwner(); // Function Solarland.GameModeCompBase.GetGameModeOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fed1a0
};

// Class Solarland.AirlineCruiseComponent
// Size: 0x148 (Inherited: 0xd0)
struct UAirlineCruiseComponent : UGameModeCompBase {
	int32_t UsedAirlineID; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)
	struct ASolarCapsuleRoot* CapsuleRootClass; // 0xd8(0x08)
	struct ASolarCapsuleRoot* CapsuleRoot; // 0xe0(0x08)
	struct TMap<int32_t, struct FAirlineData> AirlineDataList; // 0xe8(0x50)
	struct ASolarCharacter* CruiseTemplate; // 0x138(0x08)
	char pad_140[0x8]; // 0x140(0x08)

	void OnPlayerJoin(struct ASCMPlayerState* PlayerState); // Function Solarland.AirlineCruiseComponent.OnPlayerJoin // (Final|Native|Protected) // @ game+0x1fa5a30
	void OnCruiseCompleted(struct AActor* DestroyedRoot); // Function Solarland.AirlineCruiseComponent.OnCruiseCompleted // (Final|Native|Protected) // @ game+0x1fa5c60
	void OnAIJoin(struct ASCMPlayerState* PlayerState); // Function Solarland.AirlineCruiseComponent.OnAIJoin // (Final|Native|Protected) // @ game+0x1fa5a30
	int32_t GetUsedAirlineData(struct FAirlineData& outData); // Function Solarland.AirlineCruiseComponent.GetUsedAirlineData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fa42f0
};

// Class Solarland.AmmoConfig
// Size: 0x6e0 (Inherited: 0x30)
struct UAmmoConfig : UDataAsset {
	enum class EHoldActionType HoldAction; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct FFireChargeData> FireChargeDatas; // 0x38(0x10)
	struct FString FireChargeStopSoundName; // 0x48(0x10)
	float ChargingToleranceEndTime; // 0x58(0x04)
	float ChargingWorkingEndTime; // 0x5c(0x04)
	float ChargingHoldingEndTime; // 0x60(0x04)
	float ChargingTrajectoryTime; // 0x64(0x04)
	bool bScaleHitEffectByChargingTime; // 0x68(0x01)
	bool bCostToChargeScale; // 0x69(0x01)
	char pad_6A[0x2]; // 0x6a(0x02)
	int32_t FireCostFullShot; // 0x6c(0x04)
	bool bForceFullShot; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	float MaxChargingDamageScale; // 0x74(0x04)
	float DeltaAngle; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FString Name; // 0x80(0x10)
	struct FString Des; // 0x90(0x10)
	int32_t PropID; // 0xa0(0x04)
	float LifeTime; // 0xa4(0x04)
	enum class EFireMethodType FireMethodType; // 0xa8(0x01)
	enum class ETrajectoryType TrajectoryType; // 0xa9(0x01)
	char pad_AA[0x2]; // 0xaa(0x02)
	float CustomValue; // 0xac(0x04)
	struct ASolarBullet* BulletClass; // 0xb0(0x08)
	enum class EBounceType BulletBounce; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	int32_t BounceTimes; // 0xbc(0x04)
	enum class ETriggerType TriggerType; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	float MaxRange; // 0xc4(0x04)
	float EffRange; // 0xc8(0x04)
	float Radius; // 0xcc(0x04)
	float InitSpeed; // 0xd0(0x04)
	enum class ECostFireType FireCostType; // 0xd4(0x01)
	char pad_D5[0x3]; // 0xd5(0x03)
	int32_t FireCostPerAttack; // 0xd8(0x04)
	int32_t FireSpeedChangeTime; // 0xdc(0x04)
	float FireSpeedChangeCOP; // 0xe0(0x04)
	float FastestFireInterval; // 0xe4(0x04)
	float SlowestFireInterval; // 0xe8(0x04)
	float BaseFireInterval; // 0xec(0x04)
	float FireIntervalRevertPreTime; // 0xf0(0x04)
	float FireIntervalReavertSpeed; // 0xf4(0x04)
	float BoltActionTime; // 0xf8(0x04)
	float StartBoltDuration; // 0xfc(0x04)
	float AutoFireBreakTime; // 0x100(0x04)
	float FirePrepareTime; // 0x104(0x04)
	float FireStateBreakTime; // 0x108(0x04)
	float FireStreakBreakTime; // 0x10c(0x04)
	int32_t FireIdx; // 0x110(0x04)
	bool bTimedExplode; // 0x114(0x01)
	char pad_115[0x3]; // 0x115(0x03)
	float BaseReloadTime; // 0x118(0x04)
	float ReloadBoltTime; // 0x11c(0x04)
	float PostFireOverload; // 0x120(0x04)
	bool bPlayHitSound; // 0x124(0x01)
	bool bPlayExplodeSound; // 0x125(0x01)
	char pad_126[0x2]; // 0x126(0x02)
	float FlySoundReceiveRadius; // 0x128(0x04)
	float FlySoundIgnoreDistance; // 0x12c(0x04)
	int32_t SingleSoundCount; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
	struct FString Play_Land_Common_Hit_1P; // 0x138(0x10)
	struct FString Play_Land_Common_Hit_3P; // 0x148(0x10)
	struct FString Play_Land_Common_Hit_3P_Enemy; // 0x158(0x10)
	struct FString Play_Land_Fly_Once_3P; // 0x168(0x10)
	struct FString Play_Land_Fly_Once_3P_Enemy; // 0x178(0x10)
	struct FString Play_Land_Fly_Loop_1P; // 0x188(0x10)
	struct FString Play_Land_Fly_Loop_3P; // 0x198(0x10)
	struct FString Play_Land_Fly_Loop_3P_Enemy; // 0x1a8(0x10)
	struct FString Stop_Land_Fly_Loop_1P; // 0x1b8(0x10)
	struct FString Stop_Land_Fly_Loop_3P; // 0x1c8(0x10)
	struct FString Stop_Land_Fly_Loop_3P_Enemy; // 0x1d8(0x10)
	struct FString Play_Fire_Empty_1p; // 0x1e8(0x10)
	struct FString Play_Fire_Empty_3p; // 0x1f8(0x10)
	struct FString Play_Fire_Empty_3p_Enemy; // 0x208(0x10)
	struct UCurveFloat* PostFireSpreadCurveStruct; // 0x218(0x08)
	float VhADSSpreadCOP; // 0x220(0x04)
	float ADSSpreadCOP; // 0x224(0x04)
	float SpreadFirePreTime; // 0x228(0x04)
	float SpreadPostFireSpeed; // 0x22c(0x04)
	float SpreadRestorePreTime; // 0x230(0x04)
	float SpreadRestoreSpeed; // 0x234(0x04)
	struct FWeaponFireTPPAnimConfig TPPRecoilConfig; // 0x238(0x28)
	struct FWeaponFireFPPAnimConfig FPPRecoilConfigNoScope; // 0x260(0x70)
	struct FWeaponFireFPPAnimConfig FPPRecoilConfigWithScope; // 0x2d0(0x70)
	struct FAmmonVerticalRecoilStruct PitchRecoilStruct; // 0x340(0x30)
	struct FAmmonHorizontalRecoilStruct YawRecoilStruct; // 0x370(0x30)
	struct FAmmonRecoilRollStruct RollRecoilStruct; // 0x3a0(0x40)
	struct FAmmonRecoilScope ScopeRecoil; // 0x3e0(0xb8)
	float ADSRecoilCOP; // 0x498(0x04)
	char pad_49C[0x4]; // 0x49c(0x04)
	struct TMap<struct FString, float> RecoilCOPMap; // 0x4a0(0x50)
	struct TArray<enum class EPhysicalSurface> IgnoreEPhysicalSurface; // 0x4f0(0x10)
	bool bAutoBurstFire; // 0x500(0x01)
	char pad_501[0x3]; // 0x501(0x03)
	float BurstFireInterval; // 0x504(0x04)
	float BurstFireInternalInterval; // 0x508(0x04)
	float FireAnimationPlayRate; // 0x50c(0x04)
	int32_t AmmoSoundType; // 0x510(0x04)
	float ProjectileMaxGravity; // 0x514(0x04)
	float ParticleStartDistance; // 0x518(0x04)
	float TrajectoryStartDistance; // 0x51c(0x04)
	bool bPenetrable; // 0x520(0x01)
	bool bTakeDamageAfterDeathVerge; // 0x521(0x01)
	char pad_522[0x6]; // 0x522(0x06)
	struct UCurveFloat* PenetrationDamageMultiplierCurve; // 0x528(0x08)
	struct UCurveFloat* CylinderDamageMultiplierCurve; // 0x530(0x08)
	struct FSlateBrush TriggerIcon; // 0x538(0x98)
	enum class EVirtualBulletType VirtualBulletType; // 0x5d0(0x01)
	bool bStepOnServer; // 0x5d1(0x01)
	char pad_5D2[0x6]; // 0x5d2(0x06)
	struct UAmmoConfig* TraceOverrideAmmo; // 0x5d8(0x08)
	char TraceTargetFlag; // 0x5e0(0x01)
	char pad_5E1[0x7]; // 0x5e1(0x07)
	struct FTracerBulletData TracerData; // 0x5e8(0x40)
	struct UCurveFloat* BulletOffsetCurve; // 0x628(0x08)
	struct TArray<struct FVector2D> BulletOffsetAngles; // 0x630(0x10)
	struct UCurveFloat* BulletDamageCurve; // 0x640(0x08)
	struct UCurveFloat* BulletScaleCurve; // 0x648(0x08)
	struct UCurveFloat* BulletMovementCurve; // 0x650(0x08)
	bool bThirdPesonViewXScaledByDistance; // 0x658(0x01)
	bool bForceApplyAbility; // 0x659(0x01)
	char pad_65A[0x6]; // 0x65a(0x06)
	struct TArray<struct ASolarAbility*> AmmoAbilityClasses; // 0x660(0x10)
	struct TArray<struct ASolarAbility*> AmmoAbilityClassesOnDestroyed; // 0x670(0x10)
	struct ASolarAbility* AmmoAbilityClassesOnSelf; // 0x680(0x08)
	int32_t SkillType; // 0x688(0x04)
	int32_t NameLocalTextIDNumber; // 0x68c(0x04)
	int32_t DescriptionLocalTextIDNumber; // 0x690(0x04)
	int32_t RangeLocalTextID; // 0x694(0x04)
	int32_t DifficultyLocalTextID; // 0x698(0x04)
	char pad_69C[0x4]; // 0x69c(0x04)
	struct FSolarDamageInfo DamageInfo; // 0x6a0(0x40)

	void InitVerticalRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax); // Function Solarland.AmmoConfig.InitVerticalRecoilStruct // (Final|Native|Public|Const) // @ game+0x1fa5530
	void InitSpreadData(float adscop, float vhadscop, float firepre, float changespeed, float restorepre, float restorespeed); // Function Solarland.AmmoConfig.InitSpreadData // (Final|Native|Public|Const) // @ game+0x1fa5330
	void InitScopeRollRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax, float adscop); // Function Solarland.AmmoConfig.InitScopeRollRecoilStruct // (Final|Native|Public|Const) // @ game+0x1fa5000
	void InitScopeAndCrossHairVibration(float ScopeVMaxDistanceOffSet, float ScopeVVibrationDuration, float ScopeHMaxDistanceOffSet, float ScopeHVibrationDuration, float ScopeVContinuousFallingDuration, float ScopeVContinuousFallingPointIndex, float VMaxDistanceOffSetScale, float VVibrationDurationScale, float VSingleOffSetScale, float VContinuousOffSetScale, float HMaxDistanceOffSetScale, float HVibrationDurationScale, float HSingleOffSetScale, float HContinuousOffSetScale, float HOffSetProbabilityScale); // Function Solarland.AmmoConfig.InitScopeAndCrossHairVibration // (Final|Native|Public|Const) // @ game+0x1fa4b60
	void InitRollRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax, float adscop); // Function Solarland.AmmoConfig.InitRollRecoilStruct // (Final|Native|Public|Const) // @ game+0x1fa4900
	void InitRecoilCOPMap(struct TArray<struct FString>& Keys, struct TArray<float>& Values); // Function Solarland.AmmoConfig.InitRecoilCOPMap // (Final|Native|Public|HasOutParms|Const) // @ game+0x1fa47c0
	void InitPostFireSpreadCurveStruct(struct FString Path); // Function Solarland.AmmoConfig.InitPostFireSpreadCurveStruct // (Final|Native|Public|Const) // @ game+0x1fa4720
	void InitHorizontalRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax); // Function Solarland.AmmoConfig.InitHorizontalRecoilStruct // (Final|Native|Public|Const) // @ game+0x1fa4500
	void InitBaseData(int32_t Trigger); // Function Solarland.AmmoConfig.InitBaseData // (Final|Native|Public|Const) // @ game+0x1fa4470
};

// Class Solarland.AndroidInputManager
// Size: 0x38 (Inherited: 0x28)
struct UAndroidInputManager : UObject {
	struct FMulticastInlineDelegate OnAndroidBackPressed; // 0x28(0x10)
};

// Class Solarland.AnimNotify_CharacterFootEffect
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_CharacterFootEffect : UAnimNotify {
	struct TArray<struct FFootEffect> FootEffectList; // 0x38(0x10)

	void AddNewFootEffect(struct FFootEffect& NewEffect); // Function Solarland.AnimNotify_CharacterFootEffect.AddNewFootEffect // (Final|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x1faad80
};

// Class Solarland.AnimNotify_CharacterPlaySoundGroup
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_CharacterPlaySoundGroup : UAnimNotify {
	struct FName SoundGroupName; // 0x38(0x08)
};

// Class Solarland.SolarAnimNotify
// Size: 0x40 (Inherited: 0x38)
struct USolarAnimNotify : UAnimNotify {
	bool bDynamic; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Solarland.AnimNotify_CharacterStartSound
// Size: 0x80 (Inherited: 0x40)
struct UAnimNotify_CharacterStartSound : USolarAnimNotify {
	struct TArray<struct FCharacterSound> SoundList; // 0x40(0x10)
	bool bUseSwitch; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct TArray<struct FString> SwitchGroupNames; // 0x58(0x10)
	bool bUseRTPC; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	struct TArray<struct FString> RPTCNames; // 0x70(0x10)

	int32_t RemoveAllSwitches(); // Function Solarland.AnimNotify_CharacterStartSound.RemoveAllSwitches // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1faba60
	int32_t RemoveAllRPTCs(); // Function Solarland.AnimNotify_CharacterStartSound.RemoveAllRPTCs // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1faba30
	int32_t RemoveAllCharacterSounds(); // Function Solarland.AnimNotify_CharacterStartSound.RemoveAllCharacterSounds // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1faba00
	void AddNewSwitch(struct FString NewSwitch); // Function Solarland.AnimNotify_CharacterStartSound.AddNewSwitch // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1faaee0
	void AddNewRPTC(struct FString NewRTPC); // Function Solarland.AnimNotify_CharacterStartSound.AddNewRPTC // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1faae40
	void AddNewCharacterSound(struct FCharacterSound& NewSound); // Function Solarland.AnimNotify_CharacterStartSound.AddNewCharacterSound // (Final|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x1faabe0
};

// Class Solarland.AnimNotify_CharacterStopSound
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_CharacterStopSound : UAnimNotify {
	struct TArray<struct FCharacterSound> StopList; // 0x38(0x10)

	int32_t RemoveAllCharacterSoundStops(); // Function Solarland.AnimNotify_CharacterStopSound.RemoveAllCharacterSoundStops // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1fab9d0
	void AddNewCharacterSoundStop(struct FCharacterSound& NewStop); // Function Solarland.AnimNotify_CharacterStopSound.AddNewCharacterSoundStop // (Final|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x1faacb0
};

// Class Solarland.AnimNotify_ExecuteGameplayCueLocal
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_ExecuteGameplayCueLocal : UAnimNotify {
	struct FGameplayCueTag GameplayCueTag; // 0x38(0x08)
};

// Class Solarland.AnimNotify_FlyWaterEffect
// Size: 0x88 (Inherited: 0x38)
struct UAnimNotify_FlyWaterEffect : UAnimNotify {
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct TSoftObjectPtr<UParticleSystem> PSTemplateSoft; // 0x40(0x28)
	struct FName SocketName; // 0x68(0x08)
	struct FVector LocationOffset; // 0x70(0x0c)
	struct FRotator RotationOffset; // 0x7c(0x0c)
};

// Class Solarland.AnimNotify_LegVehicleRiseDust
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_LegVehicleRiseDust : UAnimNotify {
	struct TArray<int32_t> NotifyFootIndex; // 0x38(0x10)
};

// Class Solarland.AnimNotify_PlayParticleAsync
// Size: 0xb0 (Inherited: 0x38)
struct UAnimNotify_PlayParticleAsync : UAnimNotify {
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct TSoftObjectPtr<UParticleSystem> PSTemplateSoft; // 0x40(0x28)
	struct FVector LocationOffset; // 0x68(0x0c)
	struct FRotator RotationOffset; // 0x74(0x0c)
	struct FVector Scale; // 0x80(0x0c)
	char pad_8C[0x14]; // 0x8c(0x14)
	char Attached : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	struct FName SocketName; // 0xa4(0x08)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Solarland.AnimNotify_PlayPickupSound
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_PlayPickupSound : UAnimNotify {
	struct FString DefaultSoundEventName; // 0x38(0x10)

	struct FString GetDefaultSoundEventName(); // Function Solarland.AnimNotify_PlayPickupSound.GetDefaultSoundEventName // (Final|Native|Public|Const) // @ game+0x1fab4c0
};

// Class Solarland.AnimNotify_ReloadClip
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_ReloadClip : UAnimNotify {
	struct FName HandBoneName; // 0x38(0x08)
	enum class EAnimReloadNotifyType StepType; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Solarland.AnimNotify_ServerRefreshBones
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ServerRefreshBones : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldEndRecharge
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldEndRecharge : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldHideRechargeFX
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldHideRechargeFX : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldOperatorSet
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldOperatorSet : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldShowRechargeFX
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldShowRechargeFX : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldStartRecharge
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldStartRecharge : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldUpgradeFinishFX
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldUpgradeFinishFX : UAnimNotify {
};

// Class Solarland.AnimNotify_ThrowThrown
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ThrowThrown : UAnimNotify {
};

// Class Solarland.AnimNotify_VehicleCameraShake
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_VehicleCameraShake : UAnimNotify {
	struct UCameraShake* VehicleCameraShake; // 0x38(0x08)
};

// Class Solarland.AnimNotify_VehiclePlaySound
// Size: 0x60 (Inherited: 0x38)
struct UAnimNotify_VehiclePlaySound : UAnimNotify {
	bool bCheckEnemy; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct FString SameTeamSound; // 0x40(0x10)
	struct FString EnemySound; // 0x50(0x10)
};

// Class Solarland.AnimNotify_VehiclePreviewSound
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_VehiclePreviewSound : UAnimNotify {
	struct FString Sound; // 0x38(0x10)
};

// Class Solarland.AnimNotify_VehicleVFX
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_VehicleVFX : UAnimNotify {
	struct TArray<struct FVehicleVFX> VehicleVFXes; // 0x38(0x10)
};

// Class Solarland.AnimNotify_WeaponBolt
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_WeaponBolt : UAnimNotify {
};

// Class Solarland.AnimNotifyState_AddLooseGameplayTag
// Size: 0x50 (Inherited: 0x30)
struct UAnimNotifyState_AddLooseGameplayTag : UAnimNotifyState {
	struct FGameplayTagContainer GameplayTags; // 0x30(0x20)
};

// Class Solarland.AnimNotifyState_AllowPhysicsRotationDuringAnimRootMotion
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_AllowPhysicsRotationDuringAnimRootMotion : UAnimNotifyState {
};

// Class Solarland.AnimNotifyState_AutoCancelOnInputReleased
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_AutoCancelOnInputReleased : UAnimNotifyState {
};

// Class Solarland.SolarAnimNotifyState
// Size: 0x38 (Inherited: 0x30)
struct USolarAnimNotifyState : UAnimNotifyState {
	bool bDynamic; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Solarland.AnimNotifyState_CharacterLoopedSound
// Size: 0x58 (Inherited: 0x38)
struct UAnimNotifyState_CharacterLoopedSound : USolarAnimNotifyState {
	struct TArray<struct FCharacterSound> EventListToPlay; // 0x38(0x10)
	struct TArray<struct FCharacterSound> EventListToStop; // 0x48(0x10)
};

// Class Solarland.AnimNotifyState_HideCharacterMesh
// Size: 0x48 (Inherited: 0x30)
struct UAnimNotifyState_HideCharacterMesh : UAnimNotifyState {
	struct FGameplayTag VisibilityTag; // 0x30(0x08)
	bool bPropagateToChildren; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct USceneComponent* ChildrenExceptClass; // 0x40(0x08)
};

// Class Solarland.AnimNotifyState_InhibitAimOffset
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotifyState_InhibitAimOffset : UAnimNotifyState {
	float InhibitSmoothTime; // 0x30(0x04)
	float RecoverSmoothTime; // 0x34(0x04)
	bool bCalcRecoverSmoothTimeByRemainingTime; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Solarland.AnimNotifyState_InhibitLeftHandWeaponAttach
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotifyState_InhibitLeftHandWeaponAttach : UAnimNotifyState {
	float InhibitSmoothTime; // 0x30(0x04)
	float RecoverSmoothTime; // 0x34(0x04)
	bool bCalcRecoverSmoothTimeByRemainingTime; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Solarland.AnimNotifyState_OpenTreasureBox
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_OpenTreasureBox : UAnimNotifyState {
};

// Class Solarland.AnimNotifyState_OverrideHitEffectSurfaceType
// Size: 0x38 (Inherited: 0x30)
struct UAnimNotifyState_OverrideHitEffectSurfaceType : UAnimNotifyState {
	enum class EPhysicalSurface SurfaceType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Solarland.AnimNotifyState_PlayGameplayCueLocal
// Size: 0x38 (Inherited: 0x30)
struct UAnimNotifyState_PlayGameplayCueLocal : UAnimNotifyState {
	struct FGameplayCueTag GameplayCueTag; // 0x30(0x08)
};

// Class Solarland.AnimNotifyState_RechargeShield
// Size: 0x58 (Inherited: 0x30)
struct UAnimNotifyState_RechargeShield : UAnimNotifyState {
	struct FGameplayTagContainer GameplayTags; // 0x30(0x20)
	bool bFXorMesh; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Solarland.AnimNotifyState_RepairVehicleWeakPoints
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_RepairVehicleWeakPoints : UAnimNotifyState {
};

// Class Solarland.AnimNotifyState_ShieldUpgradeFX
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_ShieldUpgradeFX : UAnimNotifyState {
};

// Class Solarland.AnimNotifyState_SolarSpawnMeshAndAttach
// Size: 0x50 (Inherited: 0x30)
struct UAnimNotifyState_SolarSpawnMeshAndAttach : UAnimNotifyState {
	struct TArray<struct FAttachedMeshInfo> MeshesInfo; // 0x30(0x10)
	struct TArray<struct UStaticMeshComponent*> SpawnedMeshComps; // 0x40(0x10)
};

// Class Solarland.AnimNotifyState_SolarTimedParticleEffect
// Size: 0xb0 (Inherited: 0x30)
struct UAnimNotifyState_SolarTimedParticleEffect : UAnimNotifyState {
	bool bAsyncLoad; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct TSoftObjectPtr<UParticleSystem> PSTemplateSoft; // 0x40(0x28)
	bool Attached; // 0x68(0x01)
	char pad_69[0x3]; // 0x69(0x03)
	struct FName SocketName; // 0x6c(0x08)
	struct FVector LocationOffset; // 0x74(0x0c)
	struct FRotator RotationOffset; // 0x80(0x0c)
	struct FVector Scale; // 0x8c(0x0c)
	bool bDestroyAtEnd; // 0x98(0x01)
	bool bLockRelativeRotation; // 0x99(0x01)
	char pad_9A[0x16]; // 0x9a(0x16)
};

// Class Solarland.AnimNotifyState_UpgradeShield
// Size: 0x50 (Inherited: 0x30)
struct UAnimNotifyState_UpgradeShield : UAnimNotifyState {
	struct FGameplayTagContainer GameplayTags; // 0x30(0x20)
};

// Class Solarland.AttributeSubExecCalc
// Size: 0x68 (Inherited: 0x40)
struct UAttributeSubExecCalc : UGameplayEffectExecutionCalculation {
	struct UAttributeSubExecProxy* CDOProxyClass; // 0x40(0x08)
	struct UAttributeSubExecProxy* CDOProxy; // 0x48(0x08)
	char pad_50[0x18]; // 0x50(0x18)
};

// Class Solarland.AttributeSubExecProxy
// Size: 0x30 (Inherited: 0x28)
struct UAttributeSubExecProxy : UObject {
	struct TWeakObjectPtr<struct UAttributeSubExecCalc> CDOOwner; // 0x28(0x08)

	void ModifyAttributeSub(struct USolarAttributeSubComponent* AttrSubComp, enum class EAttributeSubBehavior Behavior, int32_t AttributeSubID, struct FName AttrSubTag, float ModifyValue); // Function Solarland.AttributeSubExecProxy.ModifyAttributeSub // (Final|Native|Protected|BlueprintCallable) // @ game+0x1fab820
	struct FGameplayModifierEvaluatedData MakeExecProxyEvaluated(struct FGameplayAttribute InAttribute, float InMagnitud); // Function Solarland.AttributeSubExecProxy.MakeExecProxyEvaluated // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1fab540
	void ExecutePureAttributeSub(struct USolarAttributeSubComponent* AttrSubComp, struct TArray<struct FAttributeSubSetting>& InAttributeSubs); // Function Solarland.AttributeSubExecProxy.ExecutePureAttributeSub // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void ExecuteAttributeCalculation(struct USolarAttributeSubComponent* AttrSubComp, struct TArray<struct FAttributeSubSetting>& InAttributeSubs, struct TArray<struct FGameplayAttribute>& InAttribute, struct TArray<struct FGameplayModifierEvaluatedData>& OutModResults); // Function Solarland.AttributeSubExecProxy.ExecuteAttributeCalculation // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	struct UAttributeSubExecProxy* CreateProxy(struct UAttributeSubExecCalc* InCDOOwner, struct UAttributeSubExecProxy* ProxyClass); // Function Solarland.AttributeSubExecProxy.CreateProxy // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1fab3f0
};

// Class Solarland.AttributeSubGameplayEffect
// Size: 0x868 (Inherited: 0x848)
struct UAttributeSubGameplayEffect : UGameplayEffect {
	struct TArray<struct FAttributeSubSetting> AttributeSubMods; // 0x848(0x10)
	struct TArray<struct FAttributeSubSetting> PureAttributeSubs; // 0x858(0x10)

	void UpdateAttributeBySub(struct FGameplayAttribute Attribute); // Function Solarland.AttributeSubGameplayEffect.UpdateAttributeBySub // (Final|Native|Public|BlueprintCallable) // @ game+0x1faba90
	struct UAttributeSubGameplayEffect* CreateAttributeSubEffectInstance(struct UObject* Outer, struct UAttributeSubExecCalc* AttributeSubCalcClass, struct UAttributeSubGameplayEffect* Class); // Function Solarland.AttributeSubGameplayEffect.CreateAttributeSubEffectInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fab2f0
	void CancelPureAttributeSub(int32_t AttributeSubID); // Function Solarland.AttributeSubGameplayEffect.CancelPureAttributeSub // (Final|Native|Public|BlueprintCallable) // @ game+0x1fab260
	void CancelAttributeSubModify(struct FGameplayAttribute Attribute, int32_t AttributeSubID); // Function Solarland.AttributeSubGameplayEffect.CancelAttributeSubModify // (Final|Native|Public|BlueprintCallable) // @ game+0x1fab050
	void AddPureAttributeSub(int32_t AttributeSubID, float Value); // Function Solarland.AttributeSubGameplayEffect.AddPureAttributeSub // (Final|Native|Public|BlueprintCallable) // @ game+0x1faaf80
	void AddAttributeSubModify(struct FGameplayAttribute Attribute, int32_t AttributeSubID, float Value); // Function Solarland.AttributeSubGameplayEffect.AddAttributeSubModify // (Final|Native|Public|BlueprintCallable) // @ game+0x1faa9b0
};

// Class Solarland.AttributeSubInterface
// Size: 0x28 (Inherited: 0x28)
struct UAttributeSubInterface : UInterface {

	struct USolarAttributeSubComponent* GetAttributeSubComponent(); // Function Solarland.AttributeSubInterface.GetAttributeSubComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1fa4280
};

// Class Solarland.VertAnimMeshComponent
// Size: 0x630 (Inherited: 0x600)
struct UVertAnimMeshComponent : UStaticMeshComponent {
	char pad_600[0x30]; // 0x600(0x30)

	void PlayInfo(struct FVertexAnimInfo& InAnimInfo); // Function Solarland.VertAnimMeshComponent.PlayInfo // (Final|Native|Public|HasOutParms) // @ game+0x22ac440
	void Play(int32_t InStartFrame, int32_t InEndFrame, float InLength, bool InLoop); // Function Solarland.VertAnimMeshComponent.Play // (Final|Native|Public) // @ game+0x22ac2e0
};

// Class Solarland.BackpackVertAnimMeshComponent
// Size: 0x710 (Inherited: 0x630)
struct UBackpackVertAnimMeshComponent : UVertAnimMeshComponent {
	struct FVertexAnimInfo DefaultAnimInfo; // 0x630(0x10)
	struct TMap<enum class EBackPackAnimSubType, struct FVertexAnimInfo> BackPackAnimInfoMap; // 0x640(0x50)
	struct ASolarCharacter* SolarCharacter; // 0x690(0x08)
	struct ASolarBackpackActor* BackPackActor; // 0x698(0x08)
	char pad_6A0[0x70]; // 0x6a0(0x70)
};

// Class Solarland.SolarAttributeSet
// Size: 0x30 (Inherited: 0x30)
struct USolarAttributeSet : UAttributeSet {

	void K2_SetAttributeValue(struct FName AttributeName, float NewVal); // Function Solarland.SolarAttributeSet.K2_SetAttributeValue // (Final|Native|Protected|BlueprintCallable) // @ game+0x20763c0
	void K2_OnReplicationAttribute(struct FGameplayAttributeData& OldValue, struct FGameplayAttributeData& ReplicatedAttribute, struct FName AttributeName); // Function Solarland.SolarAttributeSet.K2_OnReplicationAttribute // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x2076270
	void K2_InitAttributeValue(struct FGameplayAttributeData& OriginAttribute, float NewVal); // Function Solarland.SolarAttributeSet.K2_InitAttributeValue // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x2076180
	float K2_GetAttributeValue(struct FGameplayAttributeData& OriginAttribute); // Function Solarland.SolarAttributeSet.K2_GetAttributeValue // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2069240
	struct FGameplayAttribute K2_GetAttribute(struct FName AttributeName); // Function Solarland.SolarAttributeSet.K2_GetAttribute // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2076020
};

// Class Solarland.BasalAttributeSet
// Size: 0x50 (Inherited: 0x30)
struct UBasalAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData MaxHealth; // 0x30(0x10)
	struct FGameplayAttributeData CurrentHealth; // 0x40(0x10)

	void OnRep_MaxHealth(struct FGameplayAttributeData& Previous); // Function Solarland.BasalAttributeSet.OnRep_MaxHealth // (Native|Protected|HasOutParms) // @ game+0x1fb2090
	void OnRep_CurrentHealth(struct FGameplayAttributeData& Previous); // Function Solarland.BasalAttributeSet.OnRep_CurrentHealth // (Native|Protected|HasOutParms) // @ game+0x1fb1fe0
};

// Class Solarland.BattleChat
// Size: 0x338 (Inherited: 0x260)
struct UBattleChat : UUserWidget {
	struct UGaugeImage* ChatCDMask; // 0x260(0x08)
	struct UImage* ImgBG; // 0x268(0x08)
	struct UCheckBoxGroup* CBGroupOperation; // 0x270(0x08)
	struct UScrollBox* PanelChatOptions; // 0x278(0x08)
	struct USolarCheckBox* CBoxChatSwitch; // 0x280(0x08)
	struct UWidgetAnimation* AnimChatCooldown; // 0x288(0x08)
	struct UQuickChatUnit* ChatButtonClass; // 0x290(0x08)
	struct FSlateBrush SeparatorBrush; // 0x298(0x98)
	char pad_330[0x8]; // 0x330(0x08)

	void SetLogDisplay(bool bDisplay); // Function Solarland.BattleChat.SetLogDisplay // (Final|Native|Protected) // @ game+0x1fb2720
	void ReceiveQuickMessage(struct FString InName, struct FString InMessage1, bool bLocalPlayer, bool bSound, int32_t PosInTeam, struct FString InMessage2); // Function Solarland.BattleChat.ReceiveQuickMessage // (Final|Native|Protected) // @ game+0x1fb2250
	void ReceiveQuickChatSending(); // Function Solarland.BattleChat.ReceiveQuickChatSending // (Final|Native|Protected) // @ game+0x1fb2230
	void OnGroupOperationStateChanged(struct TArray<struct UCheckBox*>& ChildChangedArray, int32_t CheckedChildIndex); // Function Solarland.BattleChat.OnGroupOperationStateChanged // (Final|Native|Protected|HasOutParms) // @ game+0x1fb1b50
};

// Class Solarland.SolarHUD
// Size: 0x318 (Inherited: 0x318)
struct ASolarHUD : AHUD {
};

// Class Solarland.BattleHUDBase
// Size: 0x398 (Inherited: 0x318)
struct ABattleHUDBase : ASolarHUD {
	struct UHUDDispatcherBase* Dispatcher; // 0x318(0x08)
	struct UHUDDispatcherBase* WidgetEventDispatcher; // 0x320(0x08)
	bool bUseBattleDeathView; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)
	struct USolarPlayersHPModel* PlayersHPModel; // 0x330(0x08)
	struct USolarPlayersShieldModel* PlayersShieldModel; // 0x338(0x08)
	struct USolarTeamInfoModel* TeamInfoModelModel; // 0x340(0x08)
	char pad_348[0x50]; // 0x348(0x50)

	void ShowDiePage_Deprecated(); // Function Solarland.BattleHUDBase.ShowDiePage_Deprecated // (Final|Native|Public|BlueprintCallable) // @ game+0x1fb27b0
	void OnPlayerStateRepInController(enum class EPlayerStateRepType RepType, struct APlayerState* PlayerState); // Function Solarland.BattleHUDBase.OnPlayerStateRepInController // (Native|Protected) // @ game+0x1fb1f10
	void OnPlayerStateRepInCharacter(enum class EPlayerStateRepType RepType, struct APlayerState* PlayerState); // Function Solarland.BattleHUDBase.OnPlayerStateRepInCharacter // (Native|Protected) // @ game+0x1fb1e40
	void OnNewTeamInfo(struct ASolarTeamInfo* TeamInfo); // Function Solarland.BattleHUDBase.OnNewTeamInfo // (Native|Protected) // @ game+0x1fb1c50
	void OnCharacterEndPlay(struct ASolarCharacter* Character); // Function Solarland.BattleHUDBase.OnCharacterEndPlay // (Native|Protected) // @ game+0x1fb1aa0
	struct UUISubsystem* GetUISubSystem(); // Function Solarland.BattleHUDBase.GetUISubSystem // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fb1980
	void CloseDiePage_Deprecated(struct UUserWidget* InDiePageClass); // Function Solarland.BattleHUDBase.CloseDiePage_Deprecated // (Final|Native|Public|BlueprintCallable) // @ game+0x1fb1650
};

// Class Solarland.BattleHUDForTechDesign
// Size: 0x398 (Inherited: 0x398)
struct ABattleHUDForTechDesign : ABattleHUDBase {
};

// Class Solarland.UINoticeBase
// Size: 0x370 (Inherited: 0x348)
struct UUINoticeBase : USolarUserWidget {
	struct USolarRichTextBlock* TextWidget; // 0x348(0x08)
	struct UImage* TxtBg; // 0x350(0x08)
	struct UImage* Icon; // 0x358(0x08)
	struct UImage* IconBg; // 0x360(0x08)
	char pad_368[0x8]; // 0x368(0x08)

	void ShowEnterAnimation(); // Function Solarland.UINoticeBase.ShowEnterAnimation // (Native|Public|BlueprintCallable) // @ game+0xb9afb0
	void SetIconBrush(struct FString IconPath); // Function Solarland.UINoticeBase.SetIconBrush // (Final|Native|Public|BlueprintCallable) // @ game+0x22a3e60
	void SetColor(struct FNoticeColorData& InColorData); // Function Solarland.UINoticeBase.SetColor // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x22a3d00
	void ResetIsPlayingVoice(enum class EAkCallbackType CallbackType, struct UAkCallbackInfo* CallbackInfo); // Function Solarland.UINoticeBase.ResetIsPlayingVoice // (Final|Native|Public) // @ game+0x22a3b60
	struct UWidgetAnimation* GetExitAnimation(); // Function Solarland.UINoticeBase.GetExitAnimation // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x22a3390
	struct UWidgetAnimation* GetEnterAnimation(); // Function Solarland.UINoticeBase.GetEnterAnimation // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x22a3360
	void DefaultClose(); // Function Solarland.UINoticeBase.DefaultClose // (Final|Native|Public|BlueprintCallable) // @ game+0x22a3340
	void CloseNotice(); // Function Solarland.UINoticeBase.CloseNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x22a3290
};

// Class Solarland.BattleNoticeEquipReplace
// Size: 0x458 (Inherited: 0x370)
struct UBattleNoticeEquipReplace : UUINoticeBase {
	struct UImage* Img_Item1; // 0x370(0x08)
	struct UImage* Img_Item2; // 0x378(0x08)
	struct UImage* Img_Item1_BG; // 0x380(0x08)
	struct UImage* Img_Item2_BG; // 0x388(0x08)
	struct UTextBlock* Quality1; // 0x390(0x08)
	struct UTextBlock* Quality2; // 0x398(0x08)
	struct UWidgetAnimation* Enter_Animation_1; // 0x3a0(0x08)
	struct UWidgetAnimation* Enter_Animation_2; // 0x3a8(0x08)
	struct UWidgetAnimation* Enter_Animation_3; // 0x3b0(0x08)
	struct TMap<enum class EItemType, struct TSoftObjectPtr<UTexture2D>> DefaultEquipIcons; // 0x3b8(0x50)
	struct TMap<enum class EWeaponPartType, struct TSoftObjectPtr<UTexture2D>> DefaultWeaponPartIcons; // 0x408(0x50)

	void OnEquipReplaceAnimFinished(); // Function Solarland.BattleNoticeEquipReplace.OnEquipReplaceAnimFinished // (Final|Native|Public) // @ game+0x1fb1b30
};

// Class Solarland.BattleNoticePickup
// Size: 0x3a0 (Inherited: 0x370)
struct UBattleNoticePickup : UUINoticeBase {
	struct USolarTextBlock* Txt_PickupNotice_ItemName; // 0x370(0x08)
	struct USolarTextBlock* Txt_PickupNotice_Head; // 0x378(0x08)
	struct USolarTextBlock* Txt_PickupNotice_Tail; // 0x380(0x08)
	struct UImage* Img_Txt_bg; // 0x388(0x08)
	struct TArray<struct FLinearColor> QualityColor; // 0x390(0x10)
};

// Class Solarland.BattleOBHUD
// Size: 0x3a8 (Inherited: 0x398)
struct ABattleOBHUD : ABattleHUDBase {
	char pad_398[0x8]; // 0x398(0x08)
	struct USolarOBUIModel* SolarOBUIModel; // 0x3a0(0x08)

	void SetBattleOBHUDType(enum class EBattleOBHUDType& Type); // Function Solarland.BattleOBHUD.SetBattleOBHUDType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1fb2690
	void OpenShortCutKeyboard(); // Function Solarland.BattleOBHUD.OpenShortCutKeyboard // (Final|Native|Public|BlueprintCallable) // @ game+0x1fb2210
	struct UOBHUDDispatcher* GetOBHUDDispatcher(); // Function Solarland.BattleOBHUD.GetOBHUDDispatcher // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fb1950
	enum class EBattleOBHUDType GetBattleOBHUDType(); // Function Solarland.BattleOBHUD.GetBattleOBHUDType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fb16e0
	void AddWidgetToOBRoot(struct UPanelSlot*& ResultSlot, struct UWidget* InChildWidget, struct FName& PanelName, bool bReplaceOld); // Function Solarland.BattleOBHUD.AddWidgetToOBRoot // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1fb1230
};

// Class Solarland.BattlePassConfigInfo
// Size: 0x38 (Inherited: 0x28)
struct UBattlePassConfigInfo : UObject {
	struct TArray<struct FBattlePassLevelInfo> BattlePassLevel; // 0x28(0x10)

	bool IsMaxLevelWithExp(int32_t BattlePassID, int32_t TotalExp); // Function Solarland.BattlePassConfigInfo.IsMaxLevelWithExp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fb19d0
	void Initialize(); // Function Solarland.BattlePassConfigInfo.Initialize // (Final|Native|Public) // @ game+0x1fb19b0
	int32_t GetLevelByTestExp(int32_t BattlePassID, int32_t InTestExp); // Function Solarland.BattlePassConfigInfo.GetLevelByTestExp // (Final|Native|Public) // @ game+0x1fb1880
	int32_t GetExpNeedForLv(int32_t BattlePassID, int32_t Level); // Function Solarland.BattlePassConfigInfo.GetExpNeedForLv // (Final|Native|Public) // @ game+0x1fb17b0
	int32_t GetBattllePassMaxLevel(int32_t BattlePassID); // Function Solarland.BattlePassConfigInfo.GetBattllePassMaxLevel // (Final|Native|Public) // @ game+0x1fb1710
};

// Class Solarland.BattlePromptWidget
// Size: 0x650 (Inherited: 0x348)
struct UBattlePromptWidget : USolarUserWidget {
	char pad_348[0x10]; // 0x348(0x10)
	struct UCanvasPanel* EnterAnimPanel; // 0x358(0x08)
	struct UMeshRectangleWidget* MeshWidget_Arrow; // 0x360(0x08)
	struct UMeshRectangleWidget* MeshWidget_Detail; // 0x368(0x08)
	struct TMap<enum class EBattlePromptType, enum class EBattlePromptType> DisplayTypeMap; // 0x370(0x50)
	struct TMap<enum class EBattlePromptType, int32_t> TypeUVMap; // 0x3c0(0x50)
	float ElemIconDifference; // 0x410(0x04)
	char pad_414[0x4]; // 0x414(0x04)
	struct TMap<enum class EBattlePromptType, float> ElemRadiusMap; // 0x418(0x50)
	int32_t ThreatFactorDefault; // 0x468(0x04)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct TMap<enum class EBattlePromptType, struct UCurveFloat*> ElemArrowColorCurveMap; // 0x470(0x50)
	struct TMap<enum class EBattlePromptType, struct UCurveFloat*> ElemArrowLengthCurveMap; // 0x4c0(0x50)
	struct TMap<enum class EBattlePromptType, struct UCurveFloat*> ElemIconScaleCurveMap; // 0x510(0x50)
	int32_t CloseCheckAngleDefault; // 0x560(0x04)
	char pad_564[0x4]; // 0x564(0x04)
	struct UCurveFloat* CloseCheckAngleCurve; // 0x568(0x08)
	float ElemLerpSpeed; // 0x570(0x04)
	int32_t EditorTestColorFactor; // 0x574(0x04)
	int32_t EditorTestLengthFactor; // 0x578(0x04)
	int32_t EditorTestAngle; // 0x57c(0x04)
	struct TSet<struct AActor*> EffectedNightmareActors; // 0x580(0x50)
	char pad_5D0[0x20]; // 0x5d0(0x20)
	struct TArray<struct FPromptElemInfo> Datas; // 0x5f0(0x10)
	char pad_600[0x50]; // 0x600(0x50)

	void PlayForbidAnim(bool bQuickEnter); // Function Solarland.BattlePromptWidget.PlayForbidAnim // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.BattlePromptWidget.OnSpecTargetChanged // (Final|Native|Public) // @ game+0x1fb2140
	void OnNightComesActorChanged(struct AActor* InActor); // Function Solarland.BattlePromptWidget.OnNightComesActorChanged // (Final|Native|Public) // @ game+0x1fb1ce0
};

// Class Solarland.BattleSubSundry
// Size: 0x398 (Inherited: 0x348)
struct UBattleSubSundry : USolarUserWidget {
	struct UScrollBox* PanelInformation; // 0x348(0x08)
	struct USolarRichTextBlock* TxtInformation03; // 0x350(0x08)
	struct USolarRichTextBlock* TxtInformation02; // 0x358(0x08)
	struct USolarRichTextBlock* TxtInformation01; // 0x360(0x08)
	struct UWidgetAnimation* AnimInformationDisappear; // 0x368(0x08)
	int32_t MaxMessageStock; // 0x370(0x04)
	float ChatCoolDown; // 0x374(0x04)
	float InfoKeepDuration; // 0x378(0x04)
	char pad_37C[0x1c]; // 0x37c(0x1c)

	void ReceiveQuickMessage(struct FString InName, struct FString InMessage, bool bLocalPlayer, bool bSound, int32_t PosInTeam, struct FString InMessage2); // Function Solarland.BattleSubSundry.ReceiveQuickMessage // (Final|Native|Protected) // @ game+0x1fb2470
	void OnPlayerStateRep(enum class EPlayerStateRepType RepType, struct APlayerState* PlayerState); // Function Solarland.BattleSubSundry.OnPlayerStateRep // (Final|Native|Protected) // @ game+0x1fb1d70
};

// Class Solarland.BattleUpgradeEffectCategoryData
// Size: 0x80 (Inherited: 0x30)
struct UBattleUpgradeEffectCategoryData : UDataAsset {
	struct TMap<enum class EBattleUpgradeEffectCategory, struct FBattleUpgradeEffectCategoryConfig> CategoryConfigMap; // 0x30(0x50)

	void BreakBattleUpgradeEffectCategoryColorSet(struct FBattleUpgradeEffectCategoryColorSet& ColorSet, struct FLinearColor& BannerCategoryTextColor, struct FLinearColor& BannerIconColor, struct FLinearColor& BannerBorderColor, struct FLinearColor& BannerBackgroundColor, struct FLinearColor& BadgeIconColor, struct FLinearColor& BadgeBackgroundColor); // Function Solarland.BattleUpgradeEffectCategoryData.BreakBattleUpgradeEffectCategoryColorSet // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1fb13b0
};

// Class Solarland.BattleUpgradeEffectSettings
// Size: 0x90 (Inherited: 0x38)
struct UBattleUpgradeEffectSettings : UDeveloperSettings {
	struct TSoftObjectPtr<UDataTable> EffectTypeConfig; // 0x38(0x28)
	int32_t SelectEffectHintLocalTextID; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct TSoftObjectPtr<UBattleUpgradeEffectCategoryData> EffectCategoryData; // 0x68(0x28)
};

// Class Solarland.BigWaterGun
// Size: 0x390 (Inherited: 0x228)
struct ABigWaterGun : AActor {
	float CylinderRadius; // 0x228(0x04)
	float CylinderLength; // 0x22c(0x04)
	float TraceInterval; // 0x230(0x04)
	float DamageChaPerInterval; // 0x234(0x04)
	float DamageVehPerInterval; // 0x238(0x04)
	float DamageDecayFirst; // 0x23c(0x04)
	float DamageDecaySecond; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)
	struct FSoftObjectPath MeshPath; // 0x248(0x18)
	struct FName MeshSocket; // 0x260(0x08)
	struct FRotator WaterColumnEffectRotator; // 0x268(0x0c)
	char pad_274[0x4]; // 0x274(0x04)
	struct UParticleSystem* WaterColumnEffect; // 0x278(0x08)
	struct FName InstigatorEffectID; // 0x280(0x08)
	struct UCameraShake* CameraShakeClass; // 0x288(0x08)
	struct UUserWidget* InCrossHairClass; // 0x290(0x08)
	float NearlyEndTime; // 0x298(0x04)
	bool bShowDebug; // 0x29c(0x01)
	char pad_29D[0x3]; // 0x29d(0x03)
	struct FVector TraceStartRelativeLocation; // 0x2a0(0x0c)
	struct FVector TraceStartRelativeLocation_Crouch; // 0x2ac(0x0c)
	float MuzzleTraceOffset; // 0x2b8(0x04)
	struct FName ShotAnimNotifyName; // 0x2bc(0x08)
	struct FName UnequipAnimNotifyName; // 0x2c4(0x08)
	struct FName UnequipAnimNotifyName_Gatling; // 0x2cc(0x08)
	char pad_2D4[0x4]; // 0x2d4(0x04)
	struct UCurveFloat* DamageDecayCurve; // 0x2d8(0x08)
	struct FGameplayTag ChaSlowDownDecayDataTag; // 0x2e0(0x08)
	struct UCurveFloat* ChaSlowDownDecayCurve; // 0x2e8(0x08)
	struct FGameplayTag VehSlowDownDecayDataTag; // 0x2f0(0x08)
	struct UCurveFloat* VehSlowDownDecayCurve; // 0x2f8(0x08)
	float OcclusionCheckZOffset; // 0x300(0x04)
	char pad_304[0x4]; // 0x304(0x04)
	struct TArray<struct ASummonItemBase*> BlockDamageItemClasses; // 0x308(0x10)
	struct USkeletalMeshComponent* Mesh; // 0x318(0x08)
	bool bInFire; // 0x320(0x01)
	bool bHitOther; // 0x321(0x01)
	char pad_322[0x6]; // 0x322(0x06)
	struct UParticleSystemComponent* ClientWaterColumnEffectHandle; // 0x328(0x08)
	int32_t InstigatorEffectHandle; // 0x330(0x04)
	char pad_334[0x4]; // 0x334(0x04)
	struct UCameraShake* CameraShakeInstance; // 0x338(0x08)
	char pad_340[0x8]; // 0x340(0x08)
	struct UCrossHairWidget* CrossHairWidget; // 0x348(0x08)
	struct FGameplayEffectSpecHandle SlowDownEffectHandle; // 0x350(0x10)
	char pad_360[0x20]; // 0x360(0x20)
	struct FName LeftHandIKGripSocketName; // 0x380(0x08)
	struct FGameplayTag BigWaterGunOrnamentTag; // 0x388(0x08)

	void PlayNearlyEndSound(); // Function Solarland.BigWaterGun.PlayNearlyEndSound // (Final|Native|Private) // @ game+0x1fb5e90
	void OnRep_InFire(); // Function Solarland.BigWaterGun.OnRep_InFire // (Final|Native|Private) // @ game+0x1fb5e70
	void OnRep_HitOther(); // Function Solarland.BigWaterGun.OnRep_HitOther // (Final|Native|Private) // @ game+0x1fb5e50
	void OnMontageNotifyCallBack(struct FName NotifyName, struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload); // Function Solarland.BigWaterGun.OnMontageNotifyCallBack // (Final|Native|Private|HasOutParms) // @ game+0x1fb5d60
};

// Class Solarland.SpawnerInGuide
// Size: 0x278 (Inherited: 0x228)
struct ASpawnerInGuide : AActor {
	int32_t BotAISpawnerId; // 0x228(0x04)
	int32_t BotAICharacterId; // 0x22c(0x04)
	int32_t TeamID; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
	struct FString AIName; // 0x238(0x10)
	bool bSpawnDeathBox; // 0x248(0x01)
	bool bSpawnBeginPlay; // 0x249(0x01)
	char pad_24A[0x2]; // 0x24a(0x02)
	float DelaySec; // 0x24c(0x04)
	struct FVector SpawnLocationOffset; // 0x250(0x0c)
	char pad_25C[0x4]; // 0x25c(0x04)
	struct ASolarBotAIController* BotAIControllerClass; // 0x260(0x08)
	char pad_268[0x10]; // 0x268(0x10)

	struct ASolarBotAIController* SpawnBotAI(); // Function Solarland.SpawnerInGuide.SpawnBotAI // (Final|Native|Public|BlueprintCallable) // @ game+0x228d130
	void SetBotAIConfig(struct ASolarBotAIController* Ctrl); // Function Solarland.SpawnerInGuide.SetBotAIConfig // (Native|Public) // @ game+0x2244230
	struct ASolarBotAIController* GetSpawnedAIController(); // Function Solarland.SpawnerInGuide.GetSpawnedAIController // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x228bfa0
};

// Class Solarland.BotAISpawnerInGuide
// Size: 0x2b8 (Inherited: 0x278)
struct ABotAISpawnerInGuide : ASpawnerInGuide {
	struct UBehaviorTree* BehaviorTree; // 0x278(0x08)
	struct TArray<struct FDeathBoxItemData> DeathBoxItems; // 0x280(0x10)
	int32_t BotDefaultWeaponId; // 0x290(0x04)
	uint32_t BotShootDisperse; // 0x294(0x04)
	float HitRate; // 0x298(0x04)
	float ActiveDamageRate; // 0x29c(0x04)
	float NoDamageLeftHP; // 0x2a0(0x04)
	float BotAttackRange; // 0x2a4(0x04)
	struct FVector MoveTarget; // 0x2a8(0x0c)
	char pad_2B4[0x4]; // 0x2b4(0x04)
};

// Class Solarland.BTDecorator_BlackboardDelay
// Size: 0xc8 (Inherited: 0xc0)
struct UBTDecorator_BlackboardDelay : UBTDecorator_Blackboard {
	float DelaySeconds; // 0xc0(0x04)
	bool bOnlyDelayLowerPri; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
};

// Class Solarland.BTDecorator_TickFlow
// Size: 0x98 (Inherited: 0x90)
struct UBTDecorator_TickFlow : UBTDecorator_BlackboardBase {
	float TickInterval; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class Solarland.BTDecorator_BotAttributeCompare
// Size: 0xa8 (Inherited: 0x98)
struct UBTDecorator_BotAttributeCompare : UBTDecorator_TickFlow {
	enum class EBotAttrType AttrType; // 0x98(0x01)
	enum class EBotAttrValueType ValueType; // 0x99(0x01)
	enum class EBotAttrOperator Operator; // 0x9a(0x01)
	char pad_9B[0x1]; // 0x9b(0x01)
	float CompareValue; // 0x9c(0x04)
	bool bCheckVehicle; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	float EqualThreshold; // 0xa4(0x04)
};

// Class Solarland.BTDecorator_BotCheck
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheck : UBTDecorator_TickFlow {
	enum class EBotCheckCondition Condition; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.BTDecorator_BotCheckAIServer
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheckAIServer : UBTDecorator_TickFlow {
	enum class EBotCheckAIServer Action; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.BTDecorator_BotCheckGameplayTags
// Size: 0xb8 (Inherited: 0x98)
struct UBTDecorator_BotCheckGameplayTags : UBTDecorator_TickFlow {
	struct FGameplayTagContainer AbilityTags; // 0x98(0x20)
};

// Class Solarland.BTDecorator_BotCheckInEffectArea
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheckInEffectArea : UBTDecorator_TickFlow {
	enum class EPerceivableEffectAreaType CheckInAreaType; // 0x98(0x01)
	bool bCheckAreaTendency; // 0x99(0x01)
	enum class EPerceivableEffectAreaTendency AreaTendency; // 0x9a(0x01)
	char pad_9B[0x5]; // 0x9b(0x05)
};

// Class Solarland.BTDecorator_BotCheckNgaiMLAction
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheckNgaiMLAction : UBTDecorator_TickFlow {
	enum class EBotCheckNgaiMLAction Action; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.BTDecorator_BotCheckRoleAbility
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_BotCheckRoleAbility : UBTDecorator {
	struct FGameplayTag AbilityTag; // 0x68(0x08)
};

// Class Solarland.BTDecorator_BotCheckShieldUpgradeItem
// Size: 0x68 (Inherited: 0x68)
struct UBTDecorator_BotCheckShieldUpgradeItem : UBTDecorator {
};

// Class Solarland.BTDecorator_BotCheckState
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheckState : UBTDecorator_TickFlow {
	enum class EBotCheckState CheckState; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.BTDecorator_BotCheckTeamMemberState
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheckTeamMemberState : UBTDecorator_TickFlow {
	enum class ESolarBotMemberState CheckState; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.BTDecorator_BotCheckWeaponType
// Size: 0x98 (Inherited: 0x90)
struct UBTDecorator_BotCheckWeaponType : UBTDecorator_BlackboardBase {
	enum class EWeaponType WeaponType; // 0x90(0x01)
	bool bCheckById; // 0x91(0x01)
	char pad_92[0x2]; // 0x92(0x02)
	int32_t weaponid; // 0x94(0x04)
};

// Class Solarland.BTDecorator_BotWasRecentlyDetectArea
// Size: 0xb0 (Inherited: 0x98)
struct UBTDecorator_BotWasRecentlyDetectArea : UBTDecorator_TickFlow {
	float TimeThresholdMax; // 0x98(0x04)
	float TimeThresholdMin; // 0x9c(0x04)
	float TimeThresholdMinDeviation; // 0xa0(0x04)
	bool bSpecifyAreaType; // 0xa4(0x01)
	enum class EPerceivableEffectAreaType SpecifiedAreaType; // 0xa5(0x01)
	bool bSpecifyAreaTendency; // 0xa6(0x01)
	enum class EPerceivableEffectAreaTendency SpecifiedAreaTendency; // 0xa7(0x01)
	float MinInfluenceValue; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Solarland.BTDecorator_BotWasRecentlyHit
// Size: 0xb0 (Inherited: 0x98)
struct UBTDecorator_BotWasRecentlyHit : UBTDecorator_TickFlow {
	float TimeThresholdMax; // 0x98(0x04)
	bool bIncludeHearingHit; // 0x9c(0x01)
	bool bTriggerDelay; // 0x9d(0x01)
	char pad_9E[0x2]; // 0x9e(0x02)
	float TriggerDelaySeconds; // 0xa0(0x04)
	float TriggerDelaySecondsDeviation; // 0xa4(0x04)
	float TriggerExpiredSeconds; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Solarland.BTDecorator_CheckGetOnPlayerVehicle
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_CheckGetOnPlayerVehicle : UBTDecorator_TickFlow {
	float AcceptableRadius; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.BTDecorator_CheckTagState
// Size: 0xc8 (Inherited: 0xc0)
struct UBTDecorator_CheckTagState : UBTDecorator_Blackboard {
	struct FGameplayTag CheckStateTag; // 0xc0(0x08)
};

// Class Solarland.BTDecorator_DistanceCompare
// Size: 0x128 (Inherited: 0x98)
struct UBTDecorator_DistanceCompare : UBTDecorator_TickFlow {
	enum class EDistanceComparison Operator; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct FBlackboardKeySelector BlackboardKeyFrom; // 0xa0(0x28)
	struct FBlackboardKeySelector BlackboardKeyTo; // 0xc8(0x28)
	float DistanceToCompare; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct FBlackboardKeySelector BBK_DistanceToCompare; // 0xf8(0x28)
	bool bDistance2D; // 0x120(0x01)
	char pad_121[0x3]; // 0x121(0x03)
	float EqualThreshold; // 0x124(0x04)
};

// Class Solarland.BTDecorator_TimeLimitRand
// Size: 0x78 (Inherited: 0x70)
struct UBTDecorator_TimeLimitRand : UBTDecorator_TimeLimit {
	float RandDeviation; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class Solarland.BTDecorator_VehicleCheck
// Size: 0xa8 (Inherited: 0x98)
struct UBTDecorator_VehicleCheck : UBTDecorator_TickFlow {
	struct TArray<int32_t> VehicleIDs; // 0x98(0x10)
};

// Class Solarland.BuffEffectActorGroupVO
// Size: 0xd8 (Inherited: 0x28)
struct UBuffEffectActorGroupVO : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TMap<struct FName, struct FBuffEffectActorElemList> InstantActorListMap; // 0x30(0x50)
	char pad_80[0x8]; // 0x80(0x08)
	struct TMap<struct FName, struct UBuffEffectActorElem*> DurationActorMap; // 0x88(0x50)
};

// Class Solarland.BuffEffectVO
// Size: 0x40 (Inherited: 0x28)
struct UBuffEffectVO : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class Solarland.BuffEffectActorVO
// Size: 0x58 (Inherited: 0x40)
struct UBuffEffectActorVO : UBuffEffectVO {
	char pad_40[0x18]; // 0x40(0x18)
};

// Class Solarland.BuffEffectActorElem
// Size: 0x40 (Inherited: 0x28)
struct UBuffEffectActorElem : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class Solarland.BuffEffectLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBuffEffectLibrary : UBlueprintFunctionLibrary {

	void StopScreenEffect(struct UObject* WorldContextObject, int32_t InHandle); // Function Solarland.BuffEffectLibrary.StopScreenEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fb6170
	void StopActorEffect(struct UObject* WorldContextObject, int32_t InHandle); // Function Solarland.BuffEffectLibrary.StopActorEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fb60b0
	int32_t StartScreenEffect(struct UObject* WorldContextObject, struct FString RowName); // Function Solarland.BuffEffectLibrary.StartScreenEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fb5fd0
	int32_t StartActorEffect(struct UObject* WorldContextObject, struct FString RowName, struct USceneComponent* AttachToComponent); // Function Solarland.BuffEffectLibrary.StartActorEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fb5eb0
	struct TArray<struct UParticleSystemComponent*> GetActorEffectPSComponents(struct UObject* WorldContextObject, int32_t InHandle); // Function Solarland.BuffEffectLibrary.GetActorEffectPSComponents // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fb5c50
};

// Class Solarland.BuffEffectScreenPanel
// Size: 0x4f8 (Inherited: 0x348)
struct UBuffEffectScreenPanel : USolarUserWidget {
	char pad_348[0x10]; // 0x348(0x10)
	struct UCanvasPanel* LayerDurationGroup; // 0x358(0x08)
	struct UCanvasPanel* LayerDurationTwoSidePart; // 0x360(0x08)
	struct UCanvasPanel* LayerDurationBottomHalfPart; // 0x368(0x08)
	struct UCanvasPanel* LayerDurationBorderPart; // 0x370(0x08)
	struct UCanvasPanel* LayerDurationTopHalfPart; // 0x378(0x08)
	struct UCanvasPanel* LayerDurationFullPart; // 0x380(0x08)
	struct UCanvasPanel* LayerInstantGroup; // 0x388(0x08)
	struct UCanvasPanel* LayerInstantTwoSidePart; // 0x390(0x08)
	struct UCanvasPanel* LayerInstantBottomHalfPart; // 0x398(0x08)
	struct UCanvasPanel* LayerInstantBorderPart; // 0x3a0(0x08)
	struct UCanvasPanel* LayerInstantTopHalfPart; // 0x3a8(0x08)
	struct UCanvasPanel* LayerInstantFullPart; // 0x3b0(0x08)
	char pad_3B8[0xa0]; // 0x3b8(0xa0)
	struct TMap<int32_t, struct USolarScreenEffectWidget*> HandleToWidget; // 0x458(0x50)
	struct TMap<struct USolarScreenEffectWidget*, struct FScreenEffectWidgetCacheInfo> WidgetsCanBeReused; // 0x4a8(0x50)
};

// Class Solarland.BuffEffectSubsystem
// Size: 0x220 (Inherited: 0x30)
struct UBuffEffectSubsystem : UWorldSubsystem {
	char pad_30[0x10]; // 0x30(0x10)
	struct TMap<uint32_t, struct UBuffEffectActorGroupVO*> BuffEffectActorGroupMap; // 0x40(0x50)
	struct TMap<uint32_t, struct UBuffEffectActorElem*> BuffEffectActorElemMap; // 0x90(0x50)
	struct TMap<int32_t, struct UBuffEffectActorVO*> BuffEffectActorHandleMap; // 0xe0(0x50)
	struct TMap<enum class EBuffEffectTagType, struct FScreenEffectGroup> ScreenEffectGroups; // 0x130(0x50)
	char pad_180[0xa0]; // 0x180(0xa0)

	void StopScreenEffect(int32_t InHandle); // Function Solarland.BuffEffectSubsystem.StopScreenEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x1fbb410
	void StopActorEffect(int32_t InHandle); // Function Solarland.BuffEffectSubsystem.StopActorEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x1fbb380
	int32_t StartScreenEffectSafe(struct FName& RowName); // Function Solarland.BuffEffectSubsystem.StartScreenEffectSafe // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1fbb2e0
	int32_t StartScreenEffect(struct FString RowName); // Function Solarland.BuffEffectSubsystem.StartScreenEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x1fbb230
	int32_t StartActorEffectSafe(struct FName& RowName, struct USceneComponent* AttachToComponent); // Function Solarland.BuffEffectSubsystem.StartActorEffectSafe // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1fbb140
	int32_t StartActorEffect(struct FString RowName, struct USceneComponent* AttachToComponent); // Function Solarland.BuffEffectSubsystem.StartActorEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x1fbb050
	void OnPSCompFinish(struct UParticleSystemComponent* PSComponent); // Function Solarland.BuffEffectSubsystem.OnPSCompFinish // (Final|Native|Private) // @ game+0x1fbae20
	struct TArray<struct UParticleSystemComponent*> GetActorEffectPSComponents(int32_t InHandle); // Function Solarland.BuffEffectSubsystem.GetActorEffectPSComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x1fbaab0
};

// Class Solarland.CameraModifier_CameraShakeWithCurve
// Size: 0xb8 (Inherited: 0x48)
struct UCameraModifier_CameraShakeWithCurve : UCameraModifier {
	struct TMap<struct UCameraShakeWithCurve*, struct FCameraShakeWithCurvePool> ShakePoolByClass; // 0x48(0x50)
	struct TArray<struct FCameraShakeWithCurveTemplatePool> ShakePoolByTemplate; // 0x98(0x10)
	struct TArray<struct FActiveCameraShakeWithCurve> ActiveShakes; // 0xa8(0x10)
};

// Class Solarland.CameraShakeWithCurve
// Size: 0xe0 (Inherited: 0x28)
struct UCameraShakeWithCurve : UObject {
	bool bSingleInstance; // 0x28(0x01)
	bool bDisableObjectPool; // 0x29(0x01)
	char pad_2A[0x6]; // 0x2a(0x06)
	struct UCameraModifier_CameraShakeWithCurve* Modifier; // 0x30(0x08)
	float ShakeTime; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRuntimeFloatCurve ShakeCurve; // 0x40(0x88)
	struct TArray<struct UCameraShakeWithCurve_Element*> ShakeElements; // 0xc8(0x10)
	char pad_D8[0x8]; // 0xd8(0x08)
};

// Class Solarland.CameraShakeWithCurve_Element
// Size: 0x28 (Inherited: 0x28)
struct UCameraShakeWithCurve_Element : UObject {
};

// Class Solarland.CameraShakeWithCurve_Location
// Size: 0x60 (Inherited: 0x28)
struct UCameraShakeWithCurve_Location : UCameraShakeWithCurve_Element {
	struct FSymmetricRangeFloat XRange; // 0x28(0x0c)
	struct FSymmetricRangeFloat YRange; // 0x34(0x0c)
	struct FSymmetricRangeFloat ZRange; // 0x40(0x0c)
	bool bLocalSpace; // 0x4c(0x01)
	char pad_4D[0x13]; // 0x4d(0x13)
};

// Class Solarland.CameraShakeWithCurve_Rotation
// Size: 0x58 (Inherited: 0x28)
struct UCameraShakeWithCurve_Rotation : UCameraShakeWithCurve_Element {
	struct FSymmetricRangeFloat PitchRange; // 0x28(0x0c)
	struct FSymmetricRangeFloat YawRange; // 0x34(0x0c)
	struct FSymmetricRangeFloat RollRange; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Solarland.CameraShakeWithCurve_FOV
// Size: 0x38 (Inherited: 0x28)
struct UCameraShakeWithCurve_FOV : UCameraShakeWithCurve_Element {
	struct FRangeFloat FOVRange; // 0x28(0x08)
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.CapsuleFormationData
// Size: 0x90 (Inherited: 0x30)
struct UCapsuleFormationData : UDataAsset {
	struct TMap<char, struct FEchelonFormation> TeamFormation; // 0x30(0x50)
	struct FCruiseFormation CruiseFormation; // 0x80(0x10)

	void OverrideTeamFormation(struct TMap<char, struct FEchelonFormation>& InNewFormation); // Function Solarland.CapsuleFormationData.OverrideTeamFormation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1fbaeb0
	void ClearTeamFormationData(); // Function Solarland.CapsuleFormationData.ClearTeamFormationData // (Final|Native|Public|BlueprintCallable) // @ game+0x1fbaa90
	void ClearCruiseFormationData(); // Function Solarland.CapsuleFormationData.ClearCruiseFormationData // (Final|Native|Public|BlueprintCallable) // @ game+0x1fbaa50
	void AddTeamFormationLocation(char InEchelon, struct FVector& InLocation); // Function Solarland.CapsuleFormationData.AddTeamFormationLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1fba470
	void AddLocationToTeamFormation(struct TMap<char, struct FEchelonFormation>& InFormation, char InEchelon, struct FVector& InLocation); // Function Solarland.CapsuleFormationData.AddLocationToTeamFormation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1fba2e0
	void AddEchelonFormation(char InEchelon, struct FEchelonFormation& InFormation); // Function Solarland.CapsuleFormationData.AddEchelonFormation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1fba160
	void AddCruiseFormation(struct FCruiseFormation& InFormation); // Function Solarland.CapsuleFormationData.AddCruiseFormation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1fba0b0
};

// Class Solarland.CardView
// Size: 0x228 (Inherited: 0x138)
struct UCardView : UWidget {
	struct UUserWidget* EntryWidgetClass; // 0x138(0x08)
	struct FUserWidgetPool EntryWidgetPool; // 0x140(0x80)
	float CenterScale; // 0x1c0(0x04)
	float CenterOffset; // 0x1c4(0x04)
	float PageSpacing; // 0x1c8(0x04)
	float AlignmentPercent; // 0x1cc(0x04)
	enum class EOrientation Orientation; // 0x1d0(0x01)
	char pad_1D1[0x7]; // 0x1d1(0x07)
	struct TArray<struct UObject*> ListItems; // 0x1d8(0x10)
	char pad_1E8[0x10]; // 0x1e8(0x10)
	struct FMulticastInlineDelegate BP_OnItemClicked; // 0x1f8(0x10)
	struct FMulticastInlineDelegate BP_OnSelectedItemChanged; // 0x208(0x10)
	struct FMulticastInlineDelegate BP_OnSelectedIndexChanged; // 0x218(0x10)

	void SetListItems(struct TArray<struct UObject*>& InListItems); // Function Solarland.CardView.SetListItems // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1fba5a0
	void RemoveItem(struct UObject* InItem); // Function Solarland.CardView.RemoveItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x1fbafc0
	struct TArray<struct UObject*> GetListItems(); // Function Solarland.CardView.GetListItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fbac20
	struct TArray<struct UUserWidget*> GetDisplayedEntryWidgets(); // Function Solarland.CardView.GetDisplayedEntryWidgets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fbab90
	void ClearListItems(); // Function Solarland.CardView.ClearListItems // (Final|Native|Protected|BlueprintCallable) // @ game+0x1fbaa70
	void BP_SetSelectedItem(struct UObject* Item); // Function Solarland.CardView.BP_SetSelectedItem // (Final|Native|Private|BlueprintCallable) // @ game+0x1fba720
	void BP_SetSelectedIndex(int32_t Index, bool bFromFirst); // Function Solarland.CardView.BP_SetSelectedIndex // (Final|Native|Private|BlueprintCallable) // @ game+0x1fba650
	void BP_SetListItems(struct TArray<struct UObject*>& InListItems); // Function Solarland.CardView.BP_SetListItems // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x1fba5a0
	struct UObject* BP_GetSelectedItem(); // Function Solarland.CardView.BP_GetSelectedItem // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fba570
	int32_t BP_GetSelectedIndex(); // Function Solarland.CardView.BP_GetSelectedIndex // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fba540
	void AddItem(struct UObject* InItem); // Function Solarland.CardView.AddItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x1fba250
};

// Class Solarland.CardViewDesignerPreviewItem
// Size: 0x28 (Inherited: 0x28)
struct UCardViewDesignerPreviewItem : UObject {
};

// Class Solarland.CGCustomeBattleRoyaleComponent
// Size: 0xd8 (Inherited: 0xd0)
struct UCGCustomeBattleRoyaleComponent : UGameModeCompBase {
	char pad_D0[0x8]; // 0xd0(0x08)

	void ChangeEnvironmentTime(struct ASolarTimeLineManager* SolarTimeLineManager, int32_t DaylightChange); // Function Solarland.CGCustomeBattleRoyaleComponent.ChangeEnvironmentTime // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.CGFormula
// Size: 0x258 (Inherited: 0x228)
struct ACGFormula : AInfo {
	struct FKnockoutParams KnockoutParams; // 0x228(0x28)
	bool bInitKnockParams; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)

	struct TArray<struct FString> MakeStringForLuaByAnyStruct(struct UObject* AnyStruct); // Function Solarland.CGFormula.MakeStringForLuaByAnyStruct // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fbad10
	bool IsSettlementBagItem(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.IsSettlementBagItem // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void InitKnockoutPointParams(struct FKnockoutParams& InParams); // Function Solarland.CGFormula.InitKnockoutPointParams // (Final|Native|Public|HasOutParms) // @ game+0x1fbac50
	int32_t GetZomborg(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetZomborg // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x25d85b0
	void GetWeeklyChallenge(struct FString InSolarPlayerID, struct TArray<struct FString>& OutChallengeName, struct TArray<int32_t>& OutChallengeValue); // Function Solarland.CGFormula.GetWeeklyChallenge // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetWeaponExp(struct ASolarPlayerState* InPS, int32_t InWeaponID); // Function Solarland.CGFormula.GetWeaponExp // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void GetTeamScoreComparison(struct ASolarPlayerState* InPS, struct FString& OutTeamScore); // Function Solarland.CGFormula.GetTeamScoreComparison // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void GetStrategyGuideConditions(struct ASolarPlayerState* InPS, struct TArray<int32_t>& OutResult); // Function Solarland.CGFormula.GetStrategyGuideConditions // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void GetShowPageIndexs(struct ASolarPlayerState* InPS, struct FSettlePageParam& InParam, struct TArray<int32_t>& OutResult); // Function Solarland.CGFormula.GetShowPageIndexs // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<struct FSettlementReward> GetSettlementRewards(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetSettlementRewards // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<struct FString> GetPersonalResultPlayerExData(struct FString SolarPlayerID, struct FString& InPBName); // Function Solarland.CGFormula.GetPersonalResultPlayerExData // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	float GetKDA(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetKDA // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<struct FString> GetGroupResultPlayerExData(struct FString SolarPlayerID, struct FString& InPBName); // Function Solarland.CGFormula.GetGroupResultPlayerExData // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<struct FSettlementParam_ExtraRewardInfo> GetExtraRewards(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetExtraRewards // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetCombatCore(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetCombatCore // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void GetCharacterExp(struct ASolarPlayerState* InPS, int32_t& OutGetExp, struct TArray<int32_t>& OutReason); // Function Solarland.CGFormula.GetCharacterExp // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetAccountExp(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetAccountExp // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x25d85b0
	int32_t CalculateTeamRank(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.CalculateTeamRank // (Native|Event|Public|BlueprintEvent) // @ game+0x1fba9b0
	struct TArray<enum class ESCMPlayerPunishType> CalculatePunish(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.CalculatePunish // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t CalculatePlayerRank(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.CalculatePlayerRank // (Native|Event|Public|BlueprintEvent) // @ game+0x1fba910
	float CalculateMVPScore(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.CalculateMVPScore // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t CalculateKnockoutPoints(int32_t InTeamRank, int32_t InKillNum, float InTotalDamage, float InTotalDamageTaken); // Function Solarland.CGFormula.CalculateKnockoutPoints // (Final|Native|Public) // @ game+0x1fba7b0
};

// Class Solarland.SolarGameModeAIComponent
// Size: 0x160 (Inherited: 0xd0)
struct USolarGameModeAIComponent : UGameModeCompBase {
	char pad_D0[0x10]; // 0xd0(0x10)
	struct ASolarBotAIController* BotAIControllerClass; // 0xe0(0x08)
	struct ASolarAIControllerBase* OfflinePlayerAIControllerClass; // 0xe8(0x08)
	struct ASolarGameMode* GameModeOwner; // 0xf0(0x08)
	bool bEnableIrisAIStrategy; // 0xf8(0x01)
	bool bEnableMLSetting; // 0xf9(0x01)
	bool bPreserveBotOnMatchStart; // 0xfa(0x01)
	char pad_FB[0x5]; // 0xfb(0x05)
	struct USolarBotAITeamManager* BotTeamManagerClass; // 0x100(0x08)
	struct USolarPreservedBotManager* BotPreservedManagerClass; // 0x108(0x08)
	struct USolarBotAIWarmServiceSystem* BotWarmServiceSystemClass; // 0x110(0x08)
	struct USolarBotTimelineSystem* BotTimelineSystemClass; // 0x118(0x08)
	int32_t MaxNumPreservedBots; // 0x120(0x04)
	float MaxRatioPreservedBots; // 0x124(0x04)
	char pad_128[0x10]; // 0x128(0x10)
	struct USolarBotAITeamManager* BotTeamManager; // 0x138(0x08)
	struct USolarPreservedBotManager* BotPreservedManager; // 0x140(0x08)
	struct USolarBotAIWarmServiceSystem* BotWarmServiceSystem; // 0x148(0x08)
	struct USolarBotTimelineSystem* BotTimelineSystem; // 0x150(0x08)
	bool bInitBotByTeamPreset; // 0x158(0x01)
	bool bCanBotTeamRebirth; // 0x159(0x01)
	bool bCanPlayerTeamRebirth; // 0x15a(0x01)
	bool bCanBotTeamBuyRescue; // 0x15b(0x01)
	bool bCanPlayerTeamBuyRescue; // 0x15c(0x01)
	char pad_15D[0x3]; // 0x15d(0x03)

	bool PreserveBot(struct ASolarBotAIController* InBotController, struct FVector& InPreservedLocation); // Function Solarland.SolarGameModeAIComponent.PreserveBot // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20e7780
	bool PopPreservedBot(struct ASolarBotAIController*& OutController, struct FVector& OutTeleportLocation, struct ASolarBotAIController* InSpecificController); // Function Solarland.SolarGameModeAIComponent.PopPreservedBot // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20e7580
	void OnAcquiredIrisAIFeedStrategy(struct TArray<struct FFeedBotStrategyInfo>& StrategyInfos); // Function Solarland.SolarGameModeAIComponent.OnAcquiredIrisAIFeedStrategy // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void GetDeathBoxExtraStuff(struct ASolarPlayerState* BotState, struct ASolarPlayerState* PlayerState, struct TMap<int32_t, int32_t>& Stuff); // Function Solarland.SolarGameModeAIComponent.GetDeathBoxExtraStuff // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x20e6c70
};

// Class Solarland.CGMAIComponent
// Size: 0x160 (Inherited: 0x160)
struct UCGMAIComponent : USolarGameModeAIComponent {
};

// Class Solarland.CGMCrossLevelDataMgr
// Size: 0x78 (Inherited: 0x28)
struct UCGMCrossLevelDataMgr : UObject {
	struct TMap<struct FString, struct UObject*> CrossLevelData; // 0x28(0x50)

	void RegistryCrossLevelData(struct FString InSoltName, struct UObject* InDataObj); // Function Solarland.CGMCrossLevelDataMgr.RegistryCrossLevelData // (Final|Native|Public|BlueprintCallable) // @ game+0x1fbeef0
	struct UObject* GetCrossLevelData(struct FString InSoltName); // Function Solarland.CGMCrossLevelDataMgr.GetCrossLevelData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fbe6e0
};

// Class Solarland.CustomGameModeComponent
// Size: 0xd0 (Inherited: 0xd0)
struct UCustomGameModeComponent : UGameModeCompBase {
};

// Class Solarland.CGMDataComponent
// Size: 0xe8 (Inherited: 0xd0)
struct UCGMDataComponent : UCustomGameModeComponent {
	struct AGameDataManager* DataManager; // 0xd0(0x08)
	struct UDataTable* DataTable; // 0xd8(0x08)
	float ConfigRepDeltaTime; // 0xe0(0x04)
	float ConfigRepMaxNum; // 0xe4(0x04)
};

// Class Solarland.CGMDeathComponent
// Size: 0xd0 (Inherited: 0xd0)
struct UCGMDeathComponent : UCustomGameModeComponent {

	void ReceivePlayerResurrect(struct ASolarCharacter* ResurrectCharacter, struct ASCMPlayerState* ResurrectPlayer); // Function Solarland.CGMDeathComponent.ReceivePlayerResurrect // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerKill(struct ASCMPlayerState* Killer, struct ASCMPlayerState* Killed, struct TArray<struct ASCMPlayerState*>& Assists, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.CGMDeathComponent.ReceivePlayerKill // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerDeathVerge(struct ASCMPlayerState* InAttacker, struct ASCMPlayerState* InDeathVergePlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.CGMDeathComponent.ReceivePlayerDeathVerge // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.GameplayConfigBase
// Size: 0x38 (Inherited: 0x30)
struct UGameplayConfigBase : UDataAsset {
	struct UGameModeGlobalSetting* GameModeSettingTemplate; // 0x30(0x08)
};

// Class Solarland.CGMGameplayConfig
// Size: 0x278 (Inherited: 0x38)
struct UCGMGameplayConfig : UGameplayConfigBase {
	struct ACGFormula* Formula; // 0x38(0x08)
	struct USettlementPageConfig* SettlePageConfig; // 0x40(0x08)
	struct TMap<struct FString, struct FSCMMapConfig> MapConfig; // 0x48(0x50)
	struct FDataManagerConfig DataManagerConfig; // 0x98(0x10)
	struct FJobManagerConfig JobConfig; // 0xa8(0x08)
	bool EnableUltimateSkill; // 0xb0(0x01)
	enum class ERoleSkillOperation UltimateSkillStateOperationOnInit; // 0xb1(0x01)
	bool EnableTacticalSkill; // 0xb2(0x01)
	enum class ERoleSkillOperation TacticalSkillStateOperationOnInit; // 0xb3(0x01)
	int32_t AirDropSkillMode; // 0xb4(0x04)
	bool EnableWeaponUpgrade; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	int32_t InitInGamePlayerLevel; // 0xbc(0x04)
	bool EnablePlayerUpgrade; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
	struct FInGameLevelingConfig InGameLevelingConfig; // 0xc8(0x08)
	struct TArray<enum class ESolarTablesEnum_BattleUpgradeEffectType> CharacterDamageUpgradeTypes; // 0xd0(0x10)
	struct FExpItemConfig ExpItemConfig; // 0xe0(0x10)
	struct FExpItemReduceRate ExpItemReduceRateConfig; // 0xf0(0x08)
	struct FBoxBurstItemConfig BoxBurstItemConfig; // 0xf8(0x08)
	bool bIfShouldSpawnDeathBox; // 0x100(0x01)
	bool bIfSupportDeathverge; // 0x101(0x01)
	char pad_102[0x6]; // 0x102(0x06)
	struct TMap<int32_t, int32_t> DeathBoxEnergyLimitConfig; // 0x108(0x50)
	bool bAutoMarkDamagedEnemy; // 0x158(0x01)
	bool EnableSect; // 0x159(0x01)
	char pad_15A[0x6]; // 0x15a(0x06)
	struct FCustomRoomData CustomRoomData; // 0x160(0x78)
	bool bIsCustomRoomMode; // 0x1d8(0x01)
	bool bEnableTracking; // 0x1d9(0x01)
	char pad_1DA[0x2]; // 0x1da(0x02)
	float InitTrackingDelay; // 0x1dc(0x04)
	float TrackingTimeInterval; // 0x1e0(0x04)
	float DefaultTrackMaxRevealDistance; // 0x1e4(0x04)
	float TrackReplaceDistance; // 0x1e8(0x04)
	float MinRevealDistance; // 0x1ec(0x04)
	float TrackTimeout; // 0x1f0(0x04)
	int32_t MaxTrackNum; // 0x1f4(0x04)
	struct FFinalsBGMData FinalsBGMData; // 0x1f8(0x28)
	bool bEnableSkydivingTrail; // 0x220(0x01)
	char pad_221[0x7]; // 0x221(0x07)
	struct TSoftClassPtr<UObject> FlyTrailClass; // 0x228(0x28)
	struct TSoftClassPtr<UObject> DebugTrailEffectClass; // 0x250(0x28)

	bool IsEnableSect(); // Function Solarland.CGMGameplayConfig.IsEnableSect // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fbec90
	bool IsCustomRoomMode(); // Function Solarland.CGMGameplayConfig.IsCustomRoomMode // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0xc74050
	int32_t GetRequiredExpForLevel(int32_t InLevel); // Function Solarland.CGMGameplayConfig.GetRequiredExpForLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fbeb50
	int32_t GetMaxShieldMatCountToDeathbox(int32_t InLevel); // Function Solarland.CGMGameplayConfig.GetMaxShieldMatCountToDeathbox // (Final|Native|Public|Const) // @ game+0x1fbeab0
	int32_t GetMaxInGameLevel(); // Function Solarland.CGMGameplayConfig.GetMaxInGameLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fbea80
	float GetExpItemReduceRate(int32_t DeathCount); // Function Solarland.CGMGameplayConfig.GetExpItemReduceRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fbe9e0
	int32_t GetExpItemCountByLevel(int32_t InLevel, int32_t InLevelGap); // Function Solarland.CGMGameplayConfig.GetExpItemCountByLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fbe910
	struct FCustomRoomData GetCustomRoomData(); // Function Solarland.CGMGameplayConfig.GetCustomRoomData // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1fbe790
	struct TArray<int32_t> GetBurstItemSplitPiles(int32_t ItemID); // Function Solarland.CGMGameplayConfig.GetBurstItemSplitPiles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fbe600
	struct TArray<float> GetBurstItemModelScale(int32_t ItemID); // Function Solarland.CGMGameplayConfig.GetBurstItemModelScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fbe520
	int32_t GetBurstItemMaxPileNum(int32_t ItemID); // Function Solarland.CGMGameplayConfig.GetBurstItemMaxPileNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fbe480
	struct TArray<int32_t> GetBurstItemIDs(); // Function Solarland.CGMGameplayConfig.GetBurstItemIDs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fbe400
};

// Class Solarland.CGMLogicComponent
// Size: 0x138 (Inherited: 0xd0)
struct UCGMLogicComponent : UCustomGameModeComponent {
	float TimeOutSeconds; // 0xd0(0x04)
	char pad_D4[0x64]; // 0xd4(0x64)

	void ReceiveSpectatorJoinData(struct ASCMPlayerState* Player); // Function Solarland.CGMLogicComponent.ReceiveSpectatorJoinData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveServerLevelLoaded(struct FString LevelName); // Function Solarland.CGMLogicComponent.ReceiveServerLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool ReceivePlayerTeamPreJoinRequest(struct TArray<struct ASCMPlayerState*>& PreJoinPlayers, int32_t TeamID); // Function Solarland.CGMLogicComponent.ReceivePlayerTeamPreJoinRequest // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1fbedf0
	bool ReceivePlayerReJoinRequest(struct FString PlayerId, struct FString& ErrorMsg); // Function Solarland.CGMLogicComponent.ReceivePlayerReJoinRequest // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1fbecd0
	void ReceivePlayerReJoin(struct ASCMPlayerState* NewPlayer); // Function Solarland.CGMLogicComponent.ReceivePlayerReJoin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerPreLogin(struct FString PlayerId, struct ASCMPlayerState* OfflinePlayer, struct FString& ErrorMsg); // Function Solarland.CGMLogicComponent.ReceivePlayerPreLogin // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerNonSpectatorJoinData(struct ASCMPlayerState* Player); // Function Solarland.CGMLogicComponent.ReceivePlayerNonSpectatorJoinData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerLevelLoaded(struct ASCMPlayerController* Player, struct FString LevelName); // Function Solarland.CGMLogicComponent.ReceivePlayerLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerJoinData(struct FString PlayerId); // Function Solarland.CGMLogicComponent.ReceivePlayerJoinData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerJoinBattle(struct ASCMPlayerState* NewPlayer, bool IsAI); // Function Solarland.CGMLogicComponent.ReceivePlayerJoinBattle // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerJoin(struct ASCMPlayerState* NewPlayer, bool IsAI); // Function Solarland.CGMLogicComponent.ReceivePlayerJoin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerCancelJoin(struct FString PlayerId); // Function Solarland.CGMLogicComponent.ReceivePlayerCancelJoin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerBattleEnd(struct ASCMPlayerState* Player, enum class ESCMPlayerOutType OutType); // Function Solarland.CGMLogicComponent.ReceivePlayerBattleEnd // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveOBPlayersChanged(); // Function Solarland.CGMLogicComponent.ReceiveOBPlayersChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveGameModeInit(); // Function Solarland.CGMLogicComponent.ReceiveGameModeInit // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveBattleTick(float BattleTime, float DeltaTime); // Function Solarland.CGMLogicComponent.ReceiveBattleTick // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveBattleEnd(); // Function Solarland.CGMLogicComponent.ReceiveBattleEnd // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveBattleBegin(); // Function Solarland.CGMLogicComponent.ReceiveBattleBegin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnStartBattle(); // Function Solarland.CGMLogicComponent.OnStartBattle // (Final|Native|Public|BlueprintCallable) // @ game+0x1fbecb0
	void OnPlayerSettled(struct ASCMPlayerState* Player); // Function Solarland.CGMLogicComponent.OnPlayerSettled // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerReconnect(struct ASCMPlayerState* Player); // Function Solarland.CGMLogicComponent.OnPlayerReconnect // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerOfflineTimeOut(struct ASCMPlayerState* OfflineTimeoutPlayer); // Function Solarland.CGMLogicComponent.OnPlayerOfflineTimeOut // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerGiveUp(struct ASCMPlayerState* OfflineTimeoutPlayer); // Function Solarland.CGMLogicComponent.OnPlayerGiveUp // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerDisconnect(struct ASCMPlayerState* OfflinePlayer); // Function Solarland.CGMLogicComponent.OnPlayerDisconnect // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerCheat(struct ASCMPlayerState* CheatPlayer); // Function Solarland.CGMLogicComponent.OnPlayerCheat // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerAbnormal(struct ASCMPlayerState* CheatPlayer); // Function Solarland.CGMLogicComponent.OnPlayerAbnormal // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnMatchEnd(int32_t RPCID); // Function Solarland.CGMLogicComponent.OnMatchEnd // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnDSClose(); // Function Solarland.CGMLogicComponent.OnDSClose // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnBotAIDataReady(int32_t AICount); // Function Solarland.CGMLogicComponent.OnBotAIDataReady // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool IsAllowReconnectGame(struct ASCMPlayerState* InPC); // Function Solarland.CGMLogicComponent.IsAllowReconnectGame // (Native|Event|Public|BlueprintEvent) // @ game+0x1fbebf0
};

// Class Solarland.SolarGameplayConfigComponent
// Size: 0xd8 (Inherited: 0xb0)
struct USolarGameplayConfigComponent : UActorComponent {
	bool EnableTestGameplayConfig; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct UGameplayConfigBase* CGMConfig; // 0xb8(0x08)
	struct UGameplayConfigBase* TestCGMConfig; // 0xc0(0x08)
	struct UGameplayConfigBase* InstGameplayConfig; // 0xc8(0x08)
	struct UGameplayConfigBase* InstTestGameplayConfig; // 0xd0(0x08)

	struct UGameplayConfigBase* GetConfigs(); // Function Solarland.SolarGameplayConfigComponent.GetConfigs // (Native|Public|BlueprintCallable) // @ game+0x20f2460
};

// Class Solarland.CGMManagerConfigComponent
// Size: 0xd8 (Inherited: 0xd8)
struct UCGMManagerConfigComponent : USolarGameplayConfigComponent {
};

// Class Solarland.CGMMapInfo
// Size: 0x180 (Inherited: 0xd0)
struct UCGMMapInfo : UGameModeCompBase {
	struct TArray<struct FVector> AreaPosArray; // 0xd0(0x10)
	int32_t MapID; // 0xe0(0x04)
	int32_t UsedAirlineID; // 0xe4(0x04)
	struct FAirlineData UsedAirlineData; // 0xe8(0x28)
	char pad_110[0x10]; // 0x110(0x10)
	struct TMap<int32_t, struct FAirlineData> AirlineDataList; // 0x120(0x50)
	int32_t MaskWidth; // 0x170(0x04)
	float MaskScale; // 0x174(0x04)
	int32_t MapWidth; // 0x178(0x04)
	int32_t MapHeight; // 0x17c(0x04)

	void LoadAirlineData(); // Function Solarland.CGMMapInfo.LoadAirlineData // (Final|Native|Protected|BlueprintCallable) // @ game+0x1fc28b0
	void InitInfo(int32_t InMapID); // Function Solarland.CGMMapInfo.InitInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x1fc2820
	int32_t GetUsedAirlineData(struct FAirlineData& outData); // Function Solarland.CGMMapInfo.GetUsedAirlineData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fc2770
	int32_t GetMapIDByName(struct ASCustomGameState* InGameState, struct FString Name); // Function Solarland.CGMMapInfo.GetMapIDByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fc2640
};

// Class Solarland.CGMSettlementComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UCGMSettlementComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct USettlementPageConfig* PageConfig; // 0xb8(0x08)
	struct TArray<int32_t> PageIndexs; // 0xc0(0x10)
	bool IsCustomRoom; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)

	bool SkipToTarget(); // Function Solarland.CGMSettlementComponent.SkipToTarget // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	bool ShowNextStage(); // Function Solarland.CGMSettlementComponent.ShowNextStage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.ChaAT_AddSynchronizedForce
// Size: 0xe8 (Inherited: 0x80)
struct UChaAT_AddSynchronizedForce : UAbilityTask {
	char pad_80[0x68]; // 0x80(0x68)
};

// Class Solarland.ChaAT_AltitudeQuery
// Size: 0x130 (Inherited: 0x80)
struct UChaAT_AltitudeQuery : UAbilityTask {
	struct FMulticastInlineDelegate OnResponsed; // 0x80(0x10)
	char pad_90[0xa0]; // 0x90(0xa0)

	struct UChaAT_AltitudeQuery* StartSphereAltitudeQuery(struct UGameplayAbility* OwningAbility, float InAltitude, float Radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, bool bIgnoreSelf, bool bUsingAsyncQuery, bool bInTriggerOnce); // Function Solarland.ChaAT_AltitudeQuery.StartSphereAltitudeQuery // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable) // @ game+0x1fc3520
	struct UChaAT_AltitudeQuery* StartLineAltitudeQuery(struct UGameplayAbility* OwningAbility, float InAltitude, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, bool bIgnoreSelf, bool bUsingAsyncQuery, bool bInTriggerOnce); // Function Solarland.ChaAT_AltitudeQuery.StartLineAltitudeQuery // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable) // @ game+0x1fc3260
};

// Class Solarland.ChaAT_HighAlert
// Size: 0x150 (Inherited: 0x80)
struct UChaAT_HighAlert : USolarAbilityTask {
	struct FMulticastInlineDelegate OnHighAlertDelegate; // 0x80(0x10)
	char pad_90[0xc0]; // 0x90(0xc0)
};

// Class Solarland.ChaAT_LimitCameraOnStickingOutOfVehicle
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_LimitCameraOnStickingOutOfVehicle : USolarAbilityTask {
	char pad_80[0x20]; // 0x80(0x20)

	struct UChaAT_LimitCameraOnStickingOutOfVehicle* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_LimitCameraOnStickingOutOfVehicle.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fc18c0
};

// Class Solarland.ChaAT_ListenChaTakeDamage
// Size: 0x90 (Inherited: 0x80)
struct UChaAT_ListenChaTakeDamage : UAbilityTask {
	struct FMulticastInlineDelegate OnTakeDamageDelegate; // 0x80(0x10)

	void OnCharacterTakeDamage(struct ASolarCharacter* Character, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaAT_ListenChaTakeDamage.OnCharacterTakeDamage // (Final|Native|Private|HasOutParms) // @ game+0x1fc28d0
	struct UChaAT_ListenChaTakeDamage* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_ListenChaTakeDamage.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fc1950
};

// Class Solarland.ChaAT_ListenScopeOpeningAction
// Size: 0x98 (Inherited: 0x80)
struct UChaAT_ListenScopeOpeningAction : USolarAbilityTask {
	struct UGameplayAbility* OwnerAbility; // 0x80(0x08)
	struct ASolarCharacter* TaskCharacter; // 0x88(0x08)
	char pad_90[0x8]; // 0x90(0x08)

	struct UChaAT_ListenScopeOpeningAction* CreateTask(struct UGameplayAbility* OwningAbility, struct ASolarCharacter* InCharacter, float MaxWaitTime); // Function Solarland.ChaAT_ListenScopeOpeningAction.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fc19e0
};

// Class Solarland.ChaAT_ListenSkydive
// Size: 0x90 (Inherited: 0x80)
struct UChaAT_ListenSkydive : USolarAbilityTask {
	char pad_80[0x10]; // 0x80(0x10)

	void OnSkydiveStageChanged(struct ASolarCharacter* InCharacter, enum class ESkydiveStage InOldStage, enum class ESkydiveStage InNewStage); // Function Solarland.ChaAT_ListenSkydive.OnSkydiveStageChanged // (Final|Native|Private) // @ game+0x1fc2d00
};

// Class Solarland.ChaAT_PlayMontageAndWaitForNotify
// Size: 0x118 (Inherited: 0x108)
struct UChaAT_PlayMontageAndWaitForNotify : UAbilityTask_PlayMontageAndWait {
	struct FMulticastInlineDelegate OnMontageNotify; // 0x108(0x10)

	void OnMontageNotifyCallBack(struct FName NotifyName, struct FBranchingPointNotifyPayload& BranchingPointPayload); // Function Solarland.ChaAT_PlayMontageAndWaitForNotify.OnMontageNotifyCallBack // (Final|Native|Private|HasOutParms) // @ game+0x1fc2c10
	struct UChaAT_PlayMontageAndWaitForNotify* CreateTask(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct UAnimMontage* InMontageToPlay, float InRate, struct FName InStartSection, bool bInStopWhenAbilityEnds, float InAnimRootMotionTranslationScale); // Function Solarland.ChaAT_PlayMontageAndWaitForNotify.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fc1af0
};

// Class Solarland.ChaAT_PlayMontageForMeshAndWaitForEvent
// Size: 0x150 (Inherited: 0x80)
struct UChaAT_PlayMontageForMeshAndWaitForEvent : UAbilityTask {
	struct FMulticastInlineDelegate OnCompleted; // 0x80(0x10)
	struct FMulticastInlineDelegate OnBlendOut; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xb0(0x10)
	struct FMulticastInlineDelegate EventReceived; // 0xc0(0x10)
	struct USkeletalMeshComponent* Mesh; // 0xd0(0x08)
	struct UAnimMontage* MontageToPlay; // 0xd8(0x08)
	struct FGameplayTagContainer EventTags; // 0xe0(0x20)
	float Rate; // 0x100(0x04)
	struct FName StartSection; // 0x104(0x08)
	float AnimRootMotionTranslationScale; // 0x10c(0x04)
	bool bStopWhenAbilityEnds; // 0x110(0x01)
	bool bReplicateMontage; // 0x111(0x01)
	char pad_112[0x2]; // 0x112(0x02)
	float OverrideBlendOutTimeForCancelAbility; // 0x114(0x04)
	float OverrideBlendOutTimeForStopWhenEndAbility; // 0x118(0x04)
	bool bInterruptedCalledBeforeBlendingOut; // 0x11c(0x01)
	char pad_11D[0x33]; // 0x11d(0x33)

	struct UChaAT_PlayMontageForMeshAndWaitForEvent* PlayMontageForMeshAndWaitForEvent(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct USkeletalMeshComponent* Mesh, struct UAnimMontage* MontageToPlay, float Rate, struct FName StartSection, bool bStopWhenAbilityEnds, float AnimRootMotionTranslationScale, bool bReplicateMontage, float OverrideBlendOutTimeForCancelAbility, float OverrideBlendOutTimeForStopWhenEndAbility); // Function Solarland.ChaAT_PlayMontageForMeshAndWaitForEvent.PlayMontageForMeshAndWaitForEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fc2f20
};

// Class Solarland.ChaAT_SkywardDiveTask
// Size: 0xb0 (Inherited: 0x80)
struct UChaAT_SkywardDiveTask : USolarAbilityTask {
	char pad_80[0x30]; // 0x80(0x30)

	struct UChaAT_SkywardDiveTask* CreateTask(struct UGameplayAbility* OwningAbility, struct FVector InLauncherLocation, int32_t InOccupyLaunchDeviceIndex); // Function Solarland.ChaAT_SkywardDiveTask.CreateTask // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1fc1d00
};

// Class Solarland.ChaAT_UpdateSkydiveTrail
// Size: 0x88 (Inherited: 0x80)
struct UChaAT_UpdateSkydiveTrail : USolarAbilityTask {
	char pad_80[0x8]; // 0x80(0x08)

	struct UChaAT_UpdateSkydiveTrail* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_UpdateSkydiveTrail.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fc1e20
};

// Class Solarland.ChaAT_UpdateZipline
// Size: 0xc0 (Inherited: 0x80)
struct UChaAT_UpdateZipline : USolarAbilityTask {
	char pad_80[0x40]; // 0x80(0x40)

	struct UChaAT_UpdateZipline* CreateTask(struct UGameplayAbility* OwningAbility, struct FVector& InStartLoc, struct FVector& InEndLoc, float InSpeed, float InCheckDis); // Function Solarland.ChaAT_UpdateZipline.CreateTask // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x1fc1eb0
};

// Class Solarland.ChaAT_WaitCharacterDeathEnd
// Size: 0x90 (Inherited: 0x80)
struct UChaAT_WaitCharacterDeathEnd : USolarAbilityTask {
	struct FMulticastInlineDelegate OnCharacterDeathEnd; // 0x80(0x10)

	struct UChaAT_WaitCharacterDeathEnd* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_WaitCharacterDeathEnd.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fc2080
};

// Class Solarland.ChaAT_WaitCharacterLaunchEnd
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitCharacterLaunchEnd : USolarAbilityTask {
	struct FMulticastInlineDelegate OnCharacterLaunchEnd; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	float MoveModeCheckDelayTime; // 0x9c(0x04)

	struct UChaAT_WaitCharacterLaunchEnd* CreateTask(struct UGameplayAbility* OwningAbility, float InWaitLaunchingTime); // Function Solarland.ChaAT_WaitCharacterLaunchEnd.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fc2110
};

// Class Solarland.ChaAT_WaitCharacterPostDeath
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitCharacterPostDeath : USolarAbilityTask {
	struct FMulticastInlineDelegate OnDestroyCharacterCorpse; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)

	struct UChaAT_WaitCharacterPostDeath* CreateTask(struct UGameplayAbility* OwningAbility, float InDestroyCorpseTime); // Function Solarland.ChaAT_WaitCharacterPostDeath.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fc21e0
};

// Class Solarland.ChaAT_WaitCharacterSprintCancel
// Size: 0x90 (Inherited: 0x80)
struct UChaAT_WaitCharacterSprintCancel : USolarAbilityTask {
	struct FMulticastInlineDelegate OnCharacterSprintCancel; // 0x80(0x10)

	struct UChaAT_WaitCharacterSprintCancel* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_WaitCharacterSprintCancel.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fc22b0
};

// Class Solarland.ChaAT_WaitControlRotationYawOutOfRange
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitControlRotationYawOutOfRange : UAbilityTask {
	char pad_80[0x20]; // 0x80(0x20)

	struct UChaAT_WaitControlRotationYawOutOfRange* CreateTask(struct UGameplayAbility* OwningAbility, float YawMin, float YawMax); // Function Solarland.ChaAT_WaitControlRotationYawOutOfRange.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fc2340
};

// Class Solarland.ChaAT_WaitDelay
// Size: 0x98 (Inherited: 0x80)
struct UChaAT_WaitDelay : UAbilityTask {
	struct FMulticastInlineDelegate OnFinish; // 0x80(0x10)
	char pad_90[0x8]; // 0x90(0x08)

	struct UChaAT_WaitDelay* WaitDelay(struct UGameplayAbility* OwningAbility, float Time); // Function Solarland.ChaAT_WaitDelay.WaitDelay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fc3820
};

// Class Solarland.ChaAT_WaitLandingSpot
// Size: 0xc0 (Inherited: 0x80)
struct UChaAT_WaitLandingSpot : UAbilityTask {
	char pad_80[0x40]; // 0x80(0x40)
};

// Class Solarland.ChaAT_WaitOverlapEx
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitOverlapEx : UAbilityTask {
	struct FMulticastInlineDelegate OnOverLap; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)

	struct UChaAT_WaitOverlapEx* WaitForOverlap(struct UGameplayAbility* OwningAbility, struct TArray<struct AActor*> InIgnoreClasses); // Function Solarland.ChaAT_WaitOverlapEx.WaitForOverlap // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fc38f0
	void OnHitCallback(struct UPrimitiveComponent* HitComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.ChaAT_WaitOverlapEx.OnHitCallback // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1fc2a30
};

// Class Solarland.ChaAT_WaitVehicleWeakPointRepairingEnd
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitVehicleWeakPointRepairingEnd : USolarAbilityTask {
	char pad_80[0x8]; // 0x80(0x08)
	struct FMulticastInlineDelegate OnVehicleWeakPointRepairingEnd; // 0x88(0x10)
	char pad_98[0x8]; // 0x98(0x08)

	struct UChaAT_WaitVehicleWeakPointRepairingEnd* CreateTask(struct UGameplayAbility* OwningAbility, struct FVehicleWeakPointSpec& RepairingVehicleWeakPoint); // Function Solarland.ChaAT_WaitVehicleWeakPointRepairingEnd.CreateTask // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1fc2440
};

// Class Solarland.SolarGameplayAbility
// Size: 0x418 (Inherited: 0x400)
struct USolarGameplayAbility : UGameplayAbility {
	bool bTryActivateWhenGranted; // 0x400(0x01)
	enum class ESolarGAInputID InputID; // 0x401(0x01)
	bool bAllowReconnection; // 0x402(0x01)
	bool bActiveOnPress; // 0x403(0x01)
	char pad_404[0x4]; // 0x404(0x04)
	struct TArray<struct FAbilityMeshMontage> CurrentAbilityMeshMontages; // 0x408(0x10)

	void RemoveGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SolarGameplayAbility.RemoveGameplayCueLocal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20f3e50
	void ReceivingGiven(struct FGameplayAbilityActorInfo& ActorInfo, struct FGameplayAbilitySpec& Spec); // Function Solarland.SolarGameplayAbility.ReceivingGiven // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	bool OnLevelUp(int32_t OldLevel, struct FGameplayAbilitySpec& Spec); // Function Solarland.SolarGameplayAbility.OnLevelUp // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x20f3b90
	void MontageStopForMesh(struct USkeletalMeshComponent* InMesh, float OverrideBlendOutTime); // Function Solarland.SolarGameplayAbility.MontageStopForMesh // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f3ac0
	void MontageStopForAllMeshes(float OverrideBlendOutTime); // Function Solarland.SolarGameplayAbility.MontageStopForAllMeshes // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f3a40
	void MontageSetNextSectionNameForMesh(struct USkeletalMeshComponent* InMesh, struct FName FromSectionName, struct FName ToSectionName); // Function Solarland.SolarGameplayAbility.MontageSetNextSectionNameForMesh // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f3930
	void MontageJumpToSectionForMesh(struct USkeletalMeshComponent* InMesh, struct FName SectionName); // Function Solarland.SolarGameplayAbility.MontageJumpToSectionForMesh // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f3860
	int32_t GetDefaultGrantedLevel(struct AActor* InOwner, struct AActor* InAvatar); // Function Solarland.SolarGameplayAbility.GetDefaultGrantedLevel // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x20f2530
	struct UAnimMontage* GetCurrentMontageForMesh(struct USkeletalMeshComponent* InMesh); // Function Solarland.SolarGameplayAbility.GetCurrentMontageForMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x20f2490
	void ExecuteGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SolarGameplayAbility.ExecuteGameplayCueLocal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20f2210
	void AddGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SolarGameplayAbility.AddGameplayCueLocal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20f1d50
};

// Class Solarland.ResidentPassiveSkill
// Size: 0x438 (Inherited: 0x418)
struct UResidentPassiveSkill : USolarGameplayAbility {
	struct TArray<struct UGameplayEffect*> ResidentEffectClasses; // 0x418(0x10)
	char pad_428[0x10]; // 0x428(0x10)
};

// Class Solarland.ChaGA_AerialReconnaissance
// Size: 0x438 (Inherited: 0x438)
struct UChaGA_AerialReconnaissance : UResidentPassiveSkill {

	void OnSkydiveStageChanged(struct ASolarCharacter* InCharacter, enum class ESkydiveStage InOldStage, enum class ESkydiveStage InNewStage); // Function Solarland.ChaGA_AerialReconnaissance.OnSkydiveStageChanged // (Final|Native|Private) // @ game+0x1fc2e10
};

// Class Solarland.SolarCharacterGameplayAbility
// Size: 0x460 (Inherited: 0x418)
struct USolarCharacterGameplayAbility : USolarGameplayAbility {
	struct FGameplayTagContainer ActivationOwnedReplicatedTags; // 0x418(0x20)
	struct TArray<struct FSolarGameplayEffectConfig> ActivationOwnedReplicatedGameplayEffects; // 0x438(0x10)
	char pad_448[0x18]; // 0x448(0x18)

	struct ASolarCharacter* GetOwningCharacterFromActorInfo(); // Function Solarland.SolarCharacterGameplayAbility.GetOwningCharacterFromActorInfo // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x20babc0
	struct ASolarCharacter* GetAvatarSolarCharacterFromActorInfo(); // Function Solarland.SolarCharacterGameplayAbility.GetAvatarSolarCharacterFromActorInfo // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x20bab50
};

// Class Solarland.ChaGA_Aim
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_Aim : USolarCharacterGameplayAbility {
	struct UGameplayEffect* AimGameplayEffectClass; // 0x460(0x08)
};

// Class Solarland.ChaGA_ThrowSkill
// Size: 0x4c0 (Inherited: 0x460)
struct UChaGA_ThrowSkill : USolarCharacterGameplayAbility {
	enum class ESkillAnimType SkillAnimType; // 0x460(0x01)
	enum class ESkillAnimRightHandType SkillAnimRightHandType; // 0x461(0x01)
	bool bShouldWaitMontageNotifyToThrow; // 0x462(0x01)
	char pad_463[0x1]; // 0x463(0x01)
	struct FName MontageNotifyToWait; // 0x464(0x08)
	bool bCanHoldWeapon; // 0x46c(0x01)
	char pad_46D[0x3]; // 0x46d(0x03)
	struct FName ActiveMontageNotifyToReady; // 0x470(0x08)
	bool bShouldWaitActiveMontageNotifyToPrepare; // 0x478(0x01)
	char pad_479[0x3]; // 0x479(0x03)
	struct FName ActiveMontageNotifyToPrepare; // 0x47c(0x08)
	bool bShouldWaitActiveMontageNotifyToThrow; // 0x484(0x01)
	char pad_485[0x3]; // 0x485(0x03)
	struct FName ActiveMontageNotifyToThrow; // 0x488(0x08)
	struct FName MontageSectionToJumpOnInputReleased; // 0x490(0x08)
	struct UAbilityTask_NetworkSyncPoint* WaitThrowTask; // 0x498(0x08)
	struct UAnimMontage* ActiveMontage; // 0x4a0(0x08)
	struct UAnimMontage* FireMontage; // 0x4a8(0x08)
	struct UAnimMontage* CancelMontage; // 0x4b0(0x08)
	char pad_4B8[0x8]; // 0x4b8(0x08)

	void WaitToThrow(); // Function Solarland.ChaGA_ThrowSkill.WaitToThrow // (Final|Native|Protected) // @ game+0x1fd01a0
	void StartToThrow(); // Function Solarland.ChaGA_ThrowSkill.StartToThrow // (Native|Event|Protected|BlueprintEvent) // @ game+0x1554240
	void PrepareToThrow(); // Function Solarland.ChaGA_ThrowSkill.PrepareToThrow // (Native|Event|Protected|BlueprintEvent) // @ game+0x1554660
	void OnRceiveWaitToThrow(); // Function Solarland.ChaGA_ThrowSkill.OnRceiveWaitToThrow // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_ThrowSkill.OnMontageNotify // (Native|Protected) // @ game+0x1fcf960
	void OnMontageCompleted(); // Function Solarland.ChaGA_ThrowSkill.OnMontageCompleted // (Native|Protected) // @ game+0x1548090
	void OnFireMontageStartBlendingOut(); // Function Solarland.ChaGA_ThrowSkill.OnFireMontageStartBlendingOut // (Native|Protected) // @ game+0x1547fb0
	void OnActiveMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_ThrowSkill.OnActiveMontageNotify // (Native|Protected) // @ game+0x1fcf580
	void OnActiveMontageCompleted(); // Function Solarland.ChaGA_ThrowSkill.OnActiveMontageCompleted // (Native|Protected) // @ game+0x15481f0
};

// Class Solarland.SolarSkillGA_Projectile
// Size: 0x5f0 (Inherited: 0x4c0)
struct USolarSkillGA_Projectile : UChaGA_ThrowSkill {
	struct FSolarSkillProjectileData ProjectileData; // 0x4c0(0xd0)
	struct AGameplayAbilityTargetActor* GATargetActorClass; // 0x590(0x08)
	struct TArray<struct AActor*> SpawnActorClasses; // 0x598(0x10)
	struct UGameplayEffect* GEToSelfClass; // 0x5a8(0x08)
	struct UGameplayEffect* GEToTargetClass; // 0x5b0(0x08)
	bool bUseKeyUpLocation; // 0x5b8(0x01)
	bool bUseKeyUpDirection; // 0x5b9(0x01)
	char pad_5BA[0x6]; // 0x5ba(0x06)
	struct UAbilityTask_WaitTargetData* WaitTargetDataTask; // 0x5c0(0x08)
	struct TArray<struct AActor*> SpawnActors; // 0x5c8(0x10)
	struct TWeakObjectPtr<struct AGameplayAbilityTargetActor> TargetActorCache; // 0x5d8(0x08)
	char pad_5E0[0x10]; // 0x5e0(0x10)

	void OnWaitTargetDataTaskValid(struct FGameplayAbilityTargetDataHandle& InTargetData); // Function Solarland.SolarSkillGA_Projectile.OnWaitTargetDataTaskValid // (Native|Protected|HasOutParms) // @ game+0x219cb90
	void OnWaitTargetDataTaskCancelled(struct FGameplayAbilityTargetDataHandle& InTargetData); // Function Solarland.SolarSkillGA_Projectile.OnWaitTargetDataTaskCancelled // (Native|Protected|HasOutParms) // @ game+0x219ca70
};

// Class Solarland.SolarSkillGA_Summon
// Size: 0x620 (Inherited: 0x5f0)
struct USolarSkillGA_Summon : USolarSkillGA_Projectile {
	struct USolarSummonDetectionConfig* SummonConfig; // 0x5e8(0x08)
	int32_t SummonFailedNoticeID; // 0x5f0(0x04)
	bool bUseKeyUpLocationSummon; // 0x5f4(0x01)
	struct TWeakObjectPtr<struct ASolarSkillGATA_Summon> SummonTargetActor; // 0x5f8(0x08)
	struct UAnimMontage* ActiveMontageForGunAim; // 0x600(0x08)
	struct UAnimMontage* FireMontageForGunAim; // 0x608(0x08)
	struct UAnimMontage* CancelMontageForGunAim; // 0x610(0x08)
	char pad_61D[0x3]; // 0x61d(0x03)
};

// Class Solarland.ChaGA_AirDrop
// Size: 0x690 (Inherited: 0x620)
struct UChaGA_AirDrop : USolarSkillGA_Summon {
	struct ASolarTreasureBoxSpawner* TreasureBoxSpawnerClass; // 0x618(0x08)
	int32_t OutcomeID; // 0x620(0x04)
	struct TArray<struct FAirDropSkillDatas> AirDropSkillSetting; // 0x628(0x10)
	int32_t ChestID; // 0x638(0x04)
	int32_t BoxType; // 0x63c(0x04)
	float CastTime; // 0x640(0x04)
	float ReadyTime; // 0x644(0x04)
	struct FGameplayTag PrepareGameplayCue; // 0x648(0x08)
	struct FGameplayTag OpenAirDropMontageTag; // 0x650(0x08)
	char pad_65C[0x4]; // 0x65c(0x04)
	struct FTransform SpawnTransform; // 0x660(0x30)

	void OnWaitCompleted(); // Function Solarland.ChaGA_AirDrop.OnWaitCompleted // (Final|Native|Private) // @ game+0x1fc8380
};

// Class Solarland.ChaGA_AntiexposureSuit
// Size: 0x440 (Inherited: 0x438)
struct UChaGA_AntiexposureSuit : UResidentPassiveSkill {
	struct FGameplayTag ExecuteCueTag; // 0x438(0x08)

	void OnTakeDamage(struct ASolarCharacter* Character, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaGA_AntiexposureSuit.OnTakeDamage // (Final|Native|Protected|HasOutParms) // @ game+0x1fc7f60
};

// Class Solarland.ChaGA_AttributeInit
// Size: 0x428 (Inherited: 0x418)
struct UChaGA_AttributeInit : USolarGameplayAbility {
	struct TArray<struct UGameplayEffect*> InitializationEffectClasses; // 0x418(0x10)
};

// Class Solarland.CharacterTalent
// Size: 0x420 (Inherited: 0x418)
struct UCharacterTalent : USolarGameplayAbility {
	struct UGameplayEffect* GrantedEffectClass; // 0x418(0x08)

	float GetTalentCooldownDuration(struct AActor* InOwner, struct AActor* InAvatar); // Function Solarland.CharacterTalent.GetTalentCooldownDuration // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1fdb220
	float GetTalentActivationDuration(struct AActor* InOwner, struct AActor* InAvatar); // Function Solarland.CharacterTalent.GetTalentActivationDuration // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1fdb150
};

// Class Solarland.PermanentTalent
// Size: 0x440 (Inherited: 0x420)
struct UPermanentTalent : UCharacterTalent {
	struct TArray<struct UGameplayEffect*> PermanentEffectClasses; // 0x420(0x10)
	char pad_430[0x10]; // 0x430(0x10)
};

// Class Solarland.PermanentTalentOnVehicle
// Size: 0x458 (Inherited: 0x440)
struct UPermanentTalentOnVehicle : UPermanentTalent {
	struct TArray<int32_t> ActivatedVehicleTypes; // 0x440(0x10)
	struct FGameplayTag GetOffVehicleEventTag; // 0x450(0x08)

	void ReceiveGetOffVehicle(struct FGameplayEventData InPayload); // Function Solarland.PermanentTalentOnVehicle.ReceiveGetOffVehicle // (Final|Native|Protected) // @ game+0x202bf90
};

// Class Solarland.ChaGA_AutoHealingOnVehicle
// Size: 0x468 (Inherited: 0x458)
struct UChaGA_AutoHealingOnVehicle : UPermanentTalentOnVehicle {
	struct UGameplayEffect* FullHealthSignEffect; // 0x458(0x08)
	char pad_460[0x8]; // 0x460(0x08)

	void ReceiveCurrentHealthChange(); // Function Solarland.ChaGA_AutoHealingOnVehicle.ReceiveCurrentHealthChange // (Final|Native|Protected) // @ game+0x1fc84e0
};

// Class Solarland.ChaGA_BigRechargeShield
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_BigRechargeShield : USolarCharacterGameplayAbility {
	struct FGameplayTag RechargeShieldMontageTag; // 0x460(0x08)
	struct FGameplayTagContainer ActivationRequiredTagsAny; // 0x468(0x20)
};

// Class Solarland.ChaGA_BigWaterGun
// Size: 0x4c0 (Inherited: 0x460)
struct UChaGA_BigWaterGun : USolarCharacterGameplayAbility {
	struct ABigWaterGun* BigWaterGunClass; // 0x460(0x08)
	struct ABigWaterGun* CacheBigWaterGun; // 0x468(0x08)
	enum class ESkillAnimType SkillAnimType; // 0x470(0x01)
	char pad_471[0x7]; // 0x471(0x07)
	struct UAnimMontage* PreAnimMontage; // 0x478(0x08)
	struct UAnimMontage* ExcuteAnimMontage; // 0x480(0x08)
	struct UAnimMontage* PostAnimMontage; // 0x488(0x08)
	struct UAnimMontage* StopAnimMontage; // 0x490(0x08)
	float LifeTime; // 0x498(0x04)
	char pad_49C[0x4]; // 0x49c(0x04)
	struct UGameplayEffect* SlowDownGameplayEffect; // 0x4a0(0x08)
	char pad_4A8[0x8]; // 0x4a8(0x08)
	struct UAbilityTask_NetworkSyncPoint* StopTask; // 0x4b0(0x08)
	char pad_4B8[0x8]; // 0x4b8(0x08)

	void OnStopPhase(); // Function Solarland.ChaGA_BigWaterGun.OnStopPhase // (Final|Native|Private) // @ game+0x1fc7f40
	void OnPrePhase(); // Function Solarland.ChaGA_BigWaterGun.OnPrePhase // (Final|Native|Private) // @ game+0x1fc7d90
	void OnPreMontageCompleted(); // Function Solarland.ChaGA_BigWaterGun.OnPreMontageCompleted // (Final|Native|Private) // @ game+0x1fc7340
	void OnPostPhase(); // Function Solarland.ChaGA_BigWaterGun.OnPostPhase // (Final|Native|Private) // @ game+0x1fc7d70
	void OnPostMontageCompleted(); // Function Solarland.ChaGA_BigWaterGun.OnPostMontageCompleted // (Final|Native|Private) // @ game+0x1fc7d50
	void OnExecutePhase(); // Function Solarland.ChaGA_BigWaterGun.OnExecutePhase // (Final|Native|Private) // @ game+0x1fc7340
	void OnExecuteMontageCompleted(); // Function Solarland.ChaGA_BigWaterGun.OnExecuteMontageCompleted // (Final|Native|Private) // @ game+0x1fc7320
};

// Class Solarland.ChaGA_Bolt
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_Bolt : USolarCharacterGameplayAbility {
	struct FGameplayTag BoltMontageTag; // 0x460(0x08)
};

// Class Solarland.ChaGA_CancelSprint
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_CancelSprint : USolarCharacterGameplayAbility {
	struct UGameplayEffect* CancelSprintEffectClass; // 0x460(0x08)
};

// Class Solarland.ChaGA_ChangeCurrentCDRemain
// Size: 0x460 (Inherited: 0x418)
struct UChaGA_ChangeCurrentCDRemain : USolarGameplayAbility {
	struct FGameplayTagContainer AbilityQueryTags; // 0x418(0x20)
	enum class EGameplayModOp RemainTimeModifierOption; // 0x438(0x01)
	char pad_439[0x7]; // 0x439(0x07)
	struct FScalableFloat RemainTimeModifierValue; // 0x440(0x20)
};

// Class Solarland.ChaGA_ChangeTotalCD_WithDuration
// Size: 0x450 (Inherited: 0x418)
struct UChaGA_ChangeTotalCD_WithDuration : USolarGameplayAbility {
	struct FGameplayTagContainer AbilityQueryTags; // 0x418(0x20)
	struct UGameplayEffect* CDModifierEffect; // 0x438(0x08)
	bool bUsedForNextActivation; // 0x440(0x01)
	enum class EActiveEffectDurationChangeProxy ActiveEffectDurationChangeProxy; // 0x441(0x01)
	char pad_442[0xe]; // 0x442(0x0e)

	void OnModifierFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_ChangeTotalCD_WithDuration.OnModifierFinished // (Final|Native|Protected|HasOutParms) // @ game+0x1fc70c0
	void ModifierAppliedFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_ChangeTotalCD_WithDuration.ModifierAppliedFailed // (Final|Native|Protected|HasOutParms) // @ game+0x1fc70c0
};

// Class Solarland.ChaGA_ChangeTotalCD_WithTimes
// Size: 0x458 (Inherited: 0x450)
struct UChaGA_ChangeTotalCD_WithTimes : UChaGA_ChangeTotalCD_WithDuration {
	int32_t CDTimes; // 0x450(0x04)
	char pad_454[0x4]; // 0x454(0x04)

	void OnCooldownCompleted(); // Function Solarland.ChaGA_ChangeTotalCD_WithTimes.OnCooldownCompleted // (Final|Native|Protected) // @ game+0x1fc72e0
};

// Class Solarland.ChaGA_CombatRegeneration
// Size: 0x498 (Inherited: 0x460)
struct UChaGA_CombatRegeneration : USolarCharacterGameplayAbility {
	float ForecastInterval; // 0x460(0x04)
	float RegenerateInterval; // 0x464(0x04)
	struct FGameplayTag RegenerateCueTag; // 0x468(0x08)
	char pad_470[0x28]; // 0x470(0x28)

	void PreRegenerate(); // Function Solarland.ChaGA_CombatRegeneration.PreRegenerate // (Final|Native|Protected) // @ game+0x1fc84c0
	void OnTakeDamage(struct ASolarCharacter* Character, struct FSolarPointDamageEvent& DamageEvent, float HealtDamage); // Function Solarland.ChaGA_CombatRegeneration.OnTakeDamage // (Final|Native|Protected|HasOutParms) // @ game+0x1fc80c0
	void OnRegenerate(); // Function Solarland.ChaGA_CombatRegeneration.OnRegenerate // (Final|Native|Protected) // @ game+0x1fc7db0
};

// Class Solarland.ChaGA_Crouch
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_Crouch : USolarCharacterGameplayAbility {
	char pad_460[0x8]; // 0x460(0x08)

	bool ShouldCancelCrouch(); // Function Solarland.ChaGA_Crouch.ShouldCancelCrouch // (Final|Native|Private) // @ game+0x1fc8500
};

// Class Solarland.ChaGA_Cruise
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_Cruise : USolarCharacterGameplayAbility {
	struct UGameplayEffect* ParachuteZoneEnteredEffect; // 0x460(0x08)
	struct FName ParachuteActionName; // 0x468(0x08)
	struct UAbilityTask_WaitInputAction* WaitParachuteInputTask; // 0x470(0x08)
	struct UAbilityTask_NetworkSyncPoint* WaitToParachuteTask; // 0x478(0x08)
	char pad_480[0x8]; // 0x480(0x08)

	void OnRequestedToParachute(); // Function Solarland.ChaGA_Cruise.OnRequestedToParachute // (Final|Native|Private) // @ game+0x1fc7dd0
	void OnParachuteRequestSynced(); // Function Solarland.ChaGA_Cruise.OnParachuteRequestSynced // (Final|Native|Private) // @ game+0x1fc7d30
	void OnParachuteRequestRejected(); // Function Solarland.ChaGA_Cruise.OnParachuteRequestRejected // (Final|Native|Private) // @ game+0x1fc7d10
	void OnIntoParachuteZone(struct FGameplayEventData Payload); // Function Solarland.ChaGA_Cruise.OnIntoParachuteZone // (Final|Native|Private) // @ game+0x1fc7a00
	void OnForceParachuteEvent(struct FGameplayEventData Payload); // Function Solarland.ChaGA_Cruise.OnForceParachuteEvent // (Final|Native|Private) // @ game+0x1fc7560
	void OnFinishCruise(struct FGameplayEventData Payload); // Function Solarland.ChaGA_Cruise.OnFinishCruise // (Final|Native|Private) // @ game+0x1fc7360
};

// Class Solarland.ChaGA_Dance
// Size: 0x4b0 (Inherited: 0x460)
struct UChaGA_Dance : USolarCharacterGameplayAbility {
	struct UGameplayEffect* LeadingDanceEffect; // 0x460(0x08)
	struct TArray<struct FName> CancelActionNames; // 0x468(0x10)
	char pad_478[0x38]; // 0x478(0x38)

	void OnRoleAbilityInputAction(int32_t AbilityIndex, bool bPress, bool bCanActive); // Function Solarland.ChaGA_Dance.OnRoleAbilityInputAction // (Final|Native|Private) // @ game+0x1fc7df0
	void OnMoveModeChanged(enum class EMovementMode NewMovementMode); // Function Solarland.ChaGA_Dance.OnMoveModeChanged // (Final|Native|Private) // @ game+0x1fc7be0
	void OnMontageCompleted(); // Function Solarland.ChaGA_Dance.OnMontageCompleted // (Final|Native|Private) // @ game+0x1fc7c60
	void OnMontageBlendOut(); // Function Solarland.ChaGA_Dance.OnMontageBlendOut // (Final|Native|Private) // @ game+0x1fc7c60
	void OnMobileWeaponInputAction(enum class EInputButton InButtonType); // Function Solarland.ChaGA_Dance.OnMobileWeaponInputAction // (Final|Native|Private) // @ game+0x1fc7be0
	void OnHandleNotifyState(struct USolarAnimInstance* AnimInstance, struct USolarAnimNotifyState* Notify, int32_t& OutDenial); // Function Solarland.ChaGA_Dance.OnHandleNotifyState // (Final|Native|Private|HasOutParms) // @ game+0x1fc7860
	void OnHandleNotify(struct USolarAnimInstance* AnimInstance, struct USolarAnimNotify* Notify, int32_t& OutDenial); // Function Solarland.ChaGA_Dance.OnHandleNotify // (Final|Native|Private|HasOutParms) // @ game+0x1fc7740
	void OnCancelInput(); // Function Solarland.ChaGA_Dance.OnCancelInput // (Final|Native|Private) // @ game+0x1fc72c0
};

// Class Solarland.ChaGA_Death
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_Death : USolarCharacterGameplayAbility {
	float DestroyCorpseTime; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)
	struct UGameplayEffect* RemoveDebuffEffectClass; // 0x468(0x08)

	void DestroyCharacterCorpse(struct ASolarCharacter* Character); // Function Solarland.ChaGA_Death.DestroyCharacterCorpse // (Final|Native|Protected) // @ game+0x1fc7010
	void DeathEnd(struct ASolarCharacter* Character); // Function Solarland.ChaGA_Death.DeathEnd // (Final|Native|Protected) // @ game+0x1fc6f80
};

// Class Solarland.ChaGA_DeathVerge
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_DeathVerge : USolarCharacterGameplayAbility {
	struct TArray<struct UGameplayEffect*> DeathVergeHPEffects; // 0x460(0x10)
	char pad_470[0x10]; // 0x470(0x10)
	struct FGameplayTag DeathVergeMaxHPDataTag; // 0x480(0x08)
	float TimeToWait; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)

	void OnWaitDelayFinished(); // Function Solarland.ChaGA_DeathVerge.OnWaitDelayFinished // (Final|Native|Protected) // @ game+0x8e9ae0
};

// Class Solarland.ChaGA_DuckRolling
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_DuckRolling : USolarCharacterGameplayAbility {
	enum class ESkillAnimType SkillAnimType; // 0x460(0x01)
	char pad_461[0x7]; // 0x461(0x07)
	struct UDuckRollingConfigDataAsset* ConfigDataAsset; // 0x468(0x08)
	struct UGameplayEffect* SwitchToRollingMeshEffect; // 0x470(0x08)
	struct UAnimMontage* Montage; // 0x478(0x08)
	char pad_480[0x8]; // 0x480(0x08)
	struct UAbilityTask_WaitDelay* WaitRollingMeshTask; // 0x488(0x08)

	void SyncToSwitchToRollingMesh(); // Function Solarland.ChaGA_DuckRolling.SyncToSwitchToRollingMesh // (Final|Native|Protected) // @ game+0x1fc8550
	void SwitchToRollingMesh(); // Function Solarland.ChaGA_DuckRolling.SwitchToRollingMesh // (Final|Native|Protected) // @ game+0x1fc8530
	void OnRollingEnd(); // Function Solarland.ChaGA_DuckRolling.OnRollingEnd // (Final|Native|Protected) // @ game+0x1fc7f20
	void OnRollingCanceled(); // Function Solarland.ChaGA_DuckRolling.OnRollingCanceled // (Final|Native|Protected) // @ game+0x1fc7f00
};

// Class Solarland.ChaGA_EnergyBubble
// Size: 0x4b8 (Inherited: 0x460)
struct UChaGA_EnergyBubble : USolarCharacterGameplayAbility {
	struct ASolarEnergyBubble* EnergyShieldClass; // 0x460(0x08)
	struct AGameplayAbilityTargetActor* GATargetActorClass; // 0x468(0x08)
	struct UAnimMontage* EmptyMontage; // 0x470(0x08)
	struct UAnimMontage* AimMontage; // 0x478(0x08)
	struct FName StartSocketName; // 0x480(0x08)
	struct FName StartEnergyBubbleNotify; // 0x488(0x08)
	struct FName ReleaseEnergyBubbleNotify; // 0x490(0x08)
	struct ASolarEnergyBubble* EnergyShieldActor; // 0x498(0x08)
	char pad_4A0[0x8]; // 0x4a0(0x08)
	struct UAbilityTask_WaitTargetData* WaitTargetDataTask; // 0x4a8(0x08)
	struct TWeakObjectPtr<struct AGameplayAbilityTargetActor> TargetActorCache; // 0x4b0(0x08)

	void OnWaitTargetDataTaskValid(struct FGameplayAbilityTargetDataHandle& InTargetData); // Function Solarland.ChaGA_EnergyBubble.OnWaitTargetDataTaskValid // (Final|Native|Private|HasOutParms) // @ game+0x1fc83a0
	void OnMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_EnergyBubble.OnMontageNotify // (Final|Native|Protected) // @ game+0x1fc7c80
};

// Class Solarland.ChaGA_Equip
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_Equip : USolarCharacterGameplayAbility {
	struct FGameplayTag EquipMontageTag; // 0x460(0x08)
};

// Class Solarland.SideResidentPassiveSkill
// Size: 0x438 (Inherited: 0x418)
struct USideResidentPassiveSkill : USolarGameplayAbility {
	struct UGameplayEffect* SignEffectClass; // 0x418(0x08)
	char pad_420[0x18]; // 0x420(0x18)

	bool OnSidePassiveSkillEnded(struct FSideAttributeSet& InSideAttributeSet, struct ASCMPlayerState* CurrentPlayer, bool bWasCancelled); // Function Solarland.SideResidentPassiveSkill.OnSidePassiveSkillEnded // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x205dae0
	bool OnSidePassiveSkillActivated(struct FSideAttributeSet& InSideAttributeSet, struct ASCMPlayerState* CurrentPlayer); // Function Solarland.SideResidentPassiveSkill.OnSidePassiveSkillActivated // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x205d950
	void OnSideLeaving(struct FGameplayEventData Payload); // Function Solarland.SideResidentPassiveSkill.OnSideLeaving // (Final|Native|Protected) // @ game+0x205d770
	void OnSideJoining(struct FGameplayEventData Payload); // Function Solarland.SideResidentPassiveSkill.OnSideJoining // (Final|Native|Protected) // @ game+0x205d590
	void OnCharacterBeforeChange(); // Function Solarland.SideResidentPassiveSkill.OnCharacterBeforeChange // (Final|Native|Protected) // @ game+0x205d570
};

// Class Solarland.ChaGA_FastTreatment
// Size: 0x448 (Inherited: 0x438)
struct UChaGA_FastTreatment : USideResidentPassiveSkill {
	float ModifierTreatmentValue; // 0x438(0x04)
	float ModifierShieldValue; // 0x43c(0x04)
	float ModifierBigShieldValue; // 0x440(0x04)
	char pad_444[0x4]; // 0x444(0x04)
};

// Class Solarland.ChaGA_Fire
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_Fire : USolarCharacterGameplayAbility {
	struct ASolarCharacter* ActCharacter; // 0x460(0x08)
	char pad_468[0x5]; // 0x468(0x05)
	bool bPrintDebugString; // 0x46d(0x01)
	char pad_46E[0x2]; // 0x46e(0x02)

	void OnFireTaskEnd(); // Function Solarland.ChaGA_Fire.OnFireTaskEnd // (Final|Native|Public) // @ game+0x1fc7540
	void OnCtrlTaskEnd(); // Function Solarland.ChaGA_Fire.OnCtrlTaskEnd // (Final|Native|Public) // @ game+0x1fc7300
	void DoFireTask(); // Function Solarland.ChaGA_Fire.DoFireTask // (Final|Native|Public) // @ game+0x1fc70a0
};

// Class Solarland.ChaGA_GetOffVehicle
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_GetOffVehicle : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_GetOnVehicle
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_GetOnVehicle : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_HighAlert
// Size: 0x4a8 (Inherited: 0x438)
struct UChaGA_HighAlert : UResidentPassiveSkill {
	bool bShowDebug; // 0x438(0x01)
	char pad_439[0x3]; // 0x439(0x03)
	float HighAlertAngle; // 0x43c(0x04)
	float HighAlertRadiusMin; // 0x440(0x04)
	float HighAlertRadiusMax; // 0x444(0x04)
	struct FVector2D HighAlertBoxExtent; // 0x448(0x08)
	struct TMap<enum class EAlertDirection, float> AlertCD; // 0x450(0x50)
	struct FGameplayCueTag CueTag; // 0x4a0(0x08)

	void OnHighAlert(enum class EAlertDirection Direction); // Function Solarland.ChaGA_HighAlert.OnHighAlert // (Final|Native|Private) // @ game+0x1fc7980
};

// Class Solarland.ChaGA_HitRecover
// Size: 0x4b8 (Inherited: 0x460)
struct UChaGA_HitRecover : USolarCharacterGameplayAbility {
	float Duration; // 0x460(0x04)
	float KnockbackDuration; // 0x464(0x04)
	struct TMap<enum class EHitRecoverType, float> HitbackDistance; // 0x468(0x50)

	void OnBlock(struct FGameplayAbilityTargetDataHandle& InTargetData); // Function Solarland.ChaGA_HitRecover.OnBlock // (Final|Native|Public|HasOutParms) // @ game+0x1fc71a0
};

// Class Solarland.ChaGA_HitShield
// Size: 0x4c8 (Inherited: 0x438)
struct UChaGA_HitShield : UResidentPassiveSkill {
	struct ASolarEnergyShield* HitShieldClass; // 0x438(0x08)
	float DistanceToCharacter; // 0x440(0x04)
	float CoolDown; // 0x444(0x04)
	float MaxAngleinZ; // 0x448(0x04)
	char pad_44C[0x4]; // 0x44c(0x04)
	struct FGameplayTagContainer BlockShieldSpawnTags; // 0x450(0x20)
	struct TSet<enum class ESCMDamageType> TriggerDamageTypes; // 0x470(0x50)
	char pad_4C0[0x8]; // 0x4c0(0x08)

	void SpawnHitShield(struct FVector Direction); // Function Solarland.ChaGA_HitShield.SpawnHitShield // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
	void OnTakeDamage(struct ASolarCharacter* Character, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaGA_HitShield.OnTakeDamage // (Final|Native|Protected|HasOutParms) // @ game+0x1fc8220
};

// Class Solarland.ChaGA_Hoarder
// Size: 0x440 (Inherited: 0x438)
struct UChaGA_Hoarder : USideResidentPassiveSkill {
	float ModifierValue; // 0x438(0x04)
	char pad_43C[0x4]; // 0x43c(0x04)
};

// Class Solarland.ChaGA_HomeVault
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_HomeVault : USolarCharacterGameplayAbility {
	struct FGameplayTag ClimbWaterMontageTag; // 0x460(0x08)
	struct FGameplayTag VaultCrossMontageTag; // 0x468(0x08)
	char pad_470[0x20]; // 0x470(0x20)

	void OnMontageCompleted(); // Function Solarland.ChaGA_HomeVault.OnMontageCompleted // (Final|Native|Protected) // @ game+0x1fc7c60
};

// Class Solarland.ChaGA_InitializationFromGameMode
// Size: 0x478 (Inherited: 0x460)
struct UChaGA_InitializationFromGameMode : USolarCharacterGameplayAbility {
	struct UGameplayEffect* VJetCDOverrideEffect; // 0x460(0x08)
	struct UGameplayEffect* HJetCDOverrideEffect; // 0x468(0x08)
	struct FGameplayTag SettingOverrideTag; // 0x470(0x08)
};

// Class Solarland.ChaGA_Invincible
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_Invincible : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_JetFlyAction
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_JetFlyAction : USolarCharacterGameplayAbility {
	bool bVerticalFly; // 0x460(0x01)
	char pad_461[0x7]; // 0x461(0x07)
	struct UGameplayEffect* BoostEffect; // 0x468(0x08)
};

// Class Solarland.ChaGA_JetFlyCharge
// Size: 0x4b8 (Inherited: 0x460)
struct UChaGA_JetFlyCharge : USolarCharacterGameplayAbility {
	struct UGameplayEffect* VerticalChargeEffect; // 0x460(0x08)
	struct UGameplayEffect* TempVerticalChargeEffect; // 0x468(0x08)
	struct UGameplayEffect* OnceVChargeCompletedEffect; // 0x470(0x08)
	struct UGameplayEffect* HorizontalChargeEffect; // 0x478(0x08)
	struct UGameplayEffect* TempHorizontalChargeEffect; // 0x480(0x08)
	struct UGameplayEffect* OnceHChargeCompletedEffect; // 0x488(0x08)
	struct FGameplayTag TempChargeDurationTag; // 0x490(0x08)
	struct UAbilityTask_WaitGameplayEffectRemoved* OnOnceVJetChargeFinished; // 0x498(0x08)
	struct UAbilityTask_WaitGameplayEffectRemoved* OnOnceHJetChargeFinished; // 0x4a0(0x08)
	char pad_4A8[0x10]; // 0x4a8(0x10)

	void StartVerticalJetChargeFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_JetFlyCharge.StartVerticalJetChargeFailed // (Final|Native|Protected|HasOutParms) // @ game+0x1fccb30
	void StartHorizontalJetChargeFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_JetFlyCharge.StartHorizontalJetChargeFailed // (Final|Native|Protected|HasOutParms) // @ game+0x1fcca30
	void ReceiveVerticalJetTimesChanged(); // Function Solarland.ChaGA_JetFlyCharge.ReceiveVerticalJetTimesChanged // (Final|Native|Protected) // @ game+0x1fcc9e0
	void ReceiveVerticalChargeCDChanged(float OldCD); // Function Solarland.ChaGA_JetFlyCharge.ReceiveVerticalChargeCDChanged // (Final|Native|Protected) // @ game+0x1fcc960
	void ReceiveHorizontalJetTimesChanged(); // Function Solarland.ChaGA_JetFlyCharge.ReceiveHorizontalJetTimesChanged // (Final|Native|Protected) // @ game+0x1fcc940
	void ReceiveHorizontalChargeCDChanged(float OldCD); // Function Solarland.ChaGA_JetFlyCharge.ReceiveHorizontalChargeCDChanged // (Final|Native|Protected) // @ game+0x1fcc8c0
	void OnceVerticalJetChargeFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_JetFlyCharge.OnceVerticalJetChargeFinished // (Final|Native|Protected|HasOutParms) // @ game+0x1fcc7c0
	void OnceHorizontalJetChargeFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_JetFlyCharge.OnceHorizontalJetChargeFinished // (Final|Native|Protected|HasOutParms) // @ game+0x1fcc6e0
};

// Class Solarland.ChaGA_JetSlowFalling
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_JetSlowFalling : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_Jump
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_Jump : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_LaunchAction
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_LaunchAction : USolarCharacterGameplayAbility {
	float WaitingLaunchingTime; // 0x460(0x04)
	struct FGameplayTag LaunchCueTag; // 0x464(0x08)
	char pad_46C[0x4]; // 0x46c(0x04)

	void EndLaunch(); // Function Solarland.ChaGA_LaunchAction.EndLaunch // (Final|Native|Protected) // @ game+0x1fc7c60
};

// Class Solarland.ChaGA_LostConnection
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_LostConnection : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_LowHPShieldRecAcc
// Size: 0x458 (Inherited: 0x420)
struct UChaGA_LowHPShieldRecAcc : UCharacterTalent {
	struct UGameplayEffect* AccelerationEffectClass; // 0x420(0x08)
	struct FScalableFloat LowHPThreshold; // 0x428(0x20)
	char pad_448[0x10]; // 0x448(0x10)

	void CheckHPThreshold(); // Function Solarland.ChaGA_LowHPShieldRecAcc.CheckHPThreshold // (Final|Native|Protected) // @ game+0x1fcb7b0
};

// Class Solarland.ChaGA_LowHPSpeedup
// Size: 0x458 (Inherited: 0x420)
struct UChaGA_LowHPSpeedup : UCharacterTalent {
	struct UGameplayEffect* SpeedupEffectClass; // 0x420(0x08)
	struct FScalableFloat LowHPThreshold; // 0x428(0x20)
	char pad_448[0x10]; // 0x448(0x10)

	void OnSpeedUpFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_LowHPSpeedup.OnSpeedUpFinished // (Final|Native|Protected|HasOutParms) // @ game+0x1fcc3f0
	void OnCoolingDownFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_LowHPSpeedup.OnCoolingDownFinished // (Final|Native|Protected|HasOutParms) // @ game+0x1fcbdd0
	void EffectAppliedFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_LowHPSpeedup.EffectAppliedFailed // (Final|Native|Protected|HasOutParms) // @ game+0x1fcb830
	void CheckHPThreshold(); // Function Solarland.ChaGA_LowHPSpeedup.CheckHPThreshold // (Final|Native|Protected) // @ game+0x1fcb7d0
};

// Class Solarland.ChaGA_MassInvisibility
// Size: 0x4a8 (Inherited: 0x460)
struct UChaGA_MassInvisibility : USolarCharacterGameplayAbility {
	struct UAnimMontage* SkillMontage; // 0x460(0x08)
	struct UAnimMontage* SkillMontageWithWeapon; // 0x468(0x08)
	struct FName StartSkillMontageNotify; // 0x470(0x08)
	struct FGameplayTag MassInvisibilityRangeCueTag; // 0x478(0x08)
	struct UGameplayAbility* MassInvisibilityTargetAbilityClass; // 0x480(0x08)
	float MassInvisibilityRangeRadius; // 0x488(0x04)
	float MassInvisibilityRangeHalfHeight; // 0x48c(0x04)
	struct FGameplayTag OrnamentTag; // 0x490(0x08)
	struct UAnimMontage* OrnamentMontage; // 0x498(0x08)
	char pad_4A0[0x8]; // 0x4a0(0x08)

	void OnMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_MassInvisibility.OnMontageNotify // (Final|Native|Protected) // @ game+0x1fcc100
};

// Class Solarland.ChaGA_MassInvisibilityTarget
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_MassInvisibilityTarget : USolarCharacterGameplayAbility {
	struct FGameplayCueTag MassInvisibilityCueTag; // 0x460(0x08)
	struct UGameplayEffect* MassInvisibilityBuffEffectClass; // 0x468(0x08)
	struct UGameplayEffect* MassInvisibilityPrepareEffectClass; // 0x470(0x08)
	struct UGameplayEffect* MassInvisibilityEffectClass; // 0x478(0x08)
	char pad_480[0x8]; // 0x480(0x08)

	void OnMassInvisibilityPrepareEffectRemoved(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_MassInvisibilityTarget.OnMassInvisibilityPrepareEffectRemoved // (Final|Native|Private|HasOutParms) // @ game+0x1fcc020
	void OnMassInvisibilityEffectRemoved(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_MassInvisibilityTarget.OnMassInvisibilityEffectRemoved // (Final|Native|Private|HasOutParms) // @ game+0x1fcbf40
};

// Class Solarland.ChaGA_Melee
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_Melee : USolarCharacterGameplayAbility {
	struct TArray<struct FGameplayTag> CrouchMeleeMontageTags; // 0x460(0x10)
	struct TArray<struct FGameplayTag> StandMeleeMontageTags; // 0x470(0x10)
	float MotionWarpingAngleTolerance; // 0x480(0x04)
	char pad_484[0xc]; // 0x484(0x0c)

	void OnStopMelee(struct UGameplayAbility* InActivatedAbility); // Function Solarland.ChaGA_Melee.OnStopMelee // (Final|Native|Public) // @ game+0x1fcc4d0
	void GetYawToleranceMinMax(struct FRotator& CurrentControlRotation, struct FRotator& TargetRotation, float& YawMin, float& YawMax); // Function Solarland.ChaGA_Melee.GetYawToleranceMinMax // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1fcb910
};

// Class Solarland.ChaGA_MissileSwarm
// Size: 0x7f0 (Inherited: 0x5f0)
struct UChaGA_MissileSwarm : USolarSkillGA_Projectile {
	struct FMissileSwarmSkillConfig SkillConfig; // 0x5e8(0x1d8)
	struct TArray<struct FMissileSwarmSpawnParameter> MissileSwarmSpawnConfig; // 0x7c0(0x10)
	struct UStaticMesh* PreviewMeshTemplate; // 0x7d0(0x08)
	struct UMaterialInterface* PreviewMaterial; // 0x7d8(0x08)
	char pad_7E8[0x8]; // 0x7e8(0x08)
};

// Class Solarland.ChaGA_MultiRecoverShield
// Size: 0x480 (Inherited: 0x460)
struct UChaGA_MultiRecoverShield : USolarCharacterGameplayAbility {
	struct UGameplayEffect* ActivationEffect; // 0x460(0x08)
	struct UGameplayEffect* CustomCoolDownEffect; // 0x468(0x08)
	char pad_470[0x10]; // 0x470(0x10)

	void OnCoolDownEffectStart(); // Function Solarland.ChaGA_MultiRecoverShield.OnCoolDownEffectStart // (Final|Native|Protected) // @ game+0x1fcbdb0
	void OnCoolDownEffectFinish(); // Function Solarland.ChaGA_MultiRecoverShield.OnCoolDownEffectFinish // (Final|Native|Protected) // @ game+0x1fcbd90
	void OnActivationEffect(struct FGameplayEventData Payload); // Function Solarland.ChaGA_MultiRecoverShield.OnActivationEffect // (Final|Native|Protected) // @ game+0x1fcbab0
};

// Class Solarland.ChaGA_NightComes
// Size: 0x498 (Inherited: 0x460)
struct UChaGA_NightComes : USolarCharacterGameplayAbility {
	struct UGameplayEffect* NightComesBuffGameplayEffect; // 0x460(0x08)
	struct ASolarNightComesActor* NightComesActorClass; // 0x468(0x08)
	struct UAnimMontage* SkillMontage; // 0x470(0x08)
	struct UAnimMontage* SkillMontageWithWeapon; // 0x478(0x08)
	struct FName StartSkillMontageNotify; // 0x480(0x08)
	struct FVector SpawnOffset; // 0x488(0x0c)
	char pad_494[0x4]; // 0x494(0x04)

	void OnMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_NightComes.OnMontageNotify // (Final|Native|Protected) // @ game+0x1fcc190
};

// Class Solarland.ChaGA_OpenNewTreasureBox
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_OpenNewTreasureBox : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_OpenScope
// Size: 0x4b8 (Inherited: 0x460)
struct UChaGA_OpenScope : USolarCharacterGameplayAbility {
	struct FGameplayTagRequirements OngoingTagRequirements; // 0x460(0x50)
	float MaxEnteringScopeOpeningTime; // 0x4b0(0x04)
	char pad_4B4[0x4]; // 0x4b4(0x04)

	void OnOngoingTagRequirementsMetStatusChange(bool bMet); // Function Solarland.ChaGA_OpenScope.OnOngoingTagRequirementsMetStatusChange // (Final|Native|Private) // @ game+0x1fcc320
};

// Class Solarland.ChaGA_OpenTreasureBox
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_OpenTreasureBox : USolarCharacterGameplayAbility {
	struct FGameplayTag OpenTreasureBoxMontageTag; // 0x460(0x08)
};

// Class Solarland.ChaGA_ParkourMaster
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_ParkourMaster : USolarCharacterGameplayAbility {
	struct UGameplayEffect* VertEffect; // 0x460(0x08)
	struct UGameplayEffect* HoriEffect; // 0x468(0x08)
	char pad_470[0x20]; // 0x470(0x20)

	void OnJetFlyActivated(struct UGameplayAbility* InActivatedAbility); // Function Solarland.ChaGA_ParkourMaster.OnJetFlyActivated // (Final|Native|Protected) // @ game+0x1fcbeb0
};

// Class Solarland.ChaGA_PickUp
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_PickUp : USolarCharacterGameplayAbility {
	struct FGameplayTag PickUpHighEmptyMontageTag; // 0x460(0x08)
	struct FGameplayTag PickUpLowEmptyMontageTag; // 0x468(0x08)
	struct FGameplayTag PickUpHighGunAimMontageTag; // 0x470(0x08)
	struct FGameplayTag PickUpLowGunAimMontageTag; // 0x478(0x08)
	char pad_480[0x10]; // 0x480(0x10)

	void OnWeaponSlotReplace(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.ChaGA_PickUp.OnWeaponSlotReplace // (Final|Native|Private) // @ game+0x1fcc610
	void OnMontageCompleted(); // Function Solarland.ChaGA_PickUp.OnMontageCompleted // (Final|Native|Private) // @ game+0x1fc7c60
};

// Class Solarland.ChaGA_RadarScanning
// Size: 0x4a8 (Inherited: 0x460)
struct UChaGA_RadarScanning : USolarCharacterGameplayAbility {
	float SpawnRadarDelayTime; // 0x460(0x04)
	float LifeTime; // 0x464(0x04)
	float LifeTimeNoResult; // 0x468(0x04)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct ASolarRadarBase* RadarClass; // 0x470(0x08)
	int32_t SpawnRadarEventID; // 0x478(0x04)
	float EffectRadius; // 0x47c(0x04)
	struct FGameplayTag CueTag; // 0x480(0x08)
	struct ASolarRadarBase* SpawnedRadar; // 0x488(0x08)
	char pad_490[0x18]; // 0x490(0x18)

	void StartSpawnRadar(); // Function Solarland.ChaGA_RadarScanning.StartSpawnRadar // (Final|Native|Private) // @ game+0x1fccb10
};

// Class Solarland.ChaGA_RapidBoost
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_RapidBoost : USolarCharacterGameplayAbility {
	struct UGameplayEffect* JetFlyCooldownEffectClass; // 0x460(0x08)
};

// Class Solarland.ChaGA_Rebirth
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_Rebirth : USolarCharacterGameplayAbility {
	struct UGameplayEffect* RebirthHPEffect; // 0x460(0x08)
	struct UGameplayEffect* ResetJetFlyTimesEffect; // 0x468(0x08)
};

// Class Solarland.ChaGA_RechargeShield
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_RechargeShield : USolarCharacterGameplayAbility {
	struct FGameplayTag RechargeShieldMontageTag; // 0x460(0x08)
	struct FGameplayTagContainer ActivationRequiredTagsAny; // 0x468(0x20)
};

// Class Solarland.ChaGA_Reload
// Size: 0x478 (Inherited: 0x460)
struct UChaGA_Reload : USolarCharacterGameplayAbility {
	struct FGameplayTag ReloadMontageTag; // 0x460(0x08)
	struct FGameplayTag ReloadWithBoltMontageTag; // 0x468(0x08)
	char pad_470[0x8]; // 0x470(0x08)

	void OnWeaponReloadComplete(); // Function Solarland.ChaGA_Reload.OnWeaponReloadComplete // (Final|Native|Public) // @ game+0x1fcc5f0
};

// Class Solarland.ChaGA_RepairVehicle
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_RepairVehicle : USolarCharacterGameplayAbility {
	struct FGameplayTag RepairVehicleWeakPointsMontageTag; // 0x460(0x08)
	char pad_468[0x8]; // 0x468(0x08)

	void OnVehicleWeakPointRepairingEnd(bool bCompleted); // Function Solarland.ChaGA_RepairVehicle.OnVehicleWeakPointRepairingEnd // (Final|Native|Private) // @ game+0x1fcc560
};

// Class Solarland.ChaGA_Rescue
// Size: 0x480 (Inherited: 0x460)
struct UChaGA_Rescue : USolarCharacterGameplayAbility {
	float SucceedBeforeSoundTime; // 0x460(0x04)
	struct FGameplayTag TeamRescueMontageTag; // 0x464(0x08)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct UChaAT_WaitDelay* DelayTask; // 0x470(0x08)
	struct FGameplayTag SucceedCueTag; // 0x478(0x08)

	bool ShouldCancelRescue(); // Function Solarland.ChaGA_Rescue.ShouldCancelRescue // (Final|Native|Protected) // @ game+0x1fcca00
	void OnRescueCompleted(); // Function Solarland.ChaGA_Rescue.OnRescueCompleted // (Final|Native|Protected) // @ game+0x1fcc3b0
	void OnMontageCompleted(); // Function Solarland.ChaGA_Rescue.OnMontageCompleted // (Final|Native|Protected) // @ game+0x1fc7c60
	void BeforeRescueCompleted(); // Function Solarland.ChaGA_Rescue.BeforeRescueCompleted // (Final|Native|Protected) // @ game+0x1fcb770
};

// Class Solarland.ChaGA_ReviveTeammates
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_ReviveTeammates : USolarCharacterGameplayAbility {
	struct FGameplayTag ReviveTeammatesMontageTag; // 0x460(0x08)

	void OnReviveCompleted(); // Function Solarland.ChaGA_ReviveTeammates.OnReviveCompleted // (Final|Native|Protected) // @ game+0x1fcc3d0
	void OnAbilityExec(); // Function Solarland.ChaGA_ReviveTeammates.OnAbilityExec // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.ChaGA_ShopVIP
// Size: 0x440 (Inherited: 0x438)
struct UChaGA_ShopVIP : USideResidentPassiveSkill {
	float ModifierValue; // 0x438(0x04)
	char pad_43C[0x4]; // 0x43c(0x04)
};

// Class Solarland.ChaGA_SkydiveFly
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_SkydiveFly : USolarCharacterGameplayAbility {
	struct FGameplayTag SkydiveSoundCue; // 0x460(0x08)

	void OnMovementModeChanged(enum class EMovementMode NewMovementMode); // Function Solarland.ChaGA_SkydiveFly.OnMovementModeChanged // (Final|Native|Private) // @ game+0x1fcc220
};

// Class Solarland.ChaGA_SkydiveLand
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_SkydiveLand : USolarCharacterGameplayAbility {

	void OnMovementModeChanged(enum class EMovementMode NewMovementMode); // Function Solarland.ChaGA_SkydiveLand.OnMovementModeChanged // (Final|Native|Private) // @ game+0x1fcc2a0
};

// Class Solarland.ChaGA_SkywardDive
// Size: 0x518 (Inherited: 0x460)
struct UChaGA_SkywardDive : USolarCharacterGameplayAbility {
	struct FGameplayTag SkywardDivePrepareCueTag; // 0x460(0x08)
	struct FGameplayTag SkywardDiveLaunchCueTag; // 0x468(0x08)
	float PrepareTimeConfig; // 0x470(0x04)
	float MaxSkywardHeightConfig; // 0x474(0x04)
	struct FRuntimeFloatCurve LaunchSpeedCurveConfig; // 0x478(0x88)
	struct TWeakObjectPtr<struct ASkywardDiveLauncher> SkywardDiveLauncher; // 0x500(0x08)
	char pad_508[0x8]; // 0x508(0x08)
	struct FName CancelActionName; // 0x510(0x08)

	void RealLaunchCharacter(); // Function Solarland.ChaGA_SkywardDive.RealLaunchCharacter // (Final|Native|Protected) // @ game+0x1fcc8a0
	void K2_DoPrepareCue(struct ASolarCharacter* Character, struct ASkywardDiveLauncher* Launcher); // Function Solarland.ChaGA_SkywardDive.K2_DoPrepareCue // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void K2_DoLaunchCue(struct ASolarCharacter* Character, struct ASkywardDiveLauncher* Launcher); // Function Solarland.ChaGA_SkywardDive.K2_DoLaunchCue // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void DoPrepareCue(); // Function Solarland.ChaGA_SkywardDive.DoPrepareCue // (Final|Native|Protected) // @ game+0x1fcb810
	void DoLaunchCue(); // Function Solarland.ChaGA_SkywardDive.DoLaunchCue // (Final|Native|Protected) // @ game+0x1fcb7f0
	void CancelPrepareLaunch(); // Function Solarland.ChaGA_SkywardDive.CancelPrepareLaunch // (Final|Native|Protected) // @ game+0x1fcb790
};

// Class Solarland.ChaGA_Sprint
// Size: 0x478 (Inherited: 0x460)
struct UChaGA_Sprint : USolarCharacterGameplayAbility {
	struct UGameplayEffect* SprintEffectClass; // 0x460(0x08)
	struct FGameplayTag CancelSprintEventTag; // 0x468(0x08)
	char pad_470[0x8]; // 0x470(0x08)

	void OnSprintCancelled(); // Function Solarland.ChaGA_Sprint.OnSprintCancelled // (Final|Native|Private) // @ game+0x1fcfca0
};

// Class Solarland.ChaGA_StickOutOfVehicle
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_StickOutOfVehicle : USolarCharacterGameplayAbility {
	float OutShotTimerForPC; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)
	struct FGameplayTagContainer BreakOutShotTags; // 0x468(0x20)

	void OnCancelByAdditionalCheck(); // Function Solarland.ChaGA_StickOutOfVehicle.OnCancelByAdditionalCheck // (Final|Native|Private) // @ game+0x7cb530
	bool CheckAdditionalCancel(); // Function Solarland.ChaGA_StickOutOfVehicle.CheckAdditionalCancel // (Final|Native|Private) // @ game+0x1fcf530
};

// Class Solarland.ChaGA_SuperRadarScan
// Size: 0x520 (Inherited: 0x460)
struct UChaGA_SuperRadarScan : USolarCharacterGameplayAbility {
	struct ASolarCharacter* CacheCharacter; // 0x460(0x08)
	bool bSpawnRadarSuccess; // 0x468(0x01)
	bool bSpawnedRadar; // 0x469(0x01)
	bool bBackswingPlayed; // 0x46a(0x01)
	char pad_46B[0x1]; // 0x46b(0x01)
	struct FVector HitLocation; // 0x46c(0x0c)
	struct FGameplayTag RadarOrnamentTag; // 0x478(0x08)
	float LifeTime; // 0x480(0x04)
	float PrecastTime; // 0x484(0x04)
	float BackswingTime; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)
	struct UGameplayAbility* RadarScanningAbilityClass; // 0x490(0x08)
	struct UAnimMontage* ScanAnimMontage; // 0x498(0x08)
	struct FGameplayTag CueTag; // 0x4a0(0x08)
	float MoveRadius; // 0x4a8(0x04)
	float OverlookCameraHeight; // 0x4ac(0x04)
	float OverlookCameraPitch; // 0x4b0(0x04)
	float CameraMoveScale; // 0x4b4(0x04)
	struct UParticleSystem* PreviewEffect; // 0x4b8(0x08)
	bool bUseForceLOD; // 0x4c0(0x01)
	char pad_4C1[0x3]; // 0x4c1(0x03)
	int32_t DefaultLOD; // 0x4c4(0x04)
	int32_t OverLookLOD; // 0x4c8(0x04)
	float CancelCD; // 0x4cc(0x04)
	char pad_4D0[0x38]; // 0x4d0(0x38)
	struct ACameraActor* CacheOverlookCamera; // 0x508(0x08)
	struct AActor* CacheViewTarget; // 0x510(0x08)
	struct UParticleSystemComponent* CacheEmitter; // 0x518(0x08)

	void TryCreateRadarForAI(); // Function Solarland.ChaGA_SuperRadarScan.TryCreateRadarForAI // (Final|Native|Private) // @ game+0x1fd0180
	void TryCreateRadar(bool bSpawn, struct FVector& InLoc); // Function Solarland.ChaGA_SuperRadarScan.TryCreateRadar // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1fd00a0
	void StartBackswing(); // Function Solarland.ChaGA_SuperRadarScan.StartBackswing // (Final|Native|Protected) // @ game+0x1fd0040
	void PlaySound(struct FString InSoundName); // Function Solarland.ChaGA_SuperRadarScan.PlaySound // (Final|Native|Public|BlueprintCallable) // @ game+0x1fcffa0
	void OnTakeDamage(struct ASolarCharacter* Character, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaGA_SuperRadarScan.OnTakeDamage // (Final|Native|Private|HasOutParms) // @ game+0x1fcfce0
	void OnSpawnRadarSuccessfulHandle(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.ChaGA_SuperRadarScan.OnSpawnRadarSuccessfulHandle // (Final|Native|Public) // @ game+0x1fcfbd0
	void OnReceivdTryCreateRadar(bool bSpawn); // Function Solarland.ChaGA_SuperRadarScan.OnReceivdTryCreateRadar // (Final|Native|Public) // @ game+0x1fcfa10
	void OnPrecastReady(); // Function Solarland.ChaGA_SuperRadarScan.OnPrecastReady // (Final|Native|Protected) // @ game+0x1fcf9f0
	void OnPostMontageCompleted(); // Function Solarland.ChaGA_SuperRadarScan.OnPostMontageCompleted // (Final|Native|Private) // @ game+0x1fc7d50
	void OnCameraRight(float Value); // Function Solarland.ChaGA_SuperRadarScan.OnCameraRight // (Final|Native|Public) // @ game+0x1fcf690
	void OnCameraForward(float Value); // Function Solarland.ChaGA_SuperRadarScan.OnCameraForward // (Final|Native|Public) // @ game+0x1fcf610
	void OnBackswingReady(); // Function Solarland.ChaGA_SuperRadarScan.OnBackswingReady // (Final|Native|Protected) // @ game+0x1fc7d50
	void K2_OnPrecastReady(); // Function Solarland.ChaGA_SuperRadarScan.K2_OnPrecastReady // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void K2_OnBackswingStart(bool bSuccess); // Function Solarland.ChaGA_SuperRadarScan.K2_OnBackswingStart // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void K2_OnAbilityEnd(struct ASolarCharacter* Character, bool bSuccess); // Function Solarland.ChaGA_SuperRadarScan.K2_OnAbilityEnd // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void K2_OnAbilityActive(struct ASolarCharacter* Character); // Function Solarland.ChaGA_SuperRadarScan.K2_OnAbilityActive // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.ChaGA_Swap
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_Swap : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_Swim
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_Swim : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_SwitchVehicleSeat
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_SwitchVehicleSeat : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_TacticalDodge
// Size: 0x4f8 (Inherited: 0x460)
struct UChaGA_TacticalDodge : USolarCharacterGameplayAbility {
	struct UGameplayEffect* DebuffPurifyEffectClass; // 0x460(0x08)
	struct UGameplayEffect* DebuffImmunityEffectClass; // 0x468(0x08)
	struct FTacticalDodgeDirectionConfig ForwardConfig; // 0x470(0x10)
	struct FTacticalDodgeDirectionConfig ForwardLeftConfig; // 0x480(0x10)
	struct FTacticalDodgeDirectionConfig ForwardRightConfig; // 0x490(0x10)
	struct FTacticalDodgeDirectionConfig LeftConfig; // 0x4a0(0x10)
	struct FTacticalDodgeDirectionConfig RightConfig; // 0x4b0(0x10)
	struct FTacticalDodgeDirectionConfig BackwardConfig; // 0x4c0(0x10)
	struct FTacticalDodgeDirectionConfig BackwardLeftConfig; // 0x4d0(0x10)
	struct FTacticalDodgeDirectionConfig BackwardRightConfig; // 0x4e0(0x10)
	struct UGameplayEffect* BuffQuickReloadEffectClass; // 0x4f0(0x08)
};

// Class Solarland.ChaGA_TeamBoost
// Size: 0x4d0 (Inherited: 0x460)
struct UChaGA_TeamBoost : USolarCharacterGameplayAbility {
	struct UAnimMontage* SkillMontage; // 0x460(0x08)
	struct UAnimMontage* SkillMontageArmed; // 0x468(0x08)
	struct FGameplayTag OrnamentTag; // 0x470(0x08)
	struct UAnimMontage* OrnamentMontage; // 0x478(0x08)
	struct UAnimMontage* OrnamentMontageArmed; // 0x480(0x08)
	struct FName StartSkillMontageNotify; // 0x488(0x08)
	struct UGameplayEffect* DebuffPurifyEffectClass; // 0x490(0x08)
	struct UGameplayEffect* DebuffImmunityEffectClass; // 0x498(0x08)
	struct UGameplayEffect* SelfBoostEffectClass; // 0x4a0(0x08)
	struct UGameplayEffect* TeammateBoostEffectClass; // 0x4a8(0x08)
	struct ATeamBoostProjectile* TeamBoostProjectileClass; // 0x4b0(0x08)
	struct FVector ProjectileSpawnRelativeLocation; // 0x4b8(0x0c)
	float SkillRangeRadius; // 0x4c4(0x04)
	float SkillRangeHalfHeight; // 0x4c8(0x04)
	char pad_4CC[0x4]; // 0x4cc(0x04)

	void OnMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_TeamBoost.OnMontageNotify // (Final|Native|Protected) // @ game+0x1fcf8d0
};

// Class Solarland.ChaGA_TrackingMaster
// Size: 0x478 (Inherited: 0x460)
struct UChaGA_TrackingMaster : USolarCharacterGameplayAbility {
	struct UGameplayEffect* TrackingMasterEffect; // 0x460(0x08)
	char pad_468[0x10]; // 0x468(0x10)

	void OnCharacterBeforeChange(); // Function Solarland.ChaGA_TrackingMaster.OnCharacterBeforeChange // (Final|Native|Protected) // @ game+0x1fcf730
};

// Class Solarland.ChaGA_Treat
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_Treat : USolarCharacterGameplayAbility {
	struct FGameplayTag TreatMontageTag; // 0x460(0x08)
	struct FGameplayTagContainer ActivationRequiredTagsAny; // 0x468(0x20)
};

// Class Solarland.ChaGA_UAVRescue
// Size: 0x4a0 (Inherited: 0x460)
struct UChaGA_UAVRescue : USolarCharacterGameplayAbility {
	struct ASolarUAVRescue* RescueUAVClass; // 0x460(0x08)
	float LifeTime; // 0x468(0x04)
	bool bEffectTeammates; // 0x46c(0x01)
	char pad_46D[0x3]; // 0x46d(0x03)
	struct UAnimMontage* SummoEmptyMontage; // 0x470(0x08)
	struct UAnimMontage* SummonAnimMontage; // 0x478(0x08)
	float SummonTime; // 0x480(0x04)
	float PermanentSpawnDelay; // 0x484(0x04)
	float SkillRange; // 0x488(0x04)
	struct FGameplayTag CueTag; // 0x48c(0x08)
	char pad_494[0xc]; // 0x494(0x0c)

	void SummonUAV(); // Function Solarland.ChaGA_UAVRescue.SummonUAV // (Final|Native|Private) // @ game+0x1fd0060
};

// Class Solarland.ChaGA_UAVShield
// Size: 0x4a0 (Inherited: 0x460)
struct UChaGA_UAVShield : USolarCharacterGameplayAbility {
	struct ASolarUAVShield* ShieldUAVClass; // 0x460(0x08)
	char pad_468[0x10]; // 0x468(0x10)
	float LifeTime; // 0x478(0x04)
	bool bEffectTeammates; // 0x47c(0x01)
	char pad_47D[0x3]; // 0x47d(0x03)
	struct UAnimMontage* SummonAnimMontage; // 0x480(0x08)
	struct UAnimMontage* SummonAnimMontage_Aim; // 0x488(0x08)
	float SummonTime; // 0x490(0x04)
	char pad_494[0xc]; // 0x494(0x0c)

	void SummonUAV(); // Function Solarland.ChaGA_UAVShield.SummonUAV // (Final|Native|Private) // @ game+0x1fd0080
};

// Class Solarland.ChaGA_UpgradeShield
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_UpgradeShield : USolarCharacterGameplayAbility {
	struct FGameplayTag UpgradeShieldMontageTag; // 0x460(0x08)
	struct FGameplayTagContainer ActivationRequiredTagsAny; // 0x468(0x20)

	void OnMontageInterruptOrCanceled(); // Function Solarland.ChaGA_UpgradeShield.OnMontageInterruptOrCanceled // (Final|Native|Private) // @ game+0x1fcf8b0
	void OnMontageCompleted(); // Function Solarland.ChaGA_UpgradeShield.OnMontageCompleted // (Final|Native|Private) // @ game+0x1fcf890
};

// Class Solarland.ChaGA_VaultBase
// Size: 0x498 (Inherited: 0x460)
struct UChaGA_VaultBase : USolarCharacterGameplayAbility {
	struct AActor* ContactActor; // 0x460(0x08)
	char pad_468[0x30]; // 0x468(0x30)

	void OnServerConfirm(); // Function Solarland.ChaGA_VaultBase.OnServerConfirm // (Final|Native|Protected) // @ game+0x1fcfb90
	void OnMontageCompleted(); // Function Solarland.ChaGA_VaultBase.OnMontageCompleted // (Final|Native|Protected) // @ game+0x1fc7c60
	void OnMontageBlendOut(); // Function Solarland.ChaGA_VaultBase.OnMontageBlendOut // (Final|Native|Protected) // @ game+0x1fcf870
};

// Class Solarland.ChaGA_Vault
// Size: 0x568 (Inherited: 0x498)
struct UChaGA_Vault : UChaGA_VaultBase {
	struct FGameplayTag StepMontageTag; // 0x498(0x08)
	struct FGameplayTag Step_CrossMontageTag; // 0x4a0(0x08)
	struct FGameplayTag Step_SprintMontageTag; // 0x4a8(0x08)
	struct FGameplayTag Step_Sprint_CrossMontageTag; // 0x4b0(0x08)
	struct FGameplayTag VaultMontageTag; // 0x4b8(0x08)
	struct FGameplayTag Vault_CrossMontageTag; // 0x4c0(0x08)
	struct FGameplayTag Vault_SprintMontageTag; // 0x4c8(0x08)
	struct FGameplayTag Vault_Sprint_CrossMontageTag; // 0x4d0(0x08)
	struct FGameplayTag ClimbMontageTag; // 0x4d8(0x08)
	struct FGameplayTag Climb_CrossMontageTag; // 0x4e0(0x08)
	struct FGameplayTag Climb_SprintMontageTag; // 0x4e8(0x08)
	struct FGameplayTag Climb_Sprint_CrossMontageTag; // 0x4f0(0x08)
	struct FGameplayTag Climb_WaterMontageTag; // 0x4f8(0x08)
	struct FGameplayTag HighClimbMontageTag; // 0x500(0x08)
	struct FGameplayTag HighClimb_CrossMontageTag; // 0x508(0x08)
	struct FGameplayTag HighClimb_SprintMontageTag; // 0x510(0x08)
	struct FGameplayTag HighClimb_Sprint_CrossMontageTag; // 0x518(0x08)
	struct FString PlayerCancelVaultEventName; // 0x520(0x10)
	struct FString TeammateCancelVaultEventName; // 0x530(0x10)
	struct FString EnemyCancelVaultEventName; // 0x540(0x10)
	char pad_550[0x18]; // 0x550(0x18)

	void OnRootMotionModifierDeactivate(struct ACharacter* Character, struct URootMotionModifier* Modifier); // Function Solarland.ChaGA_Vault.OnRootMotionModifierDeactivate // (Final|Native|Protected) // @ game+0x1fcfac0
	void OnHandleNotify(struct USolarAnimInstance* AnimInstance, struct USolarAnimNotify* Notify, int32_t& OutDenial); // Function Solarland.ChaGA_Vault.OnHandleNotify // (Final|Native|Protected|HasOutParms) // @ game+0x1fcf750
};

// Class Solarland.ChaGA_VehicleFire
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_VehicleFire : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_VehicleForceJetFlyAction
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_VehicleForceJetFlyAction : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_VehicleReload
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_VehicleReload : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_WallRun
// Size: 0x4f0 (Inherited: 0x460)
struct UChaGA_WallRun : USolarCharacterGameplayAbility {
	float WallRunCameraAngleTolerance; // 0x460(0x04)
	float WallRunJumpReactionDelay; // 0x464(0x04)
	float FootOffset; // 0x468(0x04)
	float WallRunBlendOut; // 0x46c(0x04)
	float SurfaceAngleLerpSpeed; // 0x470(0x04)
	float MaxStandAngle; // 0x474(0x04)
	struct FVector2D LandingForceMagnitude; // 0x478(0x08)
	int32_t MaxTriggerNumPerAirMove; // 0x480(0x04)
	float WallRunJumpHeight; // 0x484(0x04)
	float WallRunJumpDist; // 0x488(0x04)
	float WallRunFailedHeight; // 0x48c(0x04)
	float WallRunFailedDist; // 0x490(0x04)
	struct FGameplayTag WithWeaponFailedMontageTag; // 0x494(0x08)
	struct FGameplayTag EmptyHandFailedMontageTag; // 0x49c(0x08)
	struct FName CancelActionName; // 0x4a4(0x08)
	struct FName JumpActionName; // 0x4ac(0x08)
	char pad_4B4[0x4]; // 0x4b4(0x04)
	struct UChaAT_WaitLandingSpot* LandingTask; // 0x4b8(0x08)
	char pad_4C0[0x30]; // 0x4c0(0x30)

	void OnTakeDamage(struct ASolarCharacter* Character, struct FSolarPointDamageEvent& DamageEvent, float HealtDamage); // Function Solarland.ChaGA_WallRun.OnTakeDamage // (Final|Native|Private|HasOutParms) // @ game+0x1fcfe40
	void OnSyncForceBlendOut(); // Function Solarland.ChaGA_WallRun.OnSyncForceBlendOut // (Final|Native|Private) // @ game+0x1fcfcc0
	void OnServerConfirm(); // Function Solarland.ChaGA_WallRun.OnServerConfirm // (Final|Native|Private) // @ game+0x1fcfbb0
	void OnRequestedToJump(); // Function Solarland.ChaGA_WallRun.OnRequestedToJump // (Final|Native|Private) // @ game+0x1fcfaa0
	void OnCancel(); // Function Solarland.ChaGA_WallRun.OnCancel // (Final|Native|Private) // @ game+0x1fcf710
	void OnAcceptWallRunJump(); // Function Solarland.ChaGA_WallRun.OnAcceptWallRunJump // (Final|Native|Private) // @ game+0x1fcf560
};

// Class Solarland.ChaGA_WallRunJump
// Size: 0x4a0 (Inherited: 0x460)
struct UChaGA_WallRunJump : USolarCharacterGameplayAbility {
	float CameraRotLagSpeed; // 0x460(0x04)
	struct FGameplayTag WithWeaponJumpMontageTag; // 0x464(0x08)
	struct FGameplayTag EmptyHandJumpMontageTag; // 0x46c(0x08)
	struct FGameplayTag WithWeaponFailedMontageTag; // 0x474(0x08)
	struct FGameplayTag EmptyHandFailedMontageTag; // 0x47c(0x08)
	char pad_484[0x1c]; // 0x484(0x1c)

	void OnMontageCompleted(); // Function Solarland.ChaGA_WallRunJump.OnMontageCompleted // (Final|Native|Private) // @ game+0x1fc7c60
	void OnMontageBlendOut(); // Function Solarland.ChaGA_WallRunJump.OnMontageBlendOut // (Final|Native|Private) // @ game+0x1fc7c60
};

// Class Solarland.ChaGA_Zipline
// Size: 0x480 (Inherited: 0x460)
struct UChaGA_Zipline : USolarCharacterGameplayAbility {
	struct FName CancelActionName; // 0x460(0x08)
	char pad_468[0x18]; // 0x468(0x18)

	void OnCancelled(); // Function Solarland.ChaGA_Zipline.OnCancelled // (Final|Native|Protected) // @ game+0x7cb530
	void OnArrived(); // Function Solarland.ChaGA_Zipline.OnArrived // (Final|Native|Protected) // @ game+0x1fc7c60
};

// Class Solarland.ChaGC_CharacterActorCueBase
// Size: 0x2b0 (Inherited: 0x298)
struct AChaGC_CharacterActorCueBase : AGameplayCueNotify_Actor {
	struct TArray<struct FCueContent> CueContents; // 0x298(0x10)
	char pad_2A8[0x8]; // 0x2a8(0x08)

	bool WhileActiveInternal(struct ASolarCharacter* Character, struct FGameplayCueParameters& Parameters); // Function Solarland.ChaGC_CharacterActorCueBase.WhileActiveInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1fd50b0
	bool OnRemoveInternal(struct ASolarCharacter* NullableCharacter, struct FGameplayCueParameters& Parameters); // Function Solarland.ChaGC_CharacterActorCueBase.OnRemoveInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1fd4510
	void OnLocalPlayerSpectateMeStatusChanged(struct ASolarCharacter* Character, bool bIsSpectating); // Function Solarland.ChaGC_CharacterActorCueBase.OnLocalPlayerSpectateMeStatusChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x1fd4440
	bool OnExecuteInternal(struct ASolarCharacter* Character, struct FGameplayCueParameters& Parameters); // Function Solarland.ChaGC_CharacterActorCueBase.OnExecuteInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1fd4270
	bool OnActiveInternal(struct ASolarCharacter* Character, struct FGameplayCueParameters& Parameters); // Function Solarland.ChaGC_CharacterActorCueBase.OnActiveInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1fd40a0
	bool ListenLocalPlayerSpectateMeStatus(); // Function Solarland.ChaGC_CharacterActorCueBase.ListenLocalPlayerSpectateMeStatus // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x1fd4070
};

// Class Solarland.ChaGC_AerialReconnaissanc
// Size: 0x2b8 (Inherited: 0x2b0)
struct AChaGC_AerialReconnaissanc : AChaGC_CharacterActorCueBase {
	float TestDistance; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)
};

// Class Solarland.ChaGC_AirDrop
// Size: 0x298 (Inherited: 0x298)
struct AChaGC_AirDrop : AGameplayCueNotify_Actor {
};

// Class Solarland.ChaGC_HighAlert
// Size: 0x2c0 (Inherited: 0x2b0)
struct AChaGC_HighAlert : AChaGC_CharacterActorCueBase {
	bool bShowDebug; // 0x2b0(0x01)
	char pad_2B1[0x3]; // 0x2b1(0x03)
	float DebugTextDuration; // 0x2b4(0x04)
	float DebugDistance; // 0x2b8(0x04)
	char pad_2BC[0x4]; // 0x2bc(0x04)
};

// Class Solarland.ChaGC_JetSlowFalling
// Size: 0x50 (Inherited: 0x50)
struct UChaGC_JetSlowFalling : UGameplayCueNotify_Static {
};

// Class Solarland.ChaGC_SuperSkillActorCueBase
// Size: 0x2b8 (Inherited: 0x2b0)
struct AChaGC_SuperSkillActorCueBase : AChaGC_CharacterActorCueBase {
	struct FGameplayTag SuperSkillGameplayEffectTag; // 0x2b0(0x08)
};

// Class Solarland.ChaGC_MassInvisibility
// Size: 0x368 (Inherited: 0x2b8)
struct AChaGC_MassInvisibility : AChaGC_SuperSkillActorCueBase {
	struct UMaterialEffectBase* InvisibilityEffectClass; // 0x2b8(0x08)
	struct FGameplayTag InvisibilityOrnamentTag; // 0x2c0(0x08)
	struct FName BeginInvisibleCueEvent; // 0x2c8(0x08)
	int32_t SprintingStatusNotificationID; // 0x2d0(0x04)
	int32_t SprintingStatusTipShowInterval; // 0x2d4(0x04)
	float WarningOtherRange; // 0x2d8(0x04)
	float WarningOtherRangeOutThreshold; // 0x2dc(0x04)
	float PrepareWarningCueEventTriggerPoint; // 0x2e0(0x04)
	struct FName PrepareWarningCueEvent; // 0x2e4(0x08)
	float TimeBeforeEndToStartEndWarning; // 0x2ec(0x04)
	struct FName EndWarningMaterialParameterName; // 0x2f0(0x08)
	float EndWarningRate; // 0x2f8(0x04)
	float EndWarningCueEventTriggerPoint; // 0x2fc(0x04)
	struct FName EndWarningCueEvent; // 0x300(0x08)
	struct UCameraShake* CameraModifierClass; // 0x308(0x08)
	struct FGameplayTag SkillBuffGameplayEffectTag; // 0x310(0x08)
	struct FGameplayTag SkillPreGameplayEffectTag; // 0x318(0x08)
	char pad_320[0x48]; // 0x320(0x48)
};

// Class Solarland.ChaGC_ParkourAcceleration
// Size: 0x310 (Inherited: 0x298)
struct AChaGC_ParkourAcceleration : AGameplayCueNotify_Actor {
	struct FName FlushEffectID; // 0x298(0x08)
	struct FName TrailEffectID; // 0x2a0(0x08)
	struct TMap<struct FName, struct FVector2D> TrailEmitterParameters; // 0x2a8(0x50)
	struct FGameplayTag DurationTag; // 0x2f8(0x08)
	char pad_300[0x10]; // 0x300(0x10)
};

// Class Solarland.ChaGC_SkydiveFly
// Size: 0x2c8 (Inherited: 0x2b0)
struct AChaGC_SkydiveFly : AChaGC_CharacterActorCueBase {
	float MinBoostDuration; // 0x2b0(0x04)
	bool bIsBoost; // 0x2b4(0x01)
	char pad_2B5[0x13]; // 0x2b5(0x13)

	void ShowEncircleParticle(bool bIsLocalTeam, bool bIsDefender); // Function Solarland.ChaGC_SkydiveFly.ShowEncircleParticle // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1fd4fe0
};

// Class Solarland.ChaGC_SkydiveSound
// Size: 0x2b8 (Inherited: 0x298)
struct AChaGC_SkydiveSound : AGameplayCueNotify_Actor {
	struct TArray<struct FName> StartSoundGroups; // 0x298(0x10)
	struct TArray<struct FName> StopSoundGroups; // 0x2a8(0x10)
};

// Class Solarland.ChaGC_SkywardDiveLaunch
// Size: 0x2d0 (Inherited: 0x298)
struct AChaGC_SkywardDiveLaunch : AGameplayCueNotify_Actor {
	struct UAnimMontage* CharacterSkywardMontage; // 0x298(0x08)
	struct UParticleSystem* LaunchDeviceRealLaunchParticle; // 0x2a0(0x08)
	struct UParticleSystem* CharacterSkywardLaunchParticle; // 0x2a8(0x08)
	struct FName CharacterLaunchParticleSocketName; // 0x2b0(0x08)
	struct FName StartRealLaunchLoopSoundGroupName; // 0x2b8(0x08)
	struct FName StopRealLaunchLoopSoundGroupName; // 0x2c0(0x08)
	struct UParticleSystemComponent* CacheSkywardExtraEffect; // 0x2c8(0x08)
};

// Class Solarland.ChaGC_SkywardDivePrepare
// Size: 0x2f0 (Inherited: 0x298)
struct AChaGC_SkywardDivePrepare : AGameplayCueNotify_Actor {
	struct UAnimMontage* CharacterPrepareMontage; // 0x298(0x08)
	struct UParticleSystem* PrepareBeamParticle; // 0x2a0(0x08)
	struct UParticleSystem* PreparePackageParticle; // 0x2a8(0x08)
	struct TArray<struct FName> PreparePackageSocketNames; // 0x2b0(0x10)
	struct FName StartPrepareLaunchSoundGroupName; // 0x2c0(0x08)
	struct FName StopPrepareLaunchSoundGroupName; // 0x2c8(0x08)
	struct UParticleSystemComponent* PrepareBeamEffect; // 0x2d0(0x08)
	struct TArray<struct UParticleSystemComponent*> PreparePackageEffect; // 0x2d8(0x10)
	char pad_2E8[0x8]; // 0x2e8(0x08)
};

// Class Solarland.ChaGC_SwitchToDuckRollingMesh
// Size: 0x2b0 (Inherited: 0x2b0)
struct AChaGC_SwitchToDuckRollingMesh : AChaGC_CharacterActorCueBase {
};

// Class Solarland.ChaGC_WallRun
// Size: 0x50 (Inherited: 0x50)
struct UChaGC_WallRun : UGameplayCueNotify_Static {
};

// Class Solarland.CharacterBasalAttributeSet
// Size: 0x350 (Inherited: 0x50)
struct UCharacterBasalAttributeSet : UBasalAttributeSet {
	struct FGameplayAttributeData Speed; // 0x50(0x10)
	struct FGameplayAttributeData BaseSpeed; // 0x60(0x10)
	struct FGameplayAttributeData PassiveSkillSpeedMultiple; // 0x70(0x10)
	struct FGameplayAttributeData ShootingSpeedMultiple; // 0x80(0x10)
	struct FGameplayAttributeData CustomJumpHeightMultiple; // 0x90(0x10)
	struct FGameplayAttributeData AllSpeedParamA; // 0xa0(0x10)
	struct FGameplayAttributeData AllSpeedParamB; // 0xb0(0x10)
	struct FGameplayAttributeData AllSpeedParamC; // 0xc0(0x10)
	struct FGameplayAttributeData AllSpeedParamD; // 0xd0(0x10)
	struct FGameplayAttributeData GroundSpeedParamA; // 0xe0(0x10)
	struct FGameplayAttributeData GroundSpeedParamB; // 0xf0(0x10)
	struct FGameplayAttributeData GroundSpeedParamC; // 0x100(0x10)
	struct FGameplayAttributeData GroundSpeedParamD; // 0x110(0x10)
	struct FGameplayAttributeData SwimSpeedParamA; // 0x120(0x10)
	struct FGameplayAttributeData SwimSpeedParamB; // 0x130(0x10)
	struct FGameplayAttributeData SwimSpeedParamC; // 0x140(0x10)
	struct FGameplayAttributeData SwimSpeedParamD; // 0x150(0x10)
	struct FGameplayAttributeData MaxShield; // 0x160(0x10)
	struct FGameplayAttributeData CurrentShield; // 0x170(0x10)
	struct FGameplayAttributeData ShieldMultiRecoverCoeff; // 0x180(0x10)
	struct FGameplayAttributeData ShieldReductionDamageMultiple; // 0x190(0x10)
	struct FGameplayAttributeData RadialDamageReductionMultiple; // 0x1a0(0x10)
	struct FGameplayAttributeData AllDamageReductionMultiple; // 0x1b0(0x10)
	struct FGameplayAttributeData WeaponDamageParamA; // 0x1c0(0x10)
	struct FGameplayAttributeData WeaponDamageParamB; // 0x1d0(0x10)
	struct FGameplayAttributeData WeaponDamageParamC; // 0x1e0(0x10)
	struct FGameplayAttributeData WeaponDamageParamD; // 0x1f0(0x10)
	struct FGameplayAttributeData UnarmedWeaponDamageParamB; // 0x200(0x10)
	struct FGameplayAttributeData VehicleWeaponDamageParamB; // 0x210(0x10)
	struct FGameplayAttributeData VehicleHitDamageParamB; // 0x220(0x10)
	struct FGameplayAttributeData VehicleAbilityDamageParamB; // 0x230(0x10)
	struct FGameplayAttributeData CharacterSkillDamageParamB; // 0x240(0x10)
	struct FGameplayAttributeData VerticalJetTimesCD; // 0x250(0x10)
	struct FGameplayAttributeData VerticalJetInnerCD; // 0x260(0x10)
	struct FGameplayAttributeData VerticalJetTimes; // 0x270(0x10)
	struct FGameplayAttributeData VerticalJetRestTimes; // 0x280(0x10)
	struct FGameplayAttributeData HorizontalJetTimesCD; // 0x290(0x10)
	struct FGameplayAttributeData HorizontalJetInnerCD; // 0x2a0(0x10)
	struct FGameplayAttributeData HorizontalJetTimes; // 0x2b0(0x10)
	struct FGameplayAttributeData HorizontalJetRestTimes; // 0x2c0(0x10)
	struct FGameplayAttributeData RescueRecoveredMultiple; // 0x2d0(0x10)
	struct FGameplayAttributeData TreatmentDurationReductionMultiple; // 0x2e0(0x10)
	struct FGameplayAttributeData ShieldRecoveredMultiple; // 0x2f0(0x10)
	struct FGameplayAttributeData ChargingMultiple; // 0x300(0x10)
	struct FGameplayAttributeData AutoHealingRateOnMotorbike; // 0x310(0x10)
	struct FGameplayAttributeData RescueDurationReductionMultiple; // 0x320(0x10)
	struct FGameplayAttributeData ReviveDurationReductionBonus; // 0x330(0x10)
	struct FGameplayAttributeData QuickReloadOverrideTime; // 0x340(0x10)

	void OnRep_VerticalJetTimesCD(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_VerticalJetTimesCD // (Final|Native|Protected|HasOutParms) // @ game+0x1fd4f40
	void OnRep_VerticalJetTimes(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_VerticalJetTimes // (Final|Native|Protected|HasOutParms) // @ game+0x1fd4ea0
	void OnRep_VerticalJetRestTimes(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_VerticalJetRestTimes // (Final|Native|Protected|HasOutParms) // @ game+0x1fd4e00
	void OnRep_VerticalJetInnerCD(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_VerticalJetInnerCD // (Final|Native|Protected|HasOutParms) // @ game+0x1fd4d60
	void OnRep_TreatmentDurationReductionMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_TreatmentDurationReductionMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x1fd4cc0
	void OnRep_Speed(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_Speed // (Native|Protected|HasOutParms) // @ game+0x1fd4c10
	void OnRep_ShieldMultiRecoverCoeff(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_ShieldMultiRecoverCoeff // (Native|Protected|HasOutParms) // @ game+0x1fd4b60
	void OnRep_RescueDurationReductionMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_RescueDurationReductionMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x1fd4ac0
	void OnRep_MaxShield(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_MaxShield // (Native|Protected|HasOutParms) // @ game+0x1fd4a10
	void OnRep_HorizontalJetTimesCD(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_HorizontalJetTimesCD // (Final|Native|Protected|HasOutParms) // @ game+0x1fd4970
	void OnRep_HorizontalJetTimes(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_HorizontalJetTimes // (Final|Native|Protected|HasOutParms) // @ game+0x1fd48d0
	void OnRep_HorizontalJetRestTimes(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_HorizontalJetRestTimes // (Final|Native|Protected|HasOutParms) // @ game+0x1fd4830
	void OnRep_HorizontalJetInnerCD(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_HorizontalJetInnerCD // (Final|Native|Protected|HasOutParms) // @ game+0x1fd4790
	void OnRep_CurrentShield(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_CurrentShield // (Native|Protected|HasOutParms) // @ game+0x1fd46e0
};

// Class Solarland.CharacterBodyScaleConfigDataAsset
// Size: 0x1a8 (Inherited: 0x30)
struct UCharacterBodyScaleConfigDataAsset : UDataAsset {
	struct TMap<enum class ECharacterBodyScaleType, struct FCharacterBodyScaleConfig> ConfigMap; // 0x30(0x50)
	struct FCharacterAssistAimTargetConfig DefaultAssistAimTargetConfig; // 0x80(0xd8)
	struct TMap<enum class ECharacterBodyScaleType, struct FCharacterAssistAimTargetConfig> AssistAimTargetConfigMap; // 0x158(0x50)
};

// Class Solarland.CharacterConfigAsset
// Size: 0x30 (Inherited: 0x30)
struct UCharacterConfigAsset : UDataAsset {
};

// Class Solarland.CharacterCruiseComponent
// Size: 0x108 (Inherited: 0xb0)
struct UCharacterCruiseComponent : UActorComponent {
	struct ASolarCapsuleActor* BoardedCapsulePrivate; // 0xb0(0x08)
	char pad_B8[0xc]; // 0xb8(0x0c)
	struct FName CruiseStartSoundGroupName; // 0xc4(0x08)
	char pad_CC[0x3c]; // 0xcc(0x3c)

	struct ASolarCharacter* GetCharacterOwner(); // Function Solarland.CharacterCruiseComponent.GetCharacterOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fd4050
};

// Class Solarland.CharacterGameplayTagsConfig
// Size: 0x650 (Inherited: 0x30)
struct UCharacterGameplayTagsConfig : UDataAsset {
	struct FGameplayTag CruiseAbilityTag; // 0x30(0x08)
	struct FGameplayTag SkydiveFlyAbilityTag; // 0x38(0x08)
	struct FGameplayTag SkydiveLandAbilityTag; // 0x40(0x08)
	struct FGameplayTag CrouchAbilityTag; // 0x48(0x08)
	struct FGameplayTag JumpAbilityTag; // 0x50(0x08)
	struct FGameplayTag SprintAbilityTag; // 0x58(0x08)
	struct FGameplayTag SwimAbilityTag; // 0x60(0x08)
	struct FGameplayTag VaultAbilityTag; // 0x68(0x08)
	struct FGameplayTag JetFlyAbilityTag; // 0x70(0x08)
	struct FGameplayTag JetFlyVertAbilityTag; // 0x78(0x08)
	struct FGameplayTag JetFlyHoriAbilityTag; // 0x80(0x08)
	struct FGameplayTag LaunchAbilityTag; // 0x88(0x08)
	struct FGameplayTag JetSlowFallingAbilityTag; // 0x90(0x08)
	struct FGameplayTag EquipAbilityTag; // 0x98(0x08)
	struct FGameplayTag MeleeAbilityTag; // 0xa0(0x08)
	struct FGameplayTag FireAbilityTag; // 0xa8(0x08)
	struct FGameplayTag ReloadAbilityTag; // 0xb0(0x08)
	struct FGameplayTag VehicleFireAbilityTag; // 0xb8(0x08)
	struct FGameplayTag VehicleReloadAbilityTag; // 0xc0(0x08)
	struct FGameplayTag BoltAbilityTag; // 0xc8(0x08)
	struct FGameplayTag OpenScopeAbilityTag; // 0xd0(0x08)
	struct FGameplayTag WeaponAbilityTag; // 0xd8(0x08)
	struct FGameplayTag GetOnVehicleAbilityTag; // 0xe0(0x08)
	struct FGameplayTag GetOffVehicleAbilityTag; // 0xe8(0x08)
	struct FGameplayTag SwitchVehicleSeatAbilityTag; // 0xf0(0x08)
	struct FGameplayTag StickOutOffVehicleAbilityTag; // 0xf8(0x08)
	struct FGameplayTag TreatAbilityTag; // 0x100(0x08)
	struct FGameplayTag RechargeShieldAbilityTag; // 0x108(0x08)
	struct FGameplayTag BigRechargeShieldAbilityTag; // 0x110(0x08)
	struct FGameplayTag UpgradeShieldAbilityTag; // 0x118(0x08)
	struct FGameplayTag OpenTreasureBoxAbilityTag; // 0x120(0x08)
	struct FGameplayTag OpenNewTreasureBoxAbilityTag; // 0x128(0x08)
	struct FGameplayTag RepairVehicleAbilityTag; // 0x130(0x08)
	struct FGameplayTag RescueAbilityTag; // 0x138(0x08)
	struct FGameplayTag PickUpAbilityTag; // 0x140(0x08)
	struct FGameplayTag AutoPickUpAbilityTag; // 0x148(0x08)
	struct FGameplayTag ResurrectTeammateAbilityTag; // 0x150(0x08)
	struct FGameplayTag DeathVergeAbilityTag; // 0x158(0x08)
	struct FGameplayTag DeathAbilityTag; // 0x160(0x08)
	struct FGameplayTag RebirthAbilityTag; // 0x168(0x08)
	struct FGameplayTag ParkourMasterEffectTag; // 0x170(0x08)
	struct FGameplayTag HawkEyeEffectTag; // 0x178(0x08)
	struct FGameplayTag MassInvisibilityEffectTag; // 0x180(0x08)
	struct FGameplayTag MassInvisibilityExEffectTag; // 0x188(0x08)
	struct FGameplayTag RapidBoostEffectTag; // 0x190(0x08)
	struct FGameplayTag MainContinousTag; // 0x198(0x08)
	struct FGameplayTag SubContinousTag; // 0x1a0(0x08)
	struct FGameplayTag HasPreBuffTag; // 0x1a8(0x08)
	struct FGameplayTag DurationPauseTag; // 0x1b0(0x08)
	struct FGameplayTag SuperSkillEffectTag; // 0x1b8(0x08)
	struct FGameplayTag TacticleSkillEffectTag; // 0x1c0(0x08)
	struct FGameplayTag SkydiveSoundTag; // 0x1c8(0x08)
	struct FGameplayTag WallRunCueTag; // 0x1d0(0x08)
	struct FGameplayTag CruisingStatusTag; // 0x1d8(0x08)
	struct FGameplayTag WalkingStatusTag; // 0x1e0(0x08)
	struct FGameplayTag FallingStatusTag; // 0x1e8(0x08)
	struct FGameplayTag FlyingStatusTag; // 0x1f0(0x08)
	struct FGameplayTag SwimmingStatusTag; // 0x1f8(0x08)
	struct FGameplayTag SkydivingStatusTag; // 0x200(0x08)
	struct FGameplayTag VaultingStatusTag; // 0x208(0x08)
	struct FGameplayTag VaultingAcceptCancelTag; // 0x210(0x08)
	struct FGameplayTag VaultingAcceptWeaponInputTag; // 0x218(0x08)
	struct FGameplayTag WallRunStatusTag; // 0x220(0x08)
	struct FGameplayTag WallRunAttemptVaultTag; // 0x228(0x08)
	struct FGameplayTag LaunchStatusTag; // 0x230(0x08)
	struct FGameplayTag RunningStatusTag; // 0x238(0x08)
	struct FGameplayTag SprintingStatusTag; // 0x240(0x08)
	struct FGameplayTag StationaryStatusTag; // 0x248(0x08)
	struct FGameplayTag FollowViewRotationStatusTag; // 0x250(0x08)
	struct FGameplayTag RotationFollowVelocityStatusTag; // 0x258(0x08)
	struct FGameplayTag CollisionIgnorePawnChannelStatusTag; // 0x260(0x08)
	struct FGameplayTag WeaponStatusTag; // 0x268(0x08)
	struct FGameplayTag MeleeAttackingStatusTag; // 0x270(0x08)
	struct FGameplayTag FullBodyMeleeStatusTag; // 0x278(0x08)
	struct FGameplayTag FiringStatusTag; // 0x280(0x08)
	struct FGameplayTag VehicleFiringStatusTag; // 0x288(0x08)
	struct FGameplayTag HiddenFireStatusTag; // 0x290(0x08)
	struct FGameplayTag BoltingStatusTag; // 0x298(0x08)
	struct FGameplayTag ReloadingStatusTag; // 0x2a0(0x08)
	struct FGameplayTag ScopeOpeningStatusTag; // 0x2a8(0x08)
	struct FGameplayTag EnteringScopeOpeningStatusTag; // 0x2b0(0x08)
	struct FGameplayTag QuickReloadStatusTag; // 0x2b8(0x08)
	struct FGameplayTag FunctionalityStatusTag; // 0x2c0(0x08)
	struct FGameplayTag OpeningTreasureBoxStatusTag; // 0x2c8(0x08)
	struct FGameplayTag RechargingShieldStatusTag; // 0x2d0(0x08)
	struct FGameplayTag RescuingStatusTag; // 0x2d8(0x08)
	struct FGameplayTag TreatingStatusTag; // 0x2e0(0x08)
	struct FGameplayTag ReviveTeammateStatusTag; // 0x2e8(0x08)
	struct FGameplayTag InVehicleTag; // 0x2f0(0x08)
	struct FGameplayTag DanceStatusTag; // 0x2f8(0x08)
	struct FGameplayTag DanceLeaderStatusTag; // 0x300(0x08)
	struct FGameplayTag UsingContinuousSkill; // 0x308(0x08)
	struct FGameplayTag HoldingSkill; // 0x310(0x08)
	struct FGameplayTag AutoCancelOnInputReleased; // 0x318(0x08)
	struct FGameplayTag MassInvisibilityStatusTag; // 0x320(0x08)
	struct FGameplayTag MassInvisibilityPrepareStatusTag; // 0x328(0x08)
	struct FGameplayTag SuperRadarChooseStatusTag; // 0x330(0x08)
	struct FGameplayTag RadarScanningStatusTag; // 0x338(0x08)
	struct FGameplayTag EMPStatusTag; // 0x340(0x08)
	struct FGameplayTag FreezeStatusTag; // 0x348(0x08)
	struct FGameplayTag PerspectiveByRadarStatusTag; // 0x350(0x08)
	struct FGameplayTag InhibitDebuffStatusTag; // 0x358(0x08)
	struct FGameplayTag CanScoutEnemyTag; // 0x360(0x08)
	struct FGameplayTag DuckRollingStatusTag; // 0x368(0x08)
	struct FGameplayTag DeathVergeStatusTag; // 0x370(0x08)
	struct FGameplayTag DeathStatusTag; // 0x378(0x08)
	struct FGameplayTag InvincibleStatusTag; // 0x380(0x08)
	struct FGameplayTag InhibitOpenScopeStatusTag; // 0x388(0x08)
	struct FGameplayTag InhibitWeaponInputStatusTag; // 0x390(0x08)
	struct FGameplayTag InhibitWeaponFireInputStatusTag; // 0x398(0x08)
	struct FGameplayTag InhibitMoveStatusTag; // 0x3a0(0x08)
	struct FGameplayTag InhibitMoveCombinationStatusTag; // 0x3a8(0x08)
	struct FGameplayTag InhibitUnCrouchStatusTag; // 0x3b0(0x08)
	struct FGameplayTag InhibitSprintStatusTag; // 0x3b8(0x08)
	struct FGameplayTag InhibitAimOffsetStatusTag; // 0x3c0(0x08)
	struct FGameplayTag InhibitLeftHandWeaponAttachTag; // 0x3c8(0x08)
	struct FGameplayTag InhibitLeftHandWeaponAttachAnimNotifyTag; // 0x3d0(0x08)
	struct FGameplayTag InhibitInteractionOption; // 0x3d8(0x08)
	struct FGameplayTag InhibitContinuousTreatStatusTag; // 0x3e0(0x08)
	struct FGameplayTag InhibitFireStatusTag; // 0x3e8(0x08)
	struct FGameplayTag InhibitDamageReactionTag; // 0x3f0(0x08)
	struct FGameplayTag InhibitJetSlowFallingTag; // 0x3f8(0x08)
	struct FGameplayTag InhibitBlackHoleEffectStatusTag; // 0x400(0x08)
	struct FGameplayTag VJetChargingStatusTag; // 0x408(0x08)
	struct FGameplayTag HJetChargingStatusTag; // 0x410(0x08)
	struct FGameplayTag GenericTalentActivationStatusTag; // 0x418(0x08)
	struct FGameplayTag TrackingMasterStatusTag; // 0x420(0x08)
	struct FGameplayTag ShieldMultiRecoverTag; // 0x428(0x08)
	struct FGameplayTag ShieldMultiRecoverOnGoingTag; // 0x430(0x08)
	struct FGameplayTag AerialReconnaissanceTagTag; // 0x438(0x08)
	struct FGameplayTag OpenAirDropTag; // 0x440(0x08)
	struct FGameplayTag ResurrectTeammateTag; // 0x448(0x08)
	struct FGameplayTag ReviveTeammateTag; // 0x450(0x08)
	struct FGameplayTag ReviveSelfTag; // 0x458(0x08)
	struct FGameplayTag HasRotationInputStatusTag; // 0x460(0x08)
	struct FGameplayTag InSmokeStatusTag; // 0x468(0x08)
	struct FGameplayTag InBattleTag; // 0x470(0x08)
	struct FGameplayTag StartCruiseEventTag; // 0x478(0x08)
	struct FGameplayTag IntoParachuteZoneEventTag; // 0x480(0x08)
	struct FGameplayTag ForceParachuteEventTag; // 0x488(0x08)
	struct FGameplayTag FinishCruiseEventTag; // 0x490(0x08)
	struct FGameplayTag CrouchEventTag; // 0x498(0x08)
	struct FGameplayTag LaunchEventTag; // 0x4a0(0x08)
	struct FGameplayTag VaultEventTag; // 0x4a8(0x08)
	struct FGameplayTag StepEventTag; // 0x4b0(0x08)
	struct FGameplayTag WallRunEventTag; // 0x4b8(0x08)
	struct FGameplayTag WallRunJumpEventTag; // 0x4c0(0x08)
	struct FGameplayTag HitRecoverEventTag; // 0x4c8(0x08)
	struct FGameplayTag MeleeAttackEventTag; // 0x4d0(0x08)
	struct FGameplayTag FireEventTag; // 0x4d8(0x08)
	struct FGameplayTag BoltEventTag; // 0x4e0(0x08)
	struct FGameplayTag EquipEventTag; // 0x4e8(0x08)
	struct FGameplayTag SwapEventTag; // 0x4f0(0x08)
	struct FGameplayTag ReloadEventTag; // 0x4f8(0x08)
	struct FGameplayTag VehicleReloadEventTag; // 0x500(0x08)
	struct FGameplayTag VehicleFireEventTag; // 0x508(0x08)
	struct FGameplayTag PickUpEventTag; // 0x510(0x08)
	struct FGameplayTag AutoPickUpEventTag; // 0x518(0x08)
	struct FGameplayTag RepairVehicleEventTag; // 0x520(0x08)
	struct FGameplayTag DanceEventTag; // 0x528(0x08)
	struct FGameplayTag SpawnRadarEventTag; // 0x530(0x08)
	struct FGameplayTag DyingEventTag; // 0x538(0x08)
	struct FGameplayTag KillOrAssistEventTag; // 0x540(0x08)
	struct FGameplayTag GottenOnVehicleEventTag; // 0x548(0x08)
	struct FGameplayTag GottenOffVehicleEventTag; // 0x550(0x08)
	struct FGameplayTag VehicleForJetEventTag; // 0x558(0x08)
	struct FGameplayTag SideLeavingEventTag; // 0x560(0x08)
	struct FGameplayTag SideJoiningEventTag; // 0x568(0x08)
	struct FGameplayTag SuperSkillForbiddenEventTag; // 0x570(0x08)
	struct FGameplayTag SuperSkillBlockEventTag; // 0x578(0x08)
	struct FGameplayTag SuperSkillForbidUIStatusTag; // 0x580(0x08)
	struct FGameplayTag SuperSkillBlockStatusTag; // 0x588(0x08)
	struct FGameplayTag SuperSkillCDReducedStatusTag; // 0x590(0x08)
	struct FGameplayTag TacticalForbiddenEventTag; // 0x598(0x08)
	struct FGameplayTag TacticalBlockEventTag; // 0x5a0(0x08)
	struct FGameplayTag TacticalForbidUIStatusTag; // 0x5a8(0x08)
	struct FGameplayTag TacticalSkillCDReducedStatusTag; // 0x5b0(0x08)
	struct FGameplayTag TacticalSkillBlockStatusTag; // 0x5b8(0x08)
	struct FGameplayTag BigWaterGunActivatingTag; // 0x5c0(0x08)
	struct FGameplayTag AirDropTag; // 0x5c8(0x08)
	struct FGameplayTag NightComesBuff; // 0x5d0(0x08)
	struct FGameplayTag NightComesActorContinous; // 0x5d8(0x08)
	struct FGameplayTag SkywardDiveTag; // 0x5e0(0x08)
	struct FGameplayTag SuperRadarScanTag; // 0x5e8(0x08)
	struct FGameplayTag RadarScanningTag; // 0x5f0(0x08)
	struct FGameplayTag BlackHoleStatusTag; // 0x5f8(0x08)
	struct FGameplayTag RoleAbilityRootTag; // 0x600(0x08)
	struct FGameplayTag RoleAbilityRootTypeTag; // 0x608(0x08)
	struct FGameplayTag SkillTypeTag; // 0x610(0x08)
	struct FGameplayTag SummonTypeTag; // 0x618(0x08)
	struct FGameplayTag ProjectileTypeTag; // 0x620(0x08)
	struct FGameplayTag SummonedJumpPadLaunchCooldownTag; // 0x628(0x08)
	struct FGameplayTag ShieldMultiRecoverCoolDownTag; // 0x630(0x08)
	struct FGameplayTag GenericTalentCooldownTag; // 0x638(0x08)
	struct FGameplayTag VJetCooldownTag; // 0x640(0x08)
	struct FGameplayTag HJetCooldownTag; // 0x648(0x08)
};

// Class Solarland.MaterialChangePriorityTags
// Size: 0x58 (Inherited: 0x30)
struct UMaterialChangePriorityTags : UDataAsset {
	struct FGameplayTag Default; // 0x30(0x08)
	struct FGameplayTag Radar; // 0x38(0x08)
	struct FGameplayTag Stealth; // 0x40(0x08)
	struct FGameplayTag WholeShield; // 0x48(0x08)
	struct FGameplayTag ThermalImaging; // 0x50(0x08)
};

// Class Solarland.VisibilityFlagTags
// Size: 0x70 (Inherited: 0x30)
struct UVisibilityFlagTags : UDataAsset {
	struct FGameplayTag Default; // 0x30(0x08)
	struct FGameplayTag Cruise; // 0x38(0x08)
	struct FGameplayTag Stealth; // 0x40(0x08)
	struct FGameplayTag CameraOverlap; // 0x48(0x08)
	struct FGameplayTag DissolvedDeath; // 0x50(0x08)
	struct FGameplayTag WholeShield; // 0x58(0x08)
	struct FGameplayTag MassInvisibility; // 0x60(0x08)
	struct FGameplayTag MassInvisibilityWarning; // 0x68(0x08)
};

// Class Solarland.CharacterMontageTags
// Size: 0x50 (Inherited: 0x30)
struct UCharacterMontageTags : UDataAsset {
	struct FGameplayTag TeamRescueMontageTag; // 0x30(0x08)
	struct FGameplayTag RechargeShieldTag; // 0x38(0x08)
	struct FGameplayTag UpgradeShieldTag; // 0x40(0x08)
	struct FGameplayTag LeadingDanceTag; // 0x48(0x08)
};

// Class Solarland.CharacterGlobalConfig
// Size: 0xab0 (Inherited: 0x30)
struct UCharacterGlobalConfig : UDataAsset {
	struct TMap<int32_t, struct FCharacterSpecializedComponentInfos> CharacterSpecializedComponentInfos; // 0x30(0x50)
	struct FName HeadBoneName; // 0x80(0x08)
	struct FGameplayCueTag TeamPerspectiveCueTag_LocalPlayer; // 0x88(0x08)
	struct FGameplayCueTag TeamPerspectiveCueTag_Teammate; // 0x90(0x08)
	struct FGameplayTagRequirements TeamPerspectiveTagRequirements_Teammate; // 0x98(0x50)
	struct FGameplayCueTag OpponentPerspectiveCueTag; // 0xe8(0x08)
	float OpponentPerspectiveMinDistance; // 0xf0(0x04)
	float OpponentPerspectiveMaxDistance; // 0xf4(0x04)
	struct FGameplayTagRequirements OpponentPerspectiveLocalPlayerTagRequirements; // 0xf8(0x50)
	struct FGameplayTagRequirements OpponentPerspectiveOpponentTagRequirements; // 0x148(0x50)
	float OpponentPerspectiveDisableDelay; // 0x198(0x04)
	char pad_19C[0x4]; // 0x19c(0x04)
	struct FInjectorMeshPreset RescueInjectorPreset; // 0x1a0(0x50)
	int32_t FastReliefPassiveTextID; // 0x1f0(0x04)
	int32_t RescueTextID; // 0x1f4(0x04)
	struct UCameraShake* HitCameraShake; // 0x1f8(0x08)
	float CameraShakeCD; // 0x200(0x04)
	char pad_204[0x4]; // 0x204(0x04)
	struct UMaterialParameterCollection* CameraFOVParameterCollection; // 0x208(0x08)
	int64_t ChargingDoneSoundCD; // 0x210(0x08)
	struct UGameplayEffect* ExtraVJetTimesEffect; // 0x218(0x08)
	struct UGameplayEffect* VJetChargeScaleEffect; // 0x220(0x08)
	struct UGameplayEffect* ExtraHJetTimesEffect; // 0x228(0x08)
	struct UGameplayEffect* HJetChargeScaleEffect; // 0x230(0x08)
	struct FGameplayTag ExtraJetTimesSetterTag; // 0x238(0x08)
	struct FGameplayTag JetChargeScaleSetterTag; // 0x240(0x08)
	int32_t DeathBoxId; // 0x248(0x04)
	float TurnSpeed; // 0x24c(0x04)
	float TurnChangeSpeedThreshold; // 0x250(0x04)
	float TurnAngleThreshold; // 0x254(0x04)
	float SprintTolerantAngle; // 0x258(0x04)
	float SkydiveFollowingTeleportTriggerDistance; // 0x25c(0x04)
	float SkydiveFollowingTeleportDistance; // 0x260(0x04)
	float JetLandingTriggerMinVelocity; // 0x264(0x04)
	float JetLandingHeightThreshold; // 0x268(0x04)
	float JetLandingVelocity; // 0x26c(0x04)
	float MaxSpeedParamB; // 0x270(0x04)
	float MinSpeedParamD; // 0x274(0x04)
	struct FRuntimeFloatCurve NetworkMaxSmoothUpdateDistanceBySpeedCurve; // 0x278(0x88)
	struct FRuntimeFloatCurve NetworkNoSmoothUpdateDistanceBySpeedCurve; // 0x300(0x88)
	struct FRuntimeFloatCurve NetworkSimulatedSmoothLocationTimeBySpeedCurve; // 0x388(0x88)
	struct UCruiseAssetSet* CruiseAssetSet; // 0x410(0x08)
	struct FString AirborneStartSound; // 0x418(0x10)
	struct FString AirborneJumpSound; // 0x428(0x10)
	struct TArray<struct FSkydivingEffectPreset> SkydivingEffectClassList; // 0x438(0x10)
	float LowerLimitOfSpeedForSkydivingSoundEffect; // 0x448(0x04)
	float MinPitchToPlaySkydivingLandingEffect; // 0x44c(0x04)
	struct FName StartSkydiveLoopSoundGroup_Speed; // 0x450(0x08)
	struct FName StopSkydiveLoopSoundGroup_Speed; // 0x458(0x08)
	struct FName StopSkydiveLoopSoundGroup_Height; // 0x460(0x08)
	float VaultDegree; // 0x468(0x04)
	float VaultHalfHeight; // 0x46c(0x04)
	struct FName DetectorProfile; // 0x470(0x08)
	float KneeWaterInfluencesCharacterSpeed; // 0x478(0x04)
	float WaterDraftDepthWhenDeathVerge; // 0x47c(0x04)
	float ShoalWaterMaxDepth; // 0x480(0x04)
	float HeavyJumpWaterMinAxisVelocity; // 0x484(0x04)
	struct FWaterEffectPreset SwimmingWaterEffectPreset; // 0x488(0x50)
	struct FWaterEffectPreset HeavyJumpWaterEffectPreset; // 0x4d8(0x50)
	struct TArray<struct FWaterEffectPreset> SoftJumpWaterEffectPresets; // 0x528(0x10)
	struct FGameplayCueTag InWaterLocalGameplayCueTag; // 0x538(0x08)
	struct FName PickupCollisionProfileName; // 0x540(0x08)
	float RecommendCriticalHealth; // 0x548(0x04)
	char pad_54C[0x4]; // 0x54c(0x04)
	struct FTreasureBoxOperatorMeshPreset TreasureBoxOperatorMeshPreset; // 0x550(0x50)
	int32_t AirDropSkillTextID; // 0x5a0(0x04)
	char pad_5A4[0x4]; // 0x5a4(0x04)
	struct FString TreatFX; // 0x5a8(0x10)
	int32_t TreatmentTextID; // 0x5b8(0x04)
	float MinHealthRatioToShowMedicineFX; // 0x5bc(0x04)
	struct TSoftObjectPtr<UParticleSystem> RevivePickupFX; // 0x5c0(0x28)
	struct TSoftObjectPtr<UParticleSystem> ReviveClearFX; // 0x5e8(0x28)
	int32_t ResurrectTextID; // 0x610(0x04)
	float ResurrectTime; // 0x614(0x04)
	struct TArray<struct TSoftObjectPtr<UParticleSystem>> ShieldUpgradeBodyLoopFXTemplate; // 0x618(0x10)
	struct TArray<struct TSoftObjectPtr<UParticleSystem>> ShieldUpgradeBodyEndFXTemplate; // 0x628(0x10)
	char pad_638[0x8]; // 0x638(0x08)
	struct FOperatorMeshPreset ShieldOperatorPreset; // 0x640(0x120)
	struct UCurveFloat* ShieldOperatorExpandCurve; // 0x760(0x08)
	struct UCurveFloat* ShieldOperatorNarrowCurve; // 0x768(0x08)
	struct FName EffectAttachBone; // 0x770(0x08)
	struct FString ShieldRechargeEffect; // 0x778(0x10)
	struct FString ShieldBrokenEffect; // 0x788(0x10)
	float HitEffectOffset; // 0x798(0x04)
	int32_t ShieldRechargeTextID; // 0x79c(0x04)
	int32_t ShieldRechargePassiveTextID; // 0x7a0(0x04)
	struct FName ShieldReduceScreenEffectID; // 0x7a4(0x08)
	struct FName ShieldBrokenScreenEffectID; // 0x7ac(0x08)
	char pad_7B4[0x4]; // 0x7b4(0x04)
	struct USkeletalMeshComponentConfig* FirstPersonMeshConfig; // 0x7b8(0x08)
	float BaseGunCollisionTraceDis; // 0x7c0(0x04)
	char pad_7C4[0x4]; // 0x7c4(0x04)
	struct TMap<enum class ECharacterBodyScaleType, float> GunCollisionTraceStartHighIdle; // 0x7c8(0x50)
	struct TMap<enum class ECharacterBodyScaleType, float> GunCollisionTraceStartHighCrouch; // 0x818(0x50)
	float MinDistanceGun2Wall; // 0x868(0x04)
	float GunCollisionXYAdjustDownSide; // 0x86c(0x04)
	float GunCollisionCheckZLimit; // 0x870(0x04)
	char pad_874[0x4]; // 0x874(0x04)
	struct UWeaponSystemPlayer* WeaponSystemPlayerClass; // 0x878(0x08)
	struct UWeaponSystemPlayerAI* WeaponSystemAIClass; // 0x880(0x08)
	struct UMapMarkBase* TrackingMarkWidgetClass; // 0x888(0x08)
	struct FVector WeaponAimStartOffset; // 0x890(0x0c)
	char pad_89C[0x4]; // 0x89c(0x04)
	struct FGameplayTagContainer AbilitiesToCancelOnPressingWeaponAction; // 0x8a0(0x20)
	float DefaultHitTraceLifetime; // 0x8c0(0x04)
	char pad_8C4[0x4]; // 0x8c4(0x04)
	struct UCurveFloat* DefaultHitTraceWidgetScaleCurve; // 0x8c8(0x08)
	float SniperHitTraceLifetime; // 0x8d0(0x04)
	char pad_8D4[0x4]; // 0x8d4(0x04)
	struct UCurveFloat* SniperHitTraceWidgetScaleCurve; // 0x8d8(0x08)
	float MeleeHitTraceLifetime; // 0x8e0(0x04)
	float VehicleHitTraceLifetime; // 0x8e4(0x04)
	struct UCurveFloat* VehicleHitTraceWidgetScaleCurve; // 0x8e8(0x08)
	struct FVehicleRepairToolMeshPreset VehicleRepairToolMeshPreset; // 0x8f0(0x50)
	int32_t RepairWeakPointTextID; // 0x940(0x04)
	char pad_944[0x4]; // 0x944(0x04)
	struct UActorEffect* VehicleStealthEffectClass; // 0x948(0x08)
	struct FTeammateHUDPreset TeammateHUDPreset; // 0x950(0x20)
	float HUDZNomral; // 0x970(0x04)
	float HUDZSwim; // 0x974(0x04)
	float HUDZCrouch; // 0x978(0x04)
	float HUDZCrawl; // 0x97c(0x04)
	float HUDChangeTime; // 0x980(0x04)
	float HUDChangeSpeed; // 0x984(0x04)
	float CheckHUDDistanceToCenter; // 0x988(0x04)
	float HUDTranslucentValue; // 0x98c(0x04)
	struct USolarTeammateHUDWidgetComponent* HUDComponentClass; // 0x990(0x08)
	struct URadarScanSoundDataAsset* RadarScanSoundDataAsset; // 0x998(0x08)
	struct FName RadarScannedEffectID; // 0x9a0(0x08)
	struct FGameplayCueTag RadarDetectedEffectCueTag; // 0x9a8(0x08)
	struct FGameplayCueTag RadarDetectedInSmokeEffectCueTag; // 0x9b0(0x08)
	struct UStaticMeshComponent* MassInvisibilityWarningIconClass; // 0x9b8(0x08)
	struct TSoftObjectPtr<UTexture2D> CharacterMassInvisibilityWarningIcon; // 0x9c0(0x28)
	struct TSoftObjectPtr<UTexture2D> VehicleMassInvisibilityWarningIcon; // 0x9e8(0x28)
	struct FVector MassInvWarningIconScale; // 0xa10(0x0c)
	struct FVector MassInvWarningIconOffsetDefault; // 0xa1c(0x0c)
	struct FVector MassInvWarningIconOffsetCrouch; // 0xa28(0x0c)
	struct FVector MassInvWarningIconOffsetCrawl; // 0xa34(0x0c)
	float MassInvWarningIconOffsetSmoothSpeed; // 0xa40(0x04)
	float MassInvWarningIconOffsetForceNoSmoothDistance; // 0xa44(0x04)
	struct UScoutEnemyConfig* ScoutEnemyConfig; // 0xa48(0x08)
	bool bEnableEMPBlockChargeNotice; // 0xa50(0x01)
	char pad_A51[0x7]; // 0xa51(0x07)
	struct UGyroscopeConfig* GyroscopeConfig; // 0xa58(0x08)
	float CheckInRoomInterval; // 0xa60(0x04)
	float DamageLimitTime; // 0xa64(0x04)
	float DamagingDuration; // 0xa68(0x04)
	struct FName DissolvedDeathFXBindingSocketName; // 0xa6c(0x08)
	char pad_A74[0x4]; // 0xa74(0x04)
	struct TArray<struct UActorEffect*> PersistentActorEffectClasses; // 0xa78(0x10)
	struct FName HealthReduceScreenEffectID; // 0xa88(0x08)
	struct FName HealthLowScreenEffectID; // 0xa90(0x08)
	float HealthLowTipThreshold; // 0xa98(0x04)
	char pad_A9C[0x4]; // 0xa9c(0x04)
	struct UGameplayEffect* EnterBattleEffect; // 0xaa0(0x08)
	struct UGameplayEffect* EnterCombatEffect; // 0xaa8(0x08)
};

// Class Solarland.CharacterMVPConfig
// Size: 0x60 (Inherited: 0x30)
struct UCharacterMVPConfig : UDataAsset {
	struct FSoftObjectPath AnimPath; // 0x30(0x18)
	struct FSoftObjectPath LevelPath; // 0x48(0x18)
};

// Class Solarland.CharacterSkillAttributeSet
// Size: 0xf0 (Inherited: 0x30)
struct UCharacterSkillAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData TacticalSkillCD; // 0x30(0x10)
	struct FGameplayAttributeData TacticalSkillCDBase; // 0x40(0x10)
	struct FGameplayAttributeData TacticalSkillCDParamA; // 0x50(0x10)
	struct FGameplayAttributeData TacticalSkillCDParamB; // 0x60(0x10)
	struct FGameplayAttributeData TacticalSkillCDFixedValue; // 0x70(0x10)
	struct FGameplayAttributeData SuperSkillCD; // 0x80(0x10)
	struct FGameplayAttributeData SuperSkillCDBase; // 0x90(0x10)
	struct FGameplayAttributeData SuperSkillCDParamA; // 0xa0(0x10)
	struct FGameplayAttributeData SuperSkillCDParamB; // 0xb0(0x10)
	struct FGameplayAttributeData SuperSkillCDFixedValue; // 0xc0(0x10)
	struct FGameplayAttributeData ScoutEnemyTimeRequired; // 0xd0(0x10)
	struct FGameplayAttributeData ScoutEnemyDuration; // 0xe0(0x10)

	void OnRep_TacticalSkillCDParamB(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_TacticalSkillCDParamB // (Native|Protected|HasOutParms) // @ game+0x1fd4c10
	void OnRep_TacticalSkillCDParamA(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_TacticalSkillCDParamA // (Native|Protected|HasOutParms) // @ game+0x1fb1fe0
	void OnRep_TacticalSkillCDFixedValue(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_TacticalSkillCDFixedValue // (Native|Protected|HasOutParms) // @ game+0x1fd4a10
	void OnRep_TacticalSkillCDBase(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_TacticalSkillCDBase // (Native|Protected|HasOutParms) // @ game+0x1fb2090
	void OnRep_SuperSkillCDParamB(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_SuperSkillCDParamB // (Native|Protected|HasOutParms) // @ game+0x1fdb9b0
	void OnRep_SuperSkillCDParamA(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_SuperSkillCDParamA // (Native|Protected|HasOutParms) // @ game+0x1fd4b60
	void OnRep_SuperSkillCDFixedValue(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_SuperSkillCDFixedValue // (Native|Protected|HasOutParms) // @ game+0x1fdb900
	void OnRep_SuperSkillCDBase(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_SuperSkillCDBase // (Native|Protected|HasOutParms) // @ game+0x1fd46e0
	void OnRep_ScoutEnemyTimeRequired(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_ScoutEnemyTimeRequired // (Native|Protected|HasOutParms) // @ game+0x1fdb850
	void OnRep_ScoutEnemyDuration(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_ScoutEnemyDuration // (Native|Protected|HasOutParms) // @ game+0x1fdb7a0
};

// Class Solarland.CharacterSkinConfig
// Size: 0x1c8 (Inherited: 0x30)
struct UCharacterSkinConfig : UDataAsset {
	struct FSoftObjectPath SkinIcon; // 0x30(0x18)
	struct FSoftObjectPath DefaultIcon; // 0x48(0x18)
	struct FSoftObjectPath SkinRes; // 0x60(0x18)
	struct FSoftObjectPath CharaSkinRes; // 0x78(0x18)
	struct FSoftObjectPath ShieldRes; // 0x90(0x18)
	struct FSoftObjectPath InvincibleMAT; // 0xa8(0x18)
	struct FSoftClassPath AnimBPRes; // 0xc0(0x18)
	struct TMap<struct FGameplayTag, struct FStaticMeshOrnamentConfig> StaticMeshOrnamentsConfig; // 0xd8(0x50)
	struct TMap<struct FGameplayTag, struct FSkeletalMeshOrnamentConfig> SkeletalMeshOrnamentsConfig; // 0x128(0x50)
	struct TMap<struct FGameplayTag, struct FChildActorOrnamentConfig> ChildActorOrnamentsConfig; // 0x178(0x50)

	struct TMap<struct FGameplayTag, struct FStaticMeshOrnamentConfig> GetStaticMeshOrnamentsConfig(); // Function Solarland.CharacterSkinConfig.GetStaticMeshOrnamentsConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fdb0b0
	struct FSoftObjectPath GetSkinRes(); // Function Solarland.CharacterSkinConfig.GetSkinRes // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1fdb080
	struct FSoftObjectPath GetSkinIcon(); // Function Solarland.CharacterSkinConfig.GetSkinIcon // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1fdb050
	struct TMap<struct FGameplayTag, struct FSkeletalMeshOrnamentConfig> GetSkeletalMeshOrnamentsConfig(); // Function Solarland.CharacterSkinConfig.GetSkeletalMeshOrnamentsConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fdafb0
	struct FSoftObjectPath GetInvincibleMAT(); // Function Solarland.CharacterSkinConfig.GetInvincibleMAT // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1fdae60
	struct TMap<struct FGameplayTag, struct FChildActorOrnamentConfig> GetChildActorOrnamentsConfig(); // Function Solarland.CharacterSkinConfig.GetChildActorOrnamentsConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fdad70
	struct FSoftObjectPath GetCharaSkinRes(); // Function Solarland.CharacterSkinConfig.GetCharaSkinRes // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1fdad40
	struct FSoftObjectPath GetAnimBPRes(); // Function Solarland.CharacterSkinConfig.GetAnimBPRes // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1fdad10
};

// Class Solarland.SoundGroupBase
// Size: 0x28 (Inherited: 0x28)
struct USoundGroupBase : UObject {
};

// Class Solarland.SoundGroupSimple
// Size: 0x38 (Inherited: 0x28)
struct USoundGroupSimple : USoundGroupBase {
	struct FString SoundEvent; // 0x28(0x10)
};

// Class Solarland.SoundGroupByTeammate
// Size: 0x58 (Inherited: 0x28)
struct USoundGroupByTeammate : USoundGroupBase {
	struct FString SelfEvent; // 0x28(0x10)
	struct FString TeammateEvent; // 0x38(0x10)
	struct FString OtherEvent; // 0x48(0x10)
};

// Class Solarland.SoundGroupByBattle
// Size: 0x58 (Inherited: 0x28)
struct USoundGroupByBattle : USoundGroupBase {
	struct FString IAttackOtherEvent; // 0x28(0x10)
	struct FString OtherAttackMeEvent; // 0x38(0x10)
	struct FString OtherEvent; // 0x48(0x10)
};

// Class Solarland.CharacterSoundConfig
// Size: 0x150 (Inherited: 0x30)
struct UCharacterSoundConfig : UDataAsset {
	struct TMap<enum class ECharacterSoundOpt, struct FString> SoundEventTable; // 0x30(0x50)
	struct TMap<struct FName, struct USoundGroupBase*> SoundGroupTable; // 0x80(0x50)
	struct TMap<enum class EPhysicalSurface, struct FName> SurfaceTypeToHitByBulletSoundGroup; // 0xd0(0x50)
	struct FTransform DefaultTransform; // 0x120(0x30)
};

// Class Solarland.CheckBoxGroup
// Size: 0x1c0 (Inherited: 0x160)
struct UCheckBoxGroup : UNamedSlot {
	struct FMulticastInlineDelegate OnStateChangedEvent; // 0x160(0x10)
	struct FMulticastInlineDelegate OnStateChangedEventEx; // 0x170(0x10)
	struct UCheckBox* RevertToCachedChild; // 0x180(0x08)
	struct UCheckBox* LastCheckedChild; // 0x188(0x08)
	struct UPanelWidget* GroupRoot; // 0x190(0x08)
	bool bAllowSwitchOff; // 0x198(0x01)
	enum class EUseType UseType; // 0x199(0x01)
	char pad_19A[0x6]; // 0x19a(0x06)
	struct TArray<struct UCheckBox*> CheckBoxList; // 0x1a0(0x10)
	char pad_1B0[0x10]; // 0x1b0(0x10)

	void SetSelectIndex(int32_t Index); // Function Solarland.CheckBoxGroup.SetSelectIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x1fdbdb0
	void RevertLastCheck(); // Function Solarland.CheckBoxGroup.RevertLastCheck // (Final|Native|Public|BlueprintCallable) // @ game+0x1fdbcf0
	bool RemoveGroupChild(struct UCheckBox* Child); // Function Solarland.CheckBoxGroup.RemoveGroupChild // (Final|Native|Public|BlueprintCallable) // @ game+0x1fdbb80
	void OnStateChanged(bool bIsChecked); // Function Solarland.CheckBoxGroup.OnStateChanged // (Final|Native|Protected) // @ game+0x1fdba60
	int32_t GetSelectedIndex(); // Function Solarland.CheckBoxGroup.GetSelectedIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x1fdaf80
	void CleanCheckedState(); // Function Solarland.CheckBoxGroup.CleanCheckedState // (Final|Native|Public|BlueprintCallable) // @ game+0x1fdac00
	struct TArray<struct UCheckBox*> CheckChildrenState(int32_t& CheckedChildIndex); // Function Solarland.CheckBoxGroup.CheckChildrenState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1fdab20
	bool AddGroupChild(struct UCheckBox* Child); // Function Solarland.CheckBoxGroup.AddGroupChild // (Final|Native|Public|BlueprintCallable) // @ game+0x1fdaa80
};

// Class Solarland.ChooseWeaponItemObject
// Size: 0xb0 (Inherited: 0x28)
struct UChooseWeaponItemObject : UObject {
	char pad_28[0x88]; // 0x28(0x88)
};

// Class Solarland.ChooseWeaponItemWidget
// Size: 0x368 (Inherited: 0x348)
struct UChooseWeaponItemWidget : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct USolarButton* Btn_Collect; // 0x350(0x08)
	struct USolarButton* Btn_Select; // 0x358(0x08)
	struct FChooseWeaponItemState UiState; // 0x360(0x04)
	char pad_364[0x4]; // 0x364(0x04)

	void SelectWeapon(); // Function Solarland.ChooseWeaponItemWidget.SelectWeapon // (Final|Native|Protected) // @ game+0x1fdbd90
	void K2_OnUIStateChanged(struct FChooseWeaponItemState& NewState); // Function Solarland.ChooseWeaponItemWidget.K2_OnUIStateChanged // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void K2_InitWidget(struct FChooseWeaponItemData& InData); // Function Solarland.ChooseWeaponItemWidget.K2_InitWidget // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	bool K2_GetWeaponUIIcon(int32_t InWeaponTypeId, struct FSoftObjectPath& OutPath); // Function Solarland.ChooseWeaponItemWidget.K2_GetWeaponUIIcon // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fdb500
	void CollectWeapon(); // Function Solarland.ChooseWeaponItemWidget.CollectWeapon // (Final|Native|Protected) // @ game+0x1fdac20
};

// Class Solarland.ChooseWeaponWidget
// Size: 0x4c8 (Inherited: 0x348)
struct UChooseWeaponWidget : USolarUserWidget {
	char pad_348[0x18]; // 0x348(0x18)
	struct UTileView* WeaponList; // 0x360(0x08)
	struct UWeaponChosenWidget* WeaponChosen_2; // 0x368(0x08)
	struct UWeaponChosenWidget* WeaponChosen_3; // 0x370(0x08)
	struct TMap<int32_t, struct FChooseWeaponItemData> WeaponDatasMap; // 0x378(0x50)
	struct TMap<int32_t, struct UChooseWeaponItemObject*> ListWeapons; // 0x3c8(0x50)
	struct TMap<enum class EWeaponEquipSlot, struct UWeaponChosenWidget*> EquippedWeaponWidgetMap; // 0x418(0x50)
	struct TSet<int32_t> CollectedWeapons; // 0x468(0x50)
	char pad_4B8[0x4]; // 0x4b8(0x04)
	struct FName CloseActionName; // 0x4bc(0x08)
	char pad_4C4[0x4]; // 0x4c4(0x04)

	void SelectEquipSlot(enum class EWeaponEquipSlot InSlot); // Function Solarland.ChooseWeaponWidget.SelectEquipSlot // (Final|Native|Public|BlueprintCallable) // @ game+0x1fdbd10
	void ResetChosenWidget(bool bResetFirst, bool bResetSecond); // Function Solarland.ChooseWeaponWidget.ResetChosenWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x1fdbc20
	void RefreshWeaponList(bool bForce); // Function Solarland.ChooseWeaponWidget.RefreshWeaponList // (Final|Native|Protected) // @ game+0x1fdbaf0
	void OnSelfOpened(); // Function Solarland.ChooseWeaponWidget.OnSelfOpened // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnRequestCollectWeapon(int32_t InWeaponID, bool bInCollected); // Function Solarland.ChooseWeaponWidget.OnRequestCollectWeapon // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnListWeaponSelected(int32_t InWeaponID); // Function Solarland.ChooseWeaponWidget.OnListWeaponSelected // (Final|Native|Protected) // @ game+0x1fdb710
	void OnListWeaponCollected(int32_t InWeaponID); // Function Solarland.ChooseWeaponWidget.OnListWeaponCollected // (Final|Native|Protected) // @ game+0x1fdb680
	void OnEquipSlotSelected(enum class EWeaponEquipSlot InSlot); // Function Solarland.ChooseWeaponWidget.OnEquipSlotSelected // (Final|Native|Protected) // @ game+0x1fdb600
	void K2_EquipWeapon(enum class EWeaponEquipSlot InSlot, int32_t InWeaponID); // Function Solarland.ChooseWeaponWidget.K2_EquipWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x1fdb430
	void InitWeaponList(struct TArray<struct FChooseWeaponItemData>& InList); // Function Solarland.ChooseWeaponWidget.InitWeaponList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1fdb2f0
	int32_t GetWeaponSkinId(int32_t InWeaponID); // Function Solarland.ChooseWeaponWidget.GetWeaponSkinId // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct UChooseWeaponItemWidget* GetListWidgetByWeaponId(int32_t InWeaponID); // Function Solarland.ChooseWeaponWidget.GetListWidgetByWeaponId // (Final|Native|Protected|Const) // @ game+0x1fdaee0
	struct TArray<struct FChooseWeaponItemData> GetListWeapons(); // Function Solarland.ChooseWeaponWidget.GetListWeapons // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fdae90
	struct TArray<struct FChooseWeaponItemData> GetEquippedWeaponData(); // Function Solarland.ChooseWeaponWidget.GetEquippedWeaponData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fdae10
	struct TArray<int32_t> GetCollectedWeaponsFormPlayerData(); // Function Solarland.ChooseWeaponWidget.GetCollectedWeaponsFormPlayerData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void EquipWeapon(enum class EWeaponEquipSlot InSlot, int32_t InWeaponID); // Function Solarland.ChooseWeaponWidget.EquipWeapon // (Final|Native|Protected) // @ game+0x1fdac40
};

// Class Solarland.CircleCardView
// Size: 0x228 (Inherited: 0x228)
struct UCircleCardView : UCardView {
};

// Class Solarland.CommonTwiceConfirmBaseWidget
// Size: 0x348 (Inherited: 0x348)
struct UCommonTwiceConfirmBaseWidget : USolarUserWidget {
};

// Class Solarland.ComponentButtonBaseWidget
// Size: 0x350 (Inherited: 0x348)
struct UComponentButtonBaseWidget : USolarUserWidget {
	struct USolarButton* OperateArea; // 0x348(0x08)
};

// Class Solarland.CrashReportManager
// Size: 0x50 (Inherited: 0x28)
struct UCrashReportManager : UObject {
	char pad_28[0x28]; // 0x28(0x28)

	void SetUserID(struct FString InUserId); // Function Solarland.CrashReportManager.SetUserID // (Final|Native|Public) // @ game+0x1fe1cf0
	void SetDeviceUUID(struct FString InDeviceUUID); // Function Solarland.CrashReportManager.SetDeviceUUID // (Final|Native|Public) // @ game+0x1fe1c50
	void ReportLuaException(struct FString ErrorMsg, struct FString Traceback, bool bHandled); // Function Solarland.CrashReportManager.ReportLuaException // (Final|Native|Static|Public) // @ game+0x1fe1b20
};

// Class Solarland.CrosshairCanvasPanel
// Size: 0x228 (Inherited: 0x168)
struct UCrosshairCanvasPanel : UCanvasPanel {
	struct TMap<enum class ECrossHairState, struct FStateMapItemStruct> CrosshairStateConfigList; // 0x168(0x50)
	struct TArray<struct UWidget*> IgonreWidgetToStateMap; // 0x1b8(0x10)
	struct TArray<struct FUICrossHairSpreadStruct> SpreadItemList; // 0x1c8(0x10)
	struct TArray<struct FUICrossHairAimColorStruct> AimColorItemList; // 0x1d8(0x10)
	struct UTweenImage* ReloadingTween; // 0x1e8(0x08)
	struct UGaugeImage* BulletGauge; // 0x1f0(0x08)
	struct UTweenImage* OverloadingTween; // 0x1f8(0x08)
	struct UProgressBar* OverloadBar_Normal; // 0x200(0x08)
	struct UProgressBar* OverloadBar_Warn; // 0x208(0x08)
	struct UTweenWidget* OverloadNormalPanelTween; // 0x210(0x08)
	struct TArray<struct UProgressBar*> CoolDownBars; // 0x218(0x10)
};

// Class Solarland.CrossHairWidget
// Size: 0x300 (Inherited: 0x260)
struct UCrossHairWidget : UUserWidget {
	struct TMap<enum class EWeaponType, struct FCrosshairLayout> CrosshairStorageLayout; // 0x260(0x50)
	struct FCrosshairSprite CrosshairSprites; // 0x2b0(0x30)
	char pad_2E0[0x8]; // 0x2e0(0x08)
	struct UCrosshairCanvasPanel* RootPanel; // 0x2e8(0x08)
	float MinSpread; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
	struct FCrosshairLayout CurrentLayout; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)

	void SetCrosshairSprite(struct UPaperSprite* InSprite); // Function Solarland.CrossHairWidget.SetCrosshairSprite // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnWeaponFired(); // Function Solarland.CrossHairWidget.OnWeaponFired // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnUpdateReloadProgress(float InReloadProgress, int32_t InReservedAmmo, int32_t InMaxAmmo); // Function Solarland.CrossHairWidget.OnUpdateReloadProgress // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnUpdateGatlingRoll(float DeltaTmie, float InRollSpeedInterp, bool bWantFire); // Function Solarland.CrossHairWidget.OnUpdateGatlingRoll // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnUpdateCoolDownProgress(float InCoolDownProgress); // Function Solarland.CrossHairWidget.OnUpdateCoolDownProgress // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnUpdateChargeProgress(bool InbCharging, int32_t InChargeMode, float InChargeProgress, int32_t InChargeBurstCount); // Function Solarland.CrossHairWidget.OnUpdateChargeProgress // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnUpdateAimState(bool InbLockEnemy); // Function Solarland.CrossHairWidget.OnUpdateAimState // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnReloadStarted(float InReloadTime, int32_t InReservedAmmo); // Function Solarland.CrossHairWidget.OnReloadStarted // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnReloadFinished(bool InbReloadSuccess, int32_t InReloadAmmo, int32_t InReservedAmmo, int32_t InMaxAmmo); // Function Solarland.CrossHairWidget.OnReloadFinished // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayWeaponSpecialFire(enum class ECrossHairSpecialFireState InState, float PlayRate); // Function Solarland.CrossHairWidget.OnPlayWeaponSpecialFire // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnOverloadStateChanged(bool bEnter); // Function Solarland.CrossHairWidget.OnOverloadStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnCrosshairInNormalState(); // Function Solarland.CrossHairWidget.OnCrosshairInNormalState // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnAmmoChanged(int32_t InReservedAmmo, int32_t InMaxAmmo, bool InbFirst); // Function Solarland.CrossHairWidget.OnAmmoChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void InitializeCrosshairSpread(float Spread); // Function Solarland.CrossHairWidget.InitializeCrosshairSpread // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void InitializeCrosshair(enum class EWeaponType WeaponType, bool bIsWeaponEnergy); // Function Solarland.CrossHairWidget.InitializeCrosshair // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe1440
	void HandleCrosshairState(enum class ECrossHairState InCrosshairState, bool InbQuitState); // Function Solarland.CrossHairWidget.HandleCrosshairState // (Final|Native|Protected) // @ game+0x1fe1370
	struct UWidget* GetSpreadCanvasWidget(); // Function Solarland.CrossHairWidget.GetSpreadCanvasWidget // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct UUserWidget* GetReloadWidget(); // Function Solarland.CrossHairWidget.GetReloadWidget // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct UUserWidget* GetOverloadWidget(); // Function Solarland.CrossHairWidget.GetOverloadWidget // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct UUserWidget* GetCoolDownWidget(); // Function Solarland.CrossHairWidget.GetCoolDownWidget // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct UUserWidget* GetChargeWidget(); // Function Solarland.CrossHairWidget.GetChargeWidget // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct UUserWidget* GetAmmoWidget(); // Function Solarland.CrossHairWidget.GetAmmoWidget // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct FVector2D CalcDeltaScaleBySpread(float Spread); // Function Solarland.CrossHairWidget.CalcDeltaScaleBySpread // (Native|Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x1fe0870
	struct FVector2D CalcDeltaPosBySpread(float Spread); // Function Solarland.CrossHairWidget.CalcDeltaPosBySpread // (Native|Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x1fe07d0
	float CalcDeltaAngleBySpread(float Spread); // Function Solarland.CrossHairWidget.CalcDeltaAngleBySpread // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1fe0730
};

// Class Solarland.CruiseAssetSet
// Size: 0x58 (Inherited: 0x30)
struct UCruiseAssetSet : UDataAsset {
	struct FSoftClassPath CapsuleActorClass; // 0x30(0x18)
	struct TArray<struct FSoftClassPath> CruiseAbilityClasses; // 0x48(0x10)
};

// Class Solarland.CurvedEffectController
// Size: 0xc8 (Inherited: 0x28)
struct UCurvedEffectController : UActorEffectController {
	struct FRuntimeFloatCurve ProgressCurve; // 0x28(0x88)
	enum class ECurvedEffectControllerStopMode StopMode; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	float StopTime; // 0xb4(0x04)
	char pad_B8[0x10]; // 0xb8(0x10)
};

// Class Solarland.CustomConsoleCommandsComponent
// Size: 0xb0 (Inherited: 0xb0)
struct UCustomConsoleCommandsComponent : UActorComponent {

	void ExecGMCommand(struct FString CommandParameters, struct TArray<struct FString>& ArgsStr); // Function Solarland.CustomConsoleCommandsComponent.ExecGMCommand // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.CustomGameModeHUD
// Size: 0x398 (Inherited: 0x398)
struct ACustomGameModeHUD : ABattleHUDBase {

	struct TSoftObjectPtr<USolarUserWidget> ShowPanelUI(enum class EUIPanelName PanelName); // Function Solarland.CustomGameModeHUD.ShowPanelUI // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe1d90
	void ClosePanelUI(enum class EUIPanelName PanelName); // Function Solarland.CustomGameModeHUD.ClosePanelUI // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe0b70
};

// Class Solarland.CustomNoticeTable
// Size: 0xc8 (Inherited: 0xc8)
struct UCustomNoticeTable : UDataTable {
};

// Class Solarland.CustomNoticeImageTable
// Size: 0xc8 (Inherited: 0xc8)
struct UCustomNoticeImageTable : UDataTable {
};

// Class Solarland.GameManagerBase
// Size: 0x228 (Inherited: 0x228)
struct AGameManagerBase : AInfo {
};

// Class Solarland.CustomRoomManager
// Size: 0x418 (Inherited: 0x228)
struct ACustomRoomManager : AGameManagerBase {
	int32_t RoomTeamMemberLimit; // 0x228(0x04)
	int32_t RoomLeftTime; // 0x22c(0x04)
	bool bIsGameStarted; // 0x230(0x01)
	char pad_231[0x7]; // 0x231(0x07)
	struct FString JobName; // 0x238(0x10)
	bool bIsWeaponSettingOpen; // 0x248(0x01)
	bool bIsVehicleSettingOpen; // 0x249(0x01)
	char pad_24A[0x6]; // 0x24a(0x06)
	struct TMap<struct FString, struct FCustomParamConfig> CustomParamConfigMap; // 0x250(0x50)
	struct TArray<struct FUserSetting> UserSettingList; // 0x2a0(0x10)
	struct TArray<char> WeaponTypeAvailableList; // 0x2b0(0x10)
	struct TArray<char> VehicleClassAvailableList; // 0x2c0(0x10)
	struct TArray<int32_t> WeaponSettingBlacklist; // 0x2d0(0x10)
	struct TArray<int32_t> VehicleTypeSettingBlacklist; // 0x2e0(0x10)
	struct FMulticastInlineDelegate WeaponTypeAvailableChangedEvent; // 0x2f0(0x10)
	struct FMulticastInlineDelegate WeaponSettingBlacklistChangedEvent; // 0x300(0x10)
	struct FMulticastInlineDelegate VehicleClassAvailableChangedEvent; // 0x310(0x10)
	struct FMulticastInlineDelegate VehicleTypeSettingBlacklistChangedEvent; // 0x320(0x10)
	char pad_330[0xe8]; // 0x330(0xe8)

	void WeaponTypeAvailableChangedEvent__DelegateSignature(struct TArray<char>& WeaponTypeAvailableList); // DelegateFunction Solarland.CustomRoomManager.WeaponTypeAvailableChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void WeaponSettingBlacklistChangedEvent__DelegateSignature(struct TArray<int32_t>& WeaponSettingBlacklist); // DelegateFunction Solarland.CustomRoomManager.WeaponSettingBlacklistChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void VehicleTypeSettingBlacklistChangedEvent__DelegateSignature(struct TArray<int32_t>& VehicleTypeSettingBlacklist); // DelegateFunction Solarland.CustomRoomManager.VehicleTypeSettingBlacklistChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void VehicleClassAvailableChangedEvent__DelegateSignature(struct TArray<char>& VehicleClassAvailableList); // DelegateFunction Solarland.CustomRoomManager.VehicleClassAvailableChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void ReceiveUserSettingChanged(struct FString Name, struct FString Value); // Function Solarland.CustomRoomManager.ReceiveUserSettingChanged // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1fe1a20
	void ReceiveTournamentDealy(); // Function Solarland.CustomRoomManager.ReceiveTournamentDealy // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x1555e80
	void ReceivePlayerRemoved(struct ASCMPlayerState* Player, enum class ERemovedReasonType reason); // Function Solarland.CustomRoomManager.ReceivePlayerRemoved // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x1fe1950
	void OnUserSettingChangedEvent(struct FString Name, struct FCustomParamConfig ConfigInfo, struct FString Value); // Function Solarland.CustomRoomManager.OnUserSettingChangedEvent // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnTournamentDealy(); // Function Solarland.CustomRoomManager.OnTournamentDealy // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnRoomOwnerLeftRoom(); // Function Solarland.CustomRoomManager.OnRoomOwnerLeftRoom // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe1930
	void OnRep_WeaponTypeAvailableList(); // Function Solarland.CustomRoomManager.OnRep_WeaponTypeAvailableList // (Final|Native|Private) // @ game+0x1fe1910
	void OnRep_WeaponSettingBlacklist(); // Function Solarland.CustomRoomManager.OnRep_WeaponSettingBlacklist // (Final|Native|Private) // @ game+0x1fe18f0
	void OnRep_VehicleTypeSettingBlacklist(); // Function Solarland.CustomRoomManager.OnRep_VehicleTypeSettingBlacklist // (Final|Native|Private) // @ game+0x1fe18d0
	void OnRep_VehicleClassAvailableList(); // Function Solarland.CustomRoomManager.OnRep_VehicleClassAvailableList // (Final|Native|Private) // @ game+0x1fe18b0
	void OnPlayerRemovedFromRoom(struct ASCMPlayerState* Player, enum class ERemovedReasonType reason); // Function Solarland.CustomRoomManager.OnPlayerRemovedFromRoom // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool OnGameStart(); // Function Solarland.CustomRoomManager.OnGameStart // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnClientRoomDataReady(); // Function Solarland.CustomRoomManager.OnClientRoomDataReady // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool IsWeaponTypeAvailable(char WeaponType); // Function Solarland.CustomRoomManager.IsWeaponTypeAvailable // (Final|Native|Public) // @ game+0x1fe1820
	bool IsWeaponSettingOpen(); // Function Solarland.CustomRoomManager.IsWeaponSettingOpen // (Final|Native|Public) // @ game+0x1fe1800
	bool IsWeaponAvailable(int32_t weaponid); // Function Solarland.CustomRoomManager.IsWeaponAvailable // (Final|Native|Public) // @ game+0x1fe1760
	bool IsVehicleTypeAvailable(int32_t VehicleTypeID); // Function Solarland.CustomRoomManager.IsVehicleTypeAvailable // (Final|Native|Public) // @ game+0x1fe16c0
	bool IsVehicleSettingOpen(); // Function Solarland.CustomRoomManager.IsVehicleSettingOpen // (Final|Native|Public) // @ game+0x1fe16a0
	bool IsVehicleClassAvailable(char VehicleClassValue); // Function Solarland.CustomRoomManager.IsVehicleClassAvailable // (Final|Native|Public) // @ game+0x1fe1610
	bool IsRoomOwner(struct ASCMPlayerState* Player); // Function Solarland.CustomRoomManager.IsRoomOwner // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1fe1570
	bool IsRoomHasMinimalSides(); // Function Solarland.CustomRoomManager.IsRoomHasMinimalSides // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1fe1540
	bool IsRoomHasEnoughPlayers(); // Function Solarland.CustomRoomManager.IsRoomHasEnoughPlayers // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1fe1510
	struct TArray<char> GetWeaponTypeAvailableList(); // Function Solarland.CustomRoomManager.GetWeaponTypeAvailableList // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fe12a0
	void GetWeaponSettingLists(struct TArray<int32_t>& OutWeaponBlacklist, struct TArray<int32_t>& OutWeaponWhitelist); // Function Solarland.CustomRoomManager.GetWeaponSettingLists // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1fe1180
	struct TArray<int32_t> GetWeaponSettingBlacklist(); // Function Solarland.CustomRoomManager.GetWeaponSettingBlacklist // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fe10b0
	void GetVehicleTypeSettingLists(struct TArray<int32_t>& OutVehicleBlacklist, struct TArray<int32_t>& OutVehicleWhitelist); // Function Solarland.CustomRoomManager.GetVehicleTypeSettingLists // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1fe0f90
	struct TArray<int32_t> GetVehicleTypeSettingBlacklist(); // Function Solarland.CustomRoomManager.GetVehicleTypeSettingBlacklist // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fe0ec0
	struct TArray<char> GetVehicleClassAvailableList(); // Function Solarland.CustomRoomManager.GetVehicleClassAvailableList // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fe0df0
	struct FString GetModeParam(struct FString Name, struct FCustomParamConfig& ParamInfo); // Function Solarland.CustomRoomManager.GetModeParam // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1fe0bf0
	void ExecuteGameStart(); // Function Solarland.CustomRoomManager.ExecuteGameStart // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x7d61b0
	bool CheckWeaponTypeCanSetting(enum class EWeaponUIType WeaponUIType); // Function Solarland.CustomRoomManager.CheckWeaponTypeCanSetting // (Final|Native|Public) // @ game+0x1fe0ae0
	bool CheckWeaponCanSetting(int32_t weaponid); // Function Solarland.CustomRoomManager.CheckWeaponCanSetting // (Final|Native|Public) // @ game+0x1fe0a40
	bool CheckVehicleTypeCanSetting(int32_t VehicleTypeID); // Function Solarland.CustomRoomManager.CheckVehicleTypeCanSetting // (Final|Native|Public) // @ game+0x1fe09a0
	bool CheckVehicleClassCanSetting(enum class EVehicleClass VehicleClass); // Function Solarland.CustomRoomManager.CheckVehicleClassCanSetting // (Final|Native|Public) // @ game+0x1fe0910
};

// Class Solarland.DeathTreasureBox
// Size: 0x720 (Inherited: 0x5c8)
struct ADeathTreasureBox : ASolarTreasureBoxActor {
	float CharacterPickupRange; // 0x5c8(0x04)
	float CurrEnergyValue; // 0x5cc(0x04)
	float CurrExtraEnergyValue; // 0x5d0(0x04)
	char pad_5D4[0x4]; // 0x5d4(0x04)
	struct FString PlayerId; // 0x5d8(0x10)
	struct FString NickName; // 0x5e8(0x10)
	bool IsPickuped; // 0x5f8(0x01)
	char pad_5F9[0x7]; // 0x5f9(0x07)
	struct TArray<struct ASolarPlayerWeapon*> WeaponList; // 0x600(0x10)
	struct TArray<struct FBoxChargingInfo> ChargingChars; // 0x610(0x10)
	float PickupRadius; // 0x620(0x04)
	float ResurrectDistance; // 0x624(0x04)
	enum class EBResurrectionState CurrResurrectionState; // 0x628(0x01)
	char pad_629[0x3]; // 0x629(0x03)
	float ReviveTotalTime; // 0x62c(0x04)
	float ReviveStartTime; // 0x630(0x04)
	char pad_634[0x4]; // 0x634(0x04)
	struct USkeletalMeshComponent* PreViewMesh; // 0x638(0x08)
	struct FName ReviveStartSound; // 0x640(0x08)
	struct FName ReviveBeforeCompleteSound; // 0x648(0x08)
	struct FName ReviveCompleteSound; // 0x650(0x08)
	struct FName ReviveFailedSound; // 0x658(0x08)
	float ResurrectionBeforeSoundTime; // 0x660(0x04)
	char pad_664[0x4]; // 0x664(0x04)
	struct UParticleSystem* ReviveCompletePS; // 0x668(0x08)
	struct FName ReviveCompletePSAttachedSocket; // 0x670(0x08)
	float PreviewMeshZOffset; // 0x678(0x04)
	float PreviewMeshZRotation; // 0x67c(0x04)
	char pad_680[0x10]; // 0x680(0x10)
	struct USceneComponent* FXPosComponent; // 0x690(0x08)
	struct TArray<struct TSoftObjectPtr<UParticleSystem>> QualityPS; // 0x698(0x10)
	char pad_6A8[0x10]; // 0x6a8(0x10)
	struct UActorEffect* RevivePreviewEffectClass; // 0x6b8(0x08)
	char pad_6C0[0x8]; // 0x6c0(0x08)
	struct TMap<enum class ECharacterBodyScaleType, struct FSoftObjectPath> PreviewAnim; // 0x6c8(0x50)
	float SphereRadius; // 0x718(0x04)
	float UnpickableSphereRadius; // 0x71c(0x04)

	void ReceiveSetUIEnable(bool IsShow); // Function Solarland.DeathTreasureBox.ReceiveSetUIEnable // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveRemoveEffect(struct ASolarCharacter* SolarChar); // Function Solarland.DeathTreasureBox.ReceiveRemoveEffect // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveRefreshExtraEnergy(struct FString Message); // Function Solarland.DeathTreasureBox.ReceiveRefreshExtraEnergy // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveAddEffect(struct ASolarCharacter* SolarChar); // Function Solarland.DeathTreasureBox.ReceiveAddEffect // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnUntrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.DeathTreasureBox.OnUntrigger // (Final|Native|Protected) // @ game+0x1fe5790
	void OnTrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.DeathTreasureBox.OnTrigger // (Final|Native|Protected|HasOutParms) // @ game+0x1fe5570
	void OnRep_ReviveStartTime(); // Function Solarland.DeathTreasureBox.OnRep_ReviveStartTime // (Final|Native|Protected) // @ game+0x1fe5030
	void OnRep_PickupedChanged(); // Function Solarland.DeathTreasureBox.OnRep_PickupedChanged // (Final|Native|Public) // @ game+0x1fe5010
	void OnRep_CurrExtraEnergyValueChanged(); // Function Solarland.DeathTreasureBox.OnRep_CurrExtraEnergyValueChanged // (Final|Native|Public) // @ game+0x1fe4fd0
	void OnRep_BResurrectionStateChanged(); // Function Solarland.DeathTreasureBox.OnRep_BResurrectionStateChanged // (Final|Native|Public) // @ game+0x1fe4fb0
	void OnRefreshPickupStatusEffect(bool IsShow); // Function Solarland.DeathTreasureBox.OnRefreshPickupStatusEffect // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	bool IsInResurrectRange(struct ASolarCharacter* InReqCharacter, float& RealDistance); // Function Solarland.DeathTreasureBox.IsInResurrectRange // (Final|Native|Public|HasOutParms) // @ game+0x1fe4920
	bool CanBuyResurrect(struct ASolarCharacter* InReqCharacter); // Function Solarland.DeathTreasureBox.CanBuyResurrect // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1fe46b0
};

// Class Solarland.DeathViewGoodsSlotWidget
// Size: 0x3f8 (Inherited: 0x348)
struct UDeathViewGoodsSlotWidget : USolarUserWidget {
	struct UImage* Img_Icon; // 0x348(0x08)
	struct UTextBlock* Txt_Num; // 0x350(0x08)
	struct FSlateBrush ImageOuter; // 0x358(0x98)
	int32_t ItemID; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)

	void OnSpectateTargetItemsChanged(struct TArray<struct FReplicateItemData> InItemDatas); // Function Solarland.DeathViewGoodsSlotWidget.OnSpectateTargetItemsChanged // (Final|Native|Protected) // @ game+0x1fe53f0
};

// Class Solarland.DeathViewHPWidget
// Size: 0x3d8 (Inherited: 0x348)
struct UDeathViewHPWidget : USolarUserWidget {
	char pad_348[0x28]; // 0x348(0x28)
	bool bSplitHPBar; // 0x370(0x01)
	char pad_371[0x7]; // 0x371(0x07)
	struct USolarShieldProgressBoard* AdvBar_Shield; // 0x378(0x08)
	struct USolarHPProgressBoard* AdvBar_HP; // 0x380(0x08)
	char pad_388[0x20]; // 0x388(0x20)
	struct FLinearColor HPColorNormal; // 0x3a8(0x10)
	struct FLinearColor HPColorDying; // 0x3b8(0x10)
	char pad_3C8[0x10]; // 0x3c8(0x10)

	void UpdateHPBar(float InCurHealth, float InMaxHealth, float InHPGridUnit); // Function Solarland.DeathViewHPWidget.UpdateHPBar // (Final|Native|Protected) // @ game+0x1fe5bb0
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.DeathViewHPWidget.OnSpecTargetChanged // (Final|Native|Private) // @ game+0x1fe5290
	void OnShieldValueChanged(struct USinglePlayerShieldModel* ShieldModel); // Function Solarland.DeathViewHPWidget.OnShieldValueChanged // (Final|Native|Public|Const) // @ game+0x1fe5200
	void OnShieldChanged(struct USinglePlayerShieldModel* ShieldModel); // Function Solarland.DeathViewHPWidget.OnShieldChanged // (Final|Native|Public|Const) // @ game+0x1fe5170
	void OnShieldAvailableChanged(struct USinglePlayerShieldModel* ShieldModel); // Function Solarland.DeathViewHPWidget.OnShieldAvailableChanged // (Final|Native|Public|Const) // @ game+0x1fe50e0
	void OnHPModelChanged(struct USinglePlayerHPModel* HPModel); // Function Solarland.DeathViewHPWidget.OnHPModelChanged // (Final|Native|Private) // @ game+0x1fe4e90
	void OnCharacterEndPlay(struct ASolarCharacter* Character); // Function Solarland.DeathViewHPWidget.OnCharacterEndPlay // (Final|Native|Private) // @ game+0x1fe4c60
};

// Class Solarland.DeathViewTeammateWidget
// Size: 0x3b8 (Inherited: 0x348)
struct UDeathViewTeammateWidget : USolarUserWidget {
	float SwitchCDTime; // 0x348(0x04)
	char pad_34C[0x4]; // 0x34c(0x04)
	struct UUIComponentNationalFlag* UI_Component_NationalFlag; // 0x350(0x08)
	struct UTextBlock* Txt_PlayerName; // 0x358(0x08)
	struct UImage* Img_View_Name_Bg; // 0x360(0x08)
	struct UImage* Img_TeamPos; // 0x368(0x08)
	struct UImage* Img_View_TeamPos_Bg; // 0x370(0x08)
	struct USizeBox* Panel_TeamPos; // 0x378(0x08)
	struct UOverlay* Panel_Death; // 0x380(0x08)
	struct UOverlay* Panel_Selected; // 0x388(0x08)
	struct UImage* Img_Loading; // 0x390(0x08)
	struct UWidget* ScaleBox_1; // 0x398(0x08)
	struct UWidgetAnimation* Sel_Anim; // 0x3a0(0x08)
	char pad_3A8[0x8]; // 0x3a8(0x08)
	struct ASolarPlayerState* CurrentPlayerState; // 0x3b0(0x08)

	void TrySelect(); // Function Solarland.DeathViewTeammateWidget.TrySelect // (Final|Native|Private) // @ game+0x1fe5ac0
	void SetTeamPos(int32_t PosInTeam); // Function Solarland.DeathViewTeammateWidget.SetTeamPos // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetPlayerState(struct ASolarPlayerState* TargetPS); // Function Solarland.DeathViewTeammateWidget.SetPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe5a10
	void OnTeammateStateChanged(bool NeedRefresh); // Function Solarland.DeathViewTeammateWidget.OnTeammateStateChanged // (Final|Native|Private) // @ game+0x1fe54e0
	void OnSelectedPlayerChanged(struct ASolarPlayerState* SelectedPS); // Function Solarland.DeathViewTeammateWidget.OnSelectedPlayerChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe5050
	void OnHPChanged(char PosInTeam, float CurHP, float MaxHP); // Function Solarland.DeathViewTeammateWidget.OnHPChanged // (Final|Native|Private) // @ game+0x1fe4d80
};

// Class Solarland.DeathViewWidget
// Size: 0x380 (Inherited: 0x348)
struct UDeathViewWidget : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct UDeathViewHPWidget* DeathViewHP; // 0x350(0x08)
	struct UCanvasPanel* Panel_ScopeUI; // 0x358(0x08)
	struct USolarTextBlock* Text_PlayerLevel; // 0x360(0x08)
	struct USolarTextBlock* Txt_Lv_Head; // 0x368(0x08)
	struct UImage* Img_Lv_Bg_2; // 0x370(0x08)
	struct UImage* Img_Lv_Border_2; // 0x378(0x08)

	void OnSpecTargetChanged(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.DeathViewWidget.OnSpecTargetChanged // (Final|Native|Private) // @ game+0x1fe5360
	void OnLocalSpecInfoReady(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.DeathViewWidget.OnLocalSpecInfoReady // (Final|Native|Private) // @ game+0x1fe4f20
	void OnCharacterLevelChanged(int32_t InLevel); // Function Solarland.DeathViewWidget.OnCharacterLevelChanged // (Final|Native|Private) // @ game+0x1fe4cf0
	void AddScopeToPanel(struct UUserWidget* InChildWidget, bool bInSpectate); // Function Solarland.DeathViewWidget.AddScopeToPanel // (Final|Native|Private) // @ game+0x1fe45e0
};

// Class Solarland.DefenderManager
// Size: 0x2b8 (Inherited: 0x228)
struct ADefenderManager : AGameManagerBase {
	struct FMulticastInlineDelegate OnRepDefenderListNotify; // 0x228(0x10)
	struct FTerminatorNotifyUIConfig TerminatorNotifyUIConfig; // 0x238(0x28)
	struct ASolarTrailEffect* TrailEffect; // 0x260(0x08)
	struct FString DefenderSide; // 0x268(0x10)
	struct TArray<struct ASolarPlayerState*> DefenderList; // 0x278(0x10)
	char pad_288[0x8]; // 0x288(0x08)
	struct FString TerminatorPlayerId; // 0x290(0x10)
	char pad_2A0[0x18]; // 0x2a0(0x18)

	bool UpdateCheckTerminator(struct ASCMPlayerState* InKiller, struct ASCMPlayerState* InKilled); // Function Solarland.DefenderManager.UpdateCheckTerminator // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1fe5ae0
	void StartConfirmDefender(); // Function Solarland.DefenderManager.StartConfirmDefender // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1fe5aa0
	void ShowDefenderUIForReplay(); // Function Solarland.DefenderManager.ShowDefenderUIForReplay // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnRep_DefenderList(); // Function Solarland.DefenderManager.OnRep_DefenderList // (Final|Native|Public) // @ game+0x1fe4ff0
	bool IsTerminator(struct FString InSolarPlayerID); // Function Solarland.DefenderManager.IsTerminator // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe4a00
	bool IsDefender(struct FString InPlayerSide); // Function Solarland.DefenderManager.IsDefender // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe4870
	struct TArray<struct ASolarPlayerState*> GetDefenderList(); // Function Solarland.DefenderManager.GetDefenderList // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe4750
};

// Class Solarland.DelayNode
// Size: 0x80 (Inherited: 0x70)
struct UDelayNode : UActionNode {
	float DelayTime; // 0x70(0x04)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Solarland.DrawLinePanel
// Size: 0x488 (Inherited: 0x348)
struct UDrawLinePanel : USolarUserWidget {
	float MapSize; // 0x348(0x04)
	float CurrentFOV; // 0x34c(0x04)
	char pad_350[0x38]; // 0x350(0x38)
	struct FLinearColor SafeAreaColor; // 0x388(0x10)
	struct FLinearColor PosionCircleColor; // 0x398(0x10)
	struct FLinearColor DotLineColor; // 0x3a8(0x10)
	struct FLinearColor AirlineProgressColor; // 0x3b8(0x10)
	struct FLinearColor CapsuleBackgroundColor; // 0x3c8(0x10)
	struct FLinearColor AirdropBackgroundColor; // 0x3d8(0x10)
	float AirdropAirlineSizeY; // 0x3e8(0x04)
	float MaterialCircleSize; // 0x3ec(0x04)
	float DotLineDottedLength; // 0x3f0(0x04)
	float DotLineDottedInterval; // 0x3f4(0x04)
	char pad_3F8[0x8]; // 0x3f8(0x08)
	struct TArray<struct FDotLineData> DotLineDataList; // 0x400(0x10)
	struct TArray<struct FCircleData> CircleDataList; // 0x410(0x10)
	struct USolarMapManager* MapManager; // 0x420(0x08)
	struct TWeakObjectPtr<struct ASolarCapsuleRoot> CapsuleRoot; // 0x428(0x08)
	struct FSoftObjectPath CircleMaterialPath; // 0x430(0x18)
	struct FSoftObjectPath DottedLineMaterialPath; // 0x448(0x18)
	struct TArray<struct UMaterialInstanceDynamic*> CircleMaterialInstanceArray; // 0x460(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> DottedLineMaterialInstanceArray; // 0x470(0x10)
	float InitFOV; // 0x480(0x04)
	char pad_484[0x4]; // 0x484(0x04)

	void RemoveDotLine(int32_t DotLineID); // Function Solarland.DrawLinePanel.RemoveDotLine // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe5980
	void RemoveCircle(int32_t CircleID); // Function Solarland.DrawLinePanel.RemoveCircle // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe58f0
	void OnAirlineUpdate(struct FVector2D& InNewPos); // Function Solarland.DrawLinePanel.OnAirlineUpdate // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1fe4bd0
	void OnAirlineSet(struct FMiniMapAirlineData InData); // Function Solarland.DrawLinePanel.OnAirlineSet // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe4ad0
	void OnAirlineClear(); // Function Solarland.DrawLinePanel.OnAirlineClear // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe4ab0
	void InitializePanelFOV(float InFOV); // Function Solarland.DrawLinePanel.InitializePanelFOV // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe47e0
	int32_t AddDotLine(struct AActor* StartPointActor, struct AActor* EndPointActor, struct FLinearColor Color); // Function Solarland.DrawLinePanel.AddDotLine // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1fe44c0
	int32_t AddCircle(struct FVector2D Center, float Radius, struct FLinearColor Color); // Function Solarland.DrawLinePanel.AddCircle // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1fe43a0
};

// Class Solarland.DuckRollingConfigDataAsset
// Size: 0xbb0 (Inherited: 0x30)
struct UDuckRollingConfigDataAsset : UDataAsset {
	struct TMap<int32_t, struct FStaticMeshOverride> RollingMeshOverrideForSkin; // 0x30(0x50)
	float SwitchToRollingMeshDelay; // 0x80(0x04)
	bool bHideCharacterMesh; // 0x84(0x01)
	char pad_85[0x3]; // 0x85(0x03)
	struct FGameplayTag VisibilityTag; // 0x88(0x08)
	struct FGameplayTag SwitchToRollingMeshStatusTag; // 0x90(0x08)
	float RollingBallScale; // 0x98(0x04)
	float RollingBallRadius; // 0x9c(0x04)
	struct FVector RollingBallCenterOffset; // 0xa0(0x0c)
	bool bOverrideCameraDesiredDistance; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
	float CameraDesiredDistanceOverride; // 0xb0(0x04)
	bool bOverrideCameraDistanceSmoothFactor; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	float CameraDistanceSmoothFactorOverride; // 0xb8(0x04)
	float RollingAngleDecelerationOnFalling; // 0xbc(0x04)
	float RollingAngleFrictionOnFalling; // 0xc0(0x04)
	float InitRollingAngleSpeed; // 0xc4(0x04)
	struct FVector InitLocalRollingAxis; // 0xc8(0x0c)
	float RollingMoveRadius; // 0xd4(0x04)
	bool bOverrideMovementMaxAcceleration; // 0xd8(0x01)
	char pad_D9[0x3]; // 0xd9(0x03)
	float MovementMaxAccelerationOverride; // 0xdc(0x04)
	bool bOverrideBrakingDecelerationWalking; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	float BrakingDecelerationWalkingOverride; // 0xe4(0x04)
	bool bOverrideMinAccelerationProjectRatioForValidGroundSlide; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	float MinAccelerationProjectRatioForValidGroundSlideOverride; // 0xec(0x04)
	bool bOverrideCustomJumpParams; // 0xf0(0x01)
	char pad_F1[0x3]; // 0xf1(0x03)
	struct FCustomJumpParams OverrideCustomJumpParams; // 0xf4(0x0c)
	struct FName JumpSoundGroupName; // 0x100(0x08)
	char pad_108[0x8]; // 0x108(0x08)
	struct FDuckRollingCharacterHitConfig CharacterHitConfig; // 0x110(0xa0)
	struct FName ReshapingPointParameterName; // 0x1b0(0x08)
	struct FName ReshapingOrthoDirParameterName; // 0x1b8(0x08)
	struct FName ReshapingMoveDirScaleParameterName; // 0x1c0(0x08)
	struct FName ReshapingOrthoDirScaleParameterName; // 0x1c8(0x08)
	struct FName ReshapingFlattenScaleParameterName; // 0x1d0(0x08)
	float BounceRequiredMinSpeedOnImpactNormal; // 0x1d8(0x04)
	float BounceCollisionShapeScale; // 0x1dc(0x04)
	float BounceTriggerCooldown; // 0x1e0(0x04)
	struct FGameplayCueTag BounceGameplayCueTag; // 0x1e4(0x08)
	char pad_1EC[0x4]; // 0x1ec(0x04)
	struct FRuntimeFloatCurve BounceDurationHoriCurve; // 0x1f0(0x88)
	struct FRuntimeFloatCurve BounceDurationVertCurve; // 0x278(0x88)
	struct FRuntimeFloatCurve BounceReshapingMoveDirCurve; // 0x300(0x88)
	struct FRuntimeFloatCurve BounceReshapingOrthoDirCurve; // 0x388(0x88)
	struct FRuntimeFloatCurve BounceReshapingFlattenScaleCurve; // 0x410(0x88)
	struct FRuntimeFloatCurve BounceReshapingScaleCurve; // 0x498(0x88)
	struct FRuntimeFloatCurve BounceMoveHoriDurationScaleCurve; // 0x520(0x88)
	struct FRuntimeFloatCurve BounceMoveVertDurationScaleCurve; // 0x5a8(0x88)
	struct FRuntimeFloatCurve BounceMoveHoriImmovableDurationScaleCurve; // 0x630(0x88)
	struct FRuntimeFloatCurve BounceMoveVertImmovableDurationScaleCurve; // 0x6b8(0x88)
	float BounceMoveRequiredMinSpeedOnImpactNormal; // 0x740(0x04)
	float BounceMoveMaxAllowedHoriBounceSpeed; // 0x744(0x04)
	float BounceMoveMaxAllowedVertBounceSpeed; // 0x748(0x04)
	char pad_74C[0x4]; // 0x74c(0x04)
	struct FRuntimeFloatCurve BounceMoveHoriSpeedInheritanceCurve; // 0x750(0x88)
	struct FRuntimeFloatCurve BounceMoveVertSpeedInheritanceCurve; // 0x7d8(0x88)
	float JumpReshapingDuration; // 0x860(0x04)
	char pad_864[0x4]; // 0x864(0x04)
	struct FRuntimeFloatCurve JumpReshapingMoveDirCurve; // 0x868(0x88)
	struct FRuntimeFloatCurve JumpReshapingOrthoDirCurve; // 0x8f0(0x88)
	float SwitchReshapingDuration; // 0x978(0x04)
	char pad_97C[0x4]; // 0x97c(0x04)
	struct FRuntimeFloatCurve SwitchReshapingMoveDirCurve; // 0x980(0x88)
	struct FRuntimeFloatCurve SwitchReshapingOrthoDirCurve; // 0xa08(0x88)
	struct FRangeFloat RandomReshapingIntervalRange; // 0xa90(0x08)
	float MinSpeedForRandomReshaping; // 0xa98(0x04)
	float RandomReshapingDuration; // 0xa9c(0x04)
	struct FRuntimeFloatCurve RandomReshapingMoveDirCurve; // 0xaa0(0x88)
	struct FRuntimeFloatCurve RandomReshapingOrthoDirCurve; // 0xb28(0x88)
};

// Class Solarland.DuckRollingMeshComponent
// Size: 0x690 (Inherited: 0x600)
struct UDuckRollingMeshComponent : UStaticMeshComponent {
	char pad_600[0x8]; // 0x600(0x08)
	struct UPrimitiveComponent* ShieldComponentClass; // 0x608(0x08)
	struct TMap<struct FSoftObjectPath, struct FSoftObjectPath> MaterialEffectMaterialMapping; // 0x610(0x50)
	float HeadRelativeHeight; // 0x660(0x04)
	char pad_664[0x4]; // 0x664(0x04)
	struct UPrimitiveComponent* ShieldComponent; // 0x668(0x08)
	struct TArray<struct UObject*> MeshOverrides; // 0x670(0x10)
	struct TArray<struct UObject*> LoadedEffectMaterials; // 0x680(0x10)

	void ReceiveOnRegister(); // Function Solarland.DuckRollingMeshComponent.ReceiveOnRegister // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.DuckRollingProxyComponent
// Size: 0x218 (Inherited: 0xb0)
struct UDuckRollingProxyComponent : UActorComponent {
	struct UDuckRollingMeshComponent* RollingMeshClass; // 0xb0(0x08)
	struct UDuckRollingMeshComponent* RollingMeshComponent; // 0xb8(0x08)
	struct UDuckRollingConfigDataAsset* RollingConfig; // 0xc0(0x08)
	struct ASolarCharacter* CharacterOwner; // 0xc8(0x08)
	char pad_D0[0xe0]; // 0xd0(0xe0)
	struct TArray<struct UMaterialInterface*> ReshapingMaterials; // 0x1b0(0x10)
	struct UMaterialInterface* ReshapingMultiplePassMaterial; // 0x1c0(0x08)
	char pad_1C8[0x50]; // 0x1c8(0x50)

	void OnUpdateCharacterStateAfterMovement(struct USolarCharacterMovementComponent* MoveComp, float DeltaTime); // Function Solarland.DuckRollingProxyComponent.OnUpdateCharacterStateAfterMovement // (Final|Native|Protected) // @ game+0x1fe9360
	void OnSwitchToRollingMeshTagCountChanged(struct FGameplayTag Tag, int32_t count); // Function Solarland.DuckRollingProxyComponent.OnSwitchToRollingMeshTagCountChanged // (Final|Native|Protected) // @ game+0x1fe9290
	void OnCharacterMovementModeChanged(struct ACharacter* Character, enum class EMovementMode PrevMovementMode, char PreviousCustomMode); // Function Solarland.DuckRollingProxyComponent.OnCharacterMovementModeChanged // (Final|Native|Protected) // @ game+0x1fe9160
};

// Class Solarland.DurationTalent
// Size: 0x450 (Inherited: 0x420)
struct UDurationTalent : UCharacterTalent {
	struct UGameplayEffect* DurationEffectClass; // 0x420(0x08)
	struct TArray<struct UGameplayEffect*> DurationSubEffectClasses; // 0x428(0x10)
	char pad_438[0x18]; // 0x438(0x18)

	void StartDurationEffectFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.DurationTalent.StartDurationEffectFailed // (Final|Native|Protected|HasOutParms) // @ game+0x1fcb830
	void ReceiveDurationEffectFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.DurationTalent.ReceiveDurationEffectFinished // (Final|Native|Protected|HasOutParms) // @ game+0x1fe95b0
};

// Class Solarland.ElectricShop_Weapon
// Size: 0x4e0 (Inherited: 0x348)
struct UElectricShop_Weapon : USolarUserWidget {
	struct FMulticastInlineDelegate OnWeaponUpdateRequested; // 0x348(0x10)
	struct FMulticastInlineDelegate OnShieldUpdateRequested; // 0x358(0x10)
	struct UWidgetSwitcher* WidgetSwitcher_weapon; // 0x368(0x08)
	struct UCanvasPanel* Weapon; // 0x370(0x08)
	struct UImage* Img_Level_Bg; // 0x378(0x08)
	struct UOverlay* Level_Indicator; // 0x380(0x08)
	struct UHorizontalBox* Panel_Level; // 0x388(0x08)
	struct UTextBlock* Txt_Level; // 0x390(0x08)
	struct UImage* Img_Arrow; // 0x398(0x08)
	struct USolarTextBlock* Txt_Max; // 0x3a0(0x08)
	struct USolarImage* Img_Weapon; // 0x3a8(0x08)
	struct UImage* Img_Shield; // 0x3b0(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Upgrade; // 0x3b8(0x08)
	struct USolarImage* Upgrade_BG; // 0x3c0(0x08)
	struct USolarTextBlock* Txt_UpgradeState; // 0x3c8(0x08)
	struct UHorizontalBox* Panel_ElectricCost; // 0x3d0(0x08)
	struct UOverlay* Overlay_Discount; // 0x3d8(0x08)
	struct UTextBlock* Txt_ElectricityNum_Undiscounted; // 0x3e0(0x08)
	struct UTextBlock* Txt_ElectricityNum; // 0x3e8(0x08)
	struct USolarTextBlock* Txt_UpgradeState_Disable; // 0x3f0(0x08)
	struct UHorizontalBox* Panel_ElectricCost_Disable; // 0x3f8(0x08)
	struct UOverlay* Overlay_Discount_2; // 0x400(0x08)
	struct UTextBlock* Txt_ElectricityNum_Undiscounted_2; // 0x408(0x08)
	struct UTextBlock* Txt_ElectricityNum_Disable; // 0x410(0x08)
	struct USolarTextBlock* Txt_UpgradeState_Disable_2; // 0x418(0x08)
	struct UCanvasPanel* Weapon_UpgradeSuccess; // 0x420(0x08)
	struct UImage* Image_BG2_3; // 0x428(0x08)
	struct USolarTextBlock* Txt_Upgrade2; // 0x430(0x08)
	struct UCanvasPanel* Weapon_None; // 0x438(0x08)
	struct UImage* Image_BG2; // 0x440(0x08)
	struct UImage* Image_BG2_2; // 0x448(0x08)
	struct UWidgetAnimation* Succeed_Anim; // 0x450(0x08)
	bool bIsWeapon; // 0x458(0x01)
	char pad_459[0x17]; // 0x459(0x17)
	int32_t MaxWeaponLevel; // 0x470(0x04)
	char pad_474[0x34]; // 0x474(0x34)
	struct TArray<struct FString> WeaponLevelBGNames; // 0x4a8(0x10)
	struct FString WeaponLevelBGPrefix; // 0x4b8(0x10)
	struct FString ShieldIconPrefix; // 0x4c8(0x10)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> CurrentWeapon; // 0x4d8(0x08)

	void UpdateUpgradeData(struct ASolarPlayerWeapon* InWeapon, float Discount); // Function Solarland.ElectricShop_Weapon.UpdateUpgradeData // (Final|Native|Public) // @ game+0x1fe9e40
	void UpdateShieldUpgradeData(float Discount); // Function Solarland.ElectricShop_Weapon.UpdateShieldUpgradeData // (Final|Native|Public) // @ game+0xb28b80
	void ShowUpgradeEffect(); // Function Solarland.ElectricShop_Weapon.ShowUpgradeEffect // (Final|Native|Protected) // @ game+0x8e9ae0
	void SetWeaponWidgetSwitcherIndex(int32_t InNewIndex); // Function Solarland.ElectricShop_Weapon.SetWeaponWidgetSwitcherIndex // (Final|Native|Public) // @ game+0x15936f0
	void SetUpgradeState(); // Function Solarland.ElectricShop_Weapon.SetUpgradeState // (Final|Native|Protected) // @ game+0x8e9ae0
	void SetUpgradeIndicator(); // Function Solarland.ElectricShop_Weapon.SetUpgradeIndicator // (Final|Native|Protected) // @ game+0x8e9ae0
	void SetIndicatorVisibility(enum class EShopWeaponUpgradeState InState); // Function Solarland.ElectricShop_Weapon.SetIndicatorVisibility // (Final|Native|Protected) // @ game+0x1fe96d0
	void SetElectricCostState(enum class EShopWeaponUpgradeState InState); // Function Solarland.ElectricShop_Weapon.SetElectricCostState // (Final|Native|Protected) // @ game+0x1fe96d0
	void RequestUpgradeWeapon(); // Function Solarland.ElectricShop_Weapon.RequestUpgradeWeapon // (Final|Native|Protected) // @ game+0x8e9ae0
	void RequestUpgradeShield(); // Function Solarland.ElectricShop_Weapon.RequestUpgradeShield // (Final|Native|Protected) // @ game+0x8e9ae0
	void RefreshCurrentShieldProperty(int32_t InShieldID); // Function Solarland.ElectricShop_Weapon.RefreshCurrentShieldProperty // (Final|Native|Protected) // @ game+0x15936f0
	void OnWeaponUpdateRequested__DelegateSignature(struct ASolarPlayerWeapon* Weapon); // DelegateFunction Solarland.ElectricShop_Weapon.OnWeaponUpdateRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnUpgradeWeaponSuccess(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.ElectricShop_Weapon.OnUpgradeWeaponSuccess // (Final|Native|Protected) // @ game+0x1fe9450
	void OnUpgradeShieldSuccess(struct ASolarCharacter* InCharacter); // Function Solarland.ElectricShop_Weapon.OnUpgradeShieldSuccess // (Final|Native|Protected) // @ game+0x912e20
	void OnUpgradeCooldown(); // Function Solarland.ElectricShop_Weapon.OnUpgradeCooldown // (Final|Native|Protected) // @ game+0x1fe9430
	void OnShieldUpdateRequested__DelegateSignature(struct ASolarCharacter* ShieldCharacter); // DelegateFunction Solarland.ElectricShop_Weapon.OnShieldUpdateRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void InitWeaponUpgradeCost(); // Function Solarland.ElectricShop_Weapon.InitWeaponUpgradeCost // (Final|Native|Protected) // @ game+0x8e9ae0
	void HideUpgradeEffect(); // Function Solarland.ElectricShop_Weapon.HideUpgradeEffect // (Final|Native|Protected) // @ game+0x1fe9140
	float GetWeaponUpgradeCost(int32_t InWeaponLevel); // Function Solarland.ElectricShop_Weapon.GetWeaponUpgradeCost // (Final|Native|Protected) // @ game+0x1fe90a0
	struct FString GetWeaponLvBgFullPath(int32_t WeaponLv); // Function Solarland.ElectricShop_Weapon.GetWeaponLvBgFullPath // (Final|Native|Protected) // @ game+0x1fe8fc0
	struct FString GetShieldLvBgFullPath(int32_t ShieldLv); // Function Solarland.ElectricShop_Weapon.GetShieldLvBgFullPath // (Final|Native|Protected) // @ game+0x1fe8fc0
	float GetDiscountedCost(float Cost); // Function Solarland.ElectricShop_Weapon.GetDiscountedCost // (Final|Native|Protected) // @ game+0x1fe8d50
	void CheckEnergyAvaliable(float InValue); // Function Solarland.ElectricShop_Weapon.CheckEnergyAvaliable // (Final|Native|Public) // @ game+0xb28b80
	void BindDelegates(); // Function Solarland.ElectricShop_Weapon.BindDelegates // (Final|Native|Protected) // @ game+0x8e9ae0
};

// Class Solarland.ElectronicTreasureBox
// Size: 0x608 (Inherited: 0x5c8)
struct AElectronicTreasureBox : ASolarTreasureBoxActor {
	struct FString OnFinishSpawnLoopAudio; // 0x5c8(0x10)
	struct FString OnStopLoopAudio; // 0x5d8(0x10)
	struct FString OnOpenAudio; // 0x5e8(0x10)
	struct FSpawnedActorHandle CachedActorHandle; // 0x5f8(0x04)
	char pad_5FC[0xc]; // 0x5fc(0x0c)
};

// Class Solarland.EmojiBubbleSubsystem
// Size: 0x38 (Inherited: 0x30)
struct UEmojiBubbleSubsystem : UGameInstanceSubsystem {
	struct UDataTable* EmojiTable; // 0x30(0x08)

	void ShowEmojiBubbleToContainerInLobby(int32_t EmojiID, struct ASolarLobbyCharacter* InLobbyCharacter, struct FString PlayerId); // Function Solarland.EmojiBubbleSubsystem.ShowEmojiBubbleToContainerInLobby // (Final|Native|Public) // @ game+0x1fe9ba0
	void ShowEmojiBubbleToContainer(int32_t EmojiID, struct ASolarCharacter* InCharacter); // Function Solarland.EmojiBubbleSubsystem.ShowEmojiBubbleToContainer // (Final|Native|Public) // @ game+0x1fe9ad0
	void ResetAllEmojiBubble(); // Function Solarland.EmojiBubbleSubsystem.ResetAllEmojiBubble // (Final|Native|Public) // @ game+0x1fe9690
	bool GetEmojiConfigByID(int32_t EmojiID, struct FEmojiBubbleConfig& OutConfig); // Function Solarland.EmojiBubbleSubsystem.GetEmojiConfigByID // (Final|Native|Public|HasOutParms) // @ game+0x1fe8df0
};

// Class Solarland.EmojiBubbleWidget
// Size: 0x590 (Inherited: 0x348)
struct UEmojiBubbleWidget : USolarUserWidget {
	char pad_348[0x10]; // 0x348(0x10)
	float ShowTime; // 0x358(0x04)
	char pad_35C[0x34]; // 0x35c(0x34)
	struct UWidgetAnimation* EmojiBegin_Anim; // 0x390(0x08)
	struct UWidgetAnimation* EmojiEnd_Anim; // 0x398(0x08)
	struct UImage* Img_Emoji; // 0x3a0(0x08)
	bool IsSpecialEmoji; // 0x3a8(0x01)
	char pad_3A9[0x3]; // 0x3a9(0x03)
	int32_t EmojiOffsetInLobby; // 0x3ac(0x04)
	struct FVector2D LobbyEmojiSize; // 0x3b0(0x08)
	struct FRuntimeFloatCurve EmojiSizeCurve; // 0x3b8(0x88)
	struct FRuntimeFloatCurve EnemyEmojiSizeCurve; // 0x440(0x88)
	int32_t TeamMateEmojiOffset; // 0x4c8(0x04)
	int32_t SelfEmojiOffset; // 0x4cc(0x04)
	struct TArray<enum class EUsePlayerType> EmoteAppearSoundConfig; // 0x4d0(0x10)
	struct TArray<enum class EUsePlayerType> EmoteSoundConfig; // 0x4e0(0x10)
	char pad_4F0[0xa0]; // 0x4f0(0xa0)

	void UpdateEmojiContent(int32_t EmojiID); // Function Solarland.EmojiBubbleWidget.UpdateEmojiContent // (Final|Native|Public) // @ game+0x1fe9db0
	void SetIsInLobbyTeam(bool IsInLobbyTeam); // Function Solarland.EmojiBubbleWidget.SetIsInLobbyTeam // (Final|Native|Public) // @ game+0x1fe97d0
	void OnEndAnimationFinished(); // Function Solarland.EmojiBubbleWidget.OnEndAnimationFinished // (Final|Native|Public) // @ game+0x1fe9270
};

// Class Solarland.EShopGoodsObject
// Size: 0x50 (Inherited: 0x28)
struct UEShopGoodsObject : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	int32_t ProductID; // 0x30(0x04)
	int32_t ItemID; // 0x34(0x04)
	int32_t Price; // 0x38(0x04)
	int32_t Num; // 0x3c(0x04)
	float CoolDown; // 0x40(0x04)
	int32_t Generation; // 0x44(0x04)
	bool bIsRecommend; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	void UpdateData(struct FElectricShopItem& InItemData, bool InRecommend); // Function Solarland.EShopGoodsObject.UpdateData // (Final|Native|Public|HasOutParms) // @ game+0x1fe9cc0
};

// Class Solarland.EventAction
// Size: 0x80 (Inherited: 0x70)
struct UEventAction : UActionNode {
	char pad_70[0x10]; // 0x70(0x10)
};

// Class Solarland.ExpWidget
// Size: 0x360 (Inherited: 0x348)
struct UExpWidget : USolarUserWidget {
	int32_t LocalTextIndex; // 0x348(0x04)
	char pad_34C[0x4]; // 0x34c(0x04)
	struct USolarTextBlock* SolarText_WP_Exp; // 0x350(0x08)
	struct UWidgetAnimation* Exp_Anim; // 0x358(0x08)

	void PlayGetEXPAnimation(int32_t InExp); // Function Solarland.ExpWidget.PlayGetEXPAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe9520
	struct FString GetExpDisplayStringWithValue(int32_t Value); // Function Solarland.ExpWidget.GetExpDisplayStringWithValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1fe8ee0
};

// Class Solarland.FeedbackCanvasPanel
// Size: 0x1b8 (Inherited: 0x168)
struct UFeedbackCanvasPanel : UCanvasPanel {
	struct TMap<struct FString, struct FFeedbackSingleData> FeedbackMap; // 0x168(0x50)
};

// Class Solarland.FeedbackWidget
// Size: 0x2a0 (Inherited: 0x260)
struct UFeedbackWidget : UUserWidget {
	struct UFeedbackCanvasPanel* FeedbackPanel; // 0x260(0x08)
	float VisibilityTime; // 0x268(0x04)
	float VisibilityTimer; // 0x26c(0x04)
	struct FFeedbackSingleData CurrentFeedbackSingleData; // 0x270(0x30)
};

// Class Solarland.FireInputWidget
// Size: 0x370 (Inherited: 0x138)
struct UFireInputWidget : UWidget {
	struct FSlateBrush JoyStickThumb; // 0x138(0x98)
	struct FSlateBrush JoyStickThumbPress; // 0x1d0(0x98)
	struct FSlateBrush JoyStickIcon; // 0x268(0x98)
	struct FVector2D VisualSize; // 0x300(0x08)
	struct FVector2D ThumbSize; // 0x308(0x08)
	struct FVector2D InputScale; // 0x310(0x08)
	struct FVector2D IconSize; // 0x318(0x08)
	float ActiveOpacity; // 0x320(0x04)
	float InactiveOpacity; // 0x324(0x04)
	float TimeUntilDeactive; // 0x328(0x04)
	bool bPreventReCenter; // 0x32c(0x01)
	char pad_32D[0x13]; // 0x32d(0x13)
	struct FMulticastInlineDelegate OnJoystickPressed; // 0x340(0x10)
	struct FMulticastInlineDelegate OnJoystickRelease; // 0x350(0x10)
	struct FMulticastInlineDelegate OnInputYawAndPitch; // 0x360(0x10)

	void SetJoyStickThumbBrush(struct FButtonStyle& ButtonStyle); // Function Solarland.FireInputWidget.SetJoyStickThumbBrush // (Final|Native|Public|HasOutParms) // @ game+0x1fe99f0
	void SetJoyStickIcon(struct FSlateBrush& Icon); // Function Solarland.FireInputWidget.SetJoyStickIcon // (Final|Native|Public|HasOutParms) // @ game+0x1fe9860
	void SetInputScale(struct FVector2D Scale); // Function Solarland.FireInputWidget.SetInputScale // (Final|Native|Public|HasDefaults) // @ game+0x1fe9750
	void ResetControlInput(); // Function Solarland.FireInputWidget.ResetControlInput // (Final|Native|Public) // @ game+0x1fe96b0
};

// Class Solarland.GameArgs
// Size: 0x48 (Inherited: 0x28)
struct UGameArgs : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct FString> CommandLineArgs; // 0x30(0x10)
	bool SkipTutorial; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	bool ExecGameArgs(struct FString Args, struct FString& FailReason); // Function Solarland.GameArgs.ExecGameArgs // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.GameDataManager
// Size: 0x11a0 (Inherited: 0x228)
struct AGameDataManager : AGameManagerBase {
	struct TArray<int32_t> IntegerValues; // 0x228(0x10)
	struct TArray<float> FloatValues; // 0x238(0x10)
	struct TArray<char> ByteValues; // 0x248(0x10)
	struct TArray<bool> BoolValues; // 0x258(0x10)
	struct TArray<struct FVector> FVectorValues; // 0x268(0x10)
	struct TArray<struct FString> FStringValues; // 0x278(0x10)
	char pad_288[0x60]; // 0x288(0x60)
	struct FSCMHostData GlobalDataMap; // 0x2e8(0x488)
	struct TMap<struct FString, struct FSCMHostData> SideDataMap; // 0x770(0x50)
	struct TMap<struct FString, struct FSCMHostData> PlayerDataMap; // 0x7c0(0x50)
	struct FSCMHostData SideDataDefaultTemplate; // 0x810(0x488)
	struct FSCMHostData PlayerDataDefaultTemplate; // 0xc98(0x488)
	struct TMap<struct FString, struct URank*> RanKMap; // 0x1120(0x50)
	char pad_1170[0x20]; // 0x1170(0x20)
	struct UDataTable* DataTable; // 0x1190(0x08)
	struct UDataTable* GeneralDataTable; // 0x1198(0x08)

	void RemoveHost(enum class ESCMHostType HostType, struct FString HostID); // Function Solarland.GameDataManager.RemoveHost // (Final|Native|Public|BlueprintCallable) // @ game+0x1fef990
	void RemoveData(enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, enum class ESCMDataSetType DataSetType); // Function Solarland.GameDataManager.RemoveData // (Final|Native|Public|BlueprintCallable) // @ game+0x1fef810
	void NotifyRemoveHost(enum class ESCMHostType HostType, struct FString HostID); // Function Solarland.GameDataManager.NotifyRemoveHost // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1fedeb0
	void AddDataByTableRow(struct FName RowName, struct FSCMDataBoardRow& InTableRow); // Function Solarland.GameDataManager.AddDataByTableRow // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1fecc20
};

// Class Solarland.GameEventComponent
// Size: 0xd8 (Inherited: 0xd0)
struct UGameEventComponent : UGameModeCompBase {
	float WorldTime; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)

	void ReceiveInit(); // Function Solarland.GameEventComponent.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void InitializeEventList(); // Function Solarland.GameEventComponent.InitializeEventList // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetAliveCount(); // Function Solarland.GameEventComponent.GetAliveCount // (Final|Native|Protected|BlueprintCallable) // @ game+0x1fecff0
	void CheckEventList(float DeltaTime); // Function Solarland.GameEventComponent.CheckEventList // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.GameJobManager
// Size: 0x440 (Inherited: 0x228)
struct AGameJobManager : AGameManagerBase {
	struct FMulticastInlineDelegate SideListChangeEvent; // 0x228(0x10)
	struct TArray<struct FSCMSideData> SideData; // 0x238(0x10)
	struct TMap<struct FString, uint32_t> SideIndexMap; // 0x248(0x50)
	struct TMap<struct FString, struct ASCMPlayerState*> PlayerIndexMap; // 0x298(0x50)
	struct TArray<struct ASCMPlayerState*> OBPlayerList; // 0x2e8(0x10)
	char pad_2F8[0x20]; // 0x2f8(0x20)
	struct UDataTable* JobDataTable; // 0x318(0x08)
	struct FSideAttributeSetArray SideAttributeSets; // 0x320(0x120)

	bool SwitchPlayerSideAndJob(struct ASCMPlayerState* PlayerA, struct ASCMPlayerState* PlayerB); // Function Solarland.GameJobManager.SwitchPlayerSideAndJob // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1fefcd0
	bool SwitchPlayers(struct ASCMPlayerState* PlayerA, struct ASCMPlayerState* PlayerB); // Function Solarland.GameJobManager.SwitchPlayers // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1fefda0
	bool SwitchPlayerPosInTeam(struct ASCMPlayerState* PlayerA, struct ASCMPlayerState* PlayerB); // Function Solarland.GameJobManager.SwitchPlayerPosInTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1fefc00
	bool SwitchOBPlayerAndPlayer(struct ASCMPlayerState* OBPlayer, struct ASCMPlayerState* Player); // Function Solarland.GameJobManager.SwitchOBPlayerAndPlayer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1fefb30
	void SideListChangeEvent__DelegateSignature(struct TArray<struct FSCMSideData>& SideList); // DelegateFunction Solarland.GameJobManager.SideListChangeEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void SetTimerToNoticeSideDataChanged(); // Function Solarland.GameJobManager.SetTimerToNoticeSideDataChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1fefb10
	void ServerSidePosInTeamChange(struct FString SideName); // Function Solarland.GameJobManager.ServerSidePosInTeamChange // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1fefa70
	bool PreAssignOBToPlayer(struct ASCMPlayerState* Player); // Function Solarland.GameJobManager.PreAssignOBToPlayer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1fef0b0
	bool PreAssignJobToPlayer(struct ASCMPlayerState* Player, struct FString Side, struct FString Job, int32_t PosInTeam); // Function Solarland.GameJobManager.PreAssignJobToPlayer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1feef20
	void OnRep_SideDataList(); // Function Solarland.GameJobManager.OnRep_SideDataList // (Final|Native|Private) // @ game+0x1fee800
	void OnRep_OBPlayerList(); // Function Solarland.GameJobManager.OnRep_OBPlayerList // (Final|Native|Private) // @ game+0x1fee7e0
	void OnPlayerStateEndPlay(struct AActor* PlayerState, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameJobManager.OnPlayerStateEndPlay // (Final|Native|Private) // @ game+0x1fee6b0
	void OnOBPlayerListChanged(struct ASCMPlayerState* ChangedPlayer); // Function Solarland.GameJobManager.OnOBPlayerListChanged // (Final|Native|Private) // @ game+0x1fee620
	bool IsPlayerSameTeam(struct ASCMPlayerState* TargetPlayer, struct FString TargetPlayerId); // Function Solarland.GameJobManager.IsPlayerSameTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x1fedda0
	bool IsExistSide(struct FString NewSide); // Function Solarland.GameJobManager.IsExistSide // (Final|Native|Public|BlueprintCallable) // @ game+0x1fedcf0
	struct TArray<int32_t> GetTeamAssignableNumArray(); // Function Solarland.GameJobManager.GetTeamAssignableNumArray // (Final|Native|Public) // @ game+0x1fedc70
	bool GetSidePreJoinPlayerList(struct FString SideName, struct TArray<struct ASCMPlayerState*>& OutPreJoinPlayerList); // Function Solarland.GameJobManager.GetSidePreJoinPlayerList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1fedb60
	bool GetSidePlayerList(struct FString SideName, struct TArray<struct ASCMPlayerState*>& OutPlayerList); // Function Solarland.GameJobManager.GetSidePlayerList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1feda50
	bool GetSideJobPlayerList(struct FString SideName, struct FString JobName, struct TArray<struct ASCMPlayerState*>& OutPlayerList); // Function Solarland.GameJobManager.GetSideJobPlayerList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1fed8e0
	bool GetSideData(struct FString InSideName, struct FSCMSideData& outData); // Function Solarland.GameJobManager.GetSideData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1fed730
	bool GetSideAttributeSet(struct FSideAttributeSet& OutSet, struct FString InSideName); // Function Solarland.GameJobManager.GetSideAttributeSet // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fed590
	bool GetPreOBPlayerIDList(struct TArray<struct FString>& OutPlayerIDList); // Function Solarland.GameJobManager.GetPreOBPlayerIDList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1fed4b0
	struct ASCMPlayerState* GetPlayerByPlayerID(struct FString InPlayerID); // Function Solarland.GameJobManager.GetPlayerByPlayerID // (Final|Native|Public|BlueprintCallable) // @ game+0x1fed400
	bool GetOBPlayerList(struct TArray<struct ASCMPlayerState*>& OutPlayerList); // Function Solarland.GameJobManager.GetOBPlayerList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1fed340
	bool GetJobDataBySideAndJob(struct FString NewSide, struct FString NewJob, struct FSCMJobData& outData); // Function Solarland.GameJobManager.GetJobDataBySideAndJob // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1fed1c0
	int32_t GetAssignedSideCount(); // Function Solarland.GameJobManager.GetAssignedSideCount // (Final|Native|Public|BlueprintCallable) // @ game+0x1fed080
	int32_t GetAllSidePlayerNumber(); // Function Solarland.GameJobManager.GetAllSidePlayerNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fed050
	struct TArray<struct FSCMSideData> GetAllSideData(); // Function Solarland.GameJobManager.GetAllSideData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fed020
	bool ChangePlayerToOB(struct ASCMPlayerState* Player); // Function Solarland.GameJobManager.ChangePlayerToOB // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1fecf50
	bool ChangePlayerJob(struct ASCMPlayerState* Player, struct FString NewSide, struct FString NewJob, int32_t PosInTeam); // Function Solarland.GameJobManager.ChangePlayerJob // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1fecdc0
};

// Class Solarland.LevelWorldCompositionSetting
// Size: 0x88 (Inherited: 0x38)
struct ULevelWorldCompositionSetting : UDeveloperSettings {
	struct TMap<struct FSoftObjectPath, struct FVector> BackupLevelStreamingLocationMap; // 0x38(0x50)
};

// Class Solarland.GameLevelManager
// Size: 0x478 (Inherited: 0x228)
struct AGameLevelManager : AGameManagerBase {
	char pad_228[0x20]; // 0x228(0x20)
	struct FString DesiredLoadLevel; // 0x248(0x10)
	char pad_258[0x10]; // 0x258(0x10)
	struct TArray<struct FString> DesiredLoadElementLevels; // 0x268(0x10)
	struct TArray<struct FString> DesiredUnLoadElementLevels; // 0x278(0x10)
	char pad_288[0xa8]; // 0x288(0xa8)
	struct TMap<struct FString, struct ULevelStreamingDynamic*> LevelKeyToObject; // 0x330(0x50)
	struct TSet<struct ASolarCharacter*> MovementDisabledCharacters; // 0x380(0x50)
	char pad_3D0[0x60]; // 0x3d0(0x60)
	struct TArray<struct FString> LoadingElementLevelNames; // 0x430(0x10)
	struct TArray<struct FString> UnLoadingElementLevelNames; // 0x440(0x10)
	char pad_450[0x18]; // 0x450(0x18)
	struct AGameMapElementManager* MapElementManager; // 0x468(0x08)
	char pad_470[0x8]; // 0x470(0x08)

	void SetMinimapFootprintVisible(bool bVisible); // Function Solarland.GameLevelManager.SetMinimapFootprintVisible // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnStreamingLevelLoaded(); // Function Solarland.GameLevelManager.OnStreamingLevelLoaded // (Final|Native|Private) // @ game+0x1fee840
	void OnScoutPlayerDepart(); // Function Solarland.GameLevelManager.OnScoutPlayerDepart // (Final|Native|Public) // @ game+0x1fee820
	void OnRep_DesiredUnLoadElementLevels(); // Function Solarland.GameLevelManager.OnRep_DesiredUnLoadElementLevels // (Final|Native|Private) // @ game+0x1fee7c0
	void OnRep_DesiredLoadLevel(); // Function Solarland.GameLevelManager.OnRep_DesiredLoadLevel // (Final|Native|Private) // @ game+0x1fee7a0
	void OnRep_DesiredLoadElementLevels(); // Function Solarland.GameLevelManager.OnRep_DesiredLoadElementLevels // (Final|Native|Private) // @ game+0x1fee780
	void OnLevelLoaded(); // Function Solarland.GameLevelManager.OnLevelLoaded // (Final|Native|Private) // @ game+0x1fee600
	void OnElementStreamingLevelUnLoaded(); // Function Solarland.GameLevelManager.OnElementStreamingLevelUnLoaded // (Final|Native|Private) // @ game+0x1fee120
	void OnElementStreamingLevelLoaded(); // Function Solarland.GameLevelManager.OnElementStreamingLevelLoaded // (Final|Native|Private) // @ game+0x1fee100
	void OnCharacterEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameLevelManager.OnCharacterEndPlay // (Final|Native|Private) // @ game+0x1fee030
	void LevelManagerTick(); // Function Solarland.GameLevelManager.LevelManagerTick // (Final|Native|Private) // @ game+0x1fede90
	int32_t GetCurrentMapID(); // Function Solarland.GameLevelManager.GetCurrentMapID // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fed170
	struct FString GetCurrentLevel(); // Function Solarland.GameLevelManager.GetCurrentLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fed0b0
};

// Class Solarland.GameMapElementManager
// Size: 0x2e8 (Inherited: 0x228)
struct AGameMapElementManager : AGameManagerBase {
	struct TMap<struct FString, struct ASCMMapElementBase*> MapElementListWithID; // 0x228(0x50)
	struct TArray<struct ASCMMapElementBase*> MapElementList; // 0x278(0x10)
	struct TArray<struct ASCMPlayerStart*> PlayerStartList; // 0x288(0x10)
	char pad_298[0x50]; // 0x298(0x50)

	void OnAddNewMapElement(struct AActor* InNewActor); // Function Solarland.GameMapElementManager.OnAddNewMapElement // (Final|Native|Public) // @ game+0x1fedfa0
};

// Class Solarland.GameModeGlobalSetting
// Size: 0xa8 (Inherited: 0x28)
struct UGameModeGlobalSetting : UObject {
	struct FMulticastInlineDelegate OnGlobalSettingChanged; // 0x28(0x10)
	bool bCanVJetInWater; // 0x38(0x01)
	bool bCanHJetInWater; // 0x39(0x01)
	bool bOverrideVJetCD; // 0x3a(0x01)
	char pad_3B[0x1]; // 0x3b(0x01)
	float OverridenVJetCD; // 0x3c(0x04)
	bool bOverrideHJetCD; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float OverridenHJetCD; // 0x44(0x04)
	bool bEnableJetCost; // 0x48(0x01)
	enum class EJetAltitudeLimitationMode JetAltitudeLimitationMode; // 0x49(0x01)
	bool bEnableEnergyCost; // 0x4a(0x01)
	bool bEnableDamage; // 0x4b(0x01)
	bool bEnableTeamDamage; // 0x4c(0x01)
	bool bEnableMinHPLock; // 0x4d(0x01)
	char pad_4E[0x2]; // 0x4e(0x02)
	float MinHPToLock; // 0x50(0x04)
	bool bEnableSkydiveFollowMovement; // 0x54(0x01)
	bool bEnableBigMap; // 0x55(0x01)
	bool bShowVehicleOnMap; // 0x56(0x01)
	char pad_57[0x1]; // 0x57(0x01)
	int32_t KillStreakEndNoticeNumber; // 0x58(0x04)
	int32_t KillLeaderMinKillNumber; // 0x5c(0x04)
	bool bShowRevengeNotice; // 0x60(0x01)
	bool bShowKillStreakEndNotice; // 0x61(0x01)
	bool bShowTotalKillNotice; // 0x62(0x01)
	bool bShowKillDownNotice; // 0x63(0x01)
	bool bShowKillLeaderNotice; // 0x64(0x01)
	bool bShowKillLeaderShutDownNotice; // 0x65(0x01)
	bool bShowClearTeamNotice; // 0x66(0x01)
	enum class EWeaponInfiniteAmmoMode WeaponInfiniteAmmoMode; // 0x67(0x01)
	bool bEnableWeaponPartEffectTip; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	struct TArray<float> WeaponLevelDamageFactorArray; // 0x70(0x10)
	bool bDestroyItemOnDiscard; // 0x80(0x01)
	bool bDestroyWeaponOnDiscard; // 0x81(0x01)
	bool bCanRebirth; // 0x82(0x01)
	bool bCanLoginBattle; // 0x83(0x01)
	bool bEnableBattlePrompt; // 0x84(0x01)
	bool bEnableBattlePrompt_BeginPlay; // 0x85(0x01)
	bool bEnableOpponentPerspective; // 0x86(0x01)
	bool bKillPlayerWhenOut; // 0x87(0x01)
	int32_t ConfigGameModeId; // 0x88(0x04)
	bool bEnableEnemyNameMark; // 0x8c(0x01)
	char pad_8D[0x3]; // 0x8d(0x03)
	float EnableEnemyNameMarkDistance; // 0x90(0x04)
	float EnemyNameMarkDuration; // 0x94(0x04)
	int32_t SummonedAirDropMaxSum; // 0x98(0x04)
	float SummonedAirDropLifeTime; // 0x9c(0x04)
	float SummonedAirDropDestroyEffectTime; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)

	void SetWeaponInfiniteAmmoMode(enum class EWeaponInfiniteAmmoMode NewValue); // Function Solarland.GameModeGlobalSetting.SetWeaponInfiniteAmmoMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff46d0
	void SetTeamDamageEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetTeamDamageEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff4640
	void SetSkydiveFollowMovementEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetSkydiveFollowMovementEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff45b0
	void SetShowVehicleOnMap(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetShowVehicleOnMap // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff4520
	void SetShowTotalKillNotice(bool InShowTotalKillNotice); // Function Solarland.GameModeGlobalSetting.SetShowTotalKillNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff4490
	void SetShowShowClearTeamNotice(bool InShowClearTeamNotice); // Function Solarland.GameModeGlobalSetting.SetShowShowClearTeamNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff4400
	void SetShowRevengeNotice(bool InShowRevengeNotice); // Function Solarland.GameModeGlobalSetting.SetShowRevengeNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff4370
	void SetShowKillStreakEndNotice(bool InShowKillStreakEndNotice); // Function Solarland.GameModeGlobalSetting.SetShowKillStreakEndNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff42e0
	void SetShowKillLeaderShutDownNotice(bool InShowKillLeaderShutDownNotice); // Function Solarland.GameModeGlobalSetting.SetShowKillLeaderShutDownNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff4250
	void SetShowKillLeaderNotice(bool InShowKillLeaderNotice); // Function Solarland.GameModeGlobalSetting.SetShowKillLeaderNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff41c0
	void SetShowKillDownNotice(bool InShowKillDownNotice); // Function Solarland.GameModeGlobalSetting.SetShowKillDownNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff4130
	void SetMinHPToLock(float NewValue); // Function Solarland.GameModeGlobalSetting.SetMinHPToLock // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff40b0
	void SetMinHPLockEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetMinHPLockEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff4020
	void SetKillStreakEndNoticeNumber(int32_t InKillStreakEndNoticeNumber); // Function Solarland.GameModeGlobalSetting.SetKillStreakEndNoticeNumber // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3fa0
	void SetKillPlayerWhenOut(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetKillPlayerWhenOut // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3f10
	void SetKillLeaderMinKillNumber(int32_t InKillLeaderMinKillNumber); // Function Solarland.GameModeGlobalSetting.SetKillLeaderMinKillNumber // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3e90
	void SetJetCostEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetJetCostEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3e00
	void SetJetAltitudeLimitationMode(enum class EJetAltitudeLimitationMode NewValue); // Function Solarland.GameModeGlobalSetting.SetJetAltitudeLimitationMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3d80
	void SetGameCanRebirth(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetGameCanRebirth // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3c60
	void SetEnergyCostEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetEnergyCostEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3bd0
	void SetDamageEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetDamageEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3b40
	void SetCanVJetInWater(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetCanVJetInWater // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3ab0
	void SetCanLoginBattle(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetCanLoginBattle // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3a20
	void SetCanHJetInWater(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetCanHJetInWater // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3990
	void SetBigMapEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetBigMapEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3900
	void ReceiveSettingChanged(); // Function Solarland.GameModeGlobalSetting.ReceiveSettingChanged // (Final|Native|Protected) // @ game+0x1ff38e0
	bool IsVJetCDOverriden(); // Function Solarland.GameModeGlobalSetting.IsVJetCDOverriden // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff37d0
	bool IsTeamDamageEnabled(); // Function Solarland.GameModeGlobalSetting.IsTeamDamageEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff37b0
	bool IsSkydiveFollowMovementEnabled(); // Function Solarland.GameModeGlobalSetting.IsSkydiveFollowMovementEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3790
	bool IsShowVehicleOnMap(); // Function Solarland.GameModeGlobalSetting.IsShowVehicleOnMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3770
	bool IsShowTotalKillNotice(); // Function Solarland.GameModeGlobalSetting.IsShowTotalKillNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3750
	bool IsShowRevengeNotice(); // Function Solarland.GameModeGlobalSetting.IsShowRevengeNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3730
	bool IsShowKillStreakEndNotice(); // Function Solarland.GameModeGlobalSetting.IsShowKillStreakEndNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3710
	bool IsShowKillLeaderShutDownNotice(); // Function Solarland.GameModeGlobalSetting.IsShowKillLeaderShutDownNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff36f0
	bool IsShowKillLeaderNotice(); // Function Solarland.GameModeGlobalSetting.IsShowKillLeaderNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff36d0
	bool IsShowKillDownNotice(); // Function Solarland.GameModeGlobalSetting.IsShowKillDownNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff36b0
	bool IsShowClearTeamNotice(); // Function Solarland.GameModeGlobalSetting.IsShowClearTeamNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3690
	bool IsOpponentPerspectiveEnabled(); // Function Solarland.GameModeGlobalSetting.IsOpponentPerspectiveEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3670
	bool IsMinHPLockEnabled(); // Function Solarland.GameModeGlobalSetting.IsMinHPLockEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3650
	bool IsKillPlayerWhenOut(); // Function Solarland.GameModeGlobalSetting.IsKillPlayerWhenOut // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3630
	bool IsJetCostEnabledEnabled(); // Function Solarland.GameModeGlobalSetting.IsJetCostEnabledEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3610
	bool IsHJetCDOverriden(); // Function Solarland.GameModeGlobalSetting.IsHJetCDOverriden // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff35f0
	bool IsGameCanRebirth(); // Function Solarland.GameModeGlobalSetting.IsGameCanRebirth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff35d0
	bool IsGameCanLoginBattle(); // Function Solarland.GameModeGlobalSetting.IsGameCanLoginBattle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff35b0
	bool IsEnergyCostEnabled(); // Function Solarland.GameModeGlobalSetting.IsEnergyCostEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3580
	bool IsEnableWeaponPartEffectTip(); // Function Solarland.GameModeGlobalSetting.IsEnableWeaponPartEffectTip // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f99010
	bool IsDestroyWeaponOnDiscard(); // Function Solarland.GameModeGlobalSetting.IsDestroyWeaponOnDiscard // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3560
	bool IsDestroyItemOnDiscard(); // Function Solarland.GameModeGlobalSetting.IsDestroyItemOnDiscard // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3540
	bool IsDamageEnabled(); // Function Solarland.GameModeGlobalSetting.IsDamageEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3520
	bool IsBigMapEnabled(); // Function Solarland.GameModeGlobalSetting.IsBigMapEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3500
	enum class EWeaponInfiniteAmmoMode GetWeaponInfiniteAmmoMode(); // Function Solarland.GameModeGlobalSetting.GetWeaponInfiniteAmmoMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff34e0
	float GetOverridenVJetCD(); // Function Solarland.GameModeGlobalSetting.GetOverridenVJetCD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3330
	float GetOverridenHJetCD(); // Function Solarland.GameModeGlobalSetting.GetOverridenHJetCD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3310
	float GetMinHPToLock(); // Function Solarland.GameModeGlobalSetting.GetMinHPToLock // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x876580
	int32_t GetKillStreakEndNoticeNumber(); // Function Solarland.GameModeGlobalSetting.GetKillStreakEndNoticeNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff32c0
	int32_t GetKillLeaderMinKillNumber(); // Function Solarland.GameModeGlobalSetting.GetKillLeaderMinKillNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff32a0
	enum class EJetAltitudeLimitationMode GetJetAltitudeLimitationMode(); // Function Solarland.GameModeGlobalSetting.GetJetAltitudeLimitationMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3280
	float GetDamageFactorByWeaponLevel(int32_t InWeaponLevel); // Function Solarland.GameModeGlobalSetting.GetDamageFactorByWeaponLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff31b0
	int32_t GetConfigGameModeId(); // Function Solarland.GameModeGlobalSetting.GetConfigGameModeId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3190
	bool CanVJetInWater(); // Function Solarland.GameModeGlobalSetting.CanVJetInWater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3170
	bool CanHJetInWater(); // Function Solarland.GameModeGlobalSetting.CanHJetInWater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff3070
};

// Class Solarland.GameModeSettingInterface
// Size: 0x28 (Inherited: 0x28)
struct UGameModeSettingInterface : UInterface {

	struct UGameModeGlobalSetting* GetGameModeSetting(); // Function Solarland.GameModeSettingInterface.GetGameModeSetting // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1fa4280
};

// Class Solarland.GameplayTagReflectorSetting
// Size: 0x78 (Inherited: 0x28)
struct UGameplayTagReflectorSetting : UObject {
	struct TMap<struct FName, struct FSoftObjectPath> ReflectedTagsSet; // 0x28(0x50)
};

// Class Solarland.GameplayVibrateDataAsset
// Size: 0x80 (Inherited: 0x30)
struct UGameplayVibrateDataAsset : UDataAsset {
	struct TMap<enum class EGameplayVibrateCategory, struct FVibrateIntensityPlayParams> CategoryIntensityMap; // 0x30(0x50)
};

// Class Solarland.GameplayVibrateSettings
// Size: 0x60 (Inherited: 0x38)
struct UGameplayVibrateSettings : UDeveloperSettings {
	struct TSoftObjectPtr<UGameplayVibrateDataAsset> GameplayVibrateConfig; // 0x38(0x28)
};

// Class Solarland.GameReviveItemManager
// Size: 0x248 (Inherited: 0x228)
struct AGameReviveItemManager : AGameManagerBase {
	int32_t MaxReviveUsage; // 0x228(0x04)
	float ReviveItemRepoTime; // 0x22c(0x04)
	float ReviveProximityRadius; // 0x230(0x04)
	float ReviveHeight; // 0x234(0x04)
	float ReviveWaitTime; // 0x238(0x04)
	bool bGlobalUseRevieItem; // 0x23c(0x01)
	char pad_23D[0x3]; // 0x23d(0x03)
	float DownedReviveButtonDelayTime; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)

	void SetGlobalUseReviveItem(bool InCanUseItem); // Function Solarland.GameReviveItemManager.SetGlobalUseReviveItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1ff3cf0
	bool PlayerTryUseReviveItem(struct ASolarPlayerState* InPlayerState, int32_t InUseNum); // Function Solarland.GameReviveItemManager.PlayerTryUseReviveItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1ff3810
	void OnTeammateReviveManagerRefresh(); // Function Solarland.GameReviveItemManager.OnTeammateReviveManagerRefresh // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ff37f0
	void OnStartReviveItemRecycleCountDownDataRequested(); // Function Solarland.GameReviveItemManager.OnStartReviveItemRecycleCountDownDataRequested // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnRep_GlobalUseRevieItem(); // Function Solarland.GameReviveItemManager.OnRep_GlobalUseRevieItem // (Final|Native|Protected) // @ game+0x1ff37f0
	bool IsPlayerReviving(struct ASolarPlayerState* InPlayerState); // Function Solarland.GameReviveItemManager.IsPlayerReviving // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	float GetReviveWaitTime(); // Function Solarland.GameReviveItemManager.GetReviveWaitTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff34b0
	float GetReviveProximityRadius(); // Function Solarland.GameReviveItemManager.GetReviveProximityRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3480
	float GetReviveItemRepoTime(); // Function Solarland.GameReviveItemManager.GetReviveItemRepoTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3450
	int32_t GetReviveItemID(); // Function Solarland.GameReviveItemManager.GetReviveItemID // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3420
	float GetReviveHeight(); // Function Solarland.GameReviveItemManager.GetReviveHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff33f0
	int32_t GetPlayerReviveItemNum(struct ASolarPlayerState* InPlayerState); // Function Solarland.GameReviveItemManager.GetPlayerReviveItemNum // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3350
	int32_t GetMaxReviveUsage(); // Function Solarland.GameReviveItemManager.GetMaxReviveUsage // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff32e0
	float GetDownedReviveButtonDelayTime(); // Function Solarland.GameReviveItemManager.GetDownedReviveButtonDelayTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff3250
	void ClearAllPlayersReviveItem(); // Function Solarland.GameReviveItemManager.ClearAllPlayersReviveItem // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	bool CanPlayerUseReviveItem(struct ASolarPlayerState* InPlayerState, bool bCheckItemNum); // Function Solarland.GameReviveItemManager.CanPlayerUseReviveItem // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ff3090
	bool CanGlobalUseReviveItem(); // Function Solarland.GameReviveItemManager.CanGlobalUseReviveItem // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ff3040
};

// Class Solarland.Rank
// Size: 0xb0 (Inherited: 0x28)
struct URank : UObject {
	struct TMap<uint32_t, struct FMulticastInlineDelegate> SpecificRankChangeEventMap; // 0x28(0x50)
	struct TArray<struct FSCMRankListMulticast> RankListChangeMulticasts; // 0x78(0x10)
	char pad_88[0x20]; // 0x88(0x20)
	enum class ESCMDataRankType RankType; // 0xa8(0x01)
	enum class ESCMHostType HostType; // 0xa9(0x01)
	char pad_AA[0x6]; // 0xaa(0x06)
};

// Class Solarland.GaugeImage
// Size: 0x2c8 (Inherited: 0x260)
struct UGaugeImage : UUserWidget {
	enum class EGaugeType GaugeType; // 0x260(0x01)
	bool bInvert; // 0x261(0x01)
	char pad_262[0x2]; // 0x262(0x02)
	struct FVector2D ImageSize; // 0x264(0x08)
	float InitialDegree; // 0x26c(0x04)
	bool bSymmetric; // 0x270(0x01)
	char pad_271[0x3]; // 0x271(0x03)
	struct FVector2D CenterOffset; // 0x274(0x08)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct UObject* ResourceObject; // 0x280(0x08)
	float Progress; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct UMaterialInterface* MaterialDegree360; // 0x290(0x08)
	struct UMaterialInterface* MaterialDegree180; // 0x298(0x08)
	struct UMaterialInterface* MaterialDegree90; // 0x2a0(0x08)
	struct UMaterialInterface* MaterialDegreeLR; // 0x2a8(0x08)
	struct UMaterialInterface* MaterialDegreeUD; // 0x2b0(0x08)
	struct UImage* TargetImage; // 0x2b8(0x08)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x2c0(0x08)

	void UpdateProgress(float InProgress); // Function Solarland.GaugeImage.UpdateProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff8820
	void SetProgress(float InProgress); // Function Solarland.GaugeImage.SetProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff87a0
	void SetImage(struct UObject* RO); // Function Solarland.GaugeImage.SetImage // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff8710
	struct UImage* GetInternalImage(); // Function Solarland.GaugeImage.GetInternalImage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ff84a0
};

// Class Solarland.SolarDataAsset
// Size: 0x38 (Inherited: 0x30)
struct USolarDataAsset : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)

	void InitFromAsset(); // Function Solarland.SolarDataAsset.InitFromAsset // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.GlobalVehicleWeaponConfig
// Size: 0xf8 (Inherited: 0x38)
struct UGlobalVehicleWeaponConfig : USolarDataAsset {
	struct TArray<struct FAssitLockBoneWeight> AssistLockBoneWeight; // 0x38(0x10)
	struct TArray<struct FAssitLockBoneWeight> SortAssistLockBoneWeight; // 0x48(0x10)
	float CoefficientHUD; // 0x58(0x04)
	float CoefficientWorld; // 0x5c(0x04)
	float CoefficientHUDUnlock; // 0x60(0x04)
	float CoefficientWorldUnlock; // 0x64(0x04)
	float HudDistFromAssistLockPawnToSecondReticle; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
	struct FRuntimeFloatCurve AssistLockUIScaleCurve; // 0x70(0x88)
};

// Class Solarland.GlobalWeaponConfig
// Size: 0x550 (Inherited: 0x38)
struct UGlobalWeaponConfig : USolarDataAsset {
	struct FWeaponAttributeGameplayTags WeaponAttributeTags; // 0x38(0x18)
	enum class EAimTraceOriginType AimTraceOriginType; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	float MuzzleInWallCheckDistance; // 0x54(0x04)
	float SpreadSmoothSpeed; // 0x58(0x04)
	bool bEnableNewShoot; // 0x5c(0x01)
	bool bEnableGunEndShake; // 0x5d(0x01)
	bool bEnableRecoilRecovery; // 0x5e(0x01)
	bool bRecoilRecoveryBlockGunEndShake; // 0x5f(0x01)
	float RecoilRecoveryScale; // 0x60(0x04)
	enum class EAimOffsetAdjustType AimOffsetAdjustType; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	struct FVector2D StandardViewportSize; // 0x68(0x08)
	float StandardDPIScale; // 0x70(0x04)
	bool bWeaponReceiveShadow; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
	struct UDataTable* WeaponScopeSensitivityTable; // 0x78(0x08)
	bool bSecondLimitFullForGameDrop; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	float DoScopeInterval; // 0x84(0x04)
	float DoScopeMixedTimeThreshold; // 0x88(0x04)
	float SprintingFireDelay; // 0x8c(0x04)
	struct TMap<struct AActor*, struct FWeaponHitResponse> WeaponHitResponseClassMap; // 0x90(0x50)
	struct TMap<struct FName, struct FWeaponHitResponse> WeaponHitResponseTagMap; // 0xe0(0x50)
	struct TMap<struct AActor*, struct FWeaponHitResponse> WeaponHitResponseSameTeamClassMap; // 0x130(0x50)
	struct TMap<struct FName, struct FWeaponHitResponse> WeaponHitResponseSameTeamTagMap; // 0x180(0x50)
	struct FRuntimeFloatCurve HitEffectScaleRuntimeCurve; // 0x1d0(0x88)
	bool bCanOperateWhenOverload; // 0x258(0x01)
	char pad_259[0x7]; // 0x259(0x07)
	struct FRuntimeFloatCurve WeaponCrosshairSpreadSpeedRuntimeCurve; // 0x260(0x88)
	struct FRuntimeFloatCurve WeaponCrosshairBackSpeedRuntimeCurve; // 0x2e8(0x88)
	float WeaponSkillDataUIDisplayDistance; // 0x370(0x04)
	float PriamayFireIgnoreInterval; // 0x374(0x04)
	float AssistAimAutoFireRadius; // 0x378(0x04)
	char pad_37C[0x4]; // 0x37c(0x04)
	struct TArray<enum class ECollisionChannel> AssistAimAutoFireBlockTypes; // 0x380(0x10)
	struct UWeaponAssistAimConfig* AssistAimConfig; // 0x390(0x08)
	struct FSoftObjectPath PartUpgradeMaterial; // 0x398(0x18)
	float PartUpgradeFadeInterval; // 0x3b0(0x04)
	char pad_3B4[0x4]; // 0x3b4(0x04)
	struct TMap<enum class EPosture, struct FString> CharaterPostureMap; // 0x3b8(0x50)
	struct FGameplayTagContainer BlockCharacterSprintTags; // 0x408(0x20)
	struct UDataTable* WeaponPartEffectDescTable; // 0x428(0x08)
	int32_t WeaponPartEffectTipMaxinum; // 0x430(0x04)
	char pad_434[0x4]; // 0x434(0x04)
	struct TMap<enum class ESolarHitType, struct FString> HitFeedbackMapForUI; // 0x438(0x50)
	float CrosshairAimEnemyEndTimeForPlayerWeapon; // 0x488(0x04)
	float CrosshairAimEnemyEndTimeForVehicleWeapon; // 0x48c(0x04)
	struct TMap<int32_t, enum class EPassiveTriggeredVoice> AudioPromptForNoAmmoTable; // 0x490(0x50)
	int32_t WeaponSummonBlockNoticeID; // 0x4e0(0x04)
	int32_t WeaponSummonOverRangeNoticeID; // 0x4e4(0x04)
	struct UDataTable* WeaponSkinTable; // 0x4e8(0x08)
	struct TMap<enum class EWeaponPartType, struct FName> PartSocketNameTable; // 0x4f0(0x50)
	struct UDataTable* WeaponLODTable; // 0x540(0x08)
	float EnableHeadShotDamageMinScale; // 0x548(0x04)
	char pad_54C[0x4]; // 0x54c(0x04)

	struct FString GetStateByPosture(enum class EPosture posture); // Function Solarland.GlobalWeaponConfig.GetStateByPosture // (Final|Native|Public|Const) // @ game+0x1ff8630
	struct FString GetStateByAnimState(enum class ECharacterStateForWeapon CharacterState); // Function Solarland.GlobalWeaponConfig.GetStateByAnimState // (Final|Native|Public|Const) // @ game+0x1ff8550
	bool GetIsGroundByAnimState(enum class ECharacterStateForWeapon CharacterState); // Function Solarland.GlobalWeaponConfig.GetIsGroundByAnimState // (Final|Native|Public) // @ game+0x1ff84c0
};

// Class Solarland.GooglePADManager
// Size: 0x28 (Inherited: 0x28)
struct UGooglePADManager : UObject {

	enum class EGooglePADErrorCode ShowCellularDataConfirmation(); // Function Solarland.GooglePADManager.ShowCellularDataConfirmation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ffd160
	enum class EGooglePADErrorCode RequestRemoval(struct FString Name); // Function Solarland.GooglePADManager.RequestRemoval // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ffcea0
	enum class EGooglePADErrorCode RequestInfo(struct TArray<struct FString>& AssetPacks); // Function Solarland.GooglePADManager.RequestInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ffcdd0
	enum class EGooglePADErrorCode RequestDownload(struct TArray<struct FString>& AssetPacks); // Function Solarland.GooglePADManager.RequestDownload // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ffcdd0
	void ReleaseDownloadState(int32_t State); // Function Solarland.GooglePADManager.ReleaseDownloadState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ffcd50
	void ReleaseAssetPackLocation(int32_t Location); // Function Solarland.GooglePADManager.ReleaseAssetPackLocation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ffcd50
	bool IsGooglePlayPkg(); // Function Solarland.GooglePADManager.IsGooglePlayPkg // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ffc9e0
	bool IsAssetPackReady(struct FString Name); // Function Solarland.GooglePADManager.IsAssetPackReady // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ffc940
	int32_t GetTotalBytesToDownload(int32_t State); // Function Solarland.GooglePADManager.GetTotalBytesToDownload // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ffc6d0
	enum class EGooglePADStorageMethod GetStorageMethod(int32_t Location); // Function Solarland.GooglePADManager.GetStorageMethod // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ffc880
	enum class EGooglePADErrorCode GetShowCellularDataConfirmationStatus(enum class EGooglePADCellularDataConfirmStatus& status); // Function Solarland.GooglePADManager.GetShowCellularDataConfirmationStatus // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ffc7f0
	enum class EGooglePADDownloadStatus GetDownloadStatus(int32_t State); // Function Solarland.GooglePADManager.GetDownloadStatus // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ffc760
	enum class EGooglePADErrorCode GetDownloadState(struct FString Name, int32_t& State); // Function Solarland.GooglePADManager.GetDownloadState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ffc510
	int32_t GetBytesDownloaded(int32_t State); // Function Solarland.GooglePADManager.GetBytesDownloaded // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ffc6d0
	struct FString GetAssetsPath(int32_t Location); // Function Solarland.GooglePADManager.GetAssetsPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ffc600
	enum class EGooglePADErrorCode GetAssetPackLocation(struct FString Name, int32_t& Location); // Function Solarland.GooglePADManager.GetAssetPackLocation // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ffc510
	struct TArray<struct FString> GetAllAssetPackNames(); // Function Solarland.GooglePADManager.GetAllAssetPackNames // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ffc430
};

// Class Solarland.SolarWeaponBulletContainerWidget
// Size: 0x3b8 (Inherited: 0x348)
struct USolarWeaponBulletContainerWidget : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct TMap<enum class EWeaponType, struct FSolarBulletContainerLayout> BulletContainerStorageLayout; // 0x350(0x50)
	struct FBulletContainerColor BulletColor; // 0x3a0(0x08)
	struct UCanvasPanel* RootPanel; // 0x3a8(0x08)
	int32_t CurrentMaxAmmo; // 0x3b0(0x04)
	enum class EWeaponType CurrentWeaponType; // 0x3b4(0x01)
	char pad_3B5[0x3]; // 0x3b5(0x03)
};

// Class Solarland.GridBulletContainer
// Size: 0x438 (Inherited: 0x3b8)
struct UGridBulletContainer : USolarWeaponBulletContainerWidget {
	struct UProgressBar* BulletContainer; // 0x3b8(0x08)
	struct UOverlay* LightOverlay; // 0x3c0(0x08)
	struct UOverlay* LightAllOverlay; // 0x3c8(0x08)
	struct UImage* Img_FakeBullet; // 0x3d0(0x08)
	struct UImage* Img_BulletMask; // 0x3d8(0x08)
	struct UImage* Img_Light; // 0x3e0(0x08)
	struct UImage* Img_BulletGrid; // 0x3e8(0x08)
	struct UImage* Img_Light_Recharge_Empty; // 0x3f0(0x08)
	struct UCanvasPanel* Panel_Empty; // 0x3f8(0x08)
	struct UImage* Img_BulletEmpty; // 0x400(0x08)
	struct UWidgetAnimation* Light_Anim; // 0x408(0x08)
	struct UWidgetAnimation* LightAll_Anim; // 0x410(0x08)
	struct UWidgetAnimation* Recharge_Empty_Anim; // 0x418(0x08)
	struct FVector2D OneBulletSize; // 0x420(0x08)
	char pad_428[0x10]; // 0x428(0x10)

	bool RequestUpdateMaxAmmoCount(int32_t InMaxAmmo, bool bIgnoreAmmoCount); // Function Solarland.GridBulletContainer.RequestUpdateMaxAmmoCount // (Final|Native|Public|BlueprintCallable) // @ game+0x1ffcf40
	void ReceiveUpdateMaxAmmoEvent(int32_t InMaxAmmo); // Function Solarland.GridBulletContainer.ReceiveUpdateMaxAmmoEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1ffccc0
	void ReceiveUpdateBulletEvent(int32_t ReservedAmmo, bool bIsReloading, bool bIsFirstIn); // Function Solarland.GridBulletContainer.ReceiveUpdateBulletEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1ffcba0
	void ReceiveUpdateAllBulletEvent(); // Function Solarland.GridBulletContainer.ReceiveUpdateAllBulletEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x15481f0
	void ReceiveReloadFinishEvent(bool bIsReloadSuccess); // Function Solarland.GridBulletContainer.ReceiveReloadFinishEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1ffcb10
};

// Class Solarland.GyroscopeConfig
// Size: 0xf8 (Inherited: 0x30)
struct UGyroscopeConfig : UDataAsset {
	struct UDataTable* dataTab; // 0x30(0x08)
	struct UDataTable* gyroscopeSensitivityDataTab; // 0x38(0x08)
	struct UDataTable* GyroscopeDeviceModelDataTab; // 0x40(0x08)
	char pad_48[0xb0]; // 0x48(0xb0)
};

// Class Solarland.HeroPickCharacterData
// Size: 0x68 (Inherited: 0x28)
struct UHeroPickCharacterData : UObject {
	int32_t CharacterId; // 0x28(0x04)
	int32_t SkinId; // 0x2c(0x04)
	int32_t CharacterProficiencyLevel; // 0x30(0x04)
	enum class EHeroOwnedType OwnType; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	int32_t ConfigSortNum; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FString HeroName; // 0x40(0x10)
	struct TArray<int32_t> SelectedPlayerPos; // 0x50(0x10)
	int32_t ConfirmPos; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Solarland.HeroPickCharacterCell
// Size: 0x360 (Inherited: 0x348)
struct UHeroPickCharacterCell : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct UHeroPickCharacterData* DataObj; // 0x350(0x08)
	char pad_358[0x8]; // 0x358(0x08)

	void UpdateHeroIconAndName(struct FString Name, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.HeroPickCharacterCell.UpdateHeroIconAndName // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void ShowSelecting(bool bShow); // Function Solarland.HeroPickCharacterCell.ShowSelecting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void ShowConfirm(); // Function Solarland.HeroPickCharacterCell.ShowConfirm // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetSelect(int32_t PosInTeam); // Function Solarland.HeroPickCharacterCell.SetSelect // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetProficiencyTypeIcon(int32_t ProficiencyLevel); // Function Solarland.HeroPickCharacterCell.SetProficiencyTypeIcon // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetClassTypeIcon(struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.HeroPickCharacterCell.SetClassTypeIcon // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void ClearSelect(); // Function Solarland.HeroPickCharacterCell.ClearSelect // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void BP_ShowLockState(enum class EUIHeroPickListCellState UiState); // Function Solarland.HeroPickCharacterCell.BP_ShowLockState // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.HeroPickDetail
// Size: 0x348 (Inherited: 0x348)
struct UHeroPickDetail : USolarUserWidget {

	void UpdateCharacterDetails(int32_t CharacterId); // Function Solarland.HeroPickDetail.UpdateCharacterDetails // (Final|Native|Public|BlueprintCallable) // @ game+0x1ffd2d0
	void RefreshSkillInfo(int32_t SkillType, struct FString Attribute, struct FString SkillName, struct FString SkillDescription, struct TSoftObjectPtr<UTexture2D>& SkillIcon); // Function Solarland.HeroPickDetail.RefreshSkillInfo // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.HeroPickInfo
// Size: 0x278 (Inherited: 0x228)
struct AHeroPickInfo : AInfo {
	struct FString SideName; // 0x228(0x10)
	enum class EHeroPickType HeroPickType; // 0x238(0x01)
	char pad_239[0x3]; // 0x239(0x03)
	int32_t TeammateNumMode; // 0x23c(0x04)
	struct UHeroPickWidget* HeroPickWidget; // 0x240(0x08)
	struct TArray<struct FPlayerSelectInfo> PlayerSelectInfos; // 0x248(0x10)
	float HeroPickTime; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)
	float WaitingToStartTime; // 0x260(0x04)
	int32_t CurrentPickPlayerIndex; // 0x264(0x04)
	float Duration; // 0x268(0x04)
	char pad_26C[0xc]; // 0x26c(0x0c)

	void OnRep_WaitingToStartTime(); // Function Solarland.HeroPickInfo.OnRep_WaitingToStartTime // (Final|Native|Private) // @ game+0x8e9ae0
	void OnRep_SelectPlayerChange(); // Function Solarland.HeroPickInfo.OnRep_SelectPlayerChange // (Final|Native|Private) // @ game+0x1ffca30
	void OnRep_PlayerSelectInfos(); // Function Solarland.HeroPickInfo.OnRep_PlayerSelectInfos // (Final|Native|Private) // @ game+0x1ffca10
	void OnRep_HeroPickTime(); // Function Solarland.HeroPickInfo.OnRep_HeroPickTime // (Final|Native|Private) // @ game+0x8e9ae0
};

// Class Solarland.HeroPickManager
// Size: 0x278 (Inherited: 0x228)
struct AHeroPickManager : AGameManagerBase {
	struct TArray<struct AHeroPickInfo*> HeroPickArray; // 0x228(0x10)
	float HeroPickTime; // 0x238(0x04)
	float TransitionAnimTime; // 0x23c(0x04)
	float WaitingToStartTime; // 0x240(0x04)
	float WaitingForEndTime; // 0x244(0x04)
	struct UHeroPickRuleBase* AIPickRule; // 0x248(0x08)
	struct TArray<struct FSoftObjectPath> ElementLevels; // 0x250(0x10)
	bool bIsAllPlayerSelecting; // 0x260(0x01)
	char pad_261[0x17]; // 0x261(0x17)

	bool SideBeginHeroPick(struct FString SideName); // Function Solarland.HeroPickManager.SideBeginHeroPick // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1ffd220
	void SetHeroPickTime(float InHeroPickTime); // Function Solarland.HeroPickManager.SetHeroPickTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1ffd010
	void ReceiveSidePickHeroEnd(struct FString SideName); // Function Solarland.HeroPickManager.ReceiveSidePickHeroEnd // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveAllHeroPickEnd(); // Function Solarland.HeroPickManager.ReceiveAllHeroPickEnd // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	bool PlayerBeginHeroPick(struct ASolarPlayerState* Player); // Function Solarland.HeroPickManager.PlayerBeginHeroPick // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1ffca70
	void On_RepAllPlayerSelectEnd(); // Function Solarland.HeroPickManager.On_RepAllPlayerSelectEnd // (Final|Native|Protected) // @ game+0x1ffca50
	void AllPlayersGotoPickHero(); // Function Solarland.HeroPickManager.AllPlayersGotoPickHero // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1ffc3f0
};

// Class Solarland.HeroPickPlayerSlot
// Size: 0x358 (Inherited: 0x348)
struct UHeroPickPlayerSlot : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	enum class EUIHeroPickPlayerState UiState; // 0x350(0x01)
	char pad_351[0x7]; // 0x351(0x07)

	void UpdateSelectPercent(float Percent); // Function Solarland.HeroPickPlayerSlot.UpdateSelectPercent // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void UpdateIconAndName(struct FString HeroName, int32_t HeroExpLevel, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.HeroPickPlayerSlot.UpdateIconAndName // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void ShowConfirm(); // Function Solarland.HeroPickPlayerSlot.ShowConfirm // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetPlayerPos(struct FString playerName, char InPosInTeam); // Function Solarland.HeroPickPlayerSlot.SetPlayerPos // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void ChangeUIStage(enum class EUIHeroPickPlayerState State); // Function Solarland.HeroPickPlayerSlot.ChangeUIStage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.HeroPickRuleBase
// Size: 0x28 (Inherited: 0x28)
struct UHeroPickRuleBase : UObject {
};

// Class Solarland.HeroPickWidget
// Size: 0x3e8 (Inherited: 0x348)
struct UHeroPickWidget : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct AHeroPickInfo* PickInfo; // 0x350(0x08)
	struct UTileView* CharacterList; // 0x358(0x08)
	struct TArray<struct UHeroPickPlayerSlot*> PlayerSlots; // 0x360(0x10)
	struct TMap<int32_t, struct UHeroPickCharacterData*> SelectDataMap; // 0x370(0x50)
	char pad_3C0[0x18]; // 0x3c0(0x18)
	struct UHeroPickDetail* UI_HeroPick_Detail; // 0x3d8(0x08)
	int32_t CurrentSelectCharacterID; // 0x3e0(0x04)
	bool Enable3DLayout; // 0x3e4(0x01)
	char pad_3E5[0x3]; // 0x3e5(0x03)

	void ShowPlayerConfirm(int32_t Pos); // Function Solarland.HeroPickWidget.ShowPlayerConfirm // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ffd190
	void ShowMyTurn(bool bShow); // Function Solarland.HeroPickWidget.ShowMyTurn // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void ShowMainUICharacter(bool bShow); // Function Solarland.HeroPickWidget.ShowMainUICharacter // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetMidCharacterNameAndIcon(int32_t InCharacterId, int32_t SkinId); // Function Solarland.HeroPickWidget.SetMidCharacterNameAndIcon // (Final|Native|Protected) // @ game+0x1ffd090
	void SetHeroHPAndSpeed(int32_t HP, int32_t Speed); // Function Solarland.HeroPickWidget.SetHeroHPAndSpeed // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void SetHeroFeatures(struct TArray<int32_t>& InHeroFeatures); // Function Solarland.HeroPickWidget.SetHeroFeatures // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void SetCountDowText(struct FString Text); // Function Solarland.HeroPickWidget.SetCountDowText // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetClassNameAndIcon(struct FString ClassName, struct TSoftObjectPtr<UTexture2D>& ClassIcon); // Function Solarland.HeroPickWidget.SetClassNameAndIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void SetCharacterNameAndIcon(struct FString Name, struct FString SkinName, struct TSoftObjectPtr<UTexture2D>& CharacterIcon); // Function Solarland.HeroPickWidget.SetCharacterNameAndIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void RefreshTacticalSkillIcon(struct TSoftObjectPtr<UTexture2D>& TacticalSkillIcon); // Function Solarland.HeroPickWidget.RefreshTacticalSkillIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void RefreshSuperSkillIcon(struct TSoftObjectPtr<UTexture2D>& SuperSkillIcon); // Function Solarland.HeroPickWidget.RefreshSuperSkillIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void RefreshPassiveSKillIcon(struct TSoftObjectPtr<UTexture2D>& PassiveSkillIcon); // Function Solarland.HeroPickWidget.RefreshPassiveSKillIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void PlayCharacterConfirmVoice(int32_t SkinId); // Function Solarland.HeroPickWidget.PlayCharacterConfirmVoice // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetTeammateNumMode(); // Function Solarland.HeroPickWidget.GetTeammateNumMode // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1ffc910
	void Enable3DHeroPickLayout(bool Enalbe3DLayout); // Function Solarland.HeroPickWidget.Enable3DHeroPickLayout // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void Display3DHeroSelectedAnim(int32_t CharacterId, int32_t SkinId, bool IsConfirm); // Function Solarland.HeroPickWidget.Display3DHeroSelectedAnim // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ConfirmSelect(); // Function Solarland.HeroPickWidget.ConfirmSelect // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ffc410
	void BP_OnSelfConfirmSelected(); // Function Solarland.HeroPickWidget.BP_OnSelfConfirmSelected // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.HitTracesWidget
// Size: 0x330 (Inherited: 0x260)
struct UHitTracesWidget : UUserWidget {
	struct UCanvasPanel* DefaultHitTraceRoot; // 0x260(0x08)
	struct UCanvasPanel* MeleeHitTraceRoot; // 0x268(0x08)
	struct UCanvasPanel* SniperHitTraceRoot; // 0x270(0x08)
	struct UCanvasPanel* VehicleHitTraceRoot; // 0x278(0x08)
	float GaugeImageProgressMin; // 0x280(0x04)
	float GaugeImageProgressMax; // 0x284(0x04)
	char pad_288[0xa8]; // 0x288(0xa8)

	int32_t UpdateHitTrace(int32_t HitTraceID, enum class EHitTraceType HitTraceType, float WidgetAngle, float WidgetScale); // Function Solarland.HitTracesWidget.UpdateHitTrace // (Final|Native|Public) // @ game+0x2001040
	void RemoveHitTrace(int32_t HitTraceID); // Function Solarland.HitTracesWidget.RemoveHitTrace // (Final|Native|Public) // @ game+0x20007a0
	void ClearAllHitTraces(); // Function Solarland.HitTracesWidget.ClearAllHitTraces // (Final|Native|Public) // @ game+0x1fff900
	int32_t AddHitTrace(int32_t HitTraceID, enum class EHitTraceType HitTraceType, float WidgetAngle, float WidgetScale); // Function Solarland.HitTracesWidget.AddHitTrace // (Final|Native|Public) // @ game+0x1fff6c0
};

// Class Solarland.SolarCharacterMovementCompBase
// Size: 0x6a0 (Inherited: 0x620)
struct USolarCharacterMovementCompBase : UCharacterMovementComponent {
	float SimStepOptimizedDist; // 0x618(0x04)
	char pad_624[0x2c]; // 0x624(0x2c)
	int32_t TimeDiscrepancyUploadThres; // 0x650(0x04)
	char pad_654[0x4]; // 0x654(0x04)
	struct FSolarClientAdjustPositionInfo CachedClientAdjustPositionInfo; // 0x658(0x38)
	char pad_690[0x10]; // 0x690(0x10)
};

// Class Solarland.SolarCharacterMovementComponent
// Size: 0x880 (Inherited: 0x6a0)
struct USolarCharacterMovementComponent : USolarCharacterMovementCompBase {
	char pad_6A0[0x8]; // 0x6a0(0x08)
	struct ASolarCharacter* SolarCharacterOwner; // 0x6a8(0x08)
	float DefaultUnscaledCapsuleHalfHeight; // 0x6b0(0x04)
	float DefaultLazyRefreshBonesDelay; // 0x6b4(0x04)
	char pad_6B8[0x20]; // 0x6b8(0x20)
	bool bKeepWalkSpeedOnTurning; // 0x6d8(0x01)
	char pad_6D9[0x3]; // 0x6d9(0x03)
	float MinJogSpeedScaleOnBlocked; // 0x6dc(0x04)
	float MinRunSpeedScaleOnBlocked; // 0x6e0(0x04)
	float MinSprintSpeedScaleOnBlocked; // 0x6e4(0x04)
	float MinCrawlSpeedScaleOnBlocked; // 0x6e8(0x04)
	float MinSwimSpeedScaleOnBlocked; // 0x6ec(0x04)
	float MinAccelerationProjectRatioForValidGroundSlide; // 0x6f0(0x04)
	bool bOverrideFallingGravity; // 0x6f4(0x01)
	char pad_6F5[0x3]; // 0x6f5(0x03)
	float OverriddenFallingGravity; // 0x6f8(0x04)
	float FallingHorizontalSpeedUpperLimit; // 0x6fc(0x04)
	float MaxLocationDifferenceToTrustClientMove; // 0x700(0x04)
	enum class EClientMoveTrustType ClientMoveTrustType; // 0x704(0x01)
	char pad_705[0x35]; // 0x705(0x35)
	enum class EAirMoveMode CurrentAirMoveMode; // 0x73a(0x01)
	enum class EAirMoveMode LastAirMoveMode; // 0x73b(0x01)
	struct FCustomJumpParams CustomJumpParams; // 0x73c(0x0c)
	struct FCustomJumpParams CustomLaunchParams; // 0x748(0x0c)
	char pad_754[0xc]; // 0x754(0x0c)
	struct UJetPackConfig* JetPackConfig; // 0x760(0x08)
	char pad_768[0x18]; // 0x768(0x18)
	struct USkydiveConfig* SkydiveConfig; // 0x780(0x08)
	char pad_788[0x20]; // 0x788(0x20)
	float HinderAngel; // 0x7a8(0x04)
	float HinderPercent; // 0x7ac(0x04)
	float HinderZ; // 0x7b0(0x04)
	float SwimSpeedWhenSprintLockConfig; // 0x7b4(0x04)
	float SwimSpeedConfig; // 0x7b8(0x04)
	float SwimSpeedSmoothSpeed; // 0x7bc(0x04)
	float SwimMaxFloatingUpSpeed; // 0x7c0(0x04)
	float SwimMaxSinkingSpeed; // 0x7c4(0x04)
	struct TWeakObjectPtr<struct APhysicsVolume> NextPhysicsVolume; // 0x7c8(0x08)
	char pad_7D0[0x7d]; // 0x7d0(0x7d)
	bool bWantDeathVerge; // 0x84d(0x01)
	char pad_84E[0x2]; // 0x84e(0x02)
	float DeathVergeBodyRadius; // 0x850(0x04)
	float DeathVergeHalfHeight; // 0x854(0x04)
	char pad_858[0x8]; // 0x858(0x08)
	struct AActor* HangingTargetObj; // 0x860(0x08)
	struct FVector HangingTargetVelocity; // 0x868(0x0c)
	bool UseHangingTargetVelocity; // 0x874(0x01)
	bool UseHangingTargetPos; // 0x875(0x01)
	char pad_876[0xa]; // 0x876(0x0a)

	void UpdateCharacterStateAfterMovement__DelegateSignature(struct USolarCharacterMovementComponent* MovementComponent, float DeltaTime); // DelegateFunction Solarland.SolarCharacterMovementComponent.UpdateCharacterStateAfterMovement__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void SetHinderZ(float InHinderZ); // Function Solarland.SolarCharacterMovementComponent.SetHinderZ // (Final|Native|Public|BlueprintCallable) // @ game+0x20bb6f0
	void SetHinderAngel(float InHinderAngel); // Function Solarland.SolarCharacterMovementComponent.SetHinderAngel // (Final|Native|Public|BlueprintCallable) // @ game+0x20bb670
	void OnMovementBaseChanged(struct ACharacter* Character, struct UPrimitiveComponent* OldBase, struct UPrimitiveComponent* NewBase); // Function Solarland.SolarCharacterMovementComponent.OnMovementBaseChanged // (Final|Native|Protected) // @ game+0x20bb560
	void HinderUphill(struct FVector& SlopeNormal, struct FVector& MoveVelocity); // Function Solarland.SolarCharacterMovementComponent.HinderUphill // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x20bad40
	enum class EPhysicalSurface GetSteppedSurfaceType(); // Function Solarland.SolarCharacterMovementComponent.GetSteppedSurfaceType // (Final|Native|Public|BlueprintCallable) // @ game+0x20bac70
	enum class EWalkMode GetLastWalkMode(); // Function Solarland.SolarCharacterMovementComponent.GetLastWalkMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20baba0
	enum class EWalkMode GetCurrentWalkMode(); // Function Solarland.SolarCharacterMovementComponent.GetCurrentWalkMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20bab80
	void ForcedJump(); // Function Solarland.SolarCharacterMovementComponent.ForcedJump // (Final|Native|Public|BlueprintCallable) // @ game+0x20bab30
};

// Class Solarland.HomeCharacterMovementComponent
// Size: 0x8f0 (Inherited: 0x880)
struct UHomeCharacterMovementComponent : USolarCharacterMovementComponent {
	char pad_880[0x20]; // 0x880(0x20)
	struct TArray<struct FServerMoveData> ServerMoves; // 0x8a0(0x10)
	float NetSyncDeltaTime; // 0x8b0(0x04)
	float VerifyDeltaTime; // 0x8b4(0x04)
	float MaxDelayTime; // 0x8b8(0x04)
	bool bEnableMove; // 0x8bc(0x01)
	char pad_8BD[0x13]; // 0x8bd(0x13)
	int64_t CurrentServerTime; // 0x8d0(0x08)
	char pad_8D8[0x4]; // 0x8d8(0x04)
	float ConfigSyncDeltaTime; // 0x8dc(0x04)
	float ConfigVerifyStepTime; // 0x8e0(0x04)
	int32_t ConfigMaxDelay; // 0x8e4(0x04)
	float ConfigVerifyDistanceSquared; // 0x8e8(0x04)
	char pad_8EC[0x4]; // 0x8ec(0x04)

	void SetVerifyRate(float InDeltaTime); // Function Solarland.HomeCharacterMovementComponent.SetVerifyRate // (Final|Native|Public|BlueprintCallable) // @ game+0x2000dc0
	void SetNetSyncRate(float InDeltaTime); // Function Solarland.HomeCharacterMovementComponent.SetNetSyncRate // (Final|Native|Public|BlueprintCallable) // @ game+0x2000b40
	void SetMoveEnable(bool InMoveEnable); // Function Solarland.HomeCharacterMovementComponent.SetMoveEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x2000ab0
	void SetMaxDelayTime(int32_t InMaxDelayTime); // Function Solarland.HomeCharacterMovementComponent.SetMaxDelayTime // (Final|Native|Public|BlueprintCallable) // @ game+0x2000a20
	void GetServerTimeNow(); // Function Solarland.HomeCharacterMovementComponent.GetServerTimeNow // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.HomeSyncActorSubsystem
// Size: 0x38 (Inherited: 0x30)
struct UHomeSyncActorSubsystem : UWorldSubsystem {
	struct UDataTable* HomeObjectTable; // 0x30(0x08)

	struct UHomeSyncActorSubsystem* Get(struct UObject* WorldContextObject); // Function Solarland.HomeSyncActorSubsystem.Get // (Final|Native|Static|Public) // @ game+0x1fffb00
	void CreateHomeActor_Server(struct FHomeActorServerData& CreateData); // Function Solarland.HomeSyncActorSubsystem.CreateHomeActor_Server // (Final|Native|Public|HasOutParms) // @ game+0x1fff920
};

// Class Solarland.HUD_ElectricShop
// Size: 0x478 (Inherited: 0x348)
struct UHUD_ElectricShop : USolarUserWidget {
	struct USolarButton* Btn_Close; // 0x348(0x08)
	struct UHorizontalBox* Panel_RefreshTime; // 0x350(0x08)
	struct UImage* Img_BG_02; // 0x358(0x08)
	struct USolarTextBlock* Txt_Time; // 0x360(0x08)
	struct UHorizontalBox* HorizontalBox_Title; // 0x368(0x08)
	struct UElectricShop_Weapon* UI_ElectricityShop_Weapon_2; // 0x370(0x08)
	struct UElectricShop_Weapon* UI_ElectricityShop_Weapon_3; // 0x378(0x08)
	struct UElectricShop_Weapon* UI_ElectricityShop_Shield; // 0x380(0x08)
	struct USolarListView* ListView_Goods; // 0x388(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x390(0x08)
	struct UWidgetAnimation* Text_Loop_Anim; // 0x398(0x08)
	struct UCanvasPanel* Panel_Passive; // 0x3a0(0x08)
	struct UCanvasPanel* Panel_VIP; // 0x3a8(0x08)
	struct UHUD_PassiveHead* UI_Passive_Head; // 0x3b0(0x08)
	struct UCanvasPanel* Panel_Bullet; // 0x3b8(0x08)
	struct USolarTextBlock* Txt_Passive; // 0x3c0(0x08)
	struct UHUD_PassiveHead* UI_Passive_Head_2; // 0x3c8(0x08)
	char pad_3D0[0x18]; // 0x3d0(0x18)
	struct FLinearColor TimeTextDefaultColor; // 0x3e8(0x10)
	struct FLinearColor TimeTextAlertColor; // 0x3f8(0x10)
	struct FString AkSoundShopShow; // 0x408(0x10)
	struct FString AkSoundShopHide; // 0x418(0x10)
	char PreloadListItemNum; // 0x428(0x01)
	char pad_429[0xf]; // 0x429(0x0f)
	struct TArray<struct UObject*> ShopItems; // 0x438(0x10)
	struct TArray<struct UElectricShop_Weapon*> WeaponUpgradePanels; // 0x448(0x10)
	char pad_458[0x20]; // 0x458(0x20)

	void UpdateItemIsRecommend(); // Function Solarland.HUD_ElectricShop.UpdateItemIsRecommend // (Final|Native|Protected) // @ game+0x20011a0
	void UpdateCountdownTime(); // Function Solarland.HUD_ElectricShop.UpdateCountdownTime // (Final|Native|Protected) // @ game+0x2001020
	void UpdateCharacterEnergy(float CurEnergy, float ChangeValue); // Function Solarland.HUD_ElectricShop.UpdateCharacterEnergy // (Final|Native|Protected) // @ game+0x2000f50
	void UnBindDelegate(); // Function Solarland.HUD_ElectricShop.UnBindDelegate // (Final|Native|Protected) // @ game+0x2000e60
	void SetSelfVisibility(bool bVisible); // Function Solarland.HUD_ElectricShop.SetSelfVisibility // (Final|Native|Protected) // @ game+0x2000bc0
	void RequestUpgradeWeapon(struct ASolarPlayerWeapon* InWeapon); // Function Solarland.HUD_ElectricShop.RequestUpgradeWeapon // (Final|Native|Protected) // @ game+0x2000990
	void RequestUpgradeShield(struct ASolarCharacter* InChara); // Function Solarland.HUD_ElectricShop.RequestUpgradeShield // (Final|Native|Protected) // @ game+0x2000900
	void RequestPurchaseEShopItems(int32_t ProductID, bool IsRecommend); // Function Solarland.HUD_ElectricShop.RequestPurchaseEShopItems // (Final|Native|Protected) // @ game+0x2000830
	void ReceiveWeaponUpgrade(int32_t InWeaponSlot); // Function Solarland.HUD_ElectricShop.ReceiveWeaponUpgrade // (Final|Native|Protected) // @ game+0x2000710
	void ReceiveShieldUpgrade(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_ElectricShop.ReceiveShieldUpgrade // (Final|Native|Protected) // @ game+0x2000680
	void PlayHUDSound(bool InVisibile); // Function Solarland.HUD_ElectricShop.PlayHUDSound // (Final|Native|Protected) // @ game+0x20005d0
	void OnShopGoodsCreated(struct UUserWidget* InWidget); // Function Solarland.HUD_ElectricShop.OnShopGoodsCreated // (Final|Native|Protected) // @ game+0x20003a0
	void OnInitElectricShop(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_ElectricShop.OnInitElectricShop // (Final|Native|Protected) // @ game+0x2000100
	void OnElectricShopVisibilitySet(bool bVisible); // Function Solarland.HUD_ElectricShop.OnElectricShopVisibilitySet // (Final|Native|Protected) // @ game+0x2000050
	void OnClosePanel(); // Function Solarland.HUD_ElectricShop.OnClosePanel // (Final|Native|Protected) // @ game+0x2000030
	void InitWeaponUpgrade(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_ElectricShop.InitWeaponUpgrade // (Final|Native|Protected) // @ game+0x1fffe90
	void InitShopItems(struct ASolarElectricShop* InShop); // Function Solarland.HUD_ElectricShop.InitShopItems // (Final|Native|Protected) // @ game+0x1fffe00
	void InitShieldUpgrade(float InCurValue, float InMaxValue, int32_t QualityColor, bool bIsAdvancedShield); // Function Solarland.HUD_ElectricShop.InitShieldUpgrade // (Final|Native|Protected) // @ game+0x1fffca0
	void InitElectricShopHUD(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_ElectricShop.InitElectricShopHUD // (Final|Native|Protected) // @ game+0x1fffc10
	float GetSolarCharacterEnergy(); // Function Solarland.HUD_ElectricShop.GetSolarCharacterEnergy // (Final|Native|Protected) // @ game+0x1fffbc0
	struct ASolarCharacter* GetBuyerSolarCharacter(); // Function Solarland.HUD_ElectricShop.GetBuyerSolarCharacter // (Final|Native|Protected) // @ game+0x1fffb90
	void DelayReportStatistic(); // Function Solarland.HUD_ElectricShop.DelayReportStatistic // (Final|Native|Protected) // @ game+0x1fffae0
	void DelayInitWeaponUpgrade(); // Function Solarland.HUD_ElectricShop.DelayInitWeaponUpgrade // (Final|Native|Protected) // @ game+0x1fffac0
	void DelayInitShopItems(); // Function Solarland.HUD_ElectricShop.DelayInitShopItems // (Final|Native|Protected) // @ game+0x1fffaa0
	bool CheckItemIsRecommendByID(int32_t ItemID); // Function Solarland.HUD_ElectricShop.CheckItemIsRecommendByID // (Final|Native|Protected) // @ game+0x1fff860
	void BindDelegate(); // Function Solarland.HUD_ElectricShop.BindDelegate // (Final|Native|Protected) // @ game+0x1fff820
};

// Class Solarland.HUD_MarkEnemyInfo
// Size: 0x448 (Inherited: 0x348)
struct UHUD_MarkEnemyInfo : USolarUserWidget {
	struct USolarTextBlock* Txt_Lvl; // 0x348(0x08)
	struct UDeathViewHPWidget* HPAndShield; // 0x350(0x08)
	struct UCanvasPanel* CanvasPanel_1; // 0x358(0x08)
	struct UWidgetAnimation* Anim_Exit; // 0x360(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x368(0x08)
	float UpdateVisibleInterval; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)
	struct UCurveFloat* DistaceToScaleCurve; // 0x378(0x08)
	struct TSet<struct AActor*> OcculusionIgnoreClasses; // 0x380(0x50)
	float MinDisplayHpValue; // 0x3d0(0x04)
	float HPGridUnit; // 0x3d4(0x04)
	bool bShowDebug; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
	struct TArray<enum class EObjectTypeQuery> OccQueryTypes; // 0x3e0(0x10)
	struct UWidgetAnimation* Anim_Name_Exit; // 0x3f0(0x08)
	struct UWidgetAnimation* Anim_Name_Enter; // 0x3f8(0x08)
	struct USolarTextBlock* Txt_PlayerName; // 0x400(0x08)
	struct UHUD_ScanEffect* ScanEffectWidget; // 0x408(0x08)
	char pad_410[0x34]; // 0x410(0x34)
	float ZOffset; // 0x444(0x04)

	void HideNameMark(); // Function Solarland.HUD_MarkEnemyInfo.HideNameMark // (Final|Native|Private) // @ game+0x1fffbf0
};

// Class Solarland.HUD_PassiveHead
// Size: 0x350 (Inherited: 0x348)
struct UHUD_PassiveHead : USolarUserWidget {
	struct UImage* img_Hero; // 0x348(0x08)
};

// Class Solarland.HUD_PickupPassive
// Size: 0x360 (Inherited: 0x348)
struct UHUD_PickupPassive : USolarUserWidget {
	struct USolarTextBlock* Txt_Bullet; // 0x348(0x08)
	struct UHUD_PassiveHead* UI_Passive_Head; // 0x350(0x08)
	char pad_358[0x8]; // 0x358(0x08)

	void OnTogglePickupList(bool bShow); // Function Solarland.HUD_PickupPassive.OnTogglePickupList // (Final|Native|Public) // @ game+0x20004c0
};

// Class Solarland.HUD_ScanEffect
// Size: 0x380 (Inherited: 0x348)
struct UHUD_ScanEffect : USolarUserWidget {
	struct UWidgetAnimation* Anim_Scan; // 0x348(0x08)
	struct UWidgetAnimation* Anim_FadeOut; // 0x350(0x08)
	struct FString ScanSound; // 0x358(0x10)
	float MinAnimLength; // 0x368(0x04)
	struct FName BoneName; // 0x36c(0x08)
	char pad_374[0xc]; // 0x374(0x0c)
};

// Class Solarland.HUD_SkydiveScale
// Size: 0x360 (Inherited: 0x260)
struct UHUD_SkydiveScale : UUserWidget {
	char pad_260[0x10]; // 0x260(0x10)
	struct UProgressBar* ProgressBar_Speed; // 0x270(0x08)
	struct UCanvasPanel* AltitudeDisplayAxis; // 0x278(0x08)
	struct UHorizontalBox* AltitudeDisplayBox; // 0x280(0x08)
	struct UCanvasPanel* SpeedDisplayAxis; // 0x288(0x08)
	struct UHorizontalBox* SpeedDisplayBox; // 0x290(0x08)
	struct UCanvasPanel* GroundDisplayAxis; // 0x298(0x08)
	struct UImage* GroundAltitudeScale; // 0x2a0(0x08)
	struct FVector2D AltitudeWidgetAngleRange; // 0x2a8(0x08)
	struct FVector2D SpeedWidgetAngleRange; // 0x2b0(0x08)
	float MinSpeed; // 0x2b8(0x04)
	float MaxSpeed; // 0x2bc(0x04)
	struct FWrappedLocalTextID AltitudeLocalTextID; // 0x2c0(0x04)
	struct FWrappedLocalTextID SpeedLocalTextID; // 0x2c4(0x04)
	char pad_2C8[0x8]; // 0x2c8(0x08)
	float AerialReconnaissanceRadius; // 0x2d0(0x04)
	float AerialReconnaissanceInterval; // 0x2d4(0x04)
	struct UAerialReconnaissanceMarkWidget* AerialReconnaissanceMarkWidgetClass; // 0x2d8(0x08)
	struct TMap<enum class ESlateDetailMode, struct FSolarAerialReconnaissanceConfig> AerialReconnaissanceConfigMap; // 0x2e0(0x50)
	struct UCanvasPanel* MarkPanel; // 0x330(0x08)
	char pad_338[0x28]; // 0x338(0x28)

	void UpdateSpeedScale(float InSpeed); // Function Solarland.HUD_SkydiveScale.UpdateSpeedScale // (Final|Native|Protected) // @ game+0x20011e0
	void UpdateSpeedDisplayContent(struct FText& Content); // Function Solarland.HUD_SkydiveScale.UpdateSpeedDisplayContent // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void UpdateAltitudeScale(float InHeight, float InZValue); // Function Solarland.HUD_SkydiveScale.UpdateAltitudeScale // (Final|Native|Protected) // @ game+0x2000e80
	void UpdateAltitudeDisplayContent(struct FText& Content); // Function Solarland.HUD_SkydiveScale.UpdateAltitudeDisplayContent // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnUpdateCamera(float InDeltaSeconds); // Function Solarland.HUD_SkydiveScale.OnUpdateCamera // (Final|Native|Protected) // @ game+0x2000550
	void OnSkydiveStateChanged(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_SkydiveScale.OnSkydiveStateChanged // (Final|Native|Protected) // @ game+0x2000430
	void OnCharacterDied(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_SkydiveScale.OnCharacterDied // (Final|Native|Protected) // @ game+0x1ffffa0
	void OnAirlineHeightSet(float NewHeight); // Function Solarland.HUD_SkydiveScale.OnAirlineHeightSet // (Final|Native|Protected) // @ game+0x1ffff20
	void K2_OnSkydiveStateChanged(bool bInFly, bool bHasPassiveSkill); // Function Solarland.HUD_SkydiveScale.K2_OnSkydiveStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.HUD_Teammate_Profession
// Size: 0x278 (Inherited: 0x260)
struct UHUD_Teammate_Profession : UUserWidget {
	struct USizeBox* SizeBox_Profession; // 0x260(0x08)
	struct UImage* Image_216; // 0x268(0x08)
	struct UImage* Icon; // 0x270(0x08)

	void SetState(enum class ESkillStateType InState); // Function Solarland.HUD_Teammate_Profession.SetState // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.HUD_Teammate_State
// Size: 0x5f8 (Inherited: 0x348)
struct UHUD_Teammate_State : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct USizeBox* SizeBox_Relive; // 0x350(0x08)
	struct UImage* img_Relive; // 0x358(0x08)
	struct USizeBox* SizeBox_Container; // 0x360(0x08)
	struct UCanvasPanel* CanvasPanel_Container; // 0x368(0x08)
	struct UCanvasPanel* Panel_Loading; // 0x370(0x08)
	struct UImage* Img_Loading; // 0x378(0x08)
	struct UImage* Img_PlayerBG; // 0x380(0x08)
	struct UOverlay* HP; // 0x388(0x08)
	struct UOverlay* Armor; // 0x390(0x08)
	struct USolarShieldProgressBoard* AdvBar_Shield_A; // 0x398(0x08)
	char pad_3A0[0x8]; // 0x3a0(0x08)
	struct USolarHPProgressBoard* AdvBar_HP; // 0x3a8(0x08)
	struct USolarTextBlock* Txt_Lvl; // 0x3b0(0x08)
	struct UImage* Img_Head; // 0x3b8(0x08)
	struct UScaleBox* ScaleBox_NickName; // 0x3c0(0x08)
	struct UTextBlock* Text_NickName; // 0x3c8(0x08)
	struct UImage* Img_Tip_MarkedPoint; // 0x3d0(0x08)
	struct UHorizontalBox* HorizontalBox_States; // 0x3d8(0x08)
	struct UImage* Img_Icon_AppDeactivatedOrOffline; // 0x3e0(0x08)
	struct UImage* Img_OutGame; // 0x3e8(0x08)
	struct USizeBox* SizeBox_Vehicle; // 0x3f0(0x08)
	struct UImage* Img_Icon_Vehicle; // 0x3f8(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_SkydiveState; // 0x400(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_SkydiveLeaderPos; // 0x408(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_FlyLeaderPos; // 0x410(0x08)
	struct UImage* Img_PlayerCover; // 0x418(0x08)
	struct UCanvasPanel* CanvasPanel_Respond; // 0x420(0x08)
	struct UProgressBar* ProgressBarRespond; // 0x428(0x08)
	struct USolarButton* BtnRespond; // 0x430(0x08)
	struct UUIComponentNationalFlag* UI_Component_NationalFlag; // 0x438(0x08)
	struct UImage* IconRespond; // 0x440(0x08)
	struct UWidgetAnimation* Waiting_Invite_Anim; // 0x448(0x08)
	struct UWidgetAnimation* Waiting_Follow_Anim; // 0x450(0x08)
	struct UWidgetAnimation* ResurrectionCountdown_Anim; // 0x458(0x08)
	struct UWidgetAnimation* RespondLoopAnim; // 0x460(0x08)
	struct UWidgetAnimation* RespondedAnim; // 0x468(0x08)
	struct UWidgetAnimation* Enter_Relive_Anim; // 0x470(0x08)
	struct UWidgetAnimation* Loop_Relive_Anim; // 0x478(0x08)
	struct UWidgetAnimation* CD_Relive_Anim; // 0x480(0x08)
	struct UWidgetAnimation* Anim_Help_Loop; // 0x488(0x08)
	struct UWidgetAnimation* Anim_Remind_Loop; // 0x490(0x08)
	struct UWidgetAnimation* Anim_State_Loop; // 0x498(0x08)
	struct UWidgetAnimation* Fire_Anim; // 0x4a0(0x08)
	struct UOverlay* Overlay_Countdown; // 0x4a8(0x08)
	struct UImage* Progress_ResurrectionCD; // 0x4b0(0x08)
	struct UImage* Progress_RecyclingResurrection; // 0x4b8(0x08)
	struct UImage* Img_KillLeader; // 0x4c0(0x08)
	struct UCanvasPanel* Panel_ResurrectTime; // 0x4c8(0x08)
	struct UTextBlock* Txt_ResurrectTime; // 0x4d0(0x08)
	char IndexInTeam; // 0x4d8(0x01)
	char ReliveState; // 0x4d9(0x01)
	char pad_4DA[0x2]; // 0x4da(0x02)
	int32_t Profession; // 0x4dc(0x04)
	float MinDisplayHpValue; // 0x4e0(0x04)
	bool bIgnoreSelfAction; // 0x4e4(0x01)
	char pad_4E5[0x3]; // 0x4e5(0x03)
	float FireAnimLoopSpeed; // 0x4e8(0x04)
	float FireAnimEndSpeed; // 0x4ec(0x04)
	char pad_4F0[0x8]; // 0x4f0(0x08)
	struct TArray<struct FSlateBrush> ReliveStateImages; // 0x4f8(0x10)
	struct TMap<char, struct FLinearColor> PosInTeamColor; // 0x508(0x50)
	char pad_558[0xa0]; // 0x558(0xa0)

	void UpdateRepliableState(); // Function Solarland.HUD_Teammate_State.UpdateRepliableState // (Final|Native|Protected) // @ game+0x20011c0
	void StopHelpAnimation(); // Function Solarland.HUD_Teammate_State.StopHelpAnimation // (Final|Native|Protected|BlueprintCallable) // @ game+0x2000e40
	void SetTextNickName(struct FString InNickName); // Function Solarland.HUD_Teammate_State.SetTextNickName // (Final|Native|Public|BlueprintCallable) // @ game+0x2000d20
	void SetTeammatePosAndColor(char InPosInTeam, bool bNormalState); // Function Solarland.HUD_Teammate_State.SetTeammatePosAndColor // (Final|Native|Public|BlueprintCallable) // @ game+0x2000c50
	void SetIsDead(bool bDead); // Function Solarland.HUD_Teammate_State.SetIsDead // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void SetHelpState(int32_t InState); // Function Solarland.HUD_Teammate_State.SetHelpState // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void SetActionState(int32_t InState); // Function Solarland.HUD_Teammate_State.SetActionState // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void PlayHelpAnimation(); // Function Solarland.HUD_Teammate_State.PlayHelpAnimation // (Final|Native|Protected|BlueprintCallable) // @ game+0x2000660
	void OnReviveItemRecycleCountDownBegin(int32_t CurrentTime, int32_t DurationTime); // Function Solarland.HUD_Teammate_State.OnReviveItemRecycleCountDownBegin // (Final|Native|Public|BlueprintCallable) // @ game+0x20002d0
	void OnReviveDisableHint(int32_t CountDownDuration); // Function Solarland.HUD_Teammate_State.OnReviveDisableHint // (Final|Native|Public|BlueprintCallable) // @ game+0x2000240
	void OnResurrectionStateChanged(bool IsOnResurrection); // Function Solarland.HUD_Teammate_State.OnResurrectionStateChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x20001b0
	void OnReplyClick(); // Function Solarland.HUD_Teammate_State.OnReplyClick // (Final|Native|Public) // @ game+0x2000190
	void OnPlayerStateSet(struct ASolarPlayerState* InSolarPS, bool bNormalState); // Function Solarland.HUD_Teammate_State.OnPlayerStateSet // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnFireAnimEnd(); // Function Solarland.HUD_Teammate_State.OnFireAnimEnd // (Final|Native|Public) // @ game+0x20000e0
	bool LuaImplementedCheckIsSupportRoleClass(); // Function Solarland.HUD_Teammate_State.LuaImplementedCheckIsSupportRoleClass // (Event|Protected|BlueprintEvent|Const) // @ game+0x25d85b0
	void CheckIsCompletelyDead(); // Function Solarland.HUD_Teammate_State.CheckIsCompletelyDead // (Final|Native|Protected|BlueprintCallable) // @ game+0x1fff840
};

// Class Solarland.HUD_TeammateStates_Panel
// Size: 0x3d0 (Inherited: 0x348)
struct UHUD_TeammateStates_Panel : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct UHUD_Teammate_State* Teammate_State_2; // 0x350(0x08)
	struct UHUD_Teammate_State* Teammate_State_3; // 0x358(0x08)
	struct UHUD_Teammate_State* Teammate_State_4; // 0x360(0x08)
	struct UHUD_Teammate_State* Teammate_State_5; // 0x368(0x08)
	struct UWidgetAnimation* Anim_Change; // 0x370(0x08)
	struct TMap<char, struct UHUD_Teammate_State*> TeammateStateWidgets; // 0x378(0x50)
	char pad_3C8[0x8]; // 0x3c8(0x08)

	void UpdateReviveIconVisibility(); // Function Solarland.HUD_TeammateStates_Panel.UpdateReviveIconVisibility // (Final|Native|Protected) // @ game+0x2005e70
	void Skydive_OnSkydivingMemberDataReplicated(struct ASolarPlayerState* MemberPS); // Function Solarland.HUD_TeammateStates_Panel.Skydive_OnSkydivingMemberDataReplicated // (Final|Native|Protected) // @ game+0x2005c80
	void SetTalentActiveInPos(enum class ETalentState TalentState, char InPosInTeam, float AdditionalParam); // Function Solarland.HUD_TeammateStates_Panel.SetTalentActiveInPos // (Final|Native|Protected) // @ game+0x2005ae0
	void SetCharacterInfoInPos(int32_t InCharacterId, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.SetCharacterInfoInPos // (Final|Native|Protected) // @ game+0x20058f0
	void SetAvatarInPos(int32_t InSkinID, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.SetAvatarInPos // (Final|Native|Protected) // @ game+0x2005820
	void SetAllTeammatesState(); // Function Solarland.HUD_TeammateStates_Panel.SetAllTeammatesState // (Final|Native|Protected) // @ game+0x2005800
	void RefreshTeammateBattleState(struct ASCMPlayerState* PlayerState); // Function Solarland.HUD_TeammateStates_Panel.RefreshTeammateBattleState // (Final|Native|Protected) // @ game+0x2005770
	void RefreshKillLeaderUI(struct ASolarPlayerState* KillLeader); // Function Solarland.HUD_TeammateStates_Panel.RefreshKillLeaderUI // (Final|Native|Protected) // @ game+0x20056e0
	void RefreshAllTeammatesStateWithoutReset(); // Function Solarland.HUD_TeammateStates_Panel.RefreshAllTeammatesStateWithoutReset // (Final|Native|Protected) // @ game+0x20042c0
	void RefreshAllTeammatesState(bool bNeedReset); // Function Solarland.HUD_TeammateStates_Panel.RefreshAllTeammatesState // (Final|Native|Protected) // @ game+0x20054b0
	void OnTeamMemberChanged(struct ASolarTeamInfo* TeamInfo, struct ASolarPlayerState* PlayerState); // Function Solarland.HUD_TeammateStates_Panel.OnTeamMemberChanged // (Final|Native|Protected) // @ game+0x2004d10
	void OnTeammateStateWidgetRemoved(); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateStateWidgetRemoved // (Final|Native|Protected) // @ game+0x2005490
	void OnTeammateReviveStateChanged(struct ASolarPlayerState* RevivingTeammatePlayer, struct ASolarPlayerState* PlayerState); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateReviveStateChanged // (Final|Native|Protected) // @ game+0x20053c0
	void OnTeammateResurrectTimeChanged(struct ASolarPlayerState* PlayerState, int32_t ResurrectTime); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateResurrectTimeChanged // (Final|Native|Protected) // @ game+0x20052f0
	void OnTeammateRescueStateChanged(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateRescueStateChanged // (Final|Native|Protected) // @ game+0x2005260
	void OnTeammateRepliableMsgChanged(); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateRepliableMsgChanged // (Final|Native|Protected) // @ game+0x2005240
	void OnTeammatePlayerStateReplicated(struct ASolarPlayerState* InTeammatePS); // Function Solarland.HUD_TeammateStates_Panel.OnTeammatePlayerStateReplicated // (Final|Native|Protected) // @ game+0x20051b0
	void OnTeammatePlayerStateRemovedInPreparatoryPhase(char InPosInTeam, bool bInLastOne); // Function Solarland.HUD_TeammateStates_Panel.OnTeammatePlayerStateRemovedInPreparatoryPhase // (Final|Native|Protected) // @ game+0x20050e0
	void OnTeammatePlayerStateRemovedInBattlePhase(char InPosInTeam, bool bInLastOne); // Function Solarland.HUD_TeammateStates_Panel.OnTeammatePlayerStateRemovedInBattlePhase // (Final|Native|Protected) // @ game+0x2005010
	void OnTeammateCharacterAllReady(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateCharacterAllReady // (Final|Native|Protected) // @ game+0x2004f80
	void OnTeammateCallForHelpNotify(struct ASolarPlayerState* PlayerState); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateCallForHelpNotify // (Final|Native|Protected) // @ game+0x2004ef0
	void OnTeammateActionStateChanged(struct ASolarPlayerState* PlayerState, struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateActionStateChanged // (Final|Native|Protected) // @ game+0x2004de0
	void OnTeamInfoReplicated(struct ASolarTeamInfo* PreTeamInfo, struct ASolarTeamInfo* MyTeamInfo); // Function Solarland.HUD_TeammateStates_Panel.OnTeamInfoReplicated // (Final|Native|Protected) // @ game+0x2004c40
	void OnSpectateReferToChanged(struct ASolarPlayerState* ReferToPlayerState, enum class ESpectateReferToState State); // Function Solarland.HUD_TeammateStates_Panel.OnSpectateReferToChanged // (Final|Native|Protected) // @ game+0x2004910
	void OnShieldReplicated(char InPosInTeam, struct FShieldInfo& OldShield, struct FShieldInfo& NewShield); // Function Solarland.HUD_TeammateStates_Panel.OnShieldReplicated // (Final|Native|Protected|HasOutParms) // @ game+0x2004700
	void OnSelectingJobEffectFinish(int32_t SelectedIndex); // Function Solarland.HUD_TeammateStates_Panel.OnSelectingJobEffectFinish // (Final|Native|Protected) // @ game+0x2004670
	void OnSelectingJobEffectBegin(struct ASolarCharacter* Target, int32_t Level, struct TArray<int32_t>& EffectIDArray); // Function Solarland.HUD_TeammateStates_Panel.OnSelectingJobEffectBegin // (Final|Native|Protected|HasOutParms) // @ game+0x2004540
	void OnReviveManagerReplicated(); // Function Solarland.HUD_TeammateStates_Panel.OnReviveManagerReplicated // (Final|Native|Protected) // @ game+0x20042c0
	void OnReviveItemReplicated(char InPosInTeam, char InItemNum, bool bInCanRebirth); // Function Solarland.HUD_TeammateStates_Panel.OnReviveItemReplicated // (Final|Native|Protected) // @ game+0x20041a0
	void OnPlayerOperationInGameReplicated(struct ASolarPlayerState* InSolarPS); // Function Solarland.HUD_TeammateStates_Panel.OnPlayerOperationInGameReplicated // (Final|Native|Protected) // @ game+0x2003e00
	void OnMarkedPointInNavMapReplicated(char InPosInTeam, struct FVector2D& InMarkPosition); // Function Solarland.HUD_TeammateStates_Panel.OnMarkedPointInNavMapReplicated // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2003d30
	void OnHealthReplicated(char InPosInTeam, float CurrentHP, float MaxHP); // Function Solarland.HUD_TeammateStates_Panel.OnHealthReplicated // (Final|Native|Protected) // @ game+0x2003ac0
	void OnClearMarkedPointInNavMap(char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.OnClearMarkedPointInNavMap // (Final|Native|Protected) // @ game+0x2003970
	void OnCharacterStateInGameReplicated(struct ASolarPlayerState* InCharacterPS); // Function Solarland.HUD_TeammateStates_Panel.OnCharacterStateInGameReplicated // (Final|Native|Protected) // @ game+0x20038e0
	void LuaImplementedTeammatesBaseInfo(int32_t CurTeamId, char InIndex, bool bBattlePhase, struct UHUD_Teammate_State* StateWidget); // Function Solarland.HUD_TeammateStates_Panel.LuaImplementedTeammatesBaseInfo // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	bool IsSelfVisible(); // Function Solarland.HUD_TeammateStates_Panel.IsSelfVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20036d0
	void InitTalentIconInPos(int32_t InTalentID, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.InitTalentIconInPos // (Final|Native|Protected) // @ game+0x2003600
	void InitSkillCDStateInPos(int32_t InCDState, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.InitSkillCDStateInPos // (Final|Native|Protected) // @ game+0x2003530
	void InitPlayerLevelInPos(int32_t InPlayerLv, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.InitPlayerLevelInPos // (Final|Native|Protected) // @ game+0x2003300
};

// Class Solarland.HUD_WorldMark
// Size: 0x428 (Inherited: 0x348)
struct UHUD_WorldMark : USolarUserWidget {
	float LiveTime; // 0x348(0x04)
	float ExtraLiveTime; // 0x34c(0x04)
	float ResponCheckRangeParam; // 0x350(0x04)
	float RefreshTime; // 0x354(0x04)
	struct FVector WorldPos; // 0x358(0x0c)
	struct FVector2D ScreenSize; // 0x364(0x08)
	struct FVector2D IconSize; // 0x36c(0x08)
	bool bIsOutOfRangeLastTime; // 0x374(0x01)
	bool bHasBeenAnsweredByMe; // 0x375(0x01)
	bool bIfWasChosen; // 0x376(0x01)
	bool bIsCreateBySelf; // 0x377(0x01)
	struct UImage* ImgMarkArrow; // 0x378(0x08)
	struct UImage* ImgItemMarkArrow; // 0x380(0x08)
	struct UTextBlock* Distance; // 0x388(0x08)
	float UpdateIconStyleTime_LowLevel; // 0x390(0x04)
	float UpdateIconStyleTime_HighLevel; // 0x394(0x04)
	char pad_398[0x4]; // 0x398(0x04)
	int32_t PosInTeam; // 0x39c(0x04)
	struct FWorldMarkData Data; // 0x3a0(0x50)
	enum class EWorldMarkType Type; // 0x3f0(0x01)
	char pad_3F1[0x3]; // 0x3f1(0x03)
	float MaxWorldDistance; // 0x3f4(0x04)
	float MinWorldDistance; // 0x3f8(0x04)
	char pad_3FC[0x4]; // 0x3fc(0x04)
	struct UCurveFloat* OpacityCurve; // 0x400(0x08)
	bool bAttachToObject; // 0x408(0x01)
	char pad_409[0x1f]; // 0x409(0x1f)

	void UpdateStyleByScreenPosition(struct FVector2D ScreenPos, bool bOutOfRange); // Function Solarland.HUD_WorldMark.UpdateStyleByScreenPosition // (Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void UpdateDistance(struct FVector& TargetPos); // Function Solarland.HUD_WorldMark.UpdateDistance // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2005d10
	void SwitchWidget(bool bOutOfRange); // Function Solarland.HUD_WorldMark.SwitchWidget // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetIfBeChosen(bool bIfChosen); // Function Solarland.HUD_WorldMark.SetIfBeChosen // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ResponseByLocal(); // Function Solarland.HUD_WorldMark.ResponseByLocal // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RemoveItemMarkWhenPlayerPicked(); // Function Solarland.HUD_WorldMark.RemoveItemMarkWhenPlayerPicked // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void LogMarkResponse(); // Function Solarland.HUD_WorldMark.LogMarkResponse // (Final|Native|Public) // @ game+0x2003700
	void InitWidget(struct UObject* Owner, int32_t InPosInTeam, struct FWorldMarkData& InWorldMarkedData, struct UObject* IconImg); // Function Solarland.HUD_WorldMark.InitWidget // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void InitAttachedWidget(struct AActor* ActorAttachedTo); // Function Solarland.HUD_WorldMark.InitAttachedWidget // (Final|Native|Public) // @ game+0x2003270
	void DestroySelf(); // Function Solarland.HUD_WorldMark.DestroySelf // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool CheckIsLowLevelDevice(); // Function Solarland.HUD_WorldMark.CheckIsLowLevelDevice // (Final|Native|Public|BlueprintCallable) // @ game+0x2003170
	void CancelResponse(); // Function Solarland.HUD_WorldMark.CancelResponse // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.HUD_WorldMarkPanel
// Size: 0x3b8 (Inherited: 0x348)
struct UHUD_WorldMarkPanel : USolarUserWidget {
	struct TArray<struct UHUD_MarkEnemyInfo*> MarkdEnemyWidgets; // 0x348(0x10)
	struct UCanvasPanel* MarkPanel; // 0x358(0x08)
	struct UHUD_MarkEnemyInfo* MarkEnemyInfoWidgetClass; // 0x360(0x08)
	struct UHUD_ScanEffect* ScanEffectWidgetClass; // 0x368(0x08)
	struct TArray<struct UHUD_MarkEnemyInfo*> MarkEnemyWidgets; // 0x370(0x10)
	char pad_380[0x38]; // 0x380(0x38)

	void OnSuperRadarStart(struct TArray<struct FString>& InPlayers); // Function Solarland.HUD_WorldMarkPanel.OnSuperRadarStart // (Final|Native|Public|HasOutParms) // @ game+0x2004b70
	void OnSuperRadarRemovePlayer(struct FString InPlayer); // Function Solarland.HUD_WorldMarkPanel.OnSuperRadarRemovePlayer // (Final|Native|Public) // @ game+0x2004ad0
	void OnSuperRadarEnd(); // Function Solarland.HUD_WorldMarkPanel.OnSuperRadarEnd // (Final|Native|Public) // @ game+0x2004ab0
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.HUD_WorldMarkPanel.OnSpectateTargetChanged // (Final|Native|Public) // @ game+0x20049e0
	void OnScoutCharactersChange(struct TArray<struct FString> ScoutedCharacters, struct TArray<struct FString> ToBeScoutedCharacters); // Function Solarland.HUD_WorldMarkPanel.OnScoutCharactersChange // (Final|Native|Public) // @ game+0x20042e0
	struct FString OnRegisterPositionMarkRequested(struct UActorMarkBase*& OutResult, struct UActorMarkBase* InMarkClass, struct FVector& InPosition); // Function Solarland.HUD_WorldMarkPanel.OnRegisterPositionMarkRequested // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2004010
	struct FString OnRegisterActorMarkRequested(struct UActorMarkBase*& OutResult, struct UActorMarkBase* InMarkClass, struct AActor* FollowActor); // Function Solarland.HUD_WorldMarkPanel.OnRegisterActorMarkRequested // (Final|Native|Protected|HasOutParms) // @ game+0x2003e90
	void OnDamagingActorsChange(); // Function Solarland.HUD_WorldMarkPanel.OnDamagingActorsChange // (Final|Native|Public) // @ game+0x20039f0
	void OnAimingEnemy(struct ASolarCharacter* InEnemy); // Function Solarland.HUD_WorldMarkPanel.OnAimingEnemy // (Final|Native|Public) // @ game+0x2003720
};

// Class Solarland.HUDBattleHPPanel
// Size: 0x460 (Inherited: 0x348)
struct UHUDBattleHPPanel : USolarUserWidget {
	char pad_348[0x28]; // 0x348(0x28)
	struct USolarHPProgressBoard* HP_Bar; // 0x370(0x08)
	struct UTextBlock* Txt_HPNumber; // 0x378(0x08)
	struct USolarShieldProgressBoard* AdvBar_Shield_A; // 0x380(0x08)
	char pad_388[0x8]; // 0x388(0x08)
	struct UTextBlock* Txt_ArmorNum; // 0x390(0x08)
	struct UCanvasPanel* Panel_VX; // 0x398(0x08)
	struct UCanvasPanel* Panel_SP; // 0x3a0(0x08)
	struct UImage* HP_Bar_ICON; // 0x3a8(0x08)
	struct UImage* HP_Shield_ICON; // 0x3b0(0x08)
	struct UCanvasPanel* FX_Shield; // 0x3b8(0x08)
	struct UWidgetAnimation* Armor_Light_Anim; // 0x3c0(0x08)
	struct FLinearColor HPBarColorNormal; // 0x3c8(0x10)
	struct FLinearColor HPBarColorDying; // 0x3d8(0x10)
	struct TMap<int32_t, struct FLinearColor> ShieldNumColorByQuality; // 0x3e8(0x50)
	char pad_438[0x28]; // 0x438(0x28)

	void UpdateShieldValue(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState RechargeState, bool bFixPreAdd); // Function Solarland.HUDBattleHPPanel.UpdateShieldValue // (Final|Native|Public) // @ game+0x2005f10
	void UpdateShieldMaxValue(float MaxShieldValue); // Function Solarland.HUDBattleHPPanel.UpdateShieldMaxValue // (Final|Native|Public) // @ game+0x2005e90
	void UpdateHPBar(float InCurHealth, float InMaxHealth); // Function Solarland.HUDBattleHPPanel.UpdateHPBar // (Final|Native|Public) // @ game+0x2005da0
	void UnBindDelegates(); // Function Solarland.HUDBattleHPPanel.UnBindDelegates // (Final|Native|Public) // @ game+0x8e9ae0
	void ShowShieldUI(bool bIsShow); // Function Solarland.HUDBattleHPPanel.ShowShieldUI // (Final|Native|Public) // @ game+0x2005bf0
	void ShowLevelUp(int32_t NewLevel, struct TArray<struct FString>& DynamicTips); // Function Solarland.HUDBattleHPPanel.ShowLevelUp // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void ShowGainExp(int32_t ExpAdded); // Function Solarland.HUDBattleHPPanel.ShowGainExp // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetHPColor(struct FLinearColor& InHPBarColor); // Function Solarland.HUDBattleHPPanel.SetHPColor // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x2005a50
	void SetHPBarAlternateColor(bool bFlag); // Function Solarland.HUDBattleHPPanel.SetHPBarAlternateColor // (Final|Native|Public) // @ game+0x20059c0
	void OnShieldUpgradeAnimFinished(); // Function Solarland.HUDBattleHPPanel.OnShieldUpgradeAnimFinished // (Final|Native|Private) // @ game+0x2004820
	void OnLevelUpInternal(int32_t NewLevel, int32_t OldLevel); // Function Solarland.HUDBattleHPPanel.OnLevelUpInternal // (Final|Native|Private) // @ game+0x2003bd0
	void OnLevelUp(int32_t NewLevel); // Function Solarland.HUDBattleHPPanel.OnLevelUp // (Final|Native|Public|BlueprintCallable) // @ game+0x2003ca0
	void OnGainExp(int32_t ExpAdded); // Function Solarland.HUDBattleHPPanel.OnGainExp // (Final|Native|Private) // @ game+0x2003a30
	void OnEnterParachuting(); // Function Solarland.HUDBattleHPPanel.OnEnterParachuting // (Final|Native|Public) // @ game+0x8e9ae0
	void OnEnterLanding(); // Function Solarland.HUDBattleHPPanel.OnEnterLanding // (Final|Native|Public) // @ game+0x2003a10
	void OnEnterCruising(); // Function Solarland.HUDBattleHPPanel.OnEnterCruising // (Final|Native|Public) // @ game+0x1fb1b30
	void OnCharacterRescueStateChanged(enum class ERescueState NewRescueState); // Function Solarland.HUDBattleHPPanel.OnCharacterRescueStateChanged // (Final|Native|Public) // @ game+0x2003860
	void OnCharacterRebirth(struct ASolarCharacter* InSolarChar); // Function Solarland.HUDBattleHPPanel.OnCharacterRebirth // (Final|Native|Public) // @ game+0x20037d0
	void OnCharacterReady(); // Function Solarland.HUDBattleHPPanel.OnCharacterReady // (Final|Native|Private) // @ game+0x20037b0
	void InitShieldHUD(float InCurValue, float InMaxValue, int32_t QualityColor, bool bIsAdvancedShield); // Function Solarland.HUDBattleHPPanel.InitShieldHUD // (Final|Native|Public) // @ game+0x20033d0
	struct FString GeneralHPText(float InCurHealth, float InMaxHealth); // Function Solarland.HUDBattleHPPanel.GeneralHPText // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ForceInitHPBar(float InCurHealth, float InMaxHealth); // Function Solarland.HUDBattleHPPanel.ForceInitHPBar // (Final|Native|Public) // @ game+0x20031a0
	void BindDelegates(); // Function Solarland.HUDBattleHPPanel.BindDelegates // (Final|Native|Public) // @ game+0x2003150
};

// Class Solarland.HUDBattleUIScore
// Size: 0x370 (Inherited: 0x348)
struct UHUDBattleUIScore : USolarUserWidget {
	struct UImage* Image_BG_Grid02; // 0x348(0x08)
	struct USizeBox* KillLeader; // 0x350(0x08)
	struct UTextBlock* Txt_CauseDamage; // 0x358(0x08)
	struct UTextBlock* Txt_Assist; // 0x360(0x08)
	char pad_368[0x8]; // 0x368(0x08)

	void RefreshKillLeaderUI(struct ASolarPlayerState* KillLeaderPS); // Function Solarland.HUDBattleUIScore.RefreshKillLeaderUI // (Final|Native|Public) // @ game+0x2005650
	void RefreshCauseDamage(float CauseDamage); // Function Solarland.HUDBattleUIScore.RefreshCauseDamage // (Final|Native|Public) // @ game+0x20055d0
	void RefreshAssistNum(int32_t AssistNum); // Function Solarland.HUDBattleUIScore.RefreshAssistNum // (Final|Native|Public) // @ game+0x2005540
	void OnSpectateReferToChanged(struct ASolarPlayerState* ReferToPlayerState, enum class ESpectateReferToState State); // Function Solarland.HUDBattleUIScore.OnSpectateReferToChanged // (Final|Native|Public) // @ game+0x2004840
};

// Class Solarland.HUDCountdownWidget
// Size: 0x3b8 (Inherited: 0x348)
struct UHUDCountdownWidget : USolarUserWidget {
	char pad_348[0x40]; // 0x348(0x40)
	struct UGaugeImage* Image_GameProgressBar; // 0x388(0x08)
	struct UTextBlock* Text_GameProgressTime; // 0x390(0x08)
	struct UButton* BTN_GameProgressCancel; // 0x398(0x08)
	struct UTextBlock* Text_GameProgressTips; // 0x3a0(0x08)
	struct UHorizontalBox* HorizontalBox_Cancel; // 0x3a8(0x08)
	struct UHUDPassiveHeadWidget* Panel_PassiveBuff; // 0x3b0(0x08)

	void UpdateGameProgressTipsText(int32_t InTextId); // Function Solarland.HUDCountdownWidget.UpdateGameProgressTipsText // (Final|Native|Protected) // @ game+0x200a5f0
	void UpdateGameProgressText(); // Function Solarland.HUDCountdownWidget.UpdateGameProgressText // (Final|Native|Protected) // @ game+0x200a5d0
	void UpdateGameProgressBarPercent(float InPercent); // Function Solarland.HUDCountdownWidget.UpdateGameProgressBarPercent // (Final|Native|Protected) // @ game+0x200a550
	void UpdateGameProgress(float InAddition); // Function Solarland.HUDCountdownWidget.UpdateGameProgress // (Final|Native|Protected) // @ game+0x200a4d0
	void StopGameProgress(int32_t InActionID); // Function Solarland.HUDCountdownWidget.StopGameProgress // (Final|Native|Protected) // @ game+0x200a400
	void StopCountDownProgress(int32_t InActionID); // Function Solarland.HUDCountdownWidget.StopCountDownProgress // (Final|Native|Protected) // @ game+0x200a370
	void StartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.HUDCountdownWidget.StartCountDownProgress // (Final|Native|Protected|HasOutParms) // @ game+0x200a230
	void SetActiveGameProgressBar(bool Inactive); // Function Solarland.HUDCountdownWidget.SetActiveGameProgressBar // (Final|Native|Public) // @ game+0x2009f90
	void OnSteamCancelCountDown(); // Function Solarland.HUDCountdownWidget.OnSteamCancelCountDown // (Final|Native|Protected) // @ game+0x2009e20
	void OnParentVisibilityChanged(bool bVisible); // Function Solarland.HUDCountdownWidget.OnParentVisibilityChanged // (Final|Native|Protected) // @ game+0x2009630
	void OnCompleteInternal(); // Function Solarland.HUDCountdownWidget.OnCompleteInternal // (Final|Native|Protected) // @ game+0x2009560
	void OnClickButtonCancel(); // Function Solarland.HUDCountdownWidget.OnClickButtonCancel // (Final|Native|Protected) // @ game+0x2009540
	void BP_UpdateStateView(enum class ECountDownState InState); // Function Solarland.HUDCountdownWidget.BP_UpdateStateView // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.HUDItemPanel
// Size: 0x4e8 (Inherited: 0x348)
struct UHUDItemPanel : USolarUserWidget {
	struct UCanvasPanel* Panel_ShieldAutoRE; // 0x348(0x08)
	struct UButton* Btn_Restore; // 0x350(0x08)
	struct UImage* Img_Restore; // 0x358(0x08)
	struct UTextBlock* Txt_Restore_Num; // 0x360(0x08)
	struct UButton* Btn_Change; // 0x368(0x08)
	struct UImage* Img_Shield_FX; // 0x370(0x08)
	struct UCanvasPanel* Panel_DoubleShiel_VX; // 0x378(0x08)
	struct UOverlay* Unavailable_Restore; // 0x380(0x08)
	struct UWidgetAnimation* Anim_Double; // 0x388(0x08)
	struct UButton* Btn_Medkit; // 0x390(0x08)
	struct UButton* Btn_BigShieldRecharger; // 0x398(0x08)
	struct UCanvasPanel* Panel_Backpack; // 0x3a0(0x08)
	struct UButton* Btn_Backpack; // 0x3a8(0x08)
	struct UWidgetAnimation* Anim_EMP_Enter; // 0x3b0(0x08)
	struct UWidgetAnimation* Anim_EMP_Exit; // 0x3b8(0x08)
	struct UWidgetAnimation* Enter_Anim; // 0x3c0(0x08)
	struct UWidgetAnimation* Exit_Anim; // 0x3c8(0x08)
	struct TMap<enum class ESpecialItemID, struct TSoftObjectPtr<UTexture2D>> RestoreIcons; // 0x3d0(0x50)
	char pad_420[0x18]; // 0x420(0x18)
	struct TMap<enum class ESpecialItemID, int32_t> RestoreItemMap; // 0x438(0x50)
	char pad_488[0x8]; // 0x488(0x08)
	float RestoreRecommendDuration; // 0x490(0x04)
	char pad_494[0x4]; // 0x494(0x04)
	struct UCanvasPanel* Panel_Recommend; // 0x498(0x08)
	struct USolarButton* Btn_Recommend; // 0x4a0(0x08)
	struct UImage* Img_Recom; // 0x4a8(0x08)
	struct UGaugeImage* Recom_Countdown; // 0x4b0(0x08)
	struct UWidgetAnimation* Anim_Recommend_Click_Exit; // 0x4b8(0x08)
	struct UWidgetAnimation* Anim_Recommend_Unclick_Exit; // 0x4c0(0x08)
	char pad_4C8[0xc]; // 0x4c8(0x0c)
	int32_t PrevLevel; // 0x4d4(0x04)
	float PrevExpRatio; // 0x4d8(0x04)
	int32_t CurrentLevel; // 0x4dc(0x04)
	float CurrentExpRatio; // 0x4e0(0x04)
	bool bHiddenByGameplay; // 0x4e4(0x01)
	char pad_4E5[0x3]; // 0x4e5(0x03)

	void WrappedOnLevelAndExpChanged(int32_t NewLevel, float NewExpRatio); // Function Solarland.HUDItemPanel.WrappedOnLevelAndExpChanged // (Final|Native|Protected) // @ game+0x200a680
	void UnBindDelegates(); // Function Solarland.HUDItemPanel.UnBindDelegates // (Final|Native|Public) // @ game+0x200a490
	void SetShieldFXVisable(bool bIsVisible); // Function Solarland.HUDItemPanel.SetShieldFXVisable // (Final|Native|Public) // @ game+0x200a180
	void SetIsHiddenByGameplay(bool InNewValue); // Function Solarland.HUDItemPanel.SetIsHiddenByGameplay // (Final|Native|Public|BlueprintCallable) // @ game+0x200a0f0
	void ScopeUIStateChanged(bool BOpened); // Function Solarland.HUDItemPanel.ScopeUIStateChanged // (Final|Native|Public) // @ game+0x1f99610
	void ResetLevelAndExpDisplayToCurrent(); // Function Solarland.HUDItemPanel.ResetLevelAndExpDisplayToCurrent // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RecommendRestoreItem(); // Function Solarland.HUDItemPanel.RecommendRestoreItem // (Final|Native|Private) // @ game+0x2009e40
	void OnShieldValueChanged(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState RechargeState, bool bFixPreAdd); // Function Solarland.HUDItemPanel.OnShieldValueChanged // (Final|Native|Private) // @ game+0x2009ad0
	void OnRoleGEShieldMultiRecoverCoolDownChange(int32_t NewCount); // Function Solarland.HUDItemPanel.OnRoleGEShieldMultiRecoverCoolDownChange // (Final|Native|Private) // @ game+0x20098c0
	void OnRoleAbilityHideHUD(bool bHide); // Function Solarland.HUDItemPanel.OnRoleAbilityHideHUD // (Final|Native|Private) // @ game+0x2009830
	void OnPlayerStateRep(enum class EPlayerStateRepType RepType, struct APlayerState* PlayerState); // Function Solarland.HUDItemPanel.OnPlayerStateRep // (Final|Native|Protected) // @ game+0x20096c0
	void OnLevelAndExpChanged(); // Function Solarland.HUDItemPanel.OnLevelAndExpChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnEnterLanding(); // Function Solarland.HUDItemPanel.OnEnterLanding // (Final|Native|Public) // @ game+0x2003a10
	void OnEnterCruising(); // Function Solarland.HUDItemPanel.OnEnterCruising // (Final|Native|Public) // @ game+0x1fb1b30
	void OnEMP(bool bInForbidden); // Function Solarland.HUDItemPanel.OnEMP // (Final|Native|Public) // @ game+0x20095a0
	void OnConsumeItemUpdated(); // Function Solarland.HUDItemPanel.OnConsumeItemUpdated // (Final|Native|Public) // @ game+0x2009580
	void OnCharacterRescueStateChanged(enum class ERescueState NewRescueState); // Function Solarland.HUDItemPanel.OnCharacterRescueStateChanged // (Final|Native|Private) // @ game+0x20094c0
	void OnCharacterHPChanged(float CurrentHP, float MaxHP); // Function Solarland.HUDItemPanel.OnCharacterHPChanged // (Final|Native|Private) // @ game+0x20093f0
	void OnBtnShieldRechargerClicked(); // Function Solarland.HUDItemPanel.OnBtnShieldRechargerClicked // (Final|Native|Protected) // @ game+0x20093d0
	void OnBtnRestoreClicked(); // Function Solarland.HUDItemPanel.OnBtnRestoreClicked // (Final|Native|Protected) // @ game+0x20093b0
	void OnBtnRecommendClicked(); // Function Solarland.HUDItemPanel.OnBtnRecommendClicked // (Final|Native|Protected) // @ game+0x2009390
	void OnBtnMedkitClicked(); // Function Solarland.HUDItemPanel.OnBtnMedkitClicked // (Final|Native|Protected) // @ game+0x2009370
	void OnBtnChangeClicked(); // Function Solarland.HUDItemPanel.OnBtnChangeClicked // (Final|Native|Protected) // @ game+0x2009350
	void OnBtnBigShieldRechargerClicked(); // Function Solarland.HUDItemPanel.OnBtnBigShieldRechargerClicked // (Final|Native|Protected) // @ game+0x2009330
	void OnBtnBackpackClicked(); // Function Solarland.HUDItemPanel.OnBtnBackpackClicked // (Final|Native|Protected) // @ game+0x2009310
	bool IsBattleHUDInSpectateMode(); // Function Solarland.HUDItemPanel.IsBattleHUDInSpectateMode // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool GetIsHiddenByGameplay(); // Function Solarland.HUDItemPanel.GetIsHiddenByGameplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20091f0
	void BindDelegates(); // Function Solarland.HUDItemPanel.BindDelegates // (Final|Native|Public) // @ game+0x20091b0
};

// Class Solarland.HUDJobEffectPanel
// Size: 0x368 (Inherited: 0x348)
struct UHUDJobEffectPanel : USolarUserWidget {
	struct UJobEffectItemWidget* ItemWidgetClass; // 0x348(0x08)
	char pad_350[0x10]; // 0x350(0x10)
	struct USolarButton* Btn_Detail; // 0x360(0x08)

	void ShowDetailPanel(); // Function Solarland.HUDJobEffectPanel.ShowDetailPanel // (Final|Native|Protected|BlueprintCallable) // @ game+0x200a210
	void RefreshSplashEffectColor(struct FBattleUpgradeEffectCategoryColorSet& ColorSet); // Function Solarland.HUDJobEffectPanel.RefreshSplashEffectColor // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.HUDJobEffectPanel.OnSpectateTargetChanged // (Final|Native|Protected) // @ game+0x2009d50
	void OnSpectateInfoRep(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.HUDJobEffectPanel.OnSpectateInfoRep // (Final|Native|Protected) // @ game+0x2009cc0
	void OnNewEffectAppear(struct UJobEffectItemWidget* Widget, int32_t Index, int32_t TotalCount); // Function Solarland.HUDJobEffectPanel.OnNewEffectAppear // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnEffectUpdate(struct UJobEffectItemWidget* Widget, int32_t Index, struct FText& LabelContent); // Function Solarland.HUDJobEffectPanel.OnEffectUpdate // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnBattleUpgradeEffect(enum class ESolarTablesEnum_BattleUpgradeEffectType EffectType, int32_t ParamSum); // Function Solarland.HUDJobEffectPanel.OnBattleUpgradeEffect // (Final|Native|Protected) // @ game+0x2009240
	void CloseDetailPanel(); // Function Solarland.HUDJobEffectPanel.CloseDetailPanel // (Final|Native|Protected|BlueprintCallable) // @ game+0x20091d0
	void AddItemWidgetToPanel(struct UJobEffectItemWidget* ItemWidget); // Function Solarland.HUDJobEffectPanel.AddItemWidgetToPanel // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.HUDPassiveHeadWidget
// Size: 0x360 (Inherited: 0x348)
struct UHUDPassiveHeadWidget : USolarUserWidget {
	struct UImage* Img_Head; // 0x348(0x08)
	struct USolarTextBlock* Txt_Buff; // 0x350(0x08)
	char pad_358[0x8]; // 0x358(0x08)

	void SetData(int32_t InContributorCharacterId, int32_t InLocalTipsID); // Function Solarland.HUDPassiveHeadWidget.SetData // (Final|Native|Public|BlueprintCallable) // @ game+0x200a020
};

// Class Solarland.HUDShieldMaterial
// Size: 0x368 (Inherited: 0x348)
struct UHUDShieldMaterial : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct UWidgetAnimation* Anim_GetMT_3; // 0x350(0x08)
	struct UWidgetAnimation* Anim_GetMT; // 0x358(0x08)
	struct UWidgetAnimation* Anim_Loop; // 0x360(0x08)

	void OnShieldUpgradeShopInteract(); // Function Solarland.HUDShieldMaterial.OnShieldUpgradeShopInteract // (Final|Native|Protected) // @ game+0x2009ab0
	void OnShieldUpgradeItemChanged(int32_t InNewCount, int32_t InLastCount); // Function Solarland.HUDShieldMaterial.OnShieldUpgradeItemChanged // (Final|Native|Protected) // @ game+0x20099e0
	void OnShieldAvailableChanged(bool bAvailable); // Function Solarland.HUDShieldMaterial.OnShieldAvailableChanged // (Final|Native|Protected) // @ game+0x2009950
};

// Class Solarland.SolarMapElementBase
// Size: 0x298 (Inherited: 0x228)
struct ASolarMapElementBase : AActor {
	char pad_228[0x10]; // 0x228(0x10)
	struct FString Side; // 0x238(0x10)
	struct FString Job; // 0x248(0x10)
	struct FString ElementID; // 0x258(0x10)
	enum class ESGameMode_ElementType Type; // 0x268(0x01)
	enum class EElementStateType State; // 0x269(0x01)
	enum class EElementVisibilityType Visibility; // 0x26a(0x01)
	char pad_26B[0x5]; // 0x26b(0x05)
	struct USolarGameMode_HandleElementRPC* BP_HandleActorRPC; // 0x270(0x08)
	struct FName ElementTypeName; // 0x278(0x08)
	struct FString GroupKey; // 0x280(0x10)
	char bUseSceneActorOptimization; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)

	void SetElementVisibility(enum class EElementVisibilityType NewType); // Function Solarland.SolarMapElementBase.SetElementVisibility // (Native|Public|BlueprintCallable) // @ game+0x214ccc0
	enum class EElementStateType SetElementState(enum class EElementStateType NewState); // Function Solarland.SolarMapElementBase.SetElementState // (Native|Public|BlueprintCallable) // @ game+0x203c600
	void OnRep_ElementVisibility(); // Function Solarland.SolarMapElementBase.OnRep_ElementVisibility // (Final|Native|Public) // @ game+0x214cad0
	void OnRep_ElementState(); // Function Solarland.SolarMapElementBase.OnRep_ElementState // (Final|Native|Public) // @ game+0x214cab0
	void OnElementVisibilityChanged(enum class EElementVisibilityType CurrentVisibility); // Function Solarland.SolarMapElementBase.OnElementVisibilityChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnElementStateChanged(enum class EElementStateType CurrentState); // Function Solarland.SolarMapElementBase.OnElementStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.HumanoidTarget
// Size: 0x2b0 (Inherited: 0x298)
struct AHumanoidTarget : ASolarMapElementBase {
	char pad_298[0x18]; // 0x298(0x18)

	void ServerOnTargetTakeDamage(float Damage, struct AActor* DamageCauser); // Function Solarland.HumanoidTarget.ServerOnTargetTakeDamage // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.HuntTeammateStatesPanelWidget
// Size: 0x3a0 (Inherited: 0x348)
struct UHuntTeammateStatesPanelWidget : USolarUserWidget {
	char pad_348[0x4]; // 0x348(0x04)
	float DeltaTime; // 0x34c(0x04)
	struct TMap<int32_t, struct UHuntTeammateStateWidget*> TeammateStatesMap; // 0x350(0x50)
};

// Class Solarland.HuntTeammateStateWidget
// Size: 0x360 (Inherited: 0x348)
struct UHuntTeammateStateWidget : USolarUserWidget {
	bool bHasInitTalent; // 0x348(0x01)
	bool bHasTalentStateSet; // 0x349(0x01)
	char pad_34A[0x2]; // 0x34a(0x02)
	int32_t PlayerPosInTeam; // 0x34c(0x04)
	struct FString PlayerNickName; // 0x350(0x10)

	void UnBindPlayerCard(); // Function Solarland.HuntTeammateStateWidget.UnBindPlayerCard // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetTextNickName(struct FString NickName); // Function Solarland.HuntTeammateStateWidget.SetTextNickName // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetTeammatePosAndColor(int32_t PosInTeam, bool IsNormalState); // Function Solarland.HuntTeammateStateWidget.SetTeammatePosAndColor // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetStateWidgetVisibility(enum class ESlateVisibility InVisibility); // Function Solarland.HuntTeammateStateWidget.SetStateWidgetVisibility // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetHealthPercent(float Percent); // Function Solarland.HuntTeammateStateWidget.SetHealthPercent // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ResetToDefault(); // Function Solarland.HuntTeammateStateWidget.ResetToDefault // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RefreshTalent(struct ASolarPlayerState* PlayerState); // Function Solarland.HuntTeammateStateWidget.RefreshTalent // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RefreshCurrentPlayerOperationInGame(bool IsVisible); // Function Solarland.HuntTeammateStateWidget.RefreshCurrentPlayerOperationInGame // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RefreshCurrentCharacterStateInGame(bool IsInVehicle, bool IsDying, bool IsAbnormalState); // Function Solarland.HuntTeammateStateWidget.RefreshCurrentCharacterStateInGame // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool HasBindedPlayer(struct ASCMPlayerState* Player); // Function Solarland.HuntTeammateStateWidget.HasBindedPlayer // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void BindPlayerCard(struct ASCMPlayerState* Player); // Function Solarland.HuntTeammateStateWidget.BindPlayerCard // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.HyperlinkDecorator
// Size: 0x40 (Inherited: 0x28)
struct UHyperlinkDecorator : URichTextBlockDecorator {
	struct UDataTable* HlinkSet; // 0x28(0x08)
	struct FString HlContent; // 0x30(0x10)

	void ClickFunc(); // Function Solarland.HyperlinkDecorator.ClickFunc // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.IMChatObject
// Size: 0x38 (Inherited: 0x28)
struct UIMChatObject : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	bool GMEIsInRoom; // 0x30(0x01)
	bool NertcIsInRoom; // 0x31(0x01)
	char pad_32[0x6]; // 0x32(0x06)

	void UnInitEvents(); // Function Solarland.IMChatObject.UnInitEvents // (Final|Native|Public) // @ game+0x200a4b0
	void SendPlayerPosToIMServerEveryFrame(struct FVector& PlayerPosition, struct FRotator& PlayerRotator, float DeltaTime); // Function Solarland.IMChatObject.SendPlayerPosToIMServerEveryFrame // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2009e60
	void NotifyBattlePlayerChanged(int32_t NumPlayers, int32_t PreviousNumPlayers); // Function Solarland.IMChatObject.NotifyBattlePlayerChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void InitEnvents(); // Function Solarland.IMChatObject.InitEnvents // (Final|Native|Public) // @ game+0x2009220
};

// Class Solarland.InteractionDetectionComponent
// Size: 0x560 (Inherited: 0x560)
struct UInteractionDetectionComponent : USphereComponent {
};

// Class Solarland.ItemAttributeSet
// Size: 0x110 (Inherited: 0x30)
struct UItemAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData MaxSMGAmmo; // 0x30(0x10)
	struct FGameplayAttributeData CurrentSMGAmmo; // 0x40(0x10)
	struct FGameplayAttributeData MaxARAmmo; // 0x50(0x10)
	struct FGameplayAttributeData CurrentARAmmo; // 0x60(0x10)
	struct FGameplayAttributeData MaxSRAmmo; // 0x70(0x10)
	struct FGameplayAttributeData CurrentSRAmmo; // 0x80(0x10)
	struct FGameplayAttributeData MaxSGAmmo; // 0x90(0x10)
	struct FGameplayAttributeData CurrentSGAmmo; // 0xa0(0x10)
	struct FGameplayAttributeData MaxEnergyAmmo; // 0xb0(0x10)
	struct FGameplayAttributeData CurrentEnergyAmmo; // 0xc0(0x10)
	struct FGameplayAttributeData ItemCutDownMultiple; // 0xd0(0x10)
	struct FGameplayAttributeData TempSTGAmmoIncrement; // 0xe0(0x10)
	struct FGameplayAttributeData TempSMGAmmoIncrement; // 0xf0(0x10)
	struct FGameplayAttributeData TempShieldRechargerIncrement; // 0x100(0x10)

	void OnRep_MaxSRAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxSRAmmo // (Native|Protected|HasOutParms) // @ game+0x1fd46e0
	void OnRep_MaxSMGAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxSMGAmmo // (Native|Protected|HasOutParms) // @ game+0x1fb2090
	void OnRep_MaxSGAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxSGAmmo // (Native|Protected|HasOutParms) // @ game+0x1fdb9b0
	void OnRep_MaxEnergyAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxEnergyAmmo // (Native|Protected|HasOutParms) // @ game+0x1fdb850
	void OnRep_MaxARAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxARAmmo // (Native|Protected|HasOutParms) // @ game+0x1fd4c10
	void OnRep_ItemCutDownMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_ItemCutDownMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x2009790
	void OnRep_CurrentSRAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentSRAmmo // (Native|Protected|HasOutParms) // @ game+0x1fd4b60
	void OnRep_CurrentSMGAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentSMGAmmo // (Native|Protected|HasOutParms) // @ game+0x1fb1fe0
	void OnRep_CurrentSGAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentSGAmmo // (Native|Protected|HasOutParms) // @ game+0x1fdb900
	void OnRep_CurrentEnergyAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentEnergyAmmo // (Native|Protected|HasOutParms) // @ game+0x1fdb7a0
	void OnRep_CurrentARAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentARAmmo // (Native|Protected|HasOutParms) // @ game+0x1fd4a10
};

// Class Solarland.WidgetControlGroup
// Size: 0x280 (Inherited: 0x260)
struct UWidgetControlGroup : UUserWidget {
	struct UNamedSlot* ControlledWidget; // 0x260(0x08)
	struct TArray<struct UWidgetControlUnit*> WidgetControls; // 0x268(0x10)
	char pad_278[0x8]; // 0x278(0x08)

	void SetControlledWidgetActive(bool bActive); // Function Solarland.WidgetControlGroup.SetControlledWidgetActive // (Native|Event|Protected|BlueprintEvent) // @ game+0x22ca2d0
	bool IsControlledWidgetActive(bool bUpdateCache); // Function Solarland.WidgetControlGroup.IsControlledWidgetActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c98c0
};

// Class Solarland.JetFlyControlGroup
// Size: 0x2a0 (Inherited: 0x280)
struct UJetFlyControlGroup : UWidgetControlGroup {
	struct UWidgetControlUnit* CDControl; // 0x280(0x08)
	struct UWidgetControlUnit* TimesControl; // 0x288(0x08)
	struct UWidgetControlUnit* ForceControl; // 0x290(0x08)
	bool bUsedForVertical; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
};

// Class Solarland.WidgetControlUnit
// Size: 0x278 (Inherited: 0x260)
struct UWidgetControlUnit : UUserWidget {
	char pad_260[0x18]; // 0x260(0x18)

	void SetControlActive(bool bActive); // Function Solarland.WidgetControlUnit.SetControlActive // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x22ca2d0
	void OnOtherActiveChanged(struct UWidgetControlUnit* OtherUnit); // Function Solarland.WidgetControlUnit.OnOtherActiveChanged // (Native|Event|Public|BlueprintEvent) // @ game+0xba1100
	void OnGroupInitialized(struct UWidgetControlGroup* ControlGroup); // Function Solarland.WidgetControlUnit.OnGroupInitialized // (Native|Event|Public|BlueprintEvent) // @ game+0x22c9a90
	bool IsControlActive(); // Function Solarland.WidgetControlUnit.IsControlActive // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x22c9890
};

// Class Solarland.JetFlyEMPControl
// Size: 0x280 (Inherited: 0x278)
struct UJetFlyEMPControl : UWidgetControlUnit {
	struct UWidgetAnimation* Anim_EMP; // 0x278(0x08)

	void OnEMPEffected(struct ASolarCharacter* EffectedCharacter, bool bEMPActive); // Function Solarland.JetFlyEMPControl.OnEMPEffected // (Final|Native|Protected) // @ game+0x200eed0
	void InitializeWithCharacter(struct ASolarCharacter* InCharacter); // Function Solarland.JetFlyEMPControl.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x200e800
};

// Class Solarland.JetFlyForceControl
// Size: 0x2e8 (Inherited: 0x278)
struct UJetFlyForceControl : UWidgetControlUnit {
	char pad_278[0x70]; // 0x278(0x70)

	void SwitchForceControlWidget(bool bRapidBoost); // Function Solarland.JetFlyForceControl.SwitchForceControlWidget // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetContentVisibility(bool bShowContent); // Function Solarland.JetFlyForceControl.SetContentVisibility // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetContentColorAndOpacity(struct FLinearColor& Color); // Function Solarland.JetFlyForceControl.SetContentColorAndOpacity // (Event|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnRapidBoostActivationChanged(bool bActivated); // Function Solarland.JetFlyForceControl.OnRapidBoostActivationChanged // (Final|Native|Protected) // @ game+0x200f600
	void OnJetModuleLvChanged(int32_t NewLevel); // Function Solarland.JetFlyForceControl.OnJetModuleLvChanged // (Final|Native|Protected) // @ game+0x200f330
	void OnForbiddenTypesChanged(enum class EJetFlyForbiddenType Type, bool bAdded); // Function Solarland.JetFlyForceControl.OnForbiddenTypesChanged // (Final|Native|Protected) // @ game+0x200f140
	void InitializeWithCharacter(struct ASolarCharacter* OwningCharacter); // Function Solarland.JetFlyForceControl.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x200e890
};

// Class Solarland.JetFlyIcon
// Size: 0x350 (Inherited: 0x348)
struct UJetFlyIcon : USolarUserWidget {
	bool bUsedForVertical; // 0x348(0x01)
	char pad_349[0x7]; // 0x349(0x07)

	void RefreshOnEMPStateChanged(bool bActive); // Function Solarland.JetFlyIcon.RefreshOnEMPStateChanged // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshColorForLevel(int32_t Level, struct FItemQualityData& Config); // Function Solarland.JetFlyIcon.RefreshColorForLevel // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnJetModuleLvChanged(int32_t NewLevel); // Function Solarland.JetFlyIcon.OnJetModuleLvChanged // (Final|Native|Protected) // @ game+0x200f3c0
	void OnEMPEffected(struct ASolarCharacter* EffectedCharacter, bool bEMPActive); // Function Solarland.JetFlyIcon.OnEMPEffected // (Final|Native|Protected) // @ game+0x200efa0
	void OnCharacterSet(struct ASolarCharacter* InCharacter); // Function Solarland.JetFlyIcon.OnCharacterSet // (Final|Native|Protected) // @ game+0x200ece0
	void OnCharacterSelfRebirth(struct ASolarCharacter* InCharacter); // Function Solarland.JetFlyIcon.OnCharacterSelfRebirth // (Final|Native|Protected) // @ game+0x200ece0
};

// Class Solarland.JetFlyInnerCDControl
// Size: 0x2b0 (Inherited: 0x278)
struct UJetFlyInnerCDControl : UWidgetControlUnit {
	struct UGaugeImage* ImgCD; // 0x278(0x08)
	struct UTextBlock* TxtCD; // 0x280(0x08)
	struct TArray<struct UObject*> OtherInactiveControls; // 0x288(0x10)
	char pad_298[0x18]; // 0x298(0x18)

	void OnCDStateChanged(bool bStart); // Function Solarland.JetFlyInnerCDControl.OnCDStateChanged // (Final|Native|Protected) // @ game+0x200ec50
	void OnCDProgressSet(float InValue, float InPercent); // Function Solarland.JetFlyInnerCDControl.OnCDProgressSet // (Final|Native|Protected) // @ game+0x200eb80
	void InitializeWithCharacter(struct ASolarCharacter* OwningCharacter); // Function Solarland.JetFlyInnerCDControl.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x200e920
};

// Class Solarland.JetFlyTimesControl
// Size: 0x338 (Inherited: 0x278)
struct UJetFlyTimesControl : UWidgetControlUnit {
	char pad_278[0x10]; // 0x278(0x10)
	struct UImage* ProgressGrid; // 0x288(0x08)
	struct UImage* FinishPrompt; // 0x290(0x08)
	struct UWidgetAnimation* Anim_CD_Prompt; // 0x298(0x08)
	struct UWidgetAnimation* Anim_EMP; // 0x2a0(0x08)
	struct UWidgetAnimation* Anim_Resume; // 0x2a8(0x08)
	struct UMaterialInterface* ProgressGridBase; // 0x2b0(0x08)
	struct TArray<struct FName> ProgressColor; // 0x2b8(0x10)
	struct FName GridName; // 0x2c8(0x08)
	struct FName ProgressName; // 0x2d0(0x08)
	char pad_2D8[0x28]; // 0x2d8(0x28)
	struct UWidget* FlushAngel; // 0x300(0x08)
	struct UWidgetAnimation* Anim_RapidBoostFlush; // 0x308(0x08)
	struct TArray<struct FVector2D> VisibleSegment_Vert; // 0x310(0x10)
	struct TArray<struct FVector2D> VisibleSegment_Hori; // 0x320(0x10)
	char pad_330[0x8]; // 0x330(0x08)

	void OnRapidBoostActivationChanged(bool bActivated); // Function Solarland.JetFlyTimesControl.OnRapidBoostActivationChanged // (Final|Native|Protected) // @ game+0x200f690
	void OnJetTimesChanged(int32_t NewTimes); // Function Solarland.JetFlyTimesControl.OnJetTimesChanged // (Final|Native|Protected) // @ game+0x200f4e0
	void OnJetModuleLvChanged(int32_t NewLv); // Function Solarland.JetFlyTimesControl.OnJetModuleLvChanged // (Final|Native|Protected) // @ game+0x200f450
	void OnJetMaxTimesChanged(int32_t NewTimes); // Function Solarland.JetFlyTimesControl.OnJetMaxTimesChanged // (Final|Native|Protected) // @ game+0x200f210
	void OnEMPEffected(struct ASolarCharacter* EffectedCharacter, bool bEMPActive); // Function Solarland.JetFlyTimesControl.OnEMPEffected // (Final|Native|Protected) // @ game+0x200f070
	void OnChargingProgressSet(float InValue, float InPercent); // Function Solarland.JetFlyTimesControl.OnChargingProgressSet // (Final|Native|Protected) // @ game+0x200ee00
	void OnChargeStateChanged(bool bStart); // Function Solarland.JetFlyTimesControl.OnChargeStateChanged // (Final|Native|Protected) // @ game+0x200ed70
	void InitializeWithCharacter(struct ASolarCharacter* OwningCharacter); // Function Solarland.JetFlyTimesControl.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x200e9b0
};

// Class Solarland.JetPackConfig
// Size: 0xb0 (Inherited: 0x30)
struct UJetPackConfig : UDataAsset {
	float CurrentSpeedResidueHorizontal; // 0x30(0x04)
	float CurrentSpeedResidueVertical; // 0x34(0x04)
	float AltitudeLimitation; // 0x38(0x04)
	float DashHeightForLimitedAltitude; // 0x3c(0x04)
	float SlantDashInputThreshold; // 0x40(0x04)
	float VerticalDashTime; // 0x44(0x04)
	float VerticalDashHeight; // 0x48(0x04)
	float VerticalDashAngle; // 0x4c(0x04)
	float VerticalDashMaxHorizontalEndSpeed; // 0x50(0x04)
	float VerticalDashBreakableTime; // 0x54(0x04)
	float VerticalDashCameraFadeOutTime; // 0x58(0x04)
	float SlantDashTime; // 0x5c(0x04)
	float SlantDashHeight; // 0x60(0x04)
	float SlantDashAngle; // 0x64(0x04)
	float SlantDashMaxHorizontalEndSpeed; // 0x68(0x04)
	float SlantDashBreakableTime; // 0x6c(0x04)
	float SlantDashCameraFadeOutTime; // 0x70(0x04)
	float HorizontalDashTime; // 0x74(0x04)
	float HorizontalDashDistance; // 0x78(0x04)
	float HorizontalDashAngle; // 0x7c(0x04)
	float HorizontalDashEndSpeed; // 0x80(0x04)
	float HorizontalDashBreakableTime; // 0x84(0x04)
	float HorizontalDashCameraFadeOutTime; // 0x88(0x04)
	float UnderWaterHorizontalDashTime; // 0x8c(0x04)
	float UnderWaterHorizontalDashDistance; // 0x90(0x04)
	float UnderWaterHorizontalDashBreakableTime; // 0x94(0x04)
	float UnderWaterHorizontalDashCameraFadeOutTime; // 0x98(0x04)
	struct FVehicleEjectParams DefaultVehicleEjectParams; // 0x9c(0x10)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Solarland.SolarMovablePad
// Size: 0x4d8 (Inherited: 0x260)
struct USolarMovablePad : UUserWidget {
	enum class EInputEventHandleType InputEventHandle; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)
	struct FMulticastInlineDelegate OnPressed; // 0x268(0x10)
	struct FMulticastInlineDelegate OnReleased; // 0x278(0x10)
	struct FMulticastInlineDelegate OnMoving; // 0x288(0x10)
	enum class EMovablePadLimitationFlag LimitationFlag; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct UBorder* PadBase; // 0x2a0(0x08)
	struct UNamedSlot* MovableWidget; // 0x2a8(0x08)
	bool bWidgetStationary; // 0x2b0(0x01)
	char pad_2B1[0x3]; // 0x2b1(0x03)
	struct FMargin InnerPadding; // 0x2b4(0x10)
	char pad_2C4[0x4]; // 0x2c4(0x04)
	struct FSlateBrush NormalBackground; // 0x2c8(0x98)
	struct FSlateBrush PressedBackground; // 0x360(0x98)
	struct FKey PointerAction; // 0x3f8(0x18)
	struct FKey MoveXAxis; // 0x410(0x18)
	struct FKey MoveYAxis; // 0x428(0x18)
	bool bOnlySimulateCapturedMove; // 0x440(0x01)
	bool bUsingTouchPriority; // 0x441(0x01)
	enum class ETouchMovePriority TouchMovePriority; // 0x442(0x01)
	char pad_443[0x95]; // 0x443(0x95)

	void ForceReleasePad(); // Function Solarland.SolarMovablePad.ForceReleasePad // (Final|Native|Public|BlueprintCallable) // @ game+0x2150cf0
};

// Class Solarland.JetPad
// Size: 0x518 (Inherited: 0x4d8)
struct UJetPad : USolarMovablePad {
	char pad_4D8[0x10]; // 0x4d8(0x10)
	struct UBorder* PadBaseUnder; // 0x4e8(0x08)
	struct UPanelWidget* RapidBoostEffects; // 0x4f0(0x08)
	struct UImage* RapidBoostEffect01; // 0x4f8(0x08)
	struct UImage* RapidBoostEffect02; // 0x500(0x08)
	struct UWidgetAnimation* Anim_RapidBoost_Loop; // 0x508(0x08)
	bool bJetVertical; // 0x510(0x01)
	char pad_511[0x7]; // 0x511(0x07)

	void OnRapidBoostActivationChanged(bool bActivated); // Function Solarland.JetPad.OnRapidBoostActivationChanged // (Final|Native|Protected) // @ game+0x200f720
	void OnJetModuleLevelChanged(int32_t NewLevel); // Function Solarland.JetPad.OnJetModuleLevelChanged // (Final|Native|Protected) // @ game+0x200f2a0
	void InitializeWithCharacter(struct ASolarCharacter* OwningCharacter); // Function Solarland.JetPad.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x200ea40
};

// Class Solarland.JobEffectDetailItemWidget
// Size: 0x368 (Inherited: 0x348)
struct UJobEffectDetailItemWidget : USolarUserWidget {
	struct UImage* Image_Icon; // 0x348(0x08)
	struct USolarRichTextBlock* Text_Info; // 0x350(0x08)
	struct USolarTextBlock* Text_Category; // 0x358(0x08)
	struct USolarTextBlock* Text_Name; // 0x360(0x08)

	void RefreshColor(struct FBattleUpgradeEffectCategoryColorSet& ColorSet); // Function Solarland.JobEffectDetailItemWidget.RefreshColor // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarPanelWidget
// Size: 0x398 (Inherited: 0x348)
struct USolarPanelWidget : USolarUserWidget {
	struct UCanvasPanel* CanvasPanel_Bg; // 0x348(0x08)
	struct UCanvasPanel* CanvasPanel_Content; // 0x350(0x08)
	struct FDelegate AnimationEnterStartedEvent; // 0x358(0x10)
	struct FDelegate AnimationEnterFinishedEvent; // 0x368(0x10)
	struct FDelegate AnimationExitStartedEvent; // 0x378(0x10)
	struct FDelegate AnimationExitFinishedEvent; // 0x388(0x10)

	void OnAnimationExitStarted(); // Function Solarland.SolarPanelWidget.OnAnimationExitStarted // (Final|Native|Protected) // @ game+0x21571c0
	void OnAnimationExitFinished(); // Function Solarland.SolarPanelWidget.OnAnimationExitFinished // (Final|Native|Protected) // @ game+0x21571e0
	void OnAnimationEnterStarted(); // Function Solarland.SolarPanelWidget.OnAnimationEnterStarted // (Final|Native|Protected) // @ game+0x21571c0
	void OnAnimationEnterFinished(); // Function Solarland.SolarPanelWidget.OnAnimationEnterFinished // (Final|Native|Protected) // @ game+0x21571a0
};

// Class Solarland.JobEffectDetailPanel
// Size: 0x398 (Inherited: 0x398)
struct UJobEffectDetailPanel : USolarPanelWidget {

	struct TArray<struct UJobEffectDetailItemWidget*> GetItemWidgets(); // Function Solarland.JobEffectDetailPanel.GetItemWidgets // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.JobEffectItemWidget
// Size: 0x358 (Inherited: 0x348)
struct UJobEffectItemWidget : USolarUserWidget {
	struct USolarTextBlock* Text_Number; // 0x348(0x08)
	struct UImage* Img_Icon; // 0x350(0x08)

	void RefreshColor(struct FBattleUpgradeEffectCategoryColorSet& ColorSet); // Function Solarland.JobEffectItemWidget.RefreshColor // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void PlayRefreshAnimation(); // Function Solarland.JobEffectItemWidget.PlayRefreshAnimation // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.JobEffectSelectOptionWidget
// Size: 0x380 (Inherited: 0x348)
struct UJobEffectSelectOptionWidget : USolarUserWidget {
	struct UImage* Image_Icon; // 0x348(0x08)
	struct USolarRichTextBlock* Text_Info; // 0x350(0x08)
	struct USolarTextBlock* Text_Category; // 0x358(0x08)
	struct UWidgetAnimation* Anim_Select; // 0x360(0x08)
	struct UButton* Button_Select; // 0x368(0x08)
	struct FDelegate OnSelected; // 0x370(0x10)

	void RefreshColor(struct FBattleUpgradeEffectCategoryColorSet& ColorSet); // Function Solarland.JobEffectSelectOptionWidget.RefreshColor // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnSelected__DelegateSignature(struct UJobEffectSelectOptionWidget* Widget); // DelegateFunction Solarland.JobEffectSelectOptionWidget.OnSelected__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	void OnSelectButtonClicked(); // Function Solarland.JobEffectSelectOptionWidget.OnSelectButtonClicked // (Final|Native|Protected) // @ game+0x200f7f0
	void OnSelectAnimFinished(); // Function Solarland.JobEffectSelectOptionWidget.OnSelectAnimFinished // (Final|Native|Protected) // @ game+0x200f7d0
};

// Class Solarland.JobEffectSelectPanel
// Size: 0x378 (Inherited: 0x348)
struct UJobEffectSelectPanel : USolarUserWidget {
	struct UWidgetAnimation* Anim_Enter; // 0x348(0x08)
	struct UWidgetAnimation* Anim_Quit; // 0x350(0x08)
	struct TArray<struct UJobEffectSelectOptionWidget*> OptionWidgets; // 0x358(0x10)
	char pad_368[0x10]; // 0x368(0x10)

	void OnSelectingJobEffectBegin(struct ASolarCharacter* Target, int32_t Level, struct TArray<int32_t>& EffectIDArray); // Function Solarland.JobEffectSelectPanel.OnSelectingJobEffectBegin // (Final|Native|Protected|HasOutParms) // @ game+0x200f810
	void OnOptionWidgetClicked(struct UJobEffectSelectOptionWidget* OptionWidget); // Function Solarland.JobEffectSelectPanel.OnOptionWidgetClicked // (Final|Native|Protected) // @ game+0x200f570
	void OnFadeOutFinished(); // Function Solarland.JobEffectSelectPanel.OnFadeOutFinished // (Final|Native|Protected) // @ game+0x1fb1b30
};

// Class Solarland.KeyMappingFileMgr
// Size: 0xa8 (Inherited: 0x28)
struct UKeyMappingFileMgr : UObject {
	char pad_28[0x80]; // 0x28(0x80)
};

// Class Solarland.KeyMappingManager
// Size: 0x270 (Inherited: 0x28)
struct UKeyMappingManager : UObject {
	char pad_28[0xf8]; // 0x28(0xf8)
	struct FMulticastInlineDelegate OnKeyMappingUpdate; // 0x120(0x10)
	struct FMulticastInlineDelegate OnKeyMappingConfirm; // 0x130(0x10)
	struct FMulticastInlineDelegate OnKeyboardUpdate; // 0x140(0x10)
	char pad_150[0x10]; // 0x150(0x10)
	struct TMap<struct FString, struct FString> OccupiedKeyMap; // 0x160(0x50)
	char pad_1B0[0xb0]; // 0x1b0(0xb0)
	struct UKeyMappingFileMgr* KeyMappingFileMgr; // 0x260(0x08)
	char pad_268[0x8]; // 0x268(0x08)

	void SwitchKeyMappingPlanIndex(int32_t PlanIndex); // Function Solarland.KeyMappingManager.SwitchKeyMappingPlanIndex // (Final|Native|Public) // @ game+0x200fc10
	void SwitchKeyMapping(struct FString ActionName, int32_t SettingIndex, bool Enable, bool Force); // Function Solarland.KeyMappingManager.SwitchKeyMapping // (Final|Native|Public) // @ game+0x200fa90
	void ResetKeyMapping(); // Function Solarland.KeyMappingManager.ResetKeyMapping // (Final|Native|Public) // @ game+0x200fa70
	bool IsComboKey(struct FString KeyName); // Function Solarland.KeyMappingManager.IsComboKey // (Final|Native|Public|BlueprintCallable) // @ game+0x200ead0
	void ImportKeyMappingSetting(); // Function Solarland.KeyMappingManager.ImportKeyMappingSetting // (Final|Native|Public) // @ game+0x200e7e0
	bool HasKeyModified(); // Function Solarland.KeyMappingManager.HasKeyModified // (Final|Native|Public|BlueprintCallable) // @ game+0x200e7b0
	struct TArray<struct FString> GetAllActionNames(int32_t PlanIndex); // Function Solarland.KeyMappingManager.GetAllActionNames // (Final|Native|Public|BlueprintCallable) // @ game+0x200e6d0
	struct TArray<struct FString> GetActionKeyMapping(struct FString ActionName, int32_t PlanIndex, int32_t SettingIndex); // Function Solarland.KeyMappingManager.GetActionKeyMapping // (Final|Native|Public|BlueprintCallable) // @ game+0x200e550
	void ApplyResult(); // Function Solarland.KeyMappingManager.ApplyResult // (Final|Native|Public) // @ game+0x200e310
};

// Class Solarland.KillInfoManager
// Size: 0x4c8 (Inherited: 0x228)
struct AKillInfoManager : AGameManagerBase {
	struct TArray<enum class EKillNoticeType> KillEffectsOrder; // 0x228(0x10)
	struct TArray<enum class EKillNoticeType> GlobalInfoList; // 0x238(0x10)
	char pad_248[0x150]; // 0x248(0x150)
	struct FString KillLeaderID; // 0x398(0x10)
	int32_t KillLeaderKillNum; // 0x3a8(0x04)
	char pad_3AC[0x4]; // 0x3ac(0x04)
	struct FString AnnihilatorID; // 0x3b0(0x10)
	char pad_3C0[0x8]; // 0x3c0(0x08)
	struct FString KillLeaderChangeVoiceName; // 0x3c8(0x10)
	struct FString KillLeaderShutDownVoiceName; // 0x3d8(0x10)
	struct FString BeKillLeaderVoiceName; // 0x3e8(0x10)
	struct FString ShutDownKillLeaderVoiceName; // 0x3f8(0x10)
	struct TMap<int32_t, struct FString> KillTotalVoiceMap; // 0x408(0x50)
	struct FString RevengeVoiceName; // 0x458(0x10)
	struct FString KillDownVoiceName; // 0x468(0x10)
	struct FString ClearTeamVoiceName; // 0x478(0x10)
	struct FString ShutDownVoiceName; // 0x488(0x10)
	struct FString KillDefenderVoiceName; // 0x498(0x10)
	struct UCustomNoticeImageTable* NoticeImageConfig; // 0x4a8(0x08)
	char pad_4B0[0x18]; // 0x4b0(0x18)

	bool PlayKillInfoVoice(int32_t InNoticeID, int32_t InKillNum, struct FDelegate& InDelegate); // Function Solarland.KillInfoManager.PlayKillInfoVoice // (Final|Native|Protected|HasOutParms) // @ game+0x200f940
	void OnRep_KillLeaderID(); // Function Solarland.KillInfoManager.OnRep_KillLeaderID // (Final|Native|Public) // @ game+0x200f7b0
	void ClientKillInfoNotify(struct ASolarPlayerState* InKiller, struct ASolarPlayerState* InVictim, int32_t KillExtraInfoHashValue); // Function Solarland.KillInfoManager.ClientKillInfoNotify // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x200e440
	void ClientKillEffectNotify(struct ASolarPlayerState* InKiller, struct ASolarPlayerState* InVictim, int32_t KillEffectExtraInfoHashValue); // Function Solarland.KillInfoManager.ClientKillEffectNotify // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x200e330
};

// Class Solarland.ListEntry_Goods
// Size: 0x540 (Inherited: 0x348)
struct UListEntry_Goods : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct FMulticastInlineDelegate OnItemPurchaseRequested; // 0x350(0x10)
	struct FDelegate RequestEnergyGetter; // 0x360(0x10)
	struct FDelegate RequestItemRecommendation; // 0x370(0x10)
	struct UWidgetSwitcher* WidgetSwitcher_State; // 0x380(0x08)
	struct UCanvasPanel* State_Normal; // 0x388(0x08)
	struct UCanvasPanel* Panel_Recommend; // 0x390(0x08)
	struct UImage* Img_Item1_BG; // 0x398(0x08)
	struct UImage* Img_Item1; // 0x3a0(0x08)
	struct USolarTextBlock* Txt_ItemCount; // 0x3a8(0x08)
	struct USolarTextBlock* Txt_ItemName; // 0x3b0(0x08)
	struct USolarTextBlock* Txt_Introduce; // 0x3b8(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Buy; // 0x3c0(0x08)
	struct USolarButton* Btn_Buy; // 0x3c8(0x08)
	struct UOverlay* Overlay_Discount; // 0x3d0(0x08)
	struct UTextBlock* Txt_ElectricityNum_Undiscounted; // 0x3d8(0x08)
	struct UTextBlock* Txt_ElectricityNeeded; // 0x3e0(0x08)
	struct USolarButton* Btn_CantBuy; // 0x3e8(0x08)
	struct UOverlay* Overlay_Discount_CantBuy; // 0x3f0(0x08)
	struct UTextBlock* Txt_ElectricityNum_Undiscounted_CantBuy; // 0x3f8(0x08)
	struct UTextBlock* Txt_ElectricityNeeded_CantBuy; // 0x400(0x08)
	struct UCanvasPanel* Panel_BuySucceed; // 0x408(0x08)
	struct UImage* Image_BG2_3; // 0x410(0x08)
	struct USolarTextBlock* Txt_BuySucceed; // 0x418(0x08)
	struct UCanvasPanel* Panel_NotAvailable; // 0x420(0x08)
	struct UImage* Image_BG2; // 0x428(0x08)
	struct USolarTextBlock* Txt_NotAvailable; // 0x430(0x08)
	struct UCanvasPanel* Panel_Refresh; // 0x438(0x08)
	struct UCanvasPanel* State_CD; // 0x440(0x08)
	struct UProgressBar* Progress_CD; // 0x448(0x08)
	struct USolarTextBlock* Txt_InPrepare; // 0x450(0x08)
	struct USolarTextBlock* Txt_CD; // 0x458(0x08)
	struct UWidgetAnimation* Succeed_Anim; // 0x460(0x08)
	struct UWidgetAnimation* Refresh_Anim; // 0x468(0x08)
	struct UWidgetAnimation* Recommend_Anim; // 0x470(0x08)
	char pad_478[0x98]; // 0x478(0x98)
	struct FString AkNameGoodsRefresh; // 0x510(0x10)
	struct FString AkNameGoodsBuy; // 0x520(0x10)
	struct FString AkNameGoodsBuyFailed; // 0x530(0x10)

	void UpdateTexts(struct FString Name, struct FString Info, int32_t Num, int32_t Price, int32_t UndiscountedPrice); // Function Solarland.ListEntry_Goods.UpdateTexts // (Final|Native|Protected) // @ game+0x2014040
	void UpdateIfNotAvailable(); // Function Solarland.ListEntry_Goods.UpdateIfNotAvailable // (Final|Native|Protected) // @ game+0x2014020
	void UpdateCDText(); // Function Solarland.ListEntry_Goods.UpdateCDText // (Final|Native|Protected) // @ game+0x2013f70
	void UpdateButtonBuy(); // Function Solarland.ListEntry_Goods.UpdateButtonBuy // (Final|Native|Protected) // @ game+0x2013f50
	void ShowItemRefreshEffect(); // Function Solarland.ListEntry_Goods.ShowItemRefreshEffect // (Final|Native|Protected) // @ game+0x2013c10
	void SetIsRecommendState(bool InIsRecommend); // Function Solarland.ListEntry_Goods.SetIsRecommendState // (Final|Native|Public) // @ game+0x20136f0
	bool RequestItemRecommendation__DelegateSignature(int32_t ItemID); // DelegateFunction Solarland.ListEntry_Goods.RequestItemRecommendation__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	float RequestEnergyGetter__DelegateSignature(); // DelegateFunction Solarland.ListEntry_Goods.RequestEnergyGetter__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	void OnSucceedAnimFinish(); // Function Solarland.ListEntry_Goods.OnSucceedAnimFinish // (Final|Native|Protected) // @ game+0x2013320
	void OnPurchaseSuccess(int32_t InProductID, struct ASolarCharacter* InCharacter); // Function Solarland.ListEntry_Goods.OnPurchaseSuccess // (Final|Native|Protected) // @ game+0x2013250
	void OnListItemObjectSetInternal(struct UObject* InObject); // Function Solarland.ListEntry_Goods.OnListItemObjectSetInternal // (Final|Native|Public) // @ game+0x20131c0
	void OnItemRefreshEffectFinish(); // Function Solarland.ListEntry_Goods.OnItemRefreshEffectFinish // (Final|Native|Protected) // @ game+0x20131a0
	void OnItemRefreshAnimFinish(); // Function Solarland.ListEntry_Goods.OnItemRefreshAnimFinish // (Final|Native|Protected) // @ game+0x2013180
	void OnItemRefresh(struct ASolarElectricShop* InElectricShop); // Function Solarland.ListEntry_Goods.OnItemRefresh // (Final|Native|Protected) // @ game+0x20130f0
	void OnItemPurchaseRequested__DelegateSignature(int32_t ProductID, bool bRecommend); // DelegateFunction Solarland.ListEntry_Goods.OnItemPurchaseRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnItemCDRefresh(struct ASolarElectricShop* InElectricShop); // Function Solarland.ListEntry_Goods.OnItemCDRefresh // (Final|Native|Protected) // @ game+0x2013060
	void OnClickBtnCantBuy(); // Function Solarland.ListEntry_Goods.OnClickBtnCantBuy // (Final|Native|Protected) // @ game+0x2013040
	void OnClickBtnBuy(); // Function Solarland.ListEntry_Goods.OnClickBtnBuy // (Final|Native|Protected) // @ game+0x2013020
	void HidePurchaseEffect(); // Function Solarland.ListEntry_Goods.HidePurchaseEffect // (Final|Native|Protected) // @ game+0x2012ef0
	float GetRemainningCD(); // Function Solarland.ListEntry_Goods.GetRemainningCD // (Final|Native|Public) // @ game+0x2012ec0
	int32_t GetItemID(); // Function Solarland.ListEntry_Goods.GetItemID // (Final|Native|Public) // @ game+0x2012e90
	float GetDiscountedPrice(float Price); // Function Solarland.ListEntry_Goods.GetDiscountedPrice // (Final|Native|Protected) // @ game+0x2012df0
	void CheckToShowItemRefreshEffect(); // Function Solarland.ListEntry_Goods.CheckToShowItemRefreshEffect // (Final|Native|Protected) // @ game+0x2012d50
	void CheckStartCD(bool InCheckBuyer); // Function Solarland.ListEntry_Goods.CheckStartCD // (Final|Native|Protected) // @ game+0x2012cc0
	void CheckRecommendStateImmediately(); // Function Solarland.ListEntry_Goods.CheckRecommendStateImmediately // (Final|Native|Public) // @ game+0x2012ca0
	void CheckEnergyAvaliableImmediately(); // Function Solarland.ListEntry_Goods.CheckEnergyAvaliableImmediately // (Final|Native|Public) // @ game+0x2012c80
	void CheckEnergyAvaliable(float CurrentValue); // Function Solarland.ListEntry_Goods.CheckEnergyAvaliable // (Final|Native|Public) // @ game+0x2012c00
	void CachedNewData(struct FElectricShopItem& InNewItemData); // Function Solarland.ListEntry_Goods.CachedNewData // (Final|Native|Protected|HasOutParms) // @ game+0x2012b60
	void BindDelegates(); // Function Solarland.ListEntry_Goods.BindDelegates // (Final|Native|Protected) // @ game+0x2012b40
	void AsyncLoadTextutes(int32_t InQuality, struct FString Icon, enum class EItemType InType); // Function Solarland.ListEntry_Goods.AsyncLoadTextutes // (Final|Native|Protected) // @ game+0x20129e0
};

// Class Solarland.LoadingAnim
// Size: 0x260 (Inherited: 0x260)
struct ULoadingAnim : UUserWidget {

	void StopLoadingAnimation(); // Function Solarland.LoadingAnim.StopLoadingAnimation // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void StartLoadingAnimation(); // Function Solarland.LoadingAnim.StartLoadingAnimation // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.LoadingBgDataAsset
// Size: 0x40 (Inherited: 0x30)
struct ULoadingBgDataAsset : UDataAsset {
	struct TArray<struct FULoadingDataEntry> LoadingDataConfig; // 0x30(0x10)
};

// Class Solarland.SolarLoadingSetting
// Size: 0x60 (Inherited: 0x38)
struct USolarLoadingSetting : UDeveloperSettings {
	struct TArray<float> DataTraceTimeTrigger; // 0x38(0x10)
	bool bEnableLoadingReport; // 0x48(0x01)
	bool bEnableShowLoadingTasks; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
	struct FString ReportMapMustHaveStr; // 0x50(0x10)
};

// Class Solarland.LoadingUIBase
// Size: 0x4a8 (Inherited: 0x260)
struct ULoadingUIBase : ULoadingWidgetBase {
	struct UImage* Img_Bg; // 0x260(0x08)
	struct UProgressBar* LoadProgress; // 0x268(0x08)
	struct USolarTextBlock* Txt_Percent_Num; // 0x270(0x08)
	struct USolarTextBlock* Txt_Tips; // 0x278(0x08)
	struct USolarTextBlock* Txt_Tips_Title; // 0x280(0x08)
	struct USolarTextBlock* Txt_Tips_Left; // 0x288(0x08)
	struct USolarTextBlock* Txt_Tips_Mid; // 0x290(0x08)
	struct USolarTextBlock* Txt_Tips_Right; // 0x298(0x08)
	struct TMap<struct FString, struct UTexture2D*> BGImgMap; // 0x2a0(0x50)
	struct USolarTextBlock* Txt_Task_2; // 0x2f0(0x08)
	struct USolarTextBlock* Txt_Task_3; // 0x2f8(0x08)
	struct USolarTextBlock* Txt_Task_4; // 0x300(0x08)
	struct USolarTextBlock* Txt_Task_5; // 0x308(0x08)
	struct USolarTextBlock* Txt_Task_6; // 0x310(0x08)
	struct USolarTextBlock* Txt_Task_7; // 0x318(0x08)
	struct USolarTextBlock* Txt_Task_8; // 0x320(0x08)
	char pad_328[0x158]; // 0x328(0x158)
	struct TArray<struct FULoadingDataEntry> ShowBgLoadingArray; // 0x480(0x10)
	char pad_490[0x10]; // 0x490(0x10)
	float FakeProgress; // 0x4a0(0x04)
	char pad_4A4[0x4]; // 0x4a4(0x04)

	void StartDisplayLoading(struct TArray<struct FULoadingDataEntry>& InLoadingBgArray, float InShowBgTime, bool bInOrder, float InShowTipsTime); // Function Solarland.LoadingUIBase.StartDisplayLoading // (Final|Native|Public|HasOutParms) // @ game+0x2013c30
	void SetTips(struct FText& InTips); // Function Solarland.LoadingUIBase.SetTips // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2013a30
	void SetLoadingProgress(float InPercent); // Function Solarland.LoadingUIBase.SetLoadingProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x2013780
	void SetFakeProgress(float NewProgress); // Function Solarland.LoadingUIBase.SetFakeProgress // (Final|Native|Protected|BlueprintCallable) // @ game+0x2013670
	void SetBGImgFromPath(struct FSoftObjectPath& Path); // Function Solarland.LoadingUIBase.SetBGImgFromPath // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2013470
	void SetBGImg(struct FString ImgName); // Function Solarland.LoadingUIBase.SetBGImg // (Final|Native|Public|BlueprintCallable) // @ game+0x20133d0
	void OnWidgetReleasedAsLoadingScreen(struct UObject* Outer); // Function Solarland.LoadingUIBase.OnWidgetReleasedAsLoadingScreen // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnWidgetCreatedAsLoadingScreen(struct UObject* Outer); // Function Solarland.LoadingUIBase.OnWidgetCreatedAsLoadingScreen // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnLevelPreLoad(struct FString MapPackageName); // Function Solarland.LoadingUIBase.OnLevelPreLoad // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnAsyncLoadingFlushUpdate(); // Function Solarland.LoadingUIBase.OnAsyncLoadingFlushUpdate // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.MapMarkBase
// Size: 0x388 (Inherited: 0x348)
struct UMapMarkBase : USolarUserWidget {
	struct UMiniMapBase* MapOwner; // 0x348(0x08)
	struct FVector2D MarkIconRealLoc; // 0x350(0x08)
	struct FVector2D MarkIconAlignment; // 0x358(0x08)
	bool IsOnBigMap; // 0x360(0x01)
	enum class EMarkerType MarkerType; // 0x361(0x01)
	bool IsMapObject; // 0x362(0x01)
	bool MoveAble; // 0x363(0x01)
	bool SupportEdge; // 0x364(0x01)
	bool SupportEdgeWithBigMap; // 0x365(0x01)
	char pad_366[0x2]; // 0x366(0x02)
	struct AActor* TargetActorRef; // 0x368(0x08)
	char pad_370[0x18]; // 0x370(0x18)

	void UpdateIconWithActor(struct AActor* InTargetActor); // Function Solarland.MapMarkBase.UpdateIconWithActor // (Final|Native|Public) // @ game+0x2013f90
	void SetUpdateState(bool ShouldUpdateLocation); // Function Solarland.MapMarkBase.SetUpdateState // (Final|Native|Public|BlueprintCallable) // @ game+0x2013b80
	void SetMarkPos(struct FVector& Loc); // Function Solarland.MapMarkBase.SetMarkPos // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2013800
	void SetEdgeSupport(bool IsSupportEdge, bool WithBigMap); // Function Solarland.MapMarkBase.SetEdgeSupport // (Final|Native|Public|BlueprintCallable) // @ game+0x20135a0
	void SetColorOpacityIndex(char InColorOpacityIndex); // Function Solarland.MapMarkBase.SetColorOpacityIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x2013520
	void OnBigMapOpen(); // Function Solarland.MapMarkBase.OnBigMapOpen // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void InitVehicleMarkIcon(int32_t VehicleID); // Function Solarland.MapMarkBase.InitVehicleMarkIcon // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void InitStaticIcon(int32_t MarkID); // Function Solarland.MapMarkBase.InitStaticIcon // (Native|Public|BlueprintCallable) // @ game+0x1f99730
	void InitMarkIcon(int32_t MarkID, struct AActor* InTargetActor, bool InMoveable); // Function Solarland.MapMarkBase.InitMarkIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x2012f10
	void EdgeFix(struct FVector2D Pos); // Function Solarland.MapMarkBase.EdgeFix // (Final|Native|Public|HasDefaults) // @ game+0x2012d70
	void CleanData(); // Function Solarland.MapMarkBase.CleanData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.MapSelectPointCellWidget
// Size: 0x390 (Inherited: 0x348)
struct UMapSelectPointCellWidget : USolarUserWidget {
	bool bCellSelectionState; // 0x348(0x01)
	char pad_349[0x7]; // 0x349(0x07)
	enum class EMapCellSelectionAccess SelectionAccess; // 0x350(0x01)
	char pad_351[0x7]; // 0x351(0x07)
	struct FString CellAddress; // 0x358(0x10)
	char pad_368[0x20]; // 0x368(0x20)
	struct ASolarMapSelectPoint* SelectPointElement; // 0x388(0x08)

	void SetSelectionAccess(enum class EMapCellSelectionAccess InState); // Function Solarland.MapSelectPointCellWidget.SetSelectionAccess // (Final|Native|Public|BlueprintCallable) // @ game+0x20139b0
	void OnSelectionStateChanged(bool InState); // Function Solarland.MapSelectPointCellWidget.OnSelectionStateChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnSelectionAccessChanged(enum class EMapCellSelectionAccess CurrentState); // Function Solarland.MapSelectPointCellWidget.OnSelectionAccessChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.MapSelectPointNoticeMap
// Size: 0x350 (Inherited: 0x348)
struct UMapSelectPointNoticeMap : USolarUserWidget {
	struct ASolarMapSelectPoint* SelectPointElement; // 0x348(0x08)

	void OnTouchPanel(struct FVector2D& InPosition); // Function Solarland.MapSelectPointNoticeMap.OnTouchPanel // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2013340
	void OnInitialMap(int32_t InMinimapID); // Function Solarland.MapSelectPointNoticeMap.OnInitialMap // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnAddNewCell(struct FVector2D& InNewPosition, struct UMapSelectPointCellWidget* InNewCellWidget); // Function Solarland.MapSelectPointNoticeMap.OnAddNewCell // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.MapSelectPointWidget
// Size: 0x348 (Inherited: 0x348)
struct UMapSelectPointWidget : USolarUserWidget {
};

// Class Solarland.MarkIconWidget
// Size: 0x3c0 (Inherited: 0x388)
struct UMarkIconWidget : UMapMarkBase {
	struct FString AtlasPath; // 0x388(0x10)
	struct FString SpriteType; // 0x398(0x10)
	struct UImage* ImageMarker; // 0x3a8(0x08)
	char pad_3B0[0x10]; // 0x3b0(0x10)

	void SetTransparent(float TransparentPercent); // Function Solarland.MarkIconWidget.SetTransparent // (Final|Native|Public|BlueprintCallable) // @ game+0x2013b00
	void SetMarkerType(enum class EMarkerType Type, bool bRefreshSlot, bool bNeedSyncLoadIcon); // Function Solarland.MarkIconWidget.SetMarkerType // (Final|Native|Public|BlueprintCallable) // @ game+0x2013890
};

// Class Solarland.MassInvisibilityEffectController
// Size: 0x5d0 (Inherited: 0x28)
struct UMassInvisibilityEffectController : UActorEffectController {
	struct FMassInvStateTransitionData Transition_EnterPrepare; // 0x28(0x90)
	struct FMassInvStateTransitionData Transition_PrepareToNormal; // 0xb8(0x90)
	struct FMassInvStateTransitionData Transition_NormalToSprint; // 0x148(0x90)
	struct FMassInvStateTransitionData Transition_SprintToNormal; // 0x1d8(0x90)
	struct FMassInvStateTransitionData Transition_AnyToEnd; // 0x268(0x90)
	struct FMassInvMaterialParams OriginalParams; // 0x2f8(0x28)
	struct FMassInvStateMaterialParams TeammateParams; // 0x320(0x78)
	struct FMassInvStateMaterialParams OpponentParams; // 0x398(0x78)
	struct FRuntimeFloatCurve SprintTillingCurve; // 0x410(0x88)
	struct FName OrnamentMatAnimParamName; // 0x498(0x08)
	struct FRuntimeFloatCurve OrnamentMatAnimCurve; // 0x4a0(0x88)
	char pad_528[0xa8]; // 0x528(0xa8)
};

// Class Solarland.MaterialEffectBase
// Size: 0x160 (Inherited: 0x50)
struct UMaterialEffectBase : UActorEffect {
	char pad_50[0x110]; // 0x50(0x110)
};

// Class Solarland.MaterialSimpleEffect
// Size: 0x1c0 (Inherited: 0x160)
struct UMaterialSimpleEffect : UMaterialEffectBase {
	struct FNormalMaterialChange MaterialChange; // 0x160(0x50)
	struct TArray<struct FSoftObjectPath> NoChangeMaterials; // 0x1b0(0x10)
};

// Class Solarland.MaterialVariableEffect
// Size: 0x1d0 (Inherited: 0x1c0)
struct UMaterialVariableEffect : UMaterialSimpleEffect {
	struct TArray<struct FMaterialVariableChange> VariableChanges; // 0x1c0(0x10)
};

// Class Solarland.MemberStateBase
// Size: 0x268 (Inherited: 0x260)
struct UMemberStateBase : UUserWidget {
	char pad_260[0x4]; // 0x260(0x04)
	float MinimalSize; // 0x264(0x04)

	void UpdateWithCurrentMemberIndex(char CurrentIndex); // Function Solarland.MemberStateBase.UpdateWithCurrentMemberIndex // (Native|Event|Protected|BlueprintEvent) // @ game+0x2018e60
	void UnbindMemberEvent(char MemberIndex); // Function Solarland.MemberStateBase.UnbindMemberEvent // (Native|Event|Protected|BlueprintEvent) // @ game+0x20189d0
	void OnMinimalSizeSet(float NewSize); // Function Solarland.MemberStateBase.OnMinimalSizeSet // (Native|Event|Protected|BlueprintEvent) // @ game+0x2017d30
	void ChangeMemberIndex(char NewIndex); // Function Solarland.MemberStateBase.ChangeMemberIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x2017870
	void BindMemberEvent(char MemberIndex); // Function Solarland.MemberStateBase.BindMemberEvent // (Native|Event|Protected|BlueprintEvent) // @ game+0x20177f0
};

// Class Solarland.MemberNational
// Size: 0x278 (Inherited: 0x268)
struct UMemberNational : UMemberStateBase {
	struct UImage* ImgFlagIcon; // 0x268(0x08)
	char pad_270[0x8]; // 0x270(0x08)

	void RefreshFlag(int32_t InFlagID, bool bUsingClan); // Function Solarland.MemberNational.RefreshFlag // (Final|Native|Protected) // @ game+0x2018230
	void OnPlayerFlagDisplayOptionChanged(bool bDisplay); // Function Solarland.MemberNational.OnPlayerFlagDisplayOptionChanged // (Final|Native|Protected) // @ game+0x2017dc0
};

// Class Solarland.MicroPhoneOperationBase
// Size: 0x348 (Inherited: 0x348)
struct UMicroPhoneOperationBase : USolarUserWidget {

	void Init(struct UUserWidget* Owner); // Function Solarland.MicroPhoneOperationBase.Init // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void CloseSpeakOperator(); // Function Solarland.MicroPhoneOperationBase.CloseSpeakOperator // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void CloseMicOperator(); // Function Solarland.MicroPhoneOperationBase.CloseMicOperator // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.MiniMapBase
// Size: 0x3a0 (Inherited: 0x348)
struct UMiniMapBase : USolarUserWidget {
	int32_t MaxPool; // 0x348(0x04)
	char pad_34C[0x4]; // 0x34c(0x04)
	struct TMap<struct FString, struct FMapMarkElemArray> MapMarkPool; // 0x350(0x50)

	void RemoveMarkIcon(struct UMapMarkBase* InMapMark); // Function Solarland.MiniMapBase.RemoveMarkIcon // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RemoveDotLineOnMap(int32_t DotLineID); // Function Solarland.MiniMapBase.RemoveDotLineOnMap // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RemoveAllMapMarks(); // Function Solarland.MiniMapBase.RemoveAllMapMarks // (Final|Native|Public|BlueprintCallable) // @ game+0x2018320
	bool RecycleMapMark(struct FString MapMarkName, struct UMapMarkBase* MapMarkToRecycle); // Function Solarland.MiniMapBase.RecycleMapMark // (Final|Native|Public|BlueprintCallable) // @ game+0x2018140
	void MapScaleFormat(struct UMapMarkBase* MapMark); // Function Solarland.MiniMapBase.MapScaleFormat // (Native|Public|BlueprintCallable) // @ game+0x2017bd0
	struct UMapMarkBase* InitMarkIconOnMapFrame(struct UMapMarkBase* InMapMarkClass, struct FVector2D& Pivot, int32_t ZOrder); // Function Solarland.MiniMapBase.InitMarkIconOnMapFrame // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
	struct UMapMarkBase* InitMarkIcon(struct UMapMarkBase* InMapMarkClass, struct FVector2D& InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int32_t ZOrder); // Function Solarland.MiniMapBase.InitMarkIcon // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
	void InitMapMarkPool(); // Function Solarland.MiniMapBase.InitMapMarkPool // (Final|Native|Public|BlueprintCallable) // @ game+0x2017a60
	struct UMapMarkBase* GetFreeMapMark(struct FString MapMarkName); // Function Solarland.MiniMapBase.GetFreeMapMark // (Final|Native|Public|BlueprintCallable) // @ game+0x2017920
	struct UMapMarkBase* CreateMapMark(struct FString MapMarkName); // Function Solarland.MiniMapBase.CreateMapMark // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t AddDotLineOnMap(struct AActor* StartPointActor, struct AActor* EndPointActor, struct FLinearColor DotLineColor); // Function Solarland.MiniMapBase.AddDotLineOnMap // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.MiniMapBGWidget
// Size: 0x350 (Inherited: 0x348)
struct UMiniMapBGWidget : USolarUserWidget {
	struct USolarImage* Img_Map; // 0x348(0x08)
};

// Class Solarland.MiniMapWidget
// Size: 0x6f8 (Inherited: 0x3a0)
struct UMiniMapWidget : UMiniMapBase {
	char pad_3A0[0x14]; // 0x3a0(0x14)
	struct FMiniMapData MiniMapData; // 0x3b4(0x18)
	bool AutoOffset; // 0x3cc(0x01)
	bool OnCar; // 0x3cd(0x01)
	bool WithIconScale; // 0x3ce(0x01)
	char pad_3CF[0x1]; // 0x3cf(0x01)
	float AspectRatio; // 0x3d0(0x04)
	enum class EMapState CurrentState; // 0x3d4(0x01)
	char pad_3D5[0x3]; // 0x3d5(0x03)
	struct FVector2D SelfNavSlotSize; // 0x3d8(0x08)
	struct TMap<int32_t, struct UPlayerNavWidget*> PlayerNavMap; // 0x3e0(0x50)
	struct USizeBox* MapFOVSizeBox; // 0x430(0x08)
	struct UCanvasPanel* MapOffset; // 0x438(0x08)
	struct USolarImage* SolarImageMap; // 0x440(0x08)
	struct UCanvasPanel* ImageFrameLayer; // 0x448(0x08)
	struct UCanvasPanel* MarkerLayer; // 0x450(0x08)
	struct UScaleBox* MapScale; // 0x458(0x08)
	struct UCanvasPanel* RenderTargetCanvas; // 0x460(0x08)
	struct USolarImage* Img_EMP; // 0x468(0x08)
	struct UMeshRectangleWidget* IconMeshRectangleWidget; // 0x470(0x08)
	struct UMeshRectangleWidget* AnimIconMeshWidget; // 0x478(0x08)
	struct FConfigMiniMapMeshWidgetData MiniMapMeshWidgetConfigData; // 0x480(0x18)
	struct UPlayerNavWidget* SelfNav; // 0x498(0x08)
	struct FVector2D CurrentMapOffset; // 0x4a0(0x08)
	struct FVector2D MapIconScale; // 0x4a8(0x08)
	struct USolarMapManager* MapMgr; // 0x4b0(0x08)
	struct UMiniMapBGWidget* MapImageWidget; // 0x4b8(0x08)
	bool bBelongToBigMap; // 0x4c0(0x01)
	char pad_4C1[0x3]; // 0x4c1(0x03)
	float ClampMarkTickRate; // 0x4c4(0x04)
	struct TMap<enum class EAirdropStatus, struct FAirdropMeshWidgetData> AirdropMeshWidgetDataMap; // 0x4c8(0x50)
	float AdjustMapRatio; // 0x518(0x04)
	float AdjustWorldDis; // 0x51c(0x04)
	float AirdropAnimOutsideScale; // 0x520(0x04)
	float AirdropClearTime; // 0x524(0x04)
	char pad_528[0x4]; // 0x528(0x04)
	struct FConfigMiniMapMeshWidgetData ReviveMarkNormalParms; // 0x52c(0x18)
	struct FConfigMiniMapMeshWidgetData ReviveMarkAnimParms; // 0x544(0x18)
	float ReviveMarkAnimTime; // 0x55c(0x04)
	float IconSizeFormatInterval; // 0x560(0x04)
	char pad_564[0x10]; // 0x564(0x10)
	bool bUpdateSelfNav; // 0x574(0x01)
	char pad_575[0x53]; // 0x575(0x53)
	struct UCurveFloat* CacheFOVScaleCurve; // 0x5c8(0x08)
	char pad_5D0[0x128]; // 0x5d0(0x128)

	void VehicleClear(bool IsOwner); // Function Solarland.MiniMapWidget.VehicleClear // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UpdateVehicleModeMapFOV(); // Function Solarland.MiniMapWidget.UpdateVehicleModeMapFOV // (Final|Native|Protected) // @ game+0x2018e40
	void UpdatePoisonEffect(float PosX, float PosY, float Radius); // Function Solarland.MiniMapWidget.UpdatePoisonEffect // (Final|Native|Protected|BlueprintCallable) // @ game+0x2018d20
	void UpdateMeshWidgetMarkSlotSize(struct FString MarkKey, struct FVector2D& InMarkSlotSize); // Function Solarland.MiniMapWidget.UpdateMeshWidgetMarkSlotSize // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2018c30
	void UpdateMeshWidgetMarkColorOpacityIndex(struct FString MarkKey, int32_t InColorOpacityIndex); // Function Solarland.MiniMapWidget.UpdateMeshWidgetMarkColorOpacityIndex // (Final|Native|Protected|BlueprintCallable) // @ game+0x2018b50
	void UpdateMeshWidgetIconTexId(struct FString MarkKey, int32_t InIconTexId); // Function Solarland.MiniMapWidget.UpdateMeshWidgetIconTexId // (Final|Native|Protected|BlueprintCallable) // @ game+0x2018a70
	void UpdateEmp(); // Function Solarland.MiniMapWidget.UpdateEmp // (Final|Native|Protected) // @ game+0x2018a50
	void StopReviveTeammateAnim(struct FString InKey); // Function Solarland.MiniMapWidget.StopReviveTeammateAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x2018930
	struct FString SpawnMeshWidgetMapMarkInfo(enum class EMarkerType InMarkType, struct FVector2D& InMarkPos, struct FString InMarkName, int32_t InMarkIndex); // Function Solarland.MiniMapWidget.SpawnMeshWidgetMapMarkInfo // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2018750
	void SetMapFOVBySpeed(float InSpeed); // Function Solarland.MiniMapWidget.SetMapFOVBySpeed // (Final|Native|Protected) // @ game+0x20186d0
	void SetMapFOVAutoOffset(float InNewFOV); // Function Solarland.MiniMapWidget.SetMapFOVAutoOffset // (Final|Native|Public) // @ game+0x2018650
	void SetMapFOV(float InNewFOV, struct FVector2D& InScaleCenter); // Function Solarland.MiniMapWidget.SetMapFOV // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2018570
	void SetBelongToBigMap(bool bIsBelongToBigMap); // Function Solarland.MiniMapWidget.SetBelongToBigMap // (Final|Native|Public|BlueprintCallable) // @ game+0x20184e0
	void SetAirdropMeshWidgetStatus(struct FString InKey, enum class EAirdropStatus InNewStatus); // Function Solarland.MiniMapWidget.SetAirdropMeshWidgetStatus // (Final|Native|Public) // @ game+0x2018400
	void RemoveMeshWidgetMark(struct FString MarkKey); // Function Solarland.MiniMapWidget.RemoveMeshWidgetMark // (Final|Native|Protected|BlueprintCallable) // @ game+0x2018360
	void RemoveAllNav(); // Function Solarland.MiniMapWidget.RemoveAllNav // (Final|Native|Public|BlueprintCallable) // @ game+0x2018340
	void RegisterDataProvider(); // Function Solarland.MiniMapWidget.RegisterDataProvider // (Final|Native|Protected|BlueprintCallable) // @ game+0x2018300
	void RefreshLastVehicleLocation(); // Function Solarland.MiniMapWidget.RefreshLastVehicleLocation // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void PlayReviveTeammateAnim(struct FString InKey, char InColorIdx); // Function Solarland.MiniMapWidget.PlayReviveTeammateAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x2018060
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.MiniMapWidget.OnSpecTargetChanged // (Native|Public) // @ game+0x2017f90
	void OnReviveWorldMarkRemoved(struct FString InPlayerID); // Function Solarland.MiniMapWidget.OnReviveWorldMarkRemoved // (Final|Native|Public|BlueprintCallable) // @ game+0x2017ef0
	void OnReviveWorldMarkPlayAnim(struct ASolarPlayerState* InPlayerState); // Function Solarland.MiniMapWidget.OnReviveWorldMarkPlayAnim // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnReviveWorldMarkCreated(struct FString InPlayerID); // Function Solarland.MiniMapWidget.OnReviveWorldMarkCreated // (Final|Native|Public|BlueprintCallable) // @ game+0x2017e50
	void OnRemoveReviveWorldMark(struct ASolarPlayerState* InPlayerState); // Function Solarland.MiniMapWidget.OnRemoveReviveWorldMark // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnRemoveAllReviveWorldMark(); // Function Solarland.MiniMapWidget.OnRemoveAllReviveWorldMark // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnMiniMapDataInitialized(); // Function Solarland.MiniMapWidget.OnMiniMapDataInitialized // (Final|Native|Protected|BlueprintCallable) // @ game+0x2017d10
	void OnFOVScaleChangedByPoison(struct UCurveFloat* InCurve); // Function Solarland.MiniMapWidget.OnFOVScaleChangedByPoison // (Final|Native|Protected) // @ game+0x2017c80
	void OnCreateReviveWorldMark(struct ASolarPlayerState* InPlayerState, struct FVector& InWorldLoc); // Function Solarland.MiniMapWidget.OnCreateReviveWorldMark // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
	void OnAllReviveWorldMarkRemoved(); // Function Solarland.MiniMapWidget.OnAllReviveWorldMarkRemoved // (Final|Native|Public|BlueprintCallable) // @ game+0x2017c60
	void KeepSelfInTheCenter(); // Function Solarland.MiniMapWidget.KeepSelfInTheCenter // (Final|Native|Public|BlueprintCallable) // @ game+0x2017bb0
	bool IsReviveWorldMarkCreated(struct FString InPlayerID); // Function Solarland.MiniMapWidget.IsReviveWorldMarkCreated // (Final|Native|Public|BlueprintCallable) // @ game+0x2017b00
	void InitMinFOV(float InFOV); // Function Solarland.MiniMapWidget.InitMinFOV // (Final|Native|Public|BlueprintCallable) // @ game+0x2017a80
	void InitMapFovAndSize(); // Function Solarland.MiniMapWidget.InitMapFovAndSize // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void InitFovAndSize(); // Function Solarland.MiniMapWidget.InitFovAndSize // (Final|Native|Public|BlueprintCallable) // @ game+0x2017a40
	void IconSizeFormat(); // Function Solarland.MiniMapWidget.IconSizeFormat // (Final|Native|Protected) // @ game+0x2017a20
	struct UPlayerNavWidget* GetSelfNav(); // Function Solarland.MiniMapWidget.GetSelfNav // (Final|Native|Public|BlueprintCallable) // @ game+0x2017a00
	struct FVector2D GetMinAndMaxFOV(); // Function Solarland.MiniMapWidget.GetMinAndMaxFOV // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x20179d0
	struct ASolarPlayerState* GetCameraFocusedCharacterState(); // Function Solarland.MiniMapWidget.GetCameraFocusedCharacterState // (Final|Native|Public) // @ game+0x20178f0
	void FormatAirline(float InScaleValue); // Function Solarland.MiniMapWidget.FormatAirline // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ClearVehicleMarkWidget(); // Function Solarland.MiniMapWidget.ClearVehicleMarkWidget // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ClearPlayerMarkPoint(); // Function Solarland.MiniMapWidget.ClearPlayerMarkPoint // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ClearMiniMapMarkWidget(); // Function Solarland.MiniMapWidget.ClearMiniMapMarkWidget // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void AdjustMapOffset(struct FVector2D MapLocation); // Function Solarland.MiniMapWidget.AdjustMapOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2017770
	struct FString AddMeshWidgetMark(struct FVector2D& InPosition, struct FVector2D& InMarkSlotSize, enum class EMarkerType InMarkType, float InRenderTransformScaleX, struct FString InMarkName, int32_t InMarkIndex); // Function Solarland.MiniMapWidget.AddMeshWidgetMark // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2017520
};

// Class Solarland.MissileSwarmLauncher
// Size: 0x3c0 (Inherited: 0x228)
struct AMissileSwarmLauncher : AActor {
	bool bDrawDebug; // 0x228(0x01)
	char pad_229[0x3]; // 0x229(0x03)
	float EjectSpeed; // 0x22c(0x04)
	float EjectGravity; // 0x230(0x04)
	float EjectTimeLength; // 0x234(0x04)
	float BoostSpeed; // 0x238(0x04)
	float BoostCtrlSpread; // 0x23c(0x04)
	float DamagePerBullet; // 0x240(0x04)
	float ExplodeRadius; // 0x244(0x04)
	bool bTeammateDamage; // 0x248(0x01)
	char pad_249[0x7]; // 0x249(0x07)
	struct TArray<enum class EObjectTypeQuery> CanDamageObjectTypes; // 0x250(0x10)
	struct UParticleSystem* ExplodeMarkParticle; // 0x260(0x08)
	struct UParticleSystem* BulletParticle; // 0x268(0x08)
	struct UParticleSystem* RibbonTrajectoryParticle; // 0x270(0x08)
	struct UParticleSystem* EjectParticle; // 0x278(0x08)
	struct UParticleSystem* BoostParticle; // 0x280(0x08)
	struct UParticleSystem* ExplodeParticle; // 0x288(0x08)
	char pad_290[0x20]; // 0x290(0x20)
	struct TArray<struct UParticleSystemComponent*> ExplodeMarkEffects; // 0x2b0(0x10)
	struct ASolarCharacter* OwnerCharacter; // 0x2c0(0x08)
	struct FRotator PlayerRotation; // 0x2c8(0x0c)
	char pad_2D4[0x4]; // 0x2d4(0x04)
	struct USkeletalMeshComponent* SpawnerMesh; // 0x2d8(0x08)
	struct USkeletalMesh* SpawnerTemplateMesh; // 0x2e0(0x08)
	float SpawnerAnimTime; // 0x2e8(0x04)
	float MissileShootTime; // 0x2ec(0x04)
	float RemoveAnimTime; // 0x2f0(0x04)
	struct FName SpawnerMeshMaterialParamName; // 0x2f4(0x08)
	struct FVector RocketSpawnerMeshOffset; // 0x2fc(0x0c)
	float RocketSpawnerMeshPitchOffset; // 0x308(0x04)
	char pad_30C[0x4]; // 0x30c(0x04)
	struct TArray<struct FName> MuzzleSocketNames; // 0x310(0x10)
	float SpawnerMoveInterpSpeed; // 0x320(0x04)
	float SpawnerMoveInterpMinSpeed; // 0x324(0x04)
	bool bUseForwardAxisY; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)
	struct UAnimationAsset* SpawnerIdleAnim; // 0x330(0x08)
	struct UAnimationAsset* SpawnerFireAnim; // 0x338(0x08)
	struct FString SpawnerStartSoundName1P; // 0x340(0x10)
	struct FString SpawnerStartSoundName3P; // 0x350(0x10)
	struct FString SpawnerEndSoundName1P; // 0x360(0x10)
	struct FString SpawnerEndSoundName3P; // 0x370(0x10)
	struct FString FireSoundName1P; // 0x380(0x10)
	struct FString FireSoundName3P; // 0x390(0x10)
	struct FString FireImpactSoundName; // 0x3a0(0x10)
	char pad_3B0[0x10]; // 0x3b0(0x10)

	void ServerUpdateCharacterRotation(struct FRotator InRotation); // Function Solarland.MissileSwarmLauncher.ServerUpdateCharacterRotation // (Net|Native|Event|Public|NetServer|HasDefaults) // @ game+0x201d420
	void NetMulticastEmitMissileSwarm(struct TArray<struct FMissileSwarmSpawnParameter> InSwarm, struct TArray<struct FVector> InTargetLocs); // Function Solarland.MissileSwarmLauncher.NetMulticastEmitMissileSwarm // (Net|Native|Event|NetMulticast|Public) // @ game+0x201c9d0
};

// Class Solarland.MMC_GenericCooldown
// Size: 0x40 (Inherited: 0x40)
struct UMMC_GenericCooldown : UGameplayModMagnitudeCalculation {
};

// Class Solarland.MobileWidgetDebuggerLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMobileWidgetDebuggerLibrary : UBlueprintFunctionLibrary {

	bool IsWidgetFastPathVisible(struct UWidget* InWidget); // Function Solarland.MobileWidgetDebuggerLibrary.IsWidgetFastPathVisible // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x201c940
	struct TArray<struct UUserWidget*> GetAllWidgetClass(struct UObject* WorldContextObject, bool bIncludeDebug); // Function Solarland.MobileWidgetDebuggerLibrary.GetAllWidgetClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x201c180
	struct UUserWidget* ConvertToUserWidgetClass(struct UObject* InObject); // Function Solarland.MobileWidgetDebuggerLibrary.ConvertToUserWidgetClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x201bd00
	struct UObject* ConvertToObject(struct UUserWidget* InClass); // Function Solarland.MobileWidgetDebuggerLibrary.ConvertToObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x201bc70
};

// Class Solarland.MobileWidgetDebugger
// Size: 0x28 (Inherited: 0x28)
struct UMobileWidgetDebugger : UObject {

	struct UWidget* FindWidget(struct UUserWidget* BaseWidgetClass, struct TArray<struct FName> WidgetRelationList, struct TArray<struct FString>& OutErrorMsg, bool bPrintLog); // Function Solarland.MobileWidgetDebugger.FindWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x201bf80
	struct UMobileWidgetDebugger* Create(struct UObject* Outer); // Function Solarland.MobileWidgetDebugger.Create // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x201bd90
};

// Class Solarland.ModMagnitudeCalcProxy
// Size: 0x30 (Inherited: 0x28)
struct UModMagnitudeCalcProxy : UObject {
	struct TWeakObjectPtr<struct USolarModMagnitudeCalc> CDOOwner; // 0x28(0x08)

	struct UModMagnitudeCalcProxy* CreateProxy(struct USolarModMagnitudeCalc* InCDOOwner, struct UModMagnitudeCalcProxy* ProxyClass); // Function Solarland.ModMagnitudeCalcProxy.CreateProxy // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x201be20
	float CalculateBaseMagnitude(struct FGameplayEffectSpec& Spec); // Function Solarland.ModMagnitudeCalcProxy.CalculateBaseMagnitude // (Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x25d85b0
};

// Class Solarland.MultiplePassMaterialEffect
// Size: 0x1c8 (Inherited: 0x160)
struct UMultiplePassMaterialEffect : UMaterialEffectBase {
	struct FMultiplePassMaterialChange MaterialChange; // 0x160(0x68)
};

// Class Solarland.NgaiAIControllerComponent
// Size: 0x220 (Inherited: 0xb0)
struct UNgaiAIControllerComponent : UActorComponent {
	struct ASolarCharacterBase* EnemyCharacterBase; // 0xb0(0x08)
	char pad_B8[0x168]; // 0xb8(0x168)
};

// Class Solarland.NgaiGameModeComponent
// Size: 0x19218 (Inherited: 0xd0)
struct UNgaiGameModeComponent : UGameModeCompBase {
	char pad_D0[0x19148]; // 0xd0(0x19148)
};

// Class Solarland.NoticeMapBase
// Size: 0x348 (Inherited: 0x348)
struct UNoticeMapBase : USolarUserWidget {

	void SetMap(int32_t MapID); // Function Solarland.NoticeMapBase.SetMap // (Final|Native|Public|BlueprintCallable) // @ game+0x201d4a0
	void LuaInitMap(int32_t MapID); // Function Solarland.NoticeMapBase.LuaInitMap // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.OBBigMapWidget
// Size: 0x348 (Inherited: 0x348)
struct UOBBigMapWidget : USolarUserWidget {

	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.OBBigMapWidget.OnSpectateTargetChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBBigMapWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x201cad0
};

// Class Solarland.OBDetailData
// Size: 0x78 (Inherited: 0x28)
struct UOBDetailData : UObject {
	struct ASolarPlayerState* SolarPlayerState; // 0x28(0x08)
	struct FDetailedListViewInfo DetailedListViewInfo; // 0x30(0x40)
	char pad_70[0x8]; // 0x70(0x08)
};

// Class Solarland.OBSettlementBase
// Size: 0x350 (Inherited: 0x348)
struct UOBSettlementBase : USolarUserWidget {
	struct UOBSettlementRoot* OBSettleRoot; // 0x348(0x08)
};

// Class Solarland.OBDetailedDataList
// Size: 0x3e8 (Inherited: 0x350)
struct UOBDetailedDataList : UOBSettlementBase {
	struct UWidgetSwitcher* Btn_Switcher; // 0x350(0x08)
	struct USolarTextBlock* Txt_TeamName; // 0x358(0x08)
	struct USolarTextBlock* Txt_Rank; // 0x360(0x08)
	struct UListView* PlayerListPanel; // 0x368(0x08)
	struct USolarImage* Img_TitleBox; // 0x370(0x08)
	struct USolarImage* Img_TitleBg; // 0x378(0x08)
	struct USolarImage* Img_TitleBox_3; // 0x380(0x08)
	char pad_388[0x8]; // 0x388(0x08)
	struct TArray<struct ASolarPlayerState*> AllTeammatePS; // 0x390(0x10)
	struct ASolarPlayerState* MVPPlayerState; // 0x3a0(0x08)
	struct UOBDetailData* TeamRowDataObject; // 0x3a8(0x08)
	struct TArray<struct FDetailedTeamListViewInfo> DetailedTeamListViewInfos; // 0x3b0(0x10)
	char pad_3C0[0x28]; // 0x3c0(0x28)

	void SetIsCheater(bool bIsCheater); // Function Solarland.OBDetailedDataList.SetIsCheater // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RefreshWindow(bool bIsPopDetailWindow); // Function Solarland.OBDetailedDataList.RefreshWindow // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RefreshRankColor(int32_t InRank); // Function Solarland.OBDetailedDataList.RefreshRankColor // (Final|Native|Private) // @ game+0x201d390
	void InitPlayerCompetitionDetailWindow(struct TArray<struct FDetailedListViewInfo> DetailedListViewInfos, struct FString TeamName, int32_t InRank, bool bIsPopDetailWindow); // Function Solarland.OBDetailedDataList.InitPlayerCompetitionDetailWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x201c660
	void InitPanel(struct UOBSettlementRoot* InOwner); // Function Solarland.OBDetailedDataList.InitPanel // (Native|Public|BlueprintCallable) // @ game+0x2017bd0
	void InitCompetitionDetailWindow(struct FDetailedTeamListViewInfo DetailedTeamListViewInfo, bool bIsPopDetailWindow); // Function Solarland.OBDetailedDataList.InitCompetitionDetailWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x201c3c0
	void InitAsDetailWindow(char& InTeamId, int32_t& InRank, struct UOBSettlementRoot* InOwner); // Function Solarland.OBDetailedDataList.InitAsDetailWindow // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x201c290
};

// Class Solarland.OBDetailedDataRow
// Size: 0x3b0 (Inherited: 0x348)
struct UOBDetailedDataRow : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct USolarImage* Image_MVP; // 0x350(0x08)
	struct UUIComponentNationalFlag* UI_NationalFlag; // 0x358(0x08)
	struct UUIComponentPlayerName* Txt_Name; // 0x360(0x08)
	struct UUIComponentPlayerName* Txt_KillNum; // 0x368(0x08)
	struct UUIComponentPlayerName* Txt_Slash; // 0x370(0x08)
	struct UUIComponentPlayerName* Txt_AssistNum; // 0x378(0x08)
	struct UUIComponentPlayerName* Txt_DMGDealt; // 0x380(0x08)
	struct UUIComponentPlayerName* Txt_DMGTaken; // 0x388(0x08)
	struct UUIComponentPlayerName* Txt_HPRestored; // 0x390(0x08)
	struct UUIComponentPlayerName* Txt_Time; // 0x398(0x08)
	struct UUIComponentPlayerName* Txt_MVPScore; // 0x3a0(0x08)
	struct UOBDetailData* DetailRowData; // 0x3a8(0x08)

	void SetIsCheater(bool bIsCheater); // Function Solarland.OBDetailedDataRow.SetIsCheater // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void InitDetailedDataRow(struct UObject* ListItemObject); // Function Solarland.OBDetailedDataRow.InitDetailedDataRow // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void EnableMVPTag(bool bIsMVP); // Function Solarland.OBDetailedDataRow.EnableMVPTag // (Final|Native|Private) // @ game+0x201bef0
};

// Class Solarland.OBFreeViewControlWidget
// Size: 0x368 (Inherited: 0x348)
struct UOBFreeViewControlWidget : USolarUserWidget {
	struct UWalkWidgetNew* ViewJoyStick; // 0x348(0x08)
	struct USolarInputButton* Btn_Up; // 0x350(0x08)
	struct USolarInputButton* Btn_Down; // 0x358(0x08)
	char pad_360[0x8]; // 0x360(0x08)

	void SetOBFreeViewUpAndDownButtonVisibility(bool bVisible); // Function Solarland.OBFreeViewControlWidget.SetOBFreeViewUpAndDownButtonVisibility // (Final|Native|Public) // @ game+0x201d530
	void OnUpdateWidgetVisibility(); // Function Solarland.OBFreeViewControlWidget.OnUpdateWidgetVisibility // (Final|Native|Public) // @ game+0x201d370
	void OnUISettingUIOperationChanged(bool bVisible); // Function Solarland.OBFreeViewControlWidget.OnUISettingUIOperationChanged // (Final|Native|Public) // @ game+0x201d2e0
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.OBFreeViewControlWidget.OnSpectateTargetChanged // (Final|Native|Public) // @ game+0x201d100
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBFreeViewControlWidget.OnBattleOBHUDTypeChanged // (Final|Native|Public|HasOutParms) // @ game+0x201cb60
};

// Class Solarland.OBGlobalControlWidget
// Size: 0x450 (Inherited: 0x348)
struct UOBGlobalControlWidget : USolarUserWidget {
	bool bIsPCStyleForDesign; // 0x348(0x01)
	char pad_349[0x7]; // 0x349(0x07)
	struct USolarButton* Btn_SwitchCameraMode; // 0x350(0x08)
	struct UWidgetSwitcher* Switcher_CameraMode; // 0x358(0x08)
	struct USolarButton* Btn_SwitchPlayer; // 0x360(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Visibility; // 0x368(0x08)
	struct USolarButton* Btn_SwitchUIVisibility; // 0x370(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Player; // 0x378(0x08)
	struct USolarButton* Btn_SwitchPlay; // 0x380(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Play; // 0x388(0x08)
	struct UImage* Img_SwitchPlayerSlc; // 0x390(0x08)
	struct UImage* Img_UIVisibilitySlc; // 0x398(0x08)
	struct UCanvasPanel* Panel_Mobile; // 0x3a0(0x08)
	struct UCanvasPanel* Panel_Player_List_PC; // 0x3a8(0x08)
	struct UOBTeamListPopupWidget* UI_OB_TeamList_Popup_PC; // 0x3b0(0x08)
	struct UOBTeamListPopupWidget* UI_OB_TeamList_Popup; // 0x3b8(0x08)
	struct UHorizontalBox* HorizontalBox_List_Shortcut; // 0x3c0(0x08)
	struct UCanvasPanel* Panel_UIItemSetting; // 0x3c8(0x08)
	struct USolarCheckBox* CheckBox_UIAll; // 0x3d0(0x08)
	struct USolarCheckBox* CheckBox_EnablePerspective; // 0x3d8(0x08)
	struct USolarCheckBox* CheckBox_UIOperation; // 0x3e0(0x08)
	struct USolarUserWidget* UI_OB_HUD_ShortcutKey; // 0x3e8(0x08)
	struct UCanvasPanel* Panel_BattleUI_Map; // 0x3f0(0x08)
	struct UCanvasPanel* Panel_Loading; // 0x3f8(0x08)
	struct UUserWidget* OB_BattleUI_Map; // 0x400(0x08)
	struct UUserWidget* SafeAreaProgressUI; // 0x408(0x08)
	struct UOBProgressBar* UI_OB_ProgressBar; // 0x410(0x08)
	struct UCheckBoxGroup* CheckBoxGroup_HeadInfoStyle; // 0x418(0x08)
	struct UButton* MapSwitcher; // 0x420(0x08)
	struct UWidgetAnimation* Anim_Setting_In; // 0x428(0x08)
	struct UWidgetAnimation* Anim_Setting_Exit; // 0x430(0x08)
	char pad_438[0x8]; // 0x438(0x08)
	struct UOBTeamListPopupWidget* CurrentTeamList; // 0x440(0x08)
	char pad_448[0x8]; // 0x448(0x08)

	void SetShortCutKeyMode(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBGlobalControlWidget.SetShortCutKeyMode // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void SetLiveWatchOnlyStyle(); // Function Solarland.OBGlobalControlWidget.SetLiveWatchOnlyStyle // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnToggleShortCutKey(); // Function Solarland.OBGlobalControlWidget.OnToggleShortCutKey // (Final|Native|Private) // @ game+0x201d2c0
	void OnToggleProgressControlButton(); // Function Solarland.OBGlobalControlWidget.OnToggleProgressControlButton // (Final|Native|Private) // @ game+0x201d2a0
	void OnToggleProgress(); // Function Solarland.OBGlobalControlWidget.OnToggleProgress // (Final|Native|Private) // @ game+0x201d280
	void OnTogglePlayerList(); // Function Solarland.OBGlobalControlWidget.OnTogglePlayerList // (Final|Native|Private) // @ game+0x201d260
	void OnTogglePerspective(bool bEnable); // Function Solarland.OBGlobalControlWidget.OnTogglePerspective // (Final|Native|Private) // @ game+0x201d1d0
	void OnPreConstruct(bool IsDesignTime); // Function Solarland.OBGlobalControlWidget.OnPreConstruct // (Final|Native|Public|BlueprintCallable) // @ game+0x201d070
	void OnPlayingScrubCharactersCreated(); // Function Solarland.OBGlobalControlWidget.OnPlayingScrubCharactersCreated // (Final|Native|Private) // @ game+0x201d050
	void OnHeadInfoStyleChanged(enum class EOBPlayerHeadInfoWidgetStyle Style); // Function Solarland.OBGlobalControlWidget.OnHeadInfoStyleChanged // (Final|Native|Private) // @ game+0x201cfd0
	void OnCheckBoxUIOperationStateChanged(bool bIsChecked); // Function Solarland.OBGlobalControlWidget.OnCheckBoxUIOperationStateChanged // (Final|Native|Private) // @ game+0x201cf40
	void OnCheckBoxUIAllStateChanged(bool bIsChecked); // Function Solarland.OBGlobalControlWidget.OnCheckBoxUIAllStateChanged // (Final|Native|Private) // @ game+0x201ceb0
	void OnCheckBoxHeadInfoStyleStateChanged(struct TArray<struct UCheckBox*>& ChildChangedArray, int32_t CheckedChildIndex); // Function Solarland.OBGlobalControlWidget.OnCheckBoxHeadInfoStyleStateChanged // (Final|Native|Private|HasOutParms) // @ game+0x201cdb0
	void OnCheckBoxEnablePerspectiveChanged(bool bIsChecked); // Function Solarland.OBGlobalControlWidget.OnCheckBoxEnablePerspectiveChanged // (Final|Native|Private) // @ game+0x201cd20
	void OnBtnSwitchUIVisibilityClicked(); // Function Solarland.OBGlobalControlWidget.OnBtnSwitchUIVisibilityClicked // (Final|Native|Private) // @ game+0x201cd00
	void OnBtnSwitchPlayerClicked(); // Function Solarland.OBGlobalControlWidget.OnBtnSwitchPlayerClicked // (Final|Native|Private) // @ game+0x201cce0
	void OnBtnSwitchPlayClicked(); // Function Solarland.OBGlobalControlWidget.OnBtnSwitchPlayClicked // (Final|Native|Private) // @ game+0x201ccc0
	void OnBtnSwitchCameraModeClicked(); // Function Solarland.OBGlobalControlWidget.OnBtnSwitchCameraModeClicked // (Final|Native|Private) // @ game+0x201cca0
	void OnBigMapOpen(); // Function Solarland.OBGlobalControlWidget.OnBigMapOpen // (Final|Native|Private) // @ game+0x201cc80
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBGlobalControlWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x201cbf0
};

// Class Solarland.OBGlobalInfoWidget
// Size: 0x370 (Inherited: 0x348)
struct UOBGlobalInfoWidget : USolarUserWidget {
	struct UTextBlock* Text_PlayerNum; // 0x348(0x08)
	struct UTextBlock* Text_TeamNum; // 0x350(0x08)
	struct UVerticalBox* VerticalBox_Sync; // 0x358(0x08)
	struct USizeBox* DummyPlayerInfo; // 0x360(0x08)
	struct USolarOBUIModel* SolarOBUIModel; // 0x368(0x08)

	void UpdateRemainPanelView(); // Function Solarland.OBGlobalInfoWidget.UpdateRemainPanelView // (Final|Native|Private) // @ game+0x2023520
	void OnGameStateSet(struct AGameStateBase* GameState); // Function Solarland.OBGlobalInfoWidget.OnGameStateSet // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBGlobalInfoWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x2022360
	void OnAutoPlaybackSpeedUpStop(); // Function Solarland.OBGlobalInfoWidget.OnAutoPlaybackSpeedUpStop // (Final|Native|Private) // @ game+0x2022340
	void OnAutoPlaybackSpeedUpStart(); // Function Solarland.OBGlobalInfoWidget.OnAutoPlaybackSpeedUpStart // (Final|Native|Private) // @ game+0x2022320
};

// Class Solarland.OBHeadInfoMeshWidget
// Size: 0x5f0 (Inherited: 0x348)
struct UOBHeadInfoMeshWidget : USolarUserWidget {
	struct USizeBox* SizeBox_Container; // 0x348(0x08)
	struct UCanvasPanel* Panel_Info; // 0x350(0x08)
	struct UMeshRectangleWidget* TeamMeshWidget; // 0x358(0x08)
	struct UMeshRectangleWidget* OB_Shield; // 0x360(0x08)
	struct UMeshRectangleWidget* OB_Shield_Damage; // 0x368(0x08)
	struct UMeshRectangleWidget* OB_Shield_BG; // 0x370(0x08)
	struct UMeshRectangleWidget* OB_HP; // 0x378(0x08)
	struct UMeshRectangleWidget* OB_HP_Damage; // 0x380(0x08)
	struct UMeshRectangleWidget* OB_HP_BG; // 0x388(0x08)
	struct UMeshRectangleWidget* OB_HeadInfo_BG; // 0x390(0x08)
	struct UMeshRectangleWidget* OB_Progress_BG; // 0x398(0x08)
	struct UScaleBox* ScaleBox_NickName; // 0x3a0(0x08)
	struct UUIComponentPlayerName* UIComp_PlayerName; // 0x3a8(0x08)
	struct UUIComponentPlayerName* BP_PlayerName; // 0x3b0(0x08)
	struct FConfigMeshData ConfigMeshData; // 0x3b8(0xf8)
	float ProgressEasingSpeed; // 0x4b0(0x04)
	struct FLinearColor HPColorNormal; // 0x4b4(0x10)
	struct FLinearColor HPColorDying; // 0x4c4(0x10)
	struct FLinearColor IncreaseColor; // 0x4d4(0x10)
	struct FLinearColor DecreaseColor; // 0x4e4(0x10)
	char pad_4F4[0xfc]; // 0x4f4(0xfc)

	void UpdateMeshProviderData(); // Function Solarland.OBHeadInfoMeshWidget.UpdateMeshProviderData // (Final|Native|Protected|BlueprintCallable) // @ game+0x2023500
	void OnScrubCharactersCreated(); // Function Solarland.OBHeadInfoMeshWidget.OnScrubCharactersCreated // (Final|Native|Private) // @ game+0x2022cd0
};

// Class Solarland.OBHeadInfoWidget
// Size: 0x3c8 (Inherited: 0x348)
struct UOBHeadInfoWidget : USolarUserWidget {
	struct USolarImage* Image_TeamBG; // 0x348(0x08)
	struct USolarImage* Image_Frame; // 0x350(0x08)
	struct USolarTextBlock* Text_TeamNum; // 0x358(0x08)
	struct USolarImage* Image_TeamBG_Middle; // 0x360(0x08)
	struct USolarImage* Image_Frame_Middle; // 0x368(0x08)
	struct USolarTextBlock* Text_TeamNum_Middle; // 0x370(0x08)
	struct UTextBlock* Text_NickName; // 0x378(0x08)
	struct FOBTeammateInfo Data; // 0x380(0x40)
	char pad_3C0[0x8]; // 0x3c0(0x08)

	void UpdatePlayerHeadInfoWidgetStyle(enum class EOBPlayerHeadInfoWidgetStyle InHeadInfoWidgetStyle); // Function Solarland.OBHeadInfoWidget.UpdatePlayerHeadInfoWidgetStyle // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnUpdateDistanceBetweenPlayerAndOBCamera(); // Function Solarland.OBHeadInfoWidget.OnUpdateDistanceBetweenPlayerAndOBCamera // (Final|Native|Public) // @ game+0x20231f0
	enum class EOBPlayerHeadInfoWidgetStyle GetHeadInfoWidgetStyleFromDistance(float InDistance); // Function Solarland.OBHeadInfoWidget.GetHeadInfoWidgetStyleFromDistance // (Final|Native|Protected|BlueprintCallable) // @ game+0x2022130
};

// Class Solarland.HUDDispatcherBase
// Size: 0x1288 (Inherited: 0x28)
struct UHUDDispatcherBase : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct FMulticastInlineDelegate OnSkydivingLeaderIndexReplicated; // 0x38(0x10)
	struct FMulticastInlineDelegate OnSkydivingMemberStatusUpdated; // 0x48(0x10)
	struct FDelegate TrySkydiveUnfollow; // 0x58(0x10)
	char pad_68[0x58]; // 0x68(0x58)
	float SkydivingLeaderTransferCooldown; // 0xc0(0x04)
	float SkydivingLeaderVoiceCooldown; // 0xc4(0x04)
	char pad_C8[0x38]; // 0xc8(0x38)
	struct FMulticastInlineDelegate OnTeammateStateReplicated; // 0x100(0x10)
	struct FMulticastInlineDelegate OnTeammatePlayerStateReplicated; // 0x110(0x10)
	struct FMulticastInlineDelegate OnCharacterPSInGameChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate OnPlayerOperationInGameChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnTeammatePSRemoveWhenPreparation; // 0x140(0x10)
	struct FMulticastInlineDelegate OnTeammatePSRemoveWhenBattle; // 0x150(0x10)
	struct FMulticastInlineDelegate OnTeammateHPChanged; // 0x160(0x10)
	struct FMulticastInlineDelegate OnTeammateShieldChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnTeammateReviveItemChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnTeammateReviveManagerChanged; // 0x190(0x10)
	struct FMulticastInlineDelegate OnReviveStateChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnTeammateReviveStateChanged; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnTeammateResurrectTimeChanged; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnTeammateCallForHelpNotify; // 0x1d0(0x10)
	char pad_1E0[0x10]; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnKillLeaderChangedNotify; // 0x1f0(0x10)
	char pad_200[0x30]; // 0x200(0x30)
	struct FMulticastInlineDelegate OnTeammateNetStateChanged; // 0x230(0x10)
	struct FMulticastInlineDelegate OnNavMapMarked; // 0x240(0x10)
	struct FMulticastInlineDelegate OnNavMapMarkCleared; // 0x250(0x10)
	struct FMulticastInlineDelegate OnTalentInitialized; // 0x260(0x10)
	struct FMulticastInlineDelegate OnTeammateCharacterIdChanged; // 0x270(0x10)
	struct FMulticastInlineDelegate OnTeammateSkinIdChanged; // 0x280(0x10)
	struct FMulticastInlineDelegate OnLevelChanged; // 0x290(0x10)
	struct FMulticastInlineDelegate OnSkillCDStateChanged; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnTeammateTalentStateChanged; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnSpecTargetChanged; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnBindHPPanelDelegate; // 0x2d0(0x10)
	struct FMulticastInlineDelegate OnBindItemPanelDelegate; // 0x2e0(0x10)
	struct FMulticastInlineDelegate OnBindPowerBarDelegate; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnRefreshBackpackItemDelegate; // 0x300(0x10)
	struct FMulticastInlineDelegate OnRefreshBackpackEquipDelegate; // 0x310(0x10)
	struct FMulticastInlineDelegate OnRefreshBackpackWeaponDelegate; // 0x320(0x10)
	struct FMulticastInlineDelegate OnRefreshBackpackWeaponPartDelegate; // 0x330(0x10)
	struct FMulticastInlineDelegate OnSetActiveOpenBoxBtnDelegate; // 0x340(0x10)
	struct FMulticastInlineDelegate OnSetActiveOpenBoxProgressDelegate; // 0x350(0x10)
	struct FMulticastInlineDelegate OnSetTreasureBoxActorDelegate; // 0x360(0x10)
	struct FMulticastInlineDelegate OnSetAirdropBoxActorDelegate; // 0x370(0x10)
	struct FMulticastInlineDelegate OnHideTreasureBoxUIDelegate; // 0x380(0x10)
	struct FMulticastInlineDelegate OnHideAirdropBoxUIDelegate; // 0x390(0x10)
	struct FMulticastInlineDelegate OnSetPickupSwitchDelegate; // 0x3a0(0x10)
	struct FMulticastInlineDelegate OnAirdropCharChangeDelegate; // 0x3b0(0x10)
	struct FMulticastInlineDelegate OnAirdropProgressChangeDelegate; // 0x3c0(0x10)
	struct FMulticastInlineDelegate OnPlayerNumberChanged; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnCapsulePlayerNumChanged; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnBombingStarted; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnBombingStopped; // 0x400(0x10)
	struct FMulticastInlineDelegate OnItemDiscarded; // 0x410(0x10)
	struct FMulticastInlineDelegate OnSettingRequestOpened; // 0x420(0x10)
	struct FMulticastInlineDelegate OnSettingRequestClosed; // 0x430(0x10)
	struct FMulticastInlineDelegate OnMigrateAccountVisibilityRequestChanged; // 0x440(0x10)
	struct FMulticastInlineDelegate OnCustomizeVisibilityRequestChanged; // 0x450(0x10)
	struct FMulticastInlineDelegate OnDriveCustomizeOpened; // 0x460(0x10)
	struct FMulticastInlineDelegate OnDriveCustomizeClosed; // 0x470(0x10)
	struct FMulticastInlineDelegate OnBackpackTookPickup; // 0x480(0x10)
	struct FMulticastInlineDelegate OnBackpackReleasedPickup; // 0x490(0x10)
	struct FMulticastInlineDelegate OnToggleCursorVisibility; // 0x4a0(0x10)
	struct FMulticastInlineDelegate OnBackpackVisibilitySet; // 0x4b0(0x10)
	struct FMulticastInlineDelegate OnElectricShopVisibilitySet; // 0x4c0(0x10)
	struct FMulticastInlineDelegate OnBigMapVisibilitySet; // 0x4d0(0x10)
	struct FMulticastInlineDelegate OnRescueBtnVisibilitySet; // 0x4e0(0x10)
	struct FMulticastInlineDelegate OnBuyResurrectBtnVisibilitySet; // 0x4f0(0x10)
	struct FMulticastInlineDelegate OnBigMapCloseButtonClicked; // 0x500(0x10)
	struct FMulticastInlineDelegate OnPickupFlagChanged; // 0x510(0x10)
	struct FMulticastInlineDelegate OnPickupListVisibilityChanged; // 0x520(0x10)
	struct FMulticastInlineDelegate OnPickupItemSet; // 0x530(0x10)
	struct FMulticastInlineDelegate OnPickupItemCalculated; // 0x540(0x10)
	struct FMulticastInlineDelegate OnPickupCheckValidUpdated; // 0x550(0x10)
	struct FMulticastInlineDelegate OnPickupCheckHighlightUpdated; // 0x560(0x10)
	struct FMulticastInlineDelegate OnPickupCheckStatesUpdated; // 0x570(0x10)
	struct FMulticastInlineDelegate OnPickupItemSelected; // 0x580(0x10)
	struct FMulticastInlineDelegate OnTogglePickupDelegate; // 0x590(0x10)
	struct FMulticastInlineDelegate OnPlayerDead; // 0x5a0(0x10)
	struct FMulticastInlineDelegate OnJoyStickSprintStateReset; // 0x5b0(0x10)
	struct FMulticastInlineDelegate OnJoyStickInputReset; // 0x5c0(0x10)
	struct FMulticastInlineDelegate OnJoyStickResetAll; // 0x5d0(0x10)
	struct FMulticastInlineDelegate OnTutorialSequenceRequested; // 0x5e0(0x10)
	struct FMulticastInlineDelegate OnDrivingTutorialStopped; // 0x5f0(0x10)
	struct FMulticastInlineDelegate OnFireButtonsInputReset; // 0x600(0x10)
	struct FMulticastInlineDelegate OnTeamDeathMatchLeaderboard; // 0x610(0x10)
	struct FMulticastInlineDelegate OnGameModeChangeWeapon; // 0x620(0x10)
	bool bBackpackVisible; // 0x630(0x01)
	bool bElectricShopVisible; // 0x631(0x01)
	bool bBigMapVisible; // 0x632(0x01)
	bool bMapVehicleSpawnListVisible; // 0x633(0x01)
	bool bRescueBtnVisible; // 0x634(0x01)
	bool bBuyResurrectBtnVisible; // 0x635(0x01)
	char pad_636[0x2]; // 0x636(0x02)
	struct FMulticastInlineDelegate OnInBattle; // 0x638(0x10)
	struct FMulticastInlineDelegate OnNotInBattle; // 0x648(0x10)
	struct FMulticastInlineDelegate OnRadarStationUpdated; // 0x658(0x10)
	struct FMulticastInlineDelegate OnAngleViewEnabled; // 0x668(0x10)
	struct FMulticastInlineDelegate OnCharacterSwimStateChanged; // 0x678(0x10)
	struct FMulticastInlineDelegate OnCharacterWaterClimbAvailable; // 0x688(0x10)
	struct FDelegate OnHitTraceUpdated; // 0x698(0x10)
	struct FMulticastInlineDelegate OnHitTraceRemoved; // 0x6a8(0x10)
	struct FMulticastInlineDelegate OnHitTraceCleared; // 0x6b8(0x10)
	struct FMulticastInlineDelegate OnProfessionFunctionalChanged; // 0x6c8(0x10)
	struct FMulticastInlineDelegate OnBackpackModeChanged; // 0x6d8(0x10)
	struct FMulticastInlineDelegate OnPickupListAdd; // 0x6e8(0x10)
	struct FMulticastInlineDelegate OnPickupListRemove; // 0x6f8(0x10)
	struct FMulticastInlineDelegate OnTeammateStateChanged; // 0x708(0x10)
	struct FMulticastInlineDelegate OnRepliableMessageChanged; // 0x718(0x10)
	struct FMulticastInlineDelegate OnPlayerFlagDisplayChanged; // 0x728(0x10)
	struct FMulticastInlineDelegate OnSpectateModeEntered; // 0x738(0x10)
	struct FMulticastInlineDelegate OnSpectateModeExited; // 0x748(0x10)
	struct FMulticastInlineDelegate OnSpectateReferToChanged; // 0x758(0x10)
	struct FMulticastInlineDelegate OnSpectateTargetItemsChanged; // 0x768(0x10)
	struct FMulticastInlineDelegate OnMarkButtonHoverChanged; // 0x778(0x10)
	struct FMulticastInlineDelegate OnMarkButtonTouchMoved; // 0x788(0x10)
	struct FMulticastInlineDelegate OnMarkButtonBeenLongPressed; // 0x798(0x10)
	struct FMulticastInlineDelegate OnMarkButtonDragSelectEnded; // 0x7a8(0x10)
	struct FMulticastInlineDelegate OnBattleModeChanged; // 0x7b8(0x10)
	char pad_7C8[0x8]; // 0x7c8(0x08)
	struct FMulticastInlineDelegate OnCharacterSet; // 0x7d0(0x10)
	struct FMulticastInlineDelegate OnCharacterIDSet; // 0x7e0(0x10)
	struct FMulticastInlineDelegate OnCharacterHPChanged; // 0x7f0(0x10)
	char pad_800[0x20]; // 0x800(0x20)
	struct FMulticastInlineDelegate OnCharacterDead; // 0x820(0x10)
	struct FMulticastInlineDelegate OnCharacterEnterWater; // 0x830(0x10)
	struct FMulticastInlineDelegate OnCharacterSelfRebirth; // 0x840(0x10)
	struct FMulticastInlineDelegate OnCharacterLevelUp; // 0x850(0x10)
	struct FMulticastInlineDelegate OnCharacterGainExp; // 0x860(0x10)
	struct FMulticastInlineDelegate OnCharacterLevelExpChanged; // 0x870(0x10)
	struct FMulticastInlineDelegate OnCharacterAllReady; // 0x880(0x10)
	struct FMulticastInlineDelegate OnBattleUpgradeEffect; // 0x890(0x10)
	struct FMulticastInlineDelegate OnSelectingBattleUpgradeEffectBegin; // 0x8a0(0x10)
	struct FMulticastInlineDelegate OnSelectingBattleUpgradeEffectFinish; // 0x8b0(0x10)
	struct FMulticastInlineDelegate OnSpectateBattleUpgradeEffectUpdate; // 0x8c0(0x10)
	struct FMulticastInlineDelegate OnTeammateRebirth; // 0x8d0(0x10)
	struct FMulticastInlineDelegate OnDamagingActorsChange; // 0x8e0(0x10)
	struct FMulticastInlineDelegate OnAimingEnemy; // 0x8f0(0x10)
	struct FMulticastInlineDelegate OnScoutCharactersChange; // 0x900(0x10)
	char pad_910[0x8]; // 0x910(0x08)
	struct FMulticastInlineDelegate OnCharacterLevelChanged; // 0x918(0x10)
	char pad_928[0x10]; // 0x928(0x10)
	struct FMulticastInlineDelegate OnRapidBoostActivationChanged; // 0x938(0x10)
	struct FMulticastInlineDelegate OnTrySpawnSuperRadar; // 0x948(0x10)
	struct FMulticastInlineDelegate OnSuperScaningStart; // 0x958(0x10)
	struct FMulticastInlineDelegate OnSuperScaningRemovePlayer; // 0x968(0x10)
	struct FMulticastInlineDelegate OnSuperScaningEnd; // 0x978(0x10)
	struct FMulticastInlineDelegate OnSuperScanCameraMoveForward; // 0x988(0x10)
	struct FMulticastInlineDelegate OnSuperScanCameraMoveRight; // 0x998(0x10)
	struct FMulticastInlineDelegate OnSuperScaningWidgetShow; // 0x9a8(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityChange; // 0x9b8(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityStartCD; // 0x9c8(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityEndCD; // 0x9d8(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityCDDurationChange; // 0x9e8(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityStartCDUTCTimeUpdate; // 0x9f8(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityStateChange; // 0xa08(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityEnd; // 0xa18(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityContinous; // 0xa28(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityBuffContinous; // 0xa38(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityBuffUpdate; // 0xa48(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityBuffEnd; // 0xa58(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityBuffPause; // 0xa68(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityBuffResume; // 0xa78(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityHideControlHUD; // 0xa88(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityInputAction; // 0xa98(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityAddSummonBuff; // 0xaa8(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityUsingStatusChanged; // 0xab8(0x10)
	struct FMulticastInlineDelegate OnCharacterNightComesActorChanged; // 0xac8(0x10)
	struct FMulticastInlineDelegate OnMobileWeaponInputAction; // 0xad8(0x10)
	struct FMulticastInlineDelegate OnRoleGEShieldMultiRecoverCoolDownEffect; // 0xae8(0x10)
	struct FMulticastInlineDelegate OnMemberFlagIDChanged01; // 0xaf8(0x10)
	struct FMulticastInlineDelegate OnMemberFlagIDChanged02; // 0xb08(0x10)
	struct FMulticastInlineDelegate OnMemberFlagIDChanged03; // 0xb18(0x10)
	struct FMulticastInlineDelegate OnMemberFlagIDChanged04; // 0xb28(0x10)
	struct FMulticastInlineDelegate OnSideAttributeSetRemoved; // 0xb38(0x10)
	struct FMulticastInlineDelegate OnSideAttributeSetAdded; // 0xb48(0x10)
	struct FMulticastInlineDelegate OnSideAttributeSetChanged; // 0xb58(0x10)
	struct FMulticastInlineDelegate OnDrivingStateChanged; // 0xb68(0x10)
	struct FMulticastInlineDelegate OnVehicleWeaponAbilityActivated; // 0xb78(0x10)
	struct FMulticastInlineDelegate OnVehicleScopeInitialized; // 0xb88(0x10)
	struct FMulticastInlineDelegate OnVehicleScopeValueChanged; // 0xb98(0x10)
	struct FMulticastInlineDelegate OnEquipVehicleWeaponDelegate; // 0xba8(0x10)
	struct FMulticastInlineDelegate OnVehicleWeaponScopeDelegate; // 0xbb8(0x10)
	struct FMulticastInlineDelegate OnTransformerChangeWeaponDelegate; // 0xbc8(0x10)
	struct FMulticastInlineDelegate OnVehicleTypeChangeDelegate; // 0xbd8(0x10)
	struct FMulticastInlineDelegate OnVehicleWeaponNoAmmoAlert; // 0xbe8(0x10)
	struct FMulticastInlineDelegate OnVehicleAbilityActivationChanged; // 0xbf8(0x10)
	struct FMulticastInlineDelegate OnMapVehicleSpawnListInitialized; // 0xc08(0x10)
	struct FMulticastInlineDelegate OnInputSprintLockStart; // 0xc18(0x10)
	struct FMulticastInlineDelegate OnSprintIconActived; // 0xc28(0x10)
	struct FMulticastInlineDelegate OnSprintIconHide; // 0xc38(0x10)
	struct FMulticastInlineDelegate OnSprintLockIconActived; // 0xc48(0x10)
	struct FMulticastInlineDelegate OnTeamMessageReceive; // 0xc58(0x10)
	struct FMulticastInlineDelegate OnVJetForbiddenChanged; // 0xc68(0x10)
	struct FMulticastInlineDelegate OnHJetForbiddenChanged; // 0xc78(0x10)
	struct FMulticastInlineDelegate OnVJetTotalTimesSet; // 0xc88(0x10)
	struct FMulticastInlineDelegate OnHJetTotalTimesSet; // 0xc98(0x10)
	struct FMulticastInlineDelegate OnVJetRestTimesSet; // 0xca8(0x10)
	struct FMulticastInlineDelegate OnHJetRestTimesSet; // 0xcb8(0x10)
	struct FMulticastInlineDelegate OnVJetChargeStateChanged; // 0xcc8(0x10)
	struct FMulticastInlineDelegate OnVJetCDStateChanged; // 0xcd8(0x10)
	struct FMulticastInlineDelegate OnHJetChargeStateChanged; // 0xce8(0x10)
	struct FMulticastInlineDelegate OnHJetCDStateChanged; // 0xcf8(0x10)
	struct FMulticastInlineDelegate OnVJetTimesCharging; // 0xd08(0x10)
	struct FMulticastInlineDelegate OnHJetTimesCharging; // 0xd18(0x10)
	struct FMulticastInlineDelegate OnVJetCoolingDown; // 0xd28(0x10)
	struct FMulticastInlineDelegate OnHJetCoolingDown; // 0xd38(0x10)
	struct FMulticastInlineDelegate OnVJetModuleLevelChanged; // 0xd48(0x10)
	struct FMulticastInlineDelegate OnHJetModuleLevelChanged; // 0xd58(0x10)
	struct FMulticastInlineDelegate OnSkydiveFlyStateChanged; // 0xd68(0x10)
	struct FMulticastInlineDelegate OnSkydiveAltitudeUpdate; // 0xd78(0x10)
	struct FMulticastInlineDelegate OnSkydiveSpeedUpdate; // 0xd88(0x10)
	struct FMulticastInlineDelegate OnShowGameNoticeDelegate; // 0xd98(0x10)
	struct FMulticastInlineDelegate OnStartCountDownDelegate; // 0xda8(0x10)
	struct FMulticastInlineDelegate OnStopCountDownDelegate; // 0xdb8(0x10)
	struct FMulticastInlineDelegate OnHideInteractionListRequested; // 0xdc8(0x10)
	struct FMulticastInlineDelegate OnCancelHideInteractionListRequested; // 0xdd8(0x10)
	struct FMulticastInlineDelegate OnInteractionTriggerAppear; // 0xde8(0x10)
	struct FMulticastInlineDelegate OnInteractionTriggerDisappear; // 0xdf8(0x10)
	struct FMulticastInlineDelegate OnStartInteractionCountDown; // 0xe08(0x10)
	struct FMulticastInlineDelegate OnStopInteractionCountDown; // 0xe18(0x10)
	struct FMulticastInlineDelegate OnStartReviveTeammateCountDownDelegate; // 0xe28(0x10)
	struct FMulticastInlineDelegate OnStopReviveTeammateCountDownDelegate; // 0xe38(0x10)
	struct FMulticastInlineDelegate OnReviveWillBeDisabledHintDelegate; // 0xe48(0x10)
	struct FMulticastInlineDelegate OnStartReviveItemRecycleCountDownDelegate; // 0xe58(0x10)
	char pad_E68[0x50]; // 0xe68(0x50)
	struct FMulticastInlineDelegate OnOverlapElectricShopDelegate; // 0xeb8(0x10)
	struct FMulticastInlineDelegate OnUpdateVehicleInteractionDelegate; // 0xec8(0x10)
	struct FMulticastInlineDelegate OnCruiseHeightSet; // 0xed8(0x10)
	struct FMulticastInlineDelegate OnEnterCruisingDelegate; // 0xee8(0x10)
	struct FMulticastInlineDelegate OnEnterParachutingDelegate; // 0xef8(0x10)
	struct FMulticastInlineDelegate OnEnterLandingDelegate; // 0xf08(0x10)
	struct FMulticastInlineDelegate OnEShopWeaponUpgradeDelegate; // 0xf18(0x10)
	struct FMulticastInlineDelegate OnEShopShieldUpgradeDelegate; // 0xf28(0x10)
	struct FMulticastInlineDelegate OnEShopPurchaseSuccessDelegate; // 0xf38(0x10)
	struct FMulticastInlineDelegate OnEShopItemCDRefreshDelegate; // 0xf48(0x10)
	struct FMulticastInlineDelegate OnEShopItemRefreshDelegate; // 0xf58(0x10)
	struct FMulticastInlineDelegate OnEShopSlotWeaponUpgradeDelegate; // 0xf68(0x10)
	struct FMulticastInlineDelegate OnEShopWeaponChangeDelegate; // 0xf78(0x10)
	struct FMulticastInlineDelegate OnEShopPoolRefreshDelegate; // 0xf88(0x10)
	struct FMulticastInlineDelegate TryOpenElectricShopDelegate; // 0xf98(0x10)
	struct FDelegate OnTeammateHomePanelGetting; // 0xfa8(0x10)
	struct FDelegate OnHomeBattleUIGetting; // 0xfb8(0x10)
	struct FDelegate OnHomeMainBuildGetting; // 0xfc8(0x10)
	struct FDelegate OnHomeFriendListGetting; // 0xfd8(0x10)
	struct FDelegate OnHomeLevelUpUIGetting; // 0xfe8(0x10)
	struct FMulticastInlineDelegate OnShieldAvailableChanged; // 0xff8(0x10)
	struct FMulticastInlineDelegate OnShieldChanged; // 0x1008(0x10)
	struct FMulticastInlineDelegate OnRechargeShieldEnd; // 0x1018(0x10)
	struct FMulticastInlineDelegate OnShieldFXUpdated; // 0x1028(0x10)
	struct FMulticastInlineDelegate OnShieldValueChanged; // 0x1038(0x10)
	struct FMulticastInlineDelegate OnMaxShieldValueUpdate; // 0x1048(0x10)
	struct FMulticastInlineDelegate FOnSteamRechargeShield; // 0x1058(0x10)
	struct FMulticastInlineDelegate TryCancelCountDown; // 0x1068(0x10)
	struct FMulticastInlineDelegate OnEnemyShieldChanged; // 0x1078(0x10)
	struct FMulticastInlineDelegate OnEnemyShieldValueChanged; // 0x1088(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeStart; // 0x1098(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeInterrupt; // 0x10a8(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeFinish; // 0x10b8(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeItemCountChanged; // 0x10c8(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeItemCountChangedBP; // 0x10d8(0x10)
	struct FMulticastInlineDelegate OnAckShieldUpgradeShopInteract; // 0x10e8(0x10)
	struct FDelegate TryOpenTreasureBoxDelegate; // 0x10f8(0x10)
	struct FDelegate TryOpenAirDropTreasureBoxDelegate; // 0x1108(0x10)
	struct FMulticastInlineDelegate TryCancelAirDropTreasureBoxDelegate; // 0x1118(0x10)
	struct FDelegate TryPickupFirstItemDelegate; // 0x1128(0x10)
	struct FDelegate CheckPickupItemValidDelegate; // 0x1138(0x10)
	struct FMulticastInlineDelegate SelectPreviousItem; // 0x1148(0x10)
	struct FMulticastInlineDelegate SelectNextItem; // 0x1158(0x10)
	char pad_1168[0x10]; // 0x1168(0x10)
	struct FMulticastInlineDelegate OnPickupEntryPlayAnim; // 0x1178(0x10)
	struct FMulticastInlineDelegate OnRequstPickupEntryPlayAnim; // 0x1188(0x10)
	struct FMulticastInlineDelegate OnRequstPickupEntryPlayAnimCustom; // 0x1198(0x10)
	struct FMulticastInlineDelegate NotifyTeammateReviving; // 0x11a8(0x10)
	struct FDelegate OnInteractEvent; // 0x11b8(0x10)
	struct FMulticastInlineDelegate OnBattleControlTeammateStateRemoved; // 0x11c8(0x10)
	struct FMulticastInlineDelegate OnSetBackpackDropMaskVisibility; // 0x11d8(0x10)
	struct FMulticastInlineDelegate OnEndBackpackDragDrop; // 0x11e8(0x10)
	char pad_11F8[0x20]; // 0x11f8(0x20)
	struct FMulticastInlineDelegate OnBattleHUDVisibilityChanged; // 0x1218(0x10)
	struct FMulticastInlineDelegate OnMicroPhonePressed; // 0x1228(0x10)
	struct FMulticastInlineDelegate OnSpeakerPressed; // 0x1238(0x10)
	struct FMulticastInlineDelegate OnSwitchEMP; // 0x1248(0x10)
	struct FMulticastInlineDelegate OnToggleAssitAim; // 0x1258(0x10)
	struct FMulticastInlineDelegate OnToggleAutoFire; // 0x1268(0x10)
	struct FMulticastInlineDelegate OnTreatmentEnd; // 0x1278(0x10)

	void VehicleWeaponScopeChanged__DelegateSignature(bool BOpened); // DelegateFunction Solarland.HUDDispatcherBase.VehicleWeaponScopeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void VehicleWeaponNoAmmoAlert__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.VehicleWeaponNoAmmoAlert__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void VehicleTypeChanged__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.VehicleTypeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void VehicleAbilityActivationChanged__DelegateSignature(bool bInActivated, bool bCanCancel, char InAbilityIndex, float InDurationTime); // DelegateFunction Solarland.HUDDispatcherBase.VehicleAbilityActivationChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void TwoIntUIInteractDelegate__DelegateSignature(int32_t Value01, int32_t Value02); // DelegateFunction Solarland.HUDDispatcherBase.TwoIntUIInteractDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void TwoIntImplementableDelegate__DelegateSignature(int32_t Value01, int32_t Value02); // DelegateFunction Solarland.HUDDispatcherBase.TwoIntImplementableDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	bool TrySkydiveUnfollow__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.TrySkydiveUnfollow__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	void TransformerWeaponChanged__DelegateSignature(enum class ETransformerType InType); // DelegateFunction Solarland.HUDDispatcherBase.TransformerWeaponChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void ToggledBigMapVisibility(); // Function Solarland.HUDDispatcherBase.ToggledBigMapVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x22caa00
	void ToggledBackpackVisibility(); // Function Solarland.HUDDispatcherBase.ToggledBackpackVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x22ca9e0
	void StopDrivingTutorial(); // Function Solarland.HUDDispatcherBase.StopDrivingTutorial // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22ca9c0
	void SprintLockIconActived__DelegateSignature(struct FVector2D& InSprintPosition); // DelegateFunction Solarland.HUDDispatcherBase.SprintLockIconActived__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x25d85b0
	void SolarPlayerStateDelegate__DelegateSignature(struct ASolarPlayerState* InPlayerState); // DelegateFunction Solarland.HUDDispatcherBase.SolarPlayerStateDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void SimpleUIInteractDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleUIInteractDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void SimpleTriggerDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleTriggerDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void SimpleStringDelegate__DelegateSignature(struct FString Value); // DelegateFunction Solarland.HUDDispatcherBase.SimpleStringDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void SimpleSpectatorDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleSpectatorDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void SimplePlayerStateDelegate__DelegateSignature(struct ASolarPlayerState* TeammatePS); // DelegateFunction Solarland.HUDDispatcherBase.SimplePlayerStateDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void SimpleOnRefreshDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnRefreshDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	bool SimpleOnBindRetOneParamDelegate__DelegateSignature(bool bAutoPickup); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnBindRetOneParamDelegate__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	bool SimpleOnBindRetOneIntParamDelegate__DelegateSignature(int32_t InIthisID); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnBindRetOneIntParamDelegate__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	bool SimpleOnBindRetDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnBindRetDelegate__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	void SimpleOnBindDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnBindDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void SimpleImplementableDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleImplementableDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void SimpleFloatDelegate__DelegateSignature(float Value); // DelegateFunction Solarland.HUDDispatcherBase.SimpleFloatDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void SimpleCharacterLuaDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleCharacterLuaDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void SimpleBoolDelegate__DelegateSignature(bool Value); // DelegateFunction Solarland.HUDDispatcherBase.SimpleBoolDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void ShowSuperScanChooseUI(bool bShow); // Function Solarland.HUDDispatcherBase.ShowSuperScanChooseUI // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22ca860
	void ShieldUpgradeItemCntChangedBPDelegate__DelegateSignature(int32_t ShieldLevel, int32_t ShieldMaxLevel, int32_t ShieldUpgradeItemNum, int32_t NeedShieldUpgradeItemNum, int32_t MaxShieldUpgradeItemNum); // DelegateFunction Solarland.HUDDispatcherBase.ShieldUpgradeItemCntChangedBPDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void SetRescueBtnVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.SetRescueBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x22ca6b0
	void SetMapVehicleSpawnListVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.SetMapVehicleSpawnListVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x22ca620
	void SetElectricShopVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.SetElectricShopVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x22ca3f0
	void SetBuyResurrectBtnVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.SetBuyResurrectBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x22ca240
	void SetBigMapVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.SetBigMapVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x22ca1b0
	void SetBackpackVisibility(bool bInValue); // Function Solarland.HUDDispatcherBase.SetBackpackVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x22ca120
	void RequestHideInteractionList(); // Function Solarland.HUDDispatcherBase.RequestHideInteractionList // (Final|Native|Public|Const) // @ game+0x22c9f00
	void RequestCancelHideInteractionList(); // Function Solarland.HUDDispatcherBase.RequestCancelHideInteractionList // (Final|Native|Public|Const) // @ game+0x22c9ee0
	void RemoveItemFromPickup(struct UObject* InCardItem, bool bPickup); // Function Solarland.HUDDispatcherBase.RemoveItemFromPickup // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c9e10
	void PlayerTutorialSequence(bool bPlay); // Function Solarland.HUDDispatcherBase.PlayerTutorialSequence // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c9d80
	void PickupListRemoveDelegate__DelegateSignature(struct UObject* CardItem, bool bPickup); // DelegateFunction Solarland.HUDDispatcherBase.PickupListRemoveDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void PickupListDelegate__DelegateSignature(struct UObject* CardItem); // DelegateFunction Solarland.HUDDispatcherBase.PickupListDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnWidgetVisibilitySet__DelegateSignature(bool bVisible); // DelegateFunction Solarland.HUDDispatcherBase.OnWidgetVisibilitySet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnWidgetButtonClicked__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnWidgetButtonClicked__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnVehicleWeaponAbilityActivated__DelegateSignature(bool bInActive); // DelegateFunction Solarland.HUDDispatcherBase.OnVehicleWeaponAbilityActivated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnVehicleScopeValueChanged__DelegateSignature(float InValue); // DelegateFunction Solarland.HUDDispatcherBase.OnVehicleScopeValueChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnVehicleScopeInitialized__DelegateSignature(struct UUserWidget* Widget, bool bInSpectate); // DelegateFunction Solarland.HUDDispatcherBase.OnVehicleScopeInitialized__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnUpdateVehicleInteractionDelegate__DelegateSignature(enum class EVehicleInterationUIState UiState, struct ASolarVehiclePawn* InVehicleComponent); // DelegateFunction Solarland.HUDDispatcherBase.OnUpdateVehicleInteractionDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTutorialSequenceRequested__DelegateSignature(bool bPlay); // DelegateFunction Solarland.HUDDispatcherBase.OnTutorialSequenceRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTrySpawnSuperRadar__DelegateSignature(bool bSpawn); // DelegateFunction Solarland.HUDDispatcherBase.OnTrySpawnSuperRadar__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTreatmentDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnTreatmentDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeamMessageReceive__DelegateSignature(struct FString MemberName, struct FString Message1, bool bLocalPlayer, bool bSound, int32_t PosInTeam, struct FString Message2); // DelegateFunction Solarland.HUDDispatcherBase.OnTeamMessageReceive__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeammateTalentStateChanged__DelegateSignature(enum class ETalentState TalentState, char PosInTeam, float AdditionalParam); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateTalentStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeammateStateChanged__DelegateSignature(bool NeedRefresh); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeammateShieldChanged__DelegateSignature(char PosInTeam, struct FShieldInfo& OldShield, struct FShieldInfo& NewShield); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateShieldChanged__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnTeammateReviveStateChanged__DelegateSignature(struct ASolarPlayerState* RevivingMePlayer, struct ASolarPlayerState* SolarPlayerState); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateReviveStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeammateReviveItemChanged__DelegateSignature(char PosInTeam, char ReviveItemNum, bool bCanRebirth); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateReviveItemChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeammateResurrectTimeChanged__DelegateSignature(struct ASolarPlayerState* SolarPlayerState, int32_t ResurrectTime); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateResurrectTimeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeammateRescueStateChanged__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateRescueStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeammatePlatStateRemove__DelegateSignature(char PosInTeam, bool bLastOne); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammatePlatStateRemove__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeammateIntegerDataChanged__DelegateSignature(int32_t Data, char PosInTeam); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateIntegerDataChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeammateHPChanged__DelegateSignature(char PosInTeam, float CurrentHP, float MaxHP); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateHPChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeammateCallForHelpNotify__DelegateSignature(struct ASolarPlayerState* SolarPlayerState); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateCallForHelpNotify__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeammateBattleStateChanged__DelegateSignature(struct ASCMPlayerState* TeammateState); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateBattleStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeammateActionStateChanged__DelegateSignature(struct ASolarPlayerState* SolarPlayerState, struct FGameplayTag Tag, int32_t NewCount); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateActionStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSwitchEMP__DelegateSignature(struct ASolarCharacter* InCharacter, bool InbSwitchOnEMP); // DelegateFunction Solarland.HUDDispatcherBase.OnSwitchEMP__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSuperScaningWidgetShow__DelegateSignature(bool bShow); // DelegateFunction Solarland.HUDDispatcherBase.OnSuperScaningWidgetShow__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSuperScaningStart__DelegateSignature(struct TArray<struct FString>& InScanPlayers); // DelegateFunction Solarland.HUDDispatcherBase.OnSuperScaningStart__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnSuperScaningRemovePlayer__DelegateSignature(struct FString InRemovePlayer); // DelegateFunction Solarland.HUDDispatcherBase.OnSuperScaningRemovePlayer__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSuperScaningEnd__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnSuperScaningEnd__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnStopCountDownDelegate__DelegateSignature(int32_t InTextId); // DelegateFunction Solarland.HUDDispatcherBase.OnStopCountDownDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSteamRechargeShieldDecl__DelegateSignature(bool bUseBigRecharger); // DelegateFunction Solarland.HUDDispatcherBase.OnSteamRechargeShieldDecl__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnStartCountDownDelegate__DelegateSignature(struct FCountDownInfo& InCountDownInfo); // DelegateFunction Solarland.HUDDispatcherBase.OnStartCountDownDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnSprintIconHide__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnSprintIconHide__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSprintIconActived__DelegateSignature(struct FVector2D& InSprintPosition); // DelegateFunction Solarland.HUDDispatcherBase.OnSprintIconActived__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x25d85b0
	void OnSpectateTargetItemsChanged__DelegateSignature(struct TArray<struct FReplicateItemData> InItemDatas); // DelegateFunction Solarland.HUDDispatcherBase.OnSpectateTargetItemsChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.HUDDispatcherBase.OnSpectateTargetChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x22c9c90
	void OnSpectateReferToChanged__DelegateSignature(struct ASolarPlayerState* ReferToPlayerState, enum class ESpectateReferToState State); // DelegateFunction Solarland.HUDDispatcherBase.OnSpectateReferToChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSpectateBattleUpgradeEffectUpdate__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.HUDDispatcherBase.OnSpectateBattleUpgradeEffectUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSpecTargetOrLocalCauseDamageChanged__DelegateSignature(float CauseDamage); // DelegateFunction Solarland.HUDDispatcherBase.OnSpecTargetOrLocalCauseDamageChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSpecTargetOrLocalAssistChanged__DelegateSignature(int32_t Assist); // DelegateFunction Solarland.HUDDispatcherBase.OnSpecTargetOrLocalAssistChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSpecTargetChanged__DelegateSignature(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // DelegateFunction Solarland.HUDDispatcherBase.OnSpecTargetChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSkydivingMemberDataUpdated__DelegateSignature(struct ASolarPlayerState* MemberPS); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydivingMemberDataUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSkydivingFollowRequestResponded__DelegateSignature(struct ASolarPlayerState* Follower, bool bAgreed); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydivingFollowRequestResponded__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSkydiveSpeedUpdate__DelegateSignature(float NewSpeed); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydiveSpeedUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSkydiveFlyStateChanged__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydiveFlyStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSkydiveDataUpdate__DelegateSignature(float NewData); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydiveDataUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSkydiveAltitudeUpdate__DelegateSignature(float NewHeight, float NewZValue); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydiveAltitudeUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSkillActivationChanged__DelegateSignature(bool bActivated); // DelegateFunction Solarland.HUDDispatcherBase.OnSkillActivationChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSideAttributeSetRemoved__DelegateSignature(struct FString SideName); // DelegateFunction Solarland.HUDDispatcherBase.OnSideAttributeSetRemoved__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSideAttributeSetChanged__DelegateSignature(struct FString SideName, struct FSideAttributeSet& SideRef); // DelegateFunction Solarland.HUDDispatcherBase.OnSideAttributeSetChanged__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnShowGameNotice__DelegateSignature(int32_t InNoticeID, struct FHUDNoticeParams& InNoiceParams); // DelegateFunction Solarland.HUDDispatcherBase.OnShowGameNotice__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnShieldValueChanged__DelegateSignature(enum class EShieldWidgetState WidgetState, float CurValue, float ChangeValue, struct FString SolarPlayerID, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // DelegateFunction Solarland.HUDDispatcherBase.OnShieldValueChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnShieldDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnShieldDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnShieldChanged__DelegateSignature(float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield); // DelegateFunction Solarland.HUDDispatcherBase.OnShieldChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnShieldAvailableChanged__DelegateSignature(bool bAvailable); // DelegateFunction Solarland.HUDDispatcherBase.OnShieldAvailableChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSetTreasureBoxActorDelegate__DelegateSignature(struct AActor* InActor); // DelegateFunction Solarland.HUDDispatcherBase.OnSetTreasureBoxActorDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSetPickupSwitchDelegate__DelegateSignature(enum class EPickupItemType InType, bool InFlag); // DelegateFunction Solarland.HUDDispatcherBase.OnSetPickupSwitchDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSetBackpackDropMaskVisibility__DelegateSignature(bool bVisible); // DelegateFunction Solarland.HUDDispatcherBase.OnSetBackpackDropMaskVisibility__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSetActiveOpenBoxDelegate__DelegateSignature(bool Inactive); // DelegateFunction Solarland.HUDDispatcherBase.OnSetActiveOpenBoxDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSelectingBattleUpgradeEffectFinish__DelegateSignature(int32_t SelectedIndex); // DelegateFunction Solarland.HUDDispatcherBase.OnSelectingBattleUpgradeEffectFinish__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSelectingBattleUpgradeEffectBegin__DelegateSignature(struct ASolarCharacter* Target, int32_t Level, struct TArray<int32_t>& EffectIDArray); // DelegateFunction Solarland.HUDDispatcherBase.OnSelectingBattleUpgradeEffectBegin__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnScoutedCharactersChange__DelegateSignature(struct TArray<struct FString> ScoutedCharacters, struct TArray<struct FString> ToBeScoutedCharacters); // DelegateFunction Solarland.HUDDispatcherBase.OnScoutedCharactersChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRoleGEShieldMultiRecoverCoolDownChange__DelegateSignature(int32_t NewCount); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleGEShieldMultiRecoverCoolDownChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRoleAbilityUsingStatusChanged__DelegateSignature(struct FGameplayTag Tag, int32_t NewCount); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityUsingStatusChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRoleAbilityStateChange__DelegateSignature(int32_t RoleAbilityIndex, int32_t State); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityStateChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRoleAbilityStartCDUTCTimeUpdate__DelegateSignature(int32_t RoleAbilityIndex, float InServerTime); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityStartCDUTCTimeUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRoleAbilityStartCD__DelegateSignature(int32_t RoleAbilityIndex, float StartCDServerTime, float StartCDTimeForReplay); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityStartCD__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRoleAbilityInputAction__DelegateSignature(int32_t RoleAbilityIndex, bool bPress, bool bCanActive); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityInputAction__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRoleAbilityHideControlHUD__DelegateSignature(bool bHide); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityHideControlHUD__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRoleAbilityEndCD__DelegateSignature(int32_t RoleAbilityIndex); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityEndCD__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRoleAbilityEnd__DelegateSignature(int32_t RoleAbilityIndex); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityEnd__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRoleAbilityContinous__DelegateSignature(int32_t RoleAbilityIndex, bool bTurnOn, float Duration); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityContinous__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRoleAbilityChange__DelegateSignature(int32_t RoleAbilityIndex, bool bHaveAbility, int32_t CharacterId, int32_t PlayerLevel); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRoleAbilityCDDurationChange__DelegateSignature(int32_t RoleAbilityIndex, int32_t Duration, bool bDurationReduced); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityCDDurationChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRoleAbilityBuffUpdate__DelegateSignature(struct FActiveGameplayEffectHandle& ActiveEffectHandle, float Duration, float RemainTime, bool bInPrePhase, float PreDuration, float PreRemainTime); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityBuffUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnRoleAbilityBuffPause__DelegateSignature(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityBuffPause__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRoleAbilityBuffEnd__DelegateSignature(bool bIsMainDuration, struct FActiveGameplayEffectHandle& InGameplayEffectHandle); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityBuffEnd__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnRoleAbilityBuffContinous__DelegateSignature(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex, float Duration, float PreDuration, struct FActiveGameplayEffectHandle& ActiveEffectHandle); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityBuffContinous__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnRoleAbilityAddSummonBuff__DelegateSignature(struct FSoftObjectPath& ImagePath, struct AActor* InActor); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityAddSummonBuff__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x25d85b0
	void OnReviveStateChanged__DelegateSignature(struct ASolarPlayerState* RevivingMePlayer); // DelegateFunction Solarland.HUDDispatcherBase.OnReviveStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRepliableMessageChanged__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnRepliableMessageChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnQuickVoiceWheelLongPressEnd__DelegateSignature(bool bPlayerDead); // DelegateFunction Solarland.HUDDispatcherBase.OnQuickVoiceWheelLongPressEnd__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnPoisonEffectUpdated__DelegateSignature(float PosX, float PosY, float Radius); // DelegateFunction Solarland.HUDDispatcherBase.OnPoisonEffectUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnPlayerFlagDisplayChanged__DelegateSignature(bool bDisplay); // DelegateFunction Solarland.HUDDispatcherBase.OnPlayerFlagDisplayChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnPlayerDead__DelegateSignature(struct FKillInfo& DeathMsgInfo); // DelegateFunction Solarland.HUDDispatcherBase.OnPlayerDead__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnPickupListVisibilityChanged__DelegateSignature(bool bVisible); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupListVisibilityChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnPickupItemSet__DelegateSignature(struct TArray<struct AActor*>& ObjectList, enum class EPickupItemType Type); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupItemSet__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnPickupItemSelected__DelegateSignature(struct UObject* SelectWidget, int32_t SelectWidgetThisID); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupItemSelected__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnPickupFlagChanged__DelegateSignature(bool bFlag, bool bNotSelf); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupFlagChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnPickupCheckValidUpdated__DelegateSignature(struct FItemCountsList& ItemCountsList); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupCheckValidUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnPickupCheckStatesUpdated__DelegateSignature(bool bItemUpdate); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupCheckStatesUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnPickupCheckHighlightUpdated__DelegateSignature(enum class EPickupItemType Type, bool IsRecommend); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupCheckHighlightUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnOverlapElectricShopDelegate__DelegateSignature(bool InOverlap); // DelegateFunction Solarland.HUDDispatcherBase.OnOverlapElectricShopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnNavMapMarked__DelegateSignature(char PosInTeam, struct FVector2D& MarkPosition); // DelegateFunction Solarland.HUDDispatcherBase.OnNavMapMarked__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x25d85b0
	void OnNavMapMarkCleared__DelegateSignature(char PosInTeam); // DelegateFunction Solarland.HUDDispatcherBase.OnNavMapMarkCleared__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnMobileWeaponInputAction__DelegateSignature(enum class EInputButton InButtonType); // DelegateFunction Solarland.HUDDispatcherBase.OnMobileWeaponInputAction__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnMemberFlagIDChanged__DelegateSignature(int32_t FlagID, bool bClanFlag); // DelegateFunction Solarland.HUDDispatcherBase.OnMemberFlagIDChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnMaxShieldValueUpdate__DelegateSignature(float MaxShieldVal); // DelegateFunction Solarland.HUDDispatcherBase.OnMaxShieldValueUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnMarkButtonTouchMoved__DelegateSignature(float DegreeToCenter, struct FVector2D TouchLocalPos); // DelegateFunction Solarland.HUDDispatcherBase.OnMarkButtonTouchMoved__DelegateSignature // (MulticastDelegate|Public|Delegate|HasDefaults) // @ game+0x25d85b0
	void OnMarkButtonSimpleTriggered__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnMarkButtonSimpleTriggered__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnMarkButtonHoverChanged__DelegateSignature(bool bIsHovered); // DelegateFunction Solarland.HUDDispatcherBase.OnMarkButtonHoverChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnKillLeaderChangedNotify__DelegateSignature(struct ASolarPlayerState* KillLeader); // DelegateFunction Solarland.HUDDispatcherBase.OnKillLeaderChangedNotify__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnJetTimesChanged__DelegateSignature(int32_t NewTimes); // DelegateFunction Solarland.HUDDispatcherBase.OnJetTimesChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnJetModuleLevelChanged__DelegateSignature(int32_t NewLevel); // DelegateFunction Solarland.HUDDispatcherBase.OnJetModuleLevelChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnJetFlyStateChanged__DelegateSignature(bool bStart); // DelegateFunction Solarland.HUDDispatcherBase.OnJetFlyStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnJetFlyForbiddenChanged__DelegateSignature(enum class EJetFlyForbiddenType ForbiddenType, bool bAdded); // DelegateFunction Solarland.HUDDispatcherBase.OnJetFlyForbiddenChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnJetFlyDataUpdated__DelegateSignature(float Value, float Percent); // DelegateFunction Solarland.HUDDispatcherBase.OnJetFlyDataUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnInteractionTriggerDelegate__DelegateSignature(struct FInteractionTriggerInfo& TriggerInfo); // DelegateFunction Solarland.HUDDispatcherBase.OnInteractionTriggerDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnInputSprintLockStart__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnInputSprintLockStart__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnInitElectricShopDelegate__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnInitElectricShopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	struct UUserWidget* OnHomelandGetWidget__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnHomelandGetWidget__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	int32_t OnHitTraceUpdated__DelegateSignature(int32_t HitTraceID, enum class EHitTraceType HitTraceType, float Angle, float WidgetScale); // DelegateFunction Solarland.HUDDispatcherBase.OnHitTraceUpdated__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	void OnHideUIByThisIDDelegate__DelegateSignature(int64_t InThisID); // DelegateFunction Solarland.HUDDispatcherBase.OnHideUIByThisIDDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnEShopWeaponUpgradeDelegate__DelegateSignature(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopWeaponUpgradeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnEShopWeaponChangeDelegate__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopWeaponChangeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnEShopSlotWeaponUpgradeDelegate__DelegateSignature(int32_t InWeaponSlot); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopSlotWeaponUpgradeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnEShopShieldUpgradeDelegate__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopShieldUpgradeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnEShopPurchaseSuccessDelegate__DelegateSignature(int32_t InProductID, struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopPurchaseSuccessDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnEShopInfoUpdateDelegate__DelegateSignature(struct ASolarElectricShop* InElectricShop); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopInfoUpdateDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnEnemyShieldValueChanged__DelegateSignature(enum class EShieldWidgetState WidgetState, float CurValue, float ChangeValue, struct FString SolarPlayerID, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // DelegateFunction Solarland.HUDDispatcherBase.OnEnemyShieldValueChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnEnemyShieldChanged__DelegateSignature(struct FString SolarPlayerID, float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield); // DelegateFunction Solarland.HUDDispatcherBase.OnEnemyShieldChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnDrivingTutorialStopped__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnDrivingTutorialStopped__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnDrivingStateChanged__DelegateSignature(enum class EDriveState DriveState); // DelegateFunction Solarland.HUDDispatcherBase.OnDrivingStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnDamagingActorsChange__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnDamagingActorsChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCreateReviveWorldMarkDelegate__DelegateSignature(struct ASolarPlayerState* InPlayerState, struct FVector& InWorldLoc); // DelegateFunction Solarland.HUDDispatcherBase.OnCreateReviveWorldMarkDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x25d85b0
	void OnCharacterStateChanged__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterSet__DelegateSignature(struct ASolarCharacter* ControlledCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterSet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterSelfRebirth__DelegateSignature(struct ASolarCharacter* RebirthCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterSelfRebirth__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterRescueStateChanged__DelegateSignature(enum class ERescueState NewRescueState); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterRescueStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterNightComesActorChanged__DelegateSignature(struct AActor* InActor); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterNightComesActorChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterLevelUp__DelegateSignature(int32_t NewLevel, int32_t OldLevel); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterLevelUp__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterLevelExpChanged__DelegateSignature(int32_t NewLevel, float NewExpRatio); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterLevelExpChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterLevelChanged__DelegateSignature(int32_t InLevel); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterLevelChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterIDSet__DelegateSignature(int32_t CharacterId); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterIDSet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterHPChanged__DelegateSignature(float CurrentHP, float MaxHP); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterHPChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterGainExp__DelegateSignature(int32_t ExpAdded); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterGainExp__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterDead__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterDead__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterAllReady__DelegateSignature(struct ASolarCharacter* ControlledCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterAllReady__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnBombingStarted__DelegateSignature(int32_t BombId, struct FVector& Location, float Radius); // DelegateFunction Solarland.HUDDispatcherBase.OnBombingStarted__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x25d85b0
	void OnBattleUpgradeEffect__DelegateSignature(enum class ESolarTablesEnum_BattleUpgradeEffectType EffectType, int32_t ParamSum); // DelegateFunction Solarland.HUDDispatcherBase.OnBattleUpgradeEffect__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnBattleModeChanged__DelegateSignature(char NewModeType); // DelegateFunction Solarland.HUDDispatcherBase.OnBattleModeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnBattleHUDVisibilityChanged__DelegateSignature(bool bVisible); // DelegateFunction Solarland.HUDDispatcherBase.OnBattleHUDVisibilityChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnBackpackTookPickup__DelegateSignature(struct FVector2D& NewPosition); // DelegateFunction Solarland.HUDDispatcherBase.OnBackpackTookPickup__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x25d85b0
	void OnAirdropBoxInfoChangeDelegate__DelegateSignature(struct AAirDropTreasureBox* InAirdropBox); // DelegateFunction Solarland.HUDDispatcherBase.OnAirdropBoxInfoChangeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnAimingEnemy__DelegateSignature(struct ASolarCharacter* InEnemy); // DelegateFunction Solarland.HUDDispatcherBase.OnAimingEnemy__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void MapVehicleSpawnListInitialized__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.MapVehicleSpawnListInitialized__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void LocalPlayerSkidivingCaptainChanged__DelegateSignature(int32_t TeamIndex, struct FString playerName, bool IsLocalPlayer); // DelegateFunction Solarland.HUDDispatcherBase.LocalPlayerSkidivingCaptainChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void JoyStickSimpleDeleghate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.JoyStickSimpleDeleghate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	bool IsElectricShopVisible(); // Function Solarland.HUDDispatcherBase.IsElectricShopVisible // (Final|Native|Public) // @ game+0x22c9a30
	bool IsBigMapVisible(); // Function Solarland.HUDDispatcherBase.IsBigMapVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c9870
	void IntUIInteractDelegate__DelegateSignature(int32_t Value); // DelegateFunction Solarland.HUDDispatcherBase.IntUIInteractDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void IntImplementableDelegate__DelegateSignature(int32_t Value); // DelegateFunction Solarland.HUDDispatcherBase.IntImplementableDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void InternalCallSkydiveSpeed(); // Function Solarland.HUDDispatcherBase.InternalCallSkydiveSpeed // (Final|Native|Protected) // @ game+0x22c9850
	void InternalCallSkydiveFlyStateChanged(); // Function Solarland.HUDDispatcherBase.InternalCallSkydiveFlyStateChanged // (Final|Native|Protected) // @ game+0x22c9830
	void IntCharacterLuaDelegate__DelegateSignature(int32_t Value); // DelegateFunction Solarland.HUDDispatcherBase.IntCharacterLuaDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void IntBackpackDelegate__DelegateSignature(int32_t Value); // DelegateFunction Solarland.HUDDispatcherBase.IntBackpackDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	struct USolarUserWidget* GetWorldMarkPanel(); // Function Solarland.HUDDispatcherBase.GetWorldMarkPanel // (Final|Native|Public|Const) // @ game+0x22c97e0
	struct UUserWidget* GetTeammateHomePanel(); // Function Solarland.HUDDispatcherBase.GetTeammateHomePanel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c96e0
	struct UHUDDispatcherBase* GetHUDDispatcher_FromUI(struct UWidget* InWidget); // Function Solarland.HUDDispatcherBase.GetHUDDispatcher_FromUI // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x22c94d0
	struct UHUDDispatcherBase* GetHUDDispatcher_FromPC(struct APlayerController* InPC); // Function Solarland.HUDDispatcherBase.GetHUDDispatcher_FromPC // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x22c9440
	struct UHUDDispatcherBase* GetHUDDispatcher_FromHUD(struct AHUD* InHUD); // Function Solarland.HUDDispatcherBase.GetHUDDispatcher_FromHUD // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x22c93b0
	struct UHUDDispatcherBase* GetHUDDispatcher_FromCharacter(struct ASolarCharacter* InCharacter, bool bCheckControlled); // Function Solarland.HUDDispatcherBase.GetHUDDispatcher_FromCharacter // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x22c92e0
	struct UUserWidget* GetHomeMainBuild(); // Function Solarland.HUDDispatcherBase.GetHomeMainBuild // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c95f0
	struct UUserWidget* GetHomeLevelUpUI(); // Function Solarland.HUDDispatcherBase.GetHomeLevelUpUI // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c95c0
	struct UUserWidget* GetHomeFriendList(); // Function Solarland.HUDDispatcherBase.GetHomeFriendList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c9590
	struct UUserWidget* GetHomeBattleUI(); // Function Solarland.HUDDispatcherBase.GetHomeBattleUI // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c9560
	void EquipVehicleWeapon__DelegateSignature(struct ASolarVehicleWeapon* InVehicleWeapon); // DelegateFunction Solarland.HUDDispatcherBase.EquipVehicleWeapon__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void BroadcastVJetForbiddenChanged(enum class EJetFlyForbiddenType Types, bool bAdded); // Function Solarland.HUDDispatcherBase.BroadcastVJetForbiddenChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c8eb0
	void BroadcastVJetCDStateChanged(bool bCD); // Function Solarland.HUDDispatcherBase.BroadcastVJetCDStateChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c8e20
	void BroadcastTrySpawnSuperRadar(bool bSpawn); // Function Solarland.HUDDispatcherBase.BroadcastTrySpawnSuperRadar // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c8d90
	bool BroadcastTryPickupFirstItem(bool bAutoPickup); // Function Solarland.HUDDispatcherBase.BroadcastTryPickupFirstItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c8cf0
	void BroadcastToggleCursorVisibility(bool bIsVisible); // Function Solarland.HUDDispatcherBase.BroadcastToggleCursorVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x22c8c60
	void BroadcastToggleAutoFire(); // Function Solarland.HUDDispatcherBase.BroadcastToggleAutoFire // (Final|Native|Public|BlueprintCallable) // @ game+0x22c8c40
	void BroadcastToggleAssitAim(); // Function Solarland.HUDDispatcherBase.BroadcastToggleAssitAim // (Final|Native|Public|BlueprintCallable) // @ game+0x22c8c20
	void BroadcastSpectateTargetItemsChanged(struct TArray<struct FReplicateItemData>& InItemDatas); // Function Solarland.HUDDispatcherBase.BroadcastSpectateTargetItemsChanged // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c8b70
	void BroadcastSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.HUDDispatcherBase.BroadcastSpectateTargetChanged // (Final|Native|Public) // @ game+0x22c8aa0
	void BroadcastSpectateBattleUpgradeEffectUpdate(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.HUDDispatcherBase.BroadcastSpectateBattleUpgradeEffectUpdate // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c8a10
	void BroadcastSkydiveSpeed(); // Function Solarland.HUDDispatcherBase.BroadcastSkydiveSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x22c89f0
	bool BroadcastShieldValueChanged(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // Function Solarland.HUDDispatcherBase.BroadcastShieldValueChanged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c8800
	void BroadcastShieldUpgradeStart(); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeStart // (Final|Native|Public|Const) // @ game+0x22c87e0
	void BroadcastShieldUpgradeShopInteract(); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeShopInteract // (Final|Native|Public|Const) // @ game+0x22c87c0
	void BroadcastShieldUpgradeItemCountChanged(int32_t NewCount, int32_t LastCount); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeItemCountChanged // (Final|Native|Public|Const) // @ game+0x22c86f0
	void BroadcastShieldUpgradeInterrupt(); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeInterrupt // (Final|Native|Public|Const) // @ game+0x22c86d0
	void BroadcastShieldUpgradeFinish(); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeFinish // (Final|Native|Public|Const) // @ game+0x22c86b0
	void BroadcastShieldFXUpdated(); // Function Solarland.HUDDispatcherBase.BroadcastShieldFXUpdated // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c8690
	bool BroadcastShieldChanged(float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield); // Function Solarland.HUDDispatcherBase.BroadcastShieldChanged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c8530
	bool BroadcastShieldAvailable(bool bAvailable); // Function Solarland.HUDDispatcherBase.BroadcastShieldAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c8490
	void BroadcastSettingRequestOpened(int32_t InOwnerType); // Function Solarland.HUDDispatcherBase.BroadcastSettingRequestOpened // (Final|Native|Public|BlueprintCallable) // @ game+0x22c8400
	void BroadcastSettingRequestClosed(); // Function Solarland.HUDDispatcherBase.BroadcastSettingRequestClosed // (Final|Native|Public|BlueprintCallable) // @ game+0x22c83e0
	void BroadcastSetBackpackDropMaskVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastSetBackpackDropMaskVisibility // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c8350
	void BroadcastSelectPreviousItem(); // Function Solarland.HUDDispatcherBase.BroadcastSelectPreviousItem // (Final|Native|Public|Const) // @ game+0x22c8170
	void BroadcastSelectNextItem(); // Function Solarland.HUDDispatcherBase.BroadcastSelectNextItem // (Final|Native|Public|Const) // @ game+0x22c8150
	void BroadcastSelectingBattleUpgradeEffectFinish(int32_t SelectedIndex); // Function Solarland.HUDDispatcherBase.BroadcastSelectingBattleUpgradeEffectFinish // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c82c0
	void BroadcastSelectingBattleUpgradeEffectBegin(struct ASolarCharacter* Target, int32_t Level, struct TArray<int32_t>& EffectIDArray); // Function Solarland.HUDDispatcherBase.BroadcastSelectingBattleUpgradeEffectBegin // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c8190
	void BroadcastScoutCharactersChange(struct TArray<struct FString> ScoutedCharacters, struct TArray<struct FString> ToBeScoutedCharacters); // Function Solarland.HUDDispatcherBase.BroadcastScoutCharactersChange // (Final|Native|Public|Const) // @ game+0x22c7ef0
	void BroadcastRescueBtnVisibility(); // Function Solarland.HUDDispatcherBase.BroadcastRescueBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x22c7ea0
	void BroadcastRequsetPickupEntryPlayAnimCustom(struct UObject* InCustomObj); // Function Solarland.HUDDispatcherBase.BroadcastRequsetPickupEntryPlayAnimCustom // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c7e10
	void BroadcastRequsetPickupEntryPlayAnim(int32_t InThisID); // Function Solarland.HUDDispatcherBase.BroadcastRequsetPickupEntryPlayAnim // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c7d80
	void BroadcastProfessionFunctionalChanged(bool bEnabled); // Function Solarland.HUDDispatcherBase.BroadcastProfessionFunctionalChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c7cf0
	void BroadcastPlayerFlagDisplayChanged(bool bDisplay); // Function Solarland.HUDDispatcherBase.BroadcastPlayerFlagDisplayChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c7c60
	void BroadcastPickupToggleChanged(); // Function Solarland.HUDDispatcherBase.BroadcastPickupToggleChanged // (Final|Native|Public) // @ game+0x22c7c40
	void BroadcastPickupEntryPlayAnim(float InAnimTime); // Function Solarland.HUDDispatcherBase.BroadcastPickupEntryPlayAnim // (Final|Native|Public|Const) // @ game+0x22c7bc0
	void BroadcastOnTeammateStateChangedDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnTeammateStateChangedDelegate // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c7ba0
	void BroadcastOnTeammateRebirth(); // Function Solarland.HUDDispatcherBase.BroadcastOnTeammateRebirth // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c7b80
	void BroadcastOnStopRescueTeammateCountDown(int32_t InTextId); // Function Solarland.HUDDispatcherBase.BroadcastOnStopRescueTeammateCountDown // (Final|Native|Public) // @ game+0x22c7af0
	void BroadcastOnStopInteractionCountDown(struct FCountDownInfo& InCountInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnStopInteractionCountDown // (Final|Native|Public|HasOutParms|Const) // @ game+0x22c79b0
	void BroadcastOnStopCountDownDelegate(int32_t InTextId); // Function Solarland.HUDDispatcherBase.BroadcastOnStopCountDownDelegate // (Final|Native|Public) // @ game+0x22c7920
	void BroadcastOnStartReviveItemRecycleCountDown(int32_t CurrentTime, int32_t DurationTime); // Function Solarland.HUDDispatcherBase.BroadcastOnStartReviveItemRecycleCountDown // (Final|Native|Public|BlueprintCallable) // @ game+0x22c7850
	void BroadcastOnStartRescueTeammateCountDown(struct FCountDownInfo& InCountDownInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnStartRescueTeammateCountDown // (Final|Native|Public|HasOutParms) // @ game+0x22c7710
	void BroadcastOnStartInteractionCountDown(struct FCountDownInfo& InCountInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnStartInteractionCountDown // (Final|Native|Public|HasOutParms|Const) // @ game+0x22c75d0
	void BroadcastOnStartCountDownDelegate(struct FCountDownInfo& InCountDownInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnStartCountDownDelegate // (Final|Native|Public|HasOutParms) // @ game+0x22c7490
	void BroadcastOnSkydiveFlyStateChanged(); // Function Solarland.HUDDispatcherBase.BroadcastOnSkydiveFlyStateChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x22c7470
	void BroadcastOnShowGameNoticeDelegate(int32_t InNoticeID, struct FHUDNoticeParams& InNoticeParams); // Function Solarland.HUDDispatcherBase.BroadcastOnShowGameNoticeDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x22c7320
	void BroadcastOnSetTreasureBoxActorDelegate(struct AActor* InActor); // Function Solarland.HUDDispatcherBase.BroadcastOnSetTreasureBoxActorDelegate // (Final|Native|Public) // @ game+0x22c7290
	void BroadcastOnSetPickupSwitchDelegate(enum class EPickupItemType InType, bool InFlag); // Function Solarland.HUDDispatcherBase.BroadcastOnSetPickupSwitchDelegate // (Final|Native|Public) // @ game+0x22c71c0
	void BroadcastOnSetAirdropBoxActorDelegate(struct AActor* InActor); // Function Solarland.HUDDispatcherBase.BroadcastOnSetAirdropBoxActorDelegate // (Final|Native|Public) // @ game+0x22c7130
	void BroadcastOnSetActiveOpenBoxProgressDelegate(bool Inactive); // Function Solarland.HUDDispatcherBase.BroadcastOnSetActiveOpenBoxProgressDelegate // (Final|Native|Public) // @ game+0x22c70a0
	void BroadcastOnSetActiveOpenBoxBtnDelegate(bool Inactive); // Function Solarland.HUDDispatcherBase.BroadcastOnSetActiveOpenBoxBtnDelegate // (Final|Native|Public) // @ game+0x22c7010
	void BroadcastOnRightMouseButtonDownEvent(); // Function Solarland.HUDDispatcherBase.BroadcastOnRightMouseButtonDownEvent // (Final|Native|Public) // @ game+0x22c6ff0
	void BroadcastOnReviveWorldMarkPlayAnim(struct ASolarPlayerState* InPlayerState); // Function Solarland.HUDDispatcherBase.BroadcastOnReviveWorldMarkPlayAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x22c6f60
	void BroadcastOnReviveWillBeDisabledHint(int32_t HintDuration); // Function Solarland.HUDDispatcherBase.BroadcastOnReviveWillBeDisabledHint // (Final|Native|Public|BlueprintCallable) // @ game+0x22c6ed0
	void BroadcastOnReviveStateChanged(struct ASolarPlayerState* RevivingMeTeammatePlayer); // Function Solarland.HUDDispatcherBase.BroadcastOnReviveStateChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x22c6e40
	void BroadcastOnReviveDisabledHint(); // Function Solarland.HUDDispatcherBase.BroadcastOnReviveDisabledHint // (Final|Native|Public|BlueprintCallable) // @ game+0x22c6e20
	void BroadcastOnRemoveReviveWorldMark(struct ASolarPlayerState* InPlayerState); // Function Solarland.HUDDispatcherBase.BroadcastOnRemoveReviveWorldMark // (Final|Native|Public|BlueprintCallable) // @ game+0x22c6d90
	void BroadcastOnRemoveAllReviveWorldMark(); // Function Solarland.HUDDispatcherBase.BroadcastOnRemoveAllReviveWorldMark // (Final|Native|Public|BlueprintCallable) // @ game+0x22c6d70
	void BroadcastOnRefreshBackpackWeaponPartDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnRefreshBackpackWeaponPartDelegate // (Final|Native|Public|Const) // @ game+0x22c6d50
	void BroadcastOnRefreshBackpackWeaponDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnRefreshBackpackWeaponDelegate // (Final|Native|Public|Const) // @ game+0x22c6d30
	void BroadcastOnRefreshBackpackItemDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnRefreshBackpackItemDelegate // (Final|Native|Public|Const) // @ game+0x22c6d10
	void BroadcastOnRefreshBackpackEquipDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnRefreshBackpackEquipDelegate // (Final|Native|Public|Const) // @ game+0x22c6cf0
	void BroadcastOnOverlapElectricShopDelegate(bool InOverlap); // Function Solarland.HUDDispatcherBase.BroadcastOnOverlapElectricShopDelegate // (Final|Native|Public) // @ game+0x22c6c60
	void BroadcastOnOnCreateReviveWorldMark(struct ASolarPlayerState* InPlayerState, struct FVector& InWorldLoc); // Function Solarland.HUDDispatcherBase.BroadcastOnOnCreateReviveWorldMark // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x22c6b90
	void BroadcastOnInteractionTriggerDisappear(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnInteractionTriggerDisappear // (Final|Native|Public|HasOutParms|Const) // @ game+0x22c6a70
	void BroadcastOnInteractionTriggerAppear(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnInteractionTriggerAppear // (Final|Native|Public|HasOutParms|Const) // @ game+0x22c6950
	bool BroadcastOnInteractEvent(); // Function Solarland.HUDDispatcherBase.BroadcastOnInteractEvent // (Final|Native|Public) // @ game+0x22c6920
	void BroadcastOnInitElectricShopDelegate(struct ASolarCharacter* InCharcter); // Function Solarland.HUDDispatcherBase.BroadcastOnInitElectricShopDelegate // (Final|Native|Public) // @ game+0x22c6890
	void BroadcastOnHideTreasureBoxUIDelegate(int64_t InThisID); // Function Solarland.HUDDispatcherBase.BroadcastOnHideTreasureBoxUIDelegate // (Final|Native|Public) // @ game+0x22c6800
	void BroadcastOnHideAirdropBoxUIDelegate(int64_t InThisID); // Function Solarland.HUDDispatcherBase.BroadcastOnHideAirdropBoxUIDelegate // (Final|Native|Public) // @ game+0x22c6770
	void BroadcastOnGameUserPickupSettingChanged(); // Function Solarland.HUDDispatcherBase.BroadcastOnGameUserPickupSettingChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c6750
	void BroadcastOnEShopWeaponUpgradeDelegate(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopWeaponUpgradeDelegate // (Final|Native|Public) // @ game+0x22c6680
	void BroadcastOnEShopWeaponChangeDelegate(struct ASolarCharacter* InCharacter); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopWeaponChangeDelegate // (Final|Native|Public) // @ game+0x22c65f0
	void BroadcastOnEShopSlotWeaponUpgradeDelegate(int32_t InWeaponSlot); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopSlotWeaponUpgradeDelegate // (Final|Native|Public) // @ game+0x22c6560
	void BroadcastOnEShopShieldUpgradeDelegate(struct ASolarCharacter* InCharacter); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopShieldUpgradeDelegate // (Final|Native|Public) // @ game+0x22c64d0
	void BroadcastOnEShopPurchaseSuccessDelegate(int32_t InProductID, struct ASolarCharacter* InCharacter); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopPurchaseSuccessDelegate // (Final|Native|Public) // @ game+0x22c6400
	void BroadcastOnEShopPoolRefreshDelegate(struct ASolarElectricShop* InElectricShop); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopPoolRefreshDelegate // (Final|Native|Public) // @ game+0x22c6370
	void BroadcastOnEShopItemRefreshDelegate(struct ASolarElectricShop* InElectricShop); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopItemRefreshDelegate // (Final|Native|Public) // @ game+0x22c62e0
	void BroadcastOnEShopItemCDRefreshDelegate(struct ASolarElectricShop* InElectricShop); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopItemCDRefreshDelegate // (Final|Native|Public) // @ game+0x22c6250
	void BroadcastOnBindPowerBarDelegates(); // Function Solarland.HUDDispatcherBase.BroadcastOnBindPowerBarDelegates // (Final|Native|Public) // @ game+0x22c6230
	void BroadcastOnBindItemPanelDelegates(); // Function Solarland.HUDDispatcherBase.BroadcastOnBindItemPanelDelegates // (Final|Native|Public) // @ game+0x22c6210
	void BroadcastOnBindHPPanelDelegates(); // Function Solarland.HUDDispatcherBase.BroadcastOnBindHPPanelDelegates // (Final|Native|Public) // @ game+0x22c61f0
	void BroadcastOnBattleControlTeammateStateRemoved(); // Function Solarland.HUDDispatcherBase.BroadcastOnBattleControlTeammateStateRemoved // (Final|Native|Public|Const) // @ game+0x22c61d0
	void BroadcastOnAirdropProgressChangeDelegate(struct AAirDropTreasureBox* InAirdropBox); // Function Solarland.HUDDispatcherBase.BroadcastOnAirdropProgressChangeDelegate // (Final|Native|Public) // @ game+0x22c6140
	void BroadcastOnAirdropCharChangeDelegate(struct AAirDropTreasureBox* InAirdropBox); // Function Solarland.HUDDispatcherBase.BroadcastOnAirdropCharChangeDelegate // (Final|Native|Public) // @ game+0x22c60b0
	void BroadcastMigrateAccountVisibilityRequestChanged(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastMigrateAccountVisibilityRequestChanged // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x22c6020
	void BroadcastMaxShieldValueUpdate(float MaxShieldValue); // Function Solarland.HUDDispatcherBase.BroadcastMaxShieldValueUpdate // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c5fa0
	void BroadcastJoyStickSprintStateReset(); // Function Solarland.HUDDispatcherBase.BroadcastJoyStickSprintStateReset // (Final|Native|Public|Const) // @ game+0x22c5f80
	void BroadcastJoyStickResetAll(); // Function Solarland.HUDDispatcherBase.BroadcastJoyStickResetAll // (Final|Native|Public|Const) // @ game+0x22c5f60
	void BroadcastJoyStickInputReset(); // Function Solarland.HUDDispatcherBase.BroadcastJoyStickInputReset // (Final|Native|Public|Const) // @ game+0x22c5f40
	void BroadcastItemDiscarded(int32_t InItemID, int32_t InTotalCount); // Function Solarland.HUDDispatcherBase.BroadcastItemDiscarded // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c5e70
	void BroadcastHJetTimesChargingProgress(float Value, float Percent); // Function Solarland.HUDDispatcherBase.BroadcastHJetTimesChargingProgress // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c5da0
	void BroadcastHJetForbiddenChanged(enum class EJetFlyForbiddenType Types, bool bAdded); // Function Solarland.HUDDispatcherBase.BroadcastHJetForbiddenChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c5cd0
	void BroadcastHJetCDStateChanged(bool bCD); // Function Solarland.HUDDispatcherBase.BroadcastHJetCDStateChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c5c40
	void BroadcastFireButtonsReset(); // Function Solarland.HUDDispatcherBase.BroadcastFireButtonsReset // (Final|Native|Public|Const) // @ game+0x22c5c20
	bool BroadcastEnemyShieldValueChanged(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // Function Solarland.HUDDispatcherBase.BroadcastEnemyShieldValueChanged // (Final|Native|Public|Const) // @ game+0x22c5a30
	bool BroadcastEnemyShieldChanged(struct FString InSolarPlayerID, float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield); // Function Solarland.HUDDispatcherBase.BroadcastEnemyShieldChanged // (Final|Native|Public|Const) // @ game+0x22c5860
	void BroadcastEndBackpackDragDrop(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastEndBackpackDragDrop // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c57d0
	void BroadcastDriveCustomizeOpened(int32_t InLayoutType); // Function Solarland.HUDDispatcherBase.BroadcastDriveCustomizeOpened // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x22c5740
	void BroadcastDriveCustomizeClosed(); // Function Solarland.HUDDispatcherBase.BroadcastDriveCustomizeClosed // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x22c5720
	void BroadcastDamagingActorsChange(); // Function Solarland.HUDDispatcherBase.BroadcastDamagingActorsChange // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c5700
	void BroadcastCustomizeVisibilityRequestChanged(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastCustomizeVisibilityRequestChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x22c5670
	bool BroadcastCheckPickupItemVaild(int32_t InThisID); // Function Solarland.HUDDispatcherBase.BroadcastCheckPickupItemVaild // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c55d0
	void BroadcastCharacterRescueStateChanged(enum class ERescueState NewRescueState); // Function Solarland.HUDDispatcherBase.BroadcastCharacterRescueStateChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c5550
	void BroadcastCharacterLevelExpChanged(int32_t NewLevel, float NewExpRatio); // Function Solarland.HUDDispatcherBase.BroadcastCharacterLevelExpChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c5480
	void BroadcastCharacterHPState(); // Function Solarland.HUDDispatcherBase.BroadcastCharacterHPState // (Final|Native|Public|BlueprintCallable) // @ game+0x22c5460
	void BroadcastCharacterGainExp(int32_t ExpAdded); // Function Solarland.HUDDispatcherBase.BroadcastCharacterGainExp // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c53d0
	void BroadcastBuyResurrectBtnVisibility(); // Function Solarland.HUDDispatcherBase.BroadcastBuyResurrectBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x22c5380
	void BroadcastBattleUpgradeEffect(enum class ESolarTablesEnum_BattleUpgradeEffectType EffectType, int32_t ParamSum); // Function Solarland.HUDDispatcherBase.BroadcastBattleUpgradeEffect // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c52b0
	void BroadcastBattleModeChanged(char InModeType); // Function Solarland.HUDDispatcherBase.BroadcastBattleModeChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c5230
	void BroadcastBattleHUDVisibilityChanged(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastBattleHUDVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c51a0
	void BroadcastBackpackTakesPickup(struct FVector2D& NewPosition); // Function Solarland.HUDDispatcherBase.BroadcastBackpackTakesPickup // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c5110
	void BroadcastBackpackReleasesPickup(); // Function Solarland.HUDDispatcherBase.BroadcastBackpackReleasesPickup // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c50f0
	void BroadcastBackpackModeChanged(int32_t NewMode); // Function Solarland.HUDDispatcherBase.BroadcastBackpackModeChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c5060
	void BroadcastAimingEnemy(struct ASolarCharacter* InEnemy); // Function Solarland.HUDDispatcherBase.BroadcastAimingEnemy // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c4fd0
	void BoolUIInteractDelegate__DelegateSignature(bool bValue); // DelegateFunction Solarland.HUDDispatcherBase.BoolUIInteractDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void BoolGameModeLuaDelegate__DelegateSignature(bool bValue); // DelegateFunction Solarland.HUDDispatcherBase.BoolGameModeLuaDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void BoolCharacterLuaDelegate__DelegateSignature(bool bValue); // DelegateFunction Solarland.HUDDispatcherBase.BoolCharacterLuaDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void BindLocalSpectateDelegates(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.HUDDispatcherBase.BindLocalSpectateDelegates // (Final|Native|Protected) // @ game+0x22c4f40
	void AddItemToPickup(struct UObject* InCardItem); // Function Solarland.HUDDispatcherBase.AddItemToPickup // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x22c4eb0
	void ActionWheelCommandExecDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.ActionWheelCommandExecDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void ActionWheelCommandCancelDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.ActionWheelCommandCancelDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
};

// Class Solarland.OBHUDDispatcher
// Size: 0x13b0 (Inherited: 0x1288)
struct UOBHUDDispatcher : UHUDDispatcherBase {
	struct FMulticastInlineDelegate OnUISettingHeadInfoStyleChanged; // 0x1288(0x10)
	struct FMulticastInlineDelegate OnToggleUISettingPlayerList; // 0x1298(0x10)
	struct FMulticastInlineDelegate OnToggleScoreboard; // 0x12a8(0x10)
	struct FMulticastInlineDelegate OnToggleProgressControlButton; // 0x12b8(0x10)
	struct FMulticastInlineDelegate OnToggleProgress; // 0x12c8(0x10)
	struct FMulticastInlineDelegate OnTogglePerspective; // 0x12d8(0x10)
	struct FMulticastInlineDelegate OnToggleShortCutKey; // 0x12e8(0x10)
	struct FMulticastInlineDelegate OnEnterSettlementStage; // 0x12f8(0x10)
	struct FMulticastInlineDelegate OnBattleOBHUDTypeChanged; // 0x1308(0x10)
	char pad_1318[0x70]; // 0x1318(0x70)
	struct FMulticastInlineDelegate OnBigMapWidgetPlayerNameSizeChange; // 0x1388(0x10)
	struct FMulticastInlineDelegate OnPlayerWidgetChecked; // 0x1398(0x10)
	char pad_13A8[0x8]; // 0x13a8(0x08)
};

// Class Solarland.OBKeyboardWidget
// Size: 0x348 (Inherited: 0x348)
struct UOBKeyboardWidget : USolarUserWidget {

	struct UUserWidget* FindKeyWidgetByKeyName(struct FString KeyName); // Function Solarland.OBKeyboardWidget.FindKeyWidgetByKeyName // (Final|Native|Public|BlueprintCallable) // @ game+0x2021fe0
};

// Class Solarland.RebuildableMeshRectangleWidget
// Size: 0x170 (Inherited: 0x170)
struct URebuildableMeshRectangleWidget : UMeshRectangleWidget {
};

// Class Solarland.OBMiniMapWidget
// Size: 0x5a8 (Inherited: 0x348)
struct UOBMiniMapWidget : USolarUserWidget {
	struct FString CurrentCheckedPlayerID; // 0x348(0x10)
	struct UMiniMapWidget* MiniMapWidget; // 0x358(0x08)
	struct URebuildableMeshRectangleWidget* PlayerNavIconMeshWidget; // 0x360(0x08)
	struct URebuildableMeshRectangleWidget* PlayerNavDirMeshWidget; // 0x368(0x08)
	struct URebuildableMeshRectangleWidget* PlayerNavNameMeshWidget; // 0x370(0x08)
	struct URebuildableMeshRectangleWidget* PlayerNavDeadMeshWidget; // 0x378(0x08)
	struct URebuildableMeshRectangleWidget* PlayerNavGunLineMeshWidget; // 0x380(0x08)
	struct UCanvasPanel* PlayerNavRTCanvas; // 0x388(0x08)
	float MiniMapPlayerNavScale; // 0x390(0x04)
	float GunLineDelayTime; // 0x394(0x04)
	struct UOBPlayerNavWidget* SpectatorNavWidget; // 0x398(0x08)
	struct TMap<int32_t, struct FTeamPlayerNavArray> MapOBTeamPlayerNavWidgets; // 0x3a0(0x50)
	struct UOBPlayerNavWidget* SpectatorNavWidgetClass; // 0x3f0(0x08)
	struct UOBPlayerNavWidget* OBTeamPlayerNavWidgetClass; // 0x3f8(0x08)
	char pad_400[0x10]; // 0x400(0x10)
	struct UTextureRenderTarget2D* MiniMapTexture; // 0x410(0x08)
	char pad_418[0x10]; // 0x418(0x10)
	struct FVector2D RTTexSize; // 0x428(0x08)
	int32_t NavIconType; // 0x430(0x04)
	struct FMiniMapData OBMiniMapData; // 0x434(0x18)
	char pad_44C[0x15c]; // 0x44c(0x15c)

	void SpectatePlayer(); // Function Solarland.OBMiniMapWidget.SpectatePlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x20234a0
	void RefreshTexture(); // Function Solarland.OBMiniMapWidget.RefreshTexture // (Final|Native|Protected|BlueprintCallable) // @ game+0x2023440
	void OnSetPlayerEmitBullet(struct FVector StartLoc, struct FVector AimLoc, struct FString SolarPlayerID); // Function Solarland.OBMiniMapWidget.OnSetPlayerEmitBullet // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2022e80
	void OnSetOBTeamPlayerNamePanelScale(enum class EPlayerNamePanelScale InPanelScale); // Function Solarland.OBMiniMapWidget.OnSetOBTeamPlayerNamePanelScale // (Final|Native|Public) // @ game+0x2022e00
	void OnSetCurrentCheckedPlayerWidget(struct FString SelectedPlayerID); // Function Solarland.OBMiniMapWidget.OnSetCurrentCheckedPlayerWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x2022d10
	void OnPlayingScrubStart(); // Function Solarland.OBMiniMapWidget.OnPlayingScrubStart // (Final|Native|Public) // @ game+0x2022760
	void OnOBTeamPlayerNavInitialized(); // Function Solarland.OBMiniMapWidget.OnOBTeamPlayerNavInitialized // (Final|Native|Public|BlueprintCallable) // @ game+0x20226c0
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBMiniMapWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x20223f0
	void InitRenderTexResources(); // Function Solarland.OBMiniMapWidget.InitRenderTexResources // (Final|Native|Protected|BlueprintCallable) // @ game+0x2022300
};

// Class Solarland.OBPlayerInfoWidget
// Size: 0x3e0 (Inherited: 0x348)
struct UOBPlayerInfoWidget : USolarUserWidget {
	struct USolarTextBlock* Text_TeamNum; // 0x348(0x08)
	struct UUIComponentPlayerName* Text_NickName; // 0x350(0x08)
	struct USolarTextBlock* Text_KillNum; // 0x358(0x08)
	struct UDeathViewHPWidget* OBHP; // 0x360(0x08)
	struct USolarTextBlock* Text_PlayerLevel; // 0x368(0x08)
	struct USolarTextBlock* Txt_Lv_Head; // 0x370(0x08)
	struct UImage* Img_Lv_Bg_2; // 0x378(0x08)
	struct UCanvasPanel* Panel_Left; // 0x380(0x08)
	struct UButton* Btn_Arrow_Left; // 0x388(0x08)
	struct UCanvasPanel* Panel_Right; // 0x390(0x08)
	struct UButton* Btn_Arrow_Right; // 0x398(0x08)
	char pad_3A0[0x30]; // 0x3a0(0x30)
	struct TArray<struct UOBPlayerWeaponWidget*> SlotWeaponCacheWidgets; // 0x3d0(0x10)

	void SpectatePrevTeammate(); // Function Solarland.OBPlayerInfoWidget.SpectatePrevTeammate // (Final|Native|Private) // @ game+0x20234c0
	void SpectateNextTeammate(); // Function Solarland.OBPlayerInfoWidget.SpectateNextTeammate // (Final|Native|Private) // @ game+0x2023480
	void SetIsCheater(bool bCheater); // Function Solarland.OBPlayerInfoWidget.SetIsCheater // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnWeaponSlotEquip(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.OBPlayerInfoWidget.OnWeaponSlotEquip // (Final|Native|Protected) // @ game+0x2023370
	void OnWeaponSlotActive(int32_t InWeaponSlotID, struct AActor* InActiveWeapon); // Function Solarland.OBPlayerInfoWidget.OnWeaponSlotActive // (Final|Native|Protected) // @ game+0x20232a0
	void OnSpectateTargetChanged(); // Function Solarland.OBPlayerInfoWidget.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x20230e0
	void OnScrubCharactersCreated(); // Function Solarland.OBPlayerInfoWidget.OnScrubCharactersCreated // (Final|Native|Private) // @ game+0x2022cf0
	void OnPlayerKillNumChange(char KillCount); // Function Solarland.OBPlayerInfoWidget.OnPlayerKillNumChange // (Final|Native|Private) // @ game+0x20226e0
	void OnCharacterLevelChanged(int32_t NewLevel); // Function Solarland.OBPlayerInfoWidget.OnCharacterLevelChanged // (Final|Native|Private) // @ game+0x20225a0
};

// Class Solarland.OBPlayerMoreInfoWidget
// Size: 0x3b8 (Inherited: 0x348)
struct UOBPlayerMoreInfoWidget : USolarUserWidget {
	struct USolarImage* Img_Super_Skill; // 0x348(0x08)
	struct UGaugeImage* Super_Skill_Countdown; // 0x350(0x08)
	struct UProgressBar* Super_Skill_Progress_CD; // 0x358(0x08)
	struct UImage* img_Super_Skill_Forbid; // 0x360(0x08)
	struct USolarImage* Img_Super_Skill_Shadow; // 0x368(0x08)
	struct USolarTextBlock* Txt_Super_Skill_Progress; // 0x370(0x08)
	struct USolarImage* Img_Tactical_Skill; // 0x378(0x08)
	struct UGaugeImage* Tactical_Skill_Countdown; // 0x380(0x08)
	struct UProgressBar* Tactical_Skill_Progress_CD; // 0x388(0x08)
	struct UImage* img_Tactical_Skill_Forbid; // 0x390(0x08)
	struct USolarImage* Img_Tactical_Skill_Shadow; // 0x398(0x08)
	struct USolarTextBlock* Txt_Tactical_Skill_Progress; // 0x3a0(0x08)
	char pad_3A8[0x10]; // 0x3a8(0x10)

	void UpdatePlayerVJetFlyChargeUI(float RemainTime, float Percent); // Function Solarland.OBPlayerMoreInfoWidget.UpdatePlayerVJetFlyChargeUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UpdatePlayerMoreInfoUI(); // Function Solarland.OBPlayerMoreInfoWidget.UpdatePlayerMoreInfoUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UpdatePlayerJetFlyInfoUI(); // Function Solarland.OBPlayerMoreInfoWidget.UpdatePlayerJetFlyInfoUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UpdatePlayerHJetFlyChargeUI(float RemainTime, float Percent); // Function Solarland.OBPlayerMoreInfoWidget.UpdatePlayerHJetFlyChargeUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UnregisterDelegates(); // Function Solarland.OBPlayerMoreInfoWidget.UnregisterDelegates // (Final|Native|Private) // @ game+0x20234e0
	void StopRoleAbilityContinueAnim(int32_t RoleAbilityIndex); // Function Solarland.OBPlayerMoreInfoWidget.StopRoleAbilityContinueAnim // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetChargeState(bool bStart, bool InUsedForVertical); // Function Solarland.OBPlayerMoreInfoWidget.SetChargeState // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RegisterDelegates(); // Function Solarland.OBPlayerMoreInfoWidget.RegisterDelegates // (Final|Native|Private) // @ game+0x2023460
	void PlayRoleAbilityRefreshAnim(int32_t RoleAbilityIndex); // Function Solarland.OBPlayerMoreInfoWidget.PlayRoleAbilityRefreshAnim // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void PlayRoleAbilityContinueAnim(int32_t RoleAbilityIndex); // Function Solarland.OBPlayerMoreInfoWidget.PlayRoleAbilityContinueAnim // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnVJetChargeStateChanged(bool bStart); // Function Solarland.OBPlayerMoreInfoWidget.OnVJetChargeStateChanged // (Final|Native|Private) // @ game+0x2023210
	void OnSpectateTargetItemsChanged(struct TArray<struct FReplicateItemData> InItemDatas); // Function Solarland.OBPlayerMoreInfoWidget.OnSpectateTargetItemsChanged // (Final|Native|Private) // @ game+0x2023100
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.OBPlayerMoreInfoWidget.OnSpecTargetChanged // (Final|Native|Private) // @ game+0x2023010
	void OnRoleAbilityStateChange(int32_t RoleAbilityIndex, int32_t State); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityStateChange // (Final|Native|Private) // @ game+0x2022c00
	void OnRoleAbilityStartCD(int32_t RoleAbilityIndex, float StartCDServerTime, float StartCDTime); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityStartCD // (Final|Native|Private) // @ game+0x2022af0
	void OnRoleAbilityContinous(int32_t RoleAbilityIndex, bool bTurnOn, float Duration); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityContinous // (Final|Native|Private) // @ game+0x20229e0
	void OnRoleAbilityChange(int32_t RoleAbilityIndex, bool bHaveAbility, int32_t CharacterId, int32_t PlayerLevel); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityChange // (Final|Native|Private) // @ game+0x2022890
	void OnRoleAbilityCDDurationChange(int32_t RoleAbilityIndex, int32_t Duration, bool bDurationReduced); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityCDDurationChange // (Final|Native|Private) // @ game+0x2022780
	void OnHJetChargeStateChanged(bool bStart); // Function Solarland.OBPlayerMoreInfoWidget.OnHJetChargeStateChanged // (Final|Native|Private) // @ game+0x2022630
	void OnCharacterJetFlyModuleLevelChanged(int32_t NewLv); // Function Solarland.OBPlayerMoreInfoWidget.OnCharacterJetFlyModuleLevelChanged // (Final|Native|Private) // @ game+0x2022510
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBPlayerMoreInfoWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x2022480
	int32_t GetSpectatedPlayerItemMaxPileByID(int32_t InItemID); // Function Solarland.OBPlayerMoreInfoWidget.GetSpectatedPlayerItemMaxPileByID // (Final|Native|Public|BlueprintCallable) // @ game+0x2022260
	int32_t GetSpectatedPlayerItemCountByID(int32_t InItemID); // Function Solarland.OBPlayerMoreInfoWidget.GetSpectatedPlayerItemCountByID // (Final|Native|Public|BlueprintCallable) // @ game+0x20221c0
	int32_t GetCharacterJetModuleLevel(bool InUsedForVertical); // Function Solarland.OBPlayerMoreInfoWidget.GetCharacterJetModuleLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x2022090
};

// Class Solarland.PlayerNavWidget
// Size: 0x380 (Inherited: 0x348)
struct UPlayerNavWidget : USolarUserWidget {
	struct UWidgetSwitcher* IconSwitcher; // 0x348(0x08)
	struct UCanvasPanel* PlayerNav; // 0x350(0x08)
	struct UCanvasPanel* PlayerOutOfMapNav; // 0x358(0x08)
	struct UImage* FOV; // 0x360(0x08)
	struct UImage* ImageRoleNav; // 0x368(0x08)
	struct UTextBlock* PlayerOrder; // 0x370(0x08)
	char pad_378[0x8]; // 0x378(0x08)

	void SwitchPlayerNav(bool bOutOfBounds); // Function Solarland.PlayerNavWidget.SwitchPlayerNav // (Final|Native|Public|BlueprintCallable) // @ game+0x2031300
	void SetBrushResourceObject(struct UObject* InSprite); // Function Solarland.PlayerNavWidget.SetBrushResourceObject // (Final|Native|Public|BlueprintCallable) // @ game+0x2030d10
	void ResetPlayerNav(); // Function Solarland.PlayerNavWidget.ResetPlayerNav // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerDead(); // Function Solarland.PlayerNavWidget.ReceivePlayerDead // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnAllPlayerNavVisibilityChanged(bool bVisible); // Function Solarland.PlayerNavWidget.OnAllPlayerNavVisibilityChanged // (Final|Native|Protected) // @ game+0x202ea70
};

// Class Solarland.OBPlayerNavWidget
// Size: 0x418 (Inherited: 0x380)
struct UOBPlayerNavWidget : UPlayerNavWidget {
	struct FString CurrentSolarPlayerID; // 0x380(0x10)
	int32_t RecommendedZOrder; // 0x390(0x04)
	char pad_394[0x14]; // 0x394(0x14)
	struct UImage* Arror; // 0x3a8(0x08)
	struct UImage* Fire_Arror; // 0x3b0(0x08)
	struct USolarTextBlock* Text_TeamNumb; // 0x3b8(0x08)
	struct USolarImage* Img_Bg; // 0x3c0(0x08)
	struct USolarImage* Img_Frame; // 0x3c8(0x08)
	struct USolarImage* Img_death; // 0x3d0(0x08)
	struct USolarImage* Img_FrameArrow; // 0x3d8(0x08)
	struct UCanvasPanel* panel_player; // 0x3e0(0x08)
	struct UCanvasPanel* panel_OB; // 0x3e8(0x08)
	struct UWidgetSwitcher* wgs_mod; // 0x3f0(0x08)
	struct UUIComponentPlayerName* text_playername; // 0x3f8(0x08)
	struct USolarButton* Btn_Player; // 0x400(0x08)
	struct UImage* Img_NameBg; // 0x408(0x08)
	bool IsWidgetChecked; // 0x410(0x01)
	char pad_411[0x7]; // 0x411(0x07)

	void SetWidgetBeChecked(bool InIsChecked); // Function Solarland.OBPlayerNavWidget.SetWidgetBeChecked // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetPlayerNamePanelScale(enum class EPlayerNamePanelScale InPanelScale); // Function Solarland.OBPlayerNavWidget.SetPlayerNamePanelScale // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetPlayerIsFire(bool InIsFire); // Function Solarland.OBPlayerNavWidget.SetPlayerIsFire // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	float GetPlayerNamePanelScale(enum class EPlayerNamePanelScale InPanelScale); // Function Solarland.OBPlayerNavWidget.GetPlayerNamePanelScale // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.OBPlayerWeaponWidget
// Size: 0x378 (Inherited: 0x348)
struct UOBPlayerWeaponWidget : USolarUserWidget {
	struct UWidgetSwitcher* Switcher_Status; // 0x348(0x08)
	struct UImage* Img_WP; // 0x350(0x08)
	struct UImage* Img_WPSelected; // 0x358(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> OwnerWeapon; // 0x360(0x08)
	char pad_368[0x8]; // 0x368(0x08)
	struct FTimerHandle LoadWeaponIconHandle; // 0x370(0x08)

	struct UTexture2D* GetWeaponTexture(); // Function Solarland.OBPlayerWeaponWidget.GetWeaponTexture // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2026740
};

// Class Solarland.OBProgressBar
// Size: 0x3b8 (Inherited: 0x348)
struct UOBProgressBar : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	float TotalTime; // 0x350(0x04)
	float CurrentTime; // 0x354(0x04)
	bool bIsPause; // 0x358(0x01)
	char pad_359[0x7]; // 0x359(0x07)
	struct FMulticastInlineDelegate OnSetReplayTime; // 0x360(0x10)
	struct UButton* Btn_Rewind; // 0x370(0x08)
	struct UButton* Btn_PausePlay; // 0x378(0x08)
	struct UButton* Btn_FastForward; // 0x380(0x08)
	struct USolarButton* Btn_Speed_Left; // 0x388(0x08)
	struct USolarButton* Btn_Speed_Right; // 0x390(0x08)
	struct UTextBlock* Txt_CurrentTime; // 0x398(0x08)
	struct UTextBlock* Txt_TotalTime; // 0x3a0(0x08)
	struct USolarTextBlock* Txt_PlaybackSpeed; // 0x3a8(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_PausePlay; // 0x3b0(0x08)

	void UpdateSlider(); // Function Solarland.OBProgressBar.UpdateSlider // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UpdatePlaybackSpeed(); // Function Solarland.OBProgressBar.UpdatePlaybackSpeed // (Final|Native|Private) // @ game+0x20278f0
	void SetTotalTime(); // Function Solarland.OBProgressBar.SetTotalTime // (Final|Native|Private) // @ game+0x20276e0
	void SetTextByTime(struct UTextBlock* TextBlock, float InTime); // Function Solarland.OBProgressBar.SetTextByTime // (Final|Native|Public|BlueprintCallable) // @ game+0x2027610
	void SetCurrentTime(); // Function Solarland.OBProgressBar.SetCurrentTime // (Final|Native|Private) // @ game+0x2027530
	void RegisterEvent(); // Function Solarland.OBProgressBar.RegisterEvent // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnSliderValueChanged(float Value); // Function Solarland.OBProgressBar.OnSliderValueChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x20272a0
	void OnSetReplayTime__DelegateSignature(); // DelegateFunction Solarland.OBProgressBar.OnSetReplayTime__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnClickSkipForwardButton(); // Function Solarland.OBProgressBar.OnClickSkipForwardButton // (Final|Native|Public) // @ game+0x2027260
	void OnClickSkipBackButton(); // Function Solarland.OBProgressBar.OnClickSkipBackButton // (Final|Native|Public) // @ game+0x2027240
	void OnClickPlaybackSpeedUp(); // Function Solarland.OBProgressBar.OnClickPlaybackSpeedUp // (Final|Native|Public) // @ game+0x2027220
	void OnClickPlaybackSlowDown(); // Function Solarland.OBProgressBar.OnClickPlaybackSlowDown // (Final|Native|Public) // @ game+0x2027200
	void OnClickPausePlayButton(); // Function Solarland.OBProgressBar.OnClickPausePlayButton // (Final|Native|Public) // @ game+0x20271e0
	void CallTogglePauseDispatcher(bool bPause); // Function Solarland.OBProgressBar.CallTogglePauseDispatcher // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void CallOnSkipTimeDispatcher(float InTime); // Function Solarland.OBProgressBar.CallOnSkipTimeDispatcher // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.OBRootWidget
// Size: 0x350 (Inherited: 0x348)
struct UOBRootWidget : USolarUserWidget {
	struct UCanvasPanel* Panel_ScopeUI; // 0x348(0x08)

	void AddScopeToPanel(struct UUserWidget* InChildWidget, bool bInSpectate); // Function Solarland.OBRootWidget.AddScopeToPanel // (Final|Native|Protected) // @ game+0x2026610
};

// Class Solarland.OBScoreboard
// Size: 0x418 (Inherited: 0x350)
struct UOBScoreboard : UOBSettlementBase {
	struct UWidgetAnimation* Anim_Enter; // 0x350(0x08)
	struct UScrollBox* ScrollBox_TeamList; // 0x358(0x08)
	struct UCanvasPanel* Top3; // 0x360(0x08)
	struct UCanvasPanel* Bg_Settlement; // 0x368(0x08)
	struct UCanvasPanel* Bg_InGame; // 0x370(0x08)
	struct UOBScoreboardSingleTopTeam* FirstTeam; // 0x378(0x08)
	struct UOBScoreboardSingleTopTeam* SecondTeam; // 0x380(0x08)
	struct UOBScoreboardSingleTopTeam* ThirdTeam; // 0x388(0x08)
	struct UButton* CloseBtn; // 0x390(0x08)
	struct UHorizontalBox* Btn; // 0x398(0x08)
	struct UHorizontalBox* Remain_Total; // 0x3a0(0x08)
	struct UTileView* TileView_Others; // 0x3a8(0x08)
	struct USolarTextBlock* Txt_PlayerRemain; // 0x3b0(0x08)
	struct USolarTextBlock* Txt_PlayerTotal; // 0x3b8(0x08)
	struct USolarTextBlock* Txt_TeamRemain; // 0x3c0(0x08)
	struct USolarTextBlock* Txt_TeamTotal; // 0x3c8(0x08)
	enum class E_Type_OB_Scoreboard WidgetTypeChoice; // 0x3d0(0x01)
	char pad_3D1[0x7]; // 0x3d1(0x07)
	struct FCupViewInfo CupViewInfo; // 0x3d8(0x28)
	char pad_400[0x8]; // 0x400(0x08)
	struct TArray<struct UOBScoreboardSingleTopTeam*> TopThreeTeamWidget; // 0x408(0x10)

	void UpdateTeamTotal(); // Function Solarland.OBScoreboard.UpdateTeamTotal // (Final|Native|Private) // @ game+0x2027b10
	void UpdateTeamRemain(); // Function Solarland.OBScoreboard.UpdateTeamRemain // (Final|Native|Private) // @ game+0x2027af0
	void UpdatePlayerTotal(); // Function Solarland.OBScoreboard.UpdatePlayerTotal // (Final|Native|Private) // @ game+0x2027ad0
	void UpdatePlayerRemain(); // Function Solarland.OBScoreboard.UpdatePlayerRemain // (Final|Native|Private) // @ game+0x2027ab0
	void SetWidgetType(enum class E_Type_OB_Scoreboard WidgetType); // Function Solarland.OBScoreboard.SetWidgetType // (Final|Native|Public|BlueprintCallable) // @ game+0x2027700
	void OnWidgetTypeChangedEvent(); // Function Solarland.OBScoreboard.OnWidgetTypeChangedEvent // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnTeamDataChanged(); // Function Solarland.OBScoreboard.OnTeamDataChanged // (Final|Native|Private) // @ game+0x2027360
	void InitPanelWithData(struct TArray<struct FDetailedTeamListViewInfo> TeamDetailedInfo, struct FCupViewInfo& InCupViewInfo); // Function Solarland.OBScoreboard.InitPanelWithData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2026ab0
	void InitPanelInGame(struct UOBSettlementRoot* InOnwer); // Function Solarland.OBScoreboard.InitPanelInGame // (Final|Native|Public|BlueprintCallable) // @ game+0x2026a20
	void InitPanel(struct UOBSettlementRoot* InOnwer); // Function Solarland.OBScoreboard.InitPanel // (Native|Public|BlueprintCallable) // @ game+0x2017bd0
	void CloseScoreboardInGame(); // Function Solarland.OBScoreboard.CloseScoreboardInGame // (Final|Native|Public|BlueprintCallable) // @ game+0x20266e0
};

// Class Solarland.OBScoreboardSingleOtherTeam
// Size: 0x360 (Inherited: 0x348)
struct UOBScoreboardSingleOtherTeam : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct UOBScoreboardSingleTeam* UI_OB_Scoreboard_SingleTeam; // 0x350(0x08)
	struct USolarTextBlock* Txt_Rank; // 0x358(0x08)

	void SetIsCheater(bool bIsCheater); // Function Solarland.OBScoreboardSingleOtherTeam.SetIsCheater // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.OBScoreboardSingleTeam
// Size: 0x430 (Inherited: 0x348)
struct UOBScoreboardSingleTeam : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct FString SideName; // 0x350(0x10)
	int32_t Rank; // 0x360(0x04)
	char pad_364[0x4]; // 0x364(0x04)
	struct UOBSettlementRoot* UIOBRoot; // 0x368(0x08)
	struct USolarTextBlock* Txt_TeamNumber; // 0x370(0x08)
	struct USolarImage* Img_TitleBox; // 0x378(0x08)
	struct USolarImage* Img_TitleBg; // 0x380(0x08)
	struct USolarButton* Btn_ViewDetail; // 0x388(0x08)
	struct UOverlay* Overlay_Spectating; // 0x390(0x08)
	struct UCanvasPanel* Panel_ScoreboardUnit; // 0x398(0x08)
	struct UOBScoreboard* ParentScoreboard; // 0x3a0(0x08)
	struct TArray<struct FDetailedListViewInfo> CurrentDetailedInfo; // 0x3a8(0x10)
	char TeamID; // 0x3b8(0x01)
	char pad_3B9[0x7]; // 0x3b9(0x07)
	struct FString TeamName; // 0x3c0(0x10)
	struct TArray<struct ASolarPlayerState*> Teammate; // 0x3d0(0x10)
	char pad_3E0[0x50]; // 0x3e0(0x50)

	void LuaShowDetailedDataList(struct UWidget*& OutWidget); // Function Solarland.OBScoreboardSingleTeam.LuaShowDetailedDataList // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void InitPanelWithData(struct FDetailedTeamListViewInfo& DetailedTeamInfo, int32_t InRank, struct UOBScoreboard* InScoreboard); // Function Solarland.OBScoreboardSingleTeam.InitPanelWithData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2026c70
	void InitPanel(char InTeamId, int32_t InRank, struct UOBSettlementRoot* InOBRoot, bool bInGame, bool bSpectating); // Function Solarland.OBScoreboardSingleTeam.InitPanel // (Final|Native|Public|BlueprintCallable) // @ game+0x2026770
};

// Class Solarland.OBScoreboardSingleTeamData
// Size: 0x58 (Inherited: 0x28)
struct UOBScoreboardSingleTeamData : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	struct TArray<struct FDetailedTeamListViewInfo> DetailedTeamListViewInfo; // 0x40(0x10)
	struct UOBSettlementRoot* UIOBRoot; // 0x50(0x08)
};

// Class Solarland.OBScoreboardSingleTopTeam
// Size: 0x360 (Inherited: 0x348)
struct UOBScoreboardSingleTopTeam : USolarUserWidget {
	struct UTexture2D* RankIcon; // 0x348(0x08)
	struct UOBScoreboardSingleTeam* UI_OB_Scoreboard_SingleTeam; // 0x350(0x08)
	struct USolarImage* Img_Rank; // 0x358(0x08)

	void InitPanelWithData(struct FDetailedTeamListViewInfo& DetailedTeamInfo, int32_t Rank, struct UOBScoreboard* InScoreboard); // Function Solarland.OBScoreboardSingleTopTeam.InitPanelWithData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2026de0
	void InitPanel(char InTeamId, int32_t InRank, struct UOBSettlementRoot* InOBRoot); // Function Solarland.OBScoreboardSingleTopTeam.InitPanel // (Final|Native|Public|BlueprintCallable) // @ game+0x2026910
};

// Class Solarland.OBScoreboardUnit
// Size: 0x380 (Inherited: 0x348)
struct UOBScoreboardUnit : USolarUserWidget {
	struct ASolarPlayerState* PlayerState; // 0x348(0x08)
	struct UUIComponentPlayerName* Txt_PlayerName; // 0x350(0x08)
	struct UUIComponentPlayerName* Txt_KillNum; // 0x358(0x08)
	struct UUIComponentPlayerName* Txt_Assist; // 0x360(0x08)
	struct UUIComponentPlayerName* Txt_DMGD; // 0x368(0x08)
	char pad_370[0x10]; // 0x370(0x10)

	void UpdatePlayerKillNum(struct ASolarPlayerState* PS); // Function Solarland.OBScoreboardUnit.UpdatePlayerKillNum // (Final|Native|Private|Const) // @ game+0x2027a20
	void UpdatePlayerDamageDealt(float NewValue); // Function Solarland.OBScoreboardUnit.UpdatePlayerDamageDealt // (Final|Native|Private) // @ game+0x20279a0
	void UpdatePlayerAssistNum(struct ASolarPlayerState* PS); // Function Solarland.OBScoreboardUnit.UpdatePlayerAssistNum // (Final|Native|Private|Const) // @ game+0x2027910
	void SetRebirthOpacity(); // Function Solarland.OBScoreboardUnit.SetRebirthOpacity // (Final|Native|Public) // @ game+0x2027570
	void SetIsCheater(bool bIsCheater); // Function Solarland.OBScoreboardUnit.SetIsCheater // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetDeathOpacity(); // Function Solarland.OBScoreboardUnit.SetDeathOpacity // (Final|Native|Public) // @ game+0x2027550
	void SetConnectStateOpacity(bool bUselessParam); // Function Solarland.OBScoreboardUnit.SetConnectStateOpacity // (Final|Native|Public) // @ game+0x20274a0
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.OBScoreboardUnit.OnCharacterDead // (Final|Native|Private) // @ game+0x2027150
};

// Class Solarland.OBSettlementRoot
// Size: 0x388 (Inherited: 0x348)
struct UOBSettlementRoot : USolarUserWidget {
	char pad_348[0x18]; // 0x348(0x18)
	struct UWidgetSwitcher* PageSwitcher; // 0x360(0x08)
	struct UOBVictoryTeam* UI_OB_VictoryTeam; // 0x368(0x08)
	struct UOBDetailedDataList* UI_OB_DetailedData_List; // 0x370(0x08)
	struct UOBScoreboard* UI_OB_Scoreboard_AllTeam; // 0x378(0x08)
	char pad_380[0x8]; // 0x380(0x08)

	void ToggleScoreboard(); // Function Solarland.OBSettlementRoot.ToggleScoreboard // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SortTeamsByTeamRank(); // Function Solarland.OBSettlementRoot.SortTeamsByTeamRank // (Final|Native|Public|BlueprintCallable) // @ game+0x2027890
	void SkipSettlement(); // Function Solarland.OBSettlementRoot.SkipSettlement // (Final|Native|Public|BlueprintCallable) // @ game+0x2027870
	void ShowPage(int32_t PageIndex); // Function Solarland.OBSettlementRoot.ShowPage // (Final|Native|Public|BlueprintCallable) // @ game+0x20277e0
	void ShowNextPage(); // Function Solarland.OBSettlementRoot.ShowNextPage // (Final|Native|Public|BlueprintCallable) // @ game+0x20277c0
	void SetSwitcherVisibility(enum class ESlateVisibility InVisibility); // Function Solarland.OBSettlementRoot.SetSwitcherVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x2027590
	void OnTDMVictoryAnimFinished(); // Function Solarland.OBSettlementRoot.OnTDMVictoryAnimFinished // (Final|Native|Private) // @ game+0x2027340
	void OnEnterSettlementStage(); // Function Solarland.OBSettlementRoot.OnEnterSettlementStage // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBSettlementRoot.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x2026fa0
	void EnterTDMSettlement(); // Function Solarland.OBSettlementRoot.EnterTDMSettlement // (Final|Native|Private|BlueprintCallable) // @ game+0x2026720
	void EnterBRSettlement(); // Function Solarland.OBSettlementRoot.EnterBRSettlement // (Final|Native|Private|BlueprintCallable) // @ game+0x2026700
};

// Class Solarland.OBSpectateInfoWidget
// Size: 0x378 (Inherited: 0x348)
struct UOBSpectateInfoWidget : USolarUserWidget {
	struct UCanvasPanel* Panel_CurrentTeam; // 0x348(0x08)
	struct UCanvasPanel* Panel_CurrentPlayerInfo; // 0x350(0x08)
	struct UCanvasPanel* Panel_Direction; // 0x358(0x08)
	struct UOBTeamInfoWidget* OB_TeamInfo; // 0x360(0x08)
	struct UUserWidget* UI_OB_Target_Switcher; // 0x368(0x08)
	char pad_370[0x8]; // 0x370(0x08)

	void OnUISettingUIAllChanged(bool bShow); // Function Solarland.OBSpectateInfoWidget.OnUISettingUIAllChanged // (Final|Native|Private) // @ game+0x2027380
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBSpectateInfoWidget.OnBattleOBHUDTypeChanged // (Final|Native|Public|HasOutParms) // @ game+0x2027030
};

// Class Solarland.OBTeamInfoWidget
// Size: 0x388 (Inherited: 0x348)
struct UOBTeamInfoWidget : USolarUserWidget {
	struct USolarImage* Image_TeamBG; // 0x348(0x08)
	struct USolarTextBlock* Text_TeamNum; // 0x350(0x08)
	struct USolarTextBlock* Text_TeamKillCount; // 0x358(0x08)
	struct UVerticalBox* Panel_Teammates; // 0x360(0x08)
	char pad_368[0x20]; // 0x368(0x20)

	void OnTeamKillCountChanged(char KillCount); // Function Solarland.OBTeamInfoWidget.OnTeamKillCountChanged // (Final|Native|Private) // @ game+0x20226e0
	void OnTeamDataChanged(); // Function Solarland.OBTeamInfoWidget.OnTeamDataChanged // (Final|Native|Private) // @ game+0x2027280
	void OnSpectateTargetChanged(); // Function Solarland.OBTeamInfoWidget.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x2027320
	void OnScrubCharactersCreated(); // Function Solarland.OBTeamInfoWidget.OnScrubCharactersCreated // (Final|Native|Private) // @ game+0x2027280
};

// Class Solarland.OBTeamListItemObject
// Size: 0x38 (Inherited: 0x28)
struct UOBTeamListItemObject : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Solarland.OBTeamListItemWidget
// Size: 0x378 (Inherited: 0x348)
struct UOBTeamListItemWidget : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct USolarImage* Image_TeamBG; // 0x350(0x08)
	struct USolarImage* Image_Frame; // 0x358(0x08)
	struct UTextBlock* Text_TeamNum; // 0x360(0x08)
	struct UVerticalBox* Panel_Teammates; // 0x368(0x08)
	struct UOBTeamListItemObject* DataObject; // 0x370(0x08)

	void SetIsCheater(bool bCheater); // Function Solarland.OBTeamListItemWidget.SetIsCheater // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.OBTeamListPopupWidget
// Size: 0x380 (Inherited: 0x348)
struct UOBTeamListPopupWidget : USolarUserWidget {
	struct UOBTeamListWidget* OBTeamList; // 0x348(0x08)
	struct USolarUserWidget* UI_TabControl_TeamList; // 0x350(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x358(0x08)
	struct UWidgetAnimation* Anim_Exit; // 0x360(0x08)
	char pad_368[0x18]; // 0x368(0x18)

	void UpdateNearbyTeamList(); // Function Solarland.OBTeamListPopupWidget.UpdateNearbyTeamList // (Final|Native|Private) // @ game+0x20278d0
	void ToggleShowPlayerList(); // Function Solarland.OBTeamListPopupWidget.ToggleShowPlayerList // (Final|Native|Private) // @ game+0x20278b0
	void ShowNearbyTeamList(); // Function Solarland.OBTeamListPopupWidget.ShowNearbyTeamList // (Final|Native|Protected|BlueprintCallable) // @ game+0x20277a0
	void ShowAllTeamList(); // Function Solarland.OBTeamListPopupWidget.ShowAllTeamList // (Final|Native|Protected|BlueprintCallable) // @ game+0x2027780
	void OnUISettingUIAllChanged(bool bShow); // Function Solarland.OBTeamListPopupWidget.OnUISettingUIAllChanged // (Final|Native|Private) // @ game+0x2027410
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBTeamListPopupWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x20270c0
	void OnAnimExitFinished(); // Function Solarland.OBTeamListPopupWidget.OnAnimExitFinished // (Final|Native|Private) // @ game+0x2026f80
	bool IsOBTeamListVisible(); // Function Solarland.OBTeamListPopupWidget.IsOBTeamListVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x2026f50
};

// Class Solarland.OBTeamListWidget
// Size: 0x3c0 (Inherited: 0x348)
struct UOBTeamListWidget : USolarUserWidget {
	struct USolarListView* ListView_Teams; // 0x348(0x08)
	char pad_350[0x58]; // 0x350(0x58)
	struct USolarOBUIModel* SolarOBUIModel; // 0x3a8(0x08)
	struct TArray<struct UObject*> TeamItemObjects; // 0x3b0(0x10)

	void OnTeamDataChanged(); // Function Solarland.OBTeamListWidget.OnTeamDataChanged // (Final|Native|Private) // @ game+0x202bce0
};

// Class Solarland.OBTeammateInfoWidget
// Size: 0x3a8 (Inherited: 0x348)
struct UOBTeammateInfoWidget : USolarUserWidget {
	struct UUIComponentPlayerName* Text_NickName; // 0x348(0x08)
	struct UUIComponentPlayerName* Text_KillNum; // 0x350(0x08)
	struct USolarButton* Btn_Spectate; // 0x358(0x08)
	struct UDeathViewHPWidget* OBHP; // 0x360(0x08)
	struct UImage* Image_SpectateIcon; // 0x368(0x08)
	struct UImage* Image_BoardedVehicleIcon; // 0x370(0x08)
	struct UOverlay* Overlay_Spectating; // 0x378(0x08)
	char pad_380[0x28]; // 0x380(0x28)

	void UpdateRebirthUI(struct ASolarCharacter* InSolarCharacter); // Function Solarland.OBTeammateInfoWidget.UpdateRebirthUI // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void UpdateBuyResurrectionItemPlayerID(struct FString PlayerId); // Function Solarland.OBTeammateInfoWidget.UpdateBuyResurrectionItemPlayerID // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void SetIsCheater(bool bCheater); // Function Solarland.OBTeammateInfoWidget.SetIsCheater // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnUpdateBoardedVehicleIcon(); // Function Solarland.OBTeammateInfoWidget.OnUpdateBoardedVehicleIcon // (Final|Native|Private) // @ game+0x202bdf0
	void OnTeammateDead(); // Function Solarland.OBTeammateInfoWidget.OnTeammateDead // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnTeammateAlive(); // Function Solarland.OBTeammateInfoWidget.OnTeammateAlive // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnSpectateTargetChanged(); // Function Solarland.OBTeammateInfoWidget.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x202bcc0
	void OnScrubCharactersCreated(); // Function Solarland.OBTeammateInfoWidget.OnScrubCharactersCreated // (Final|Native|Private) // @ game+0x202bca0
	void OnPlayerStateChange(bool bUselessParam); // Function Solarland.OBTeammateInfoWidget.OnPlayerStateChange // (Final|Native|Private) // @ game+0x202bb80
	void OnPlayerRebirth(); // Function Solarland.OBTeammateInfoWidget.OnPlayerRebirth // (Final|Native|Private) // @ game+0x202bb60
	void OnPlayerKillNumChange(char KillCount); // Function Solarland.OBTeammateInfoWidget.OnPlayerKillNumChange // (Final|Native|Private) // @ game+0x202bae0
	void OnPlayerDeadChange(); // Function Solarland.OBTeammateInfoWidget.OnPlayerDeadChange // (Final|Native|Private) // @ game+0x202bac0
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.OBTeammateInfoWidget.OnCharacterDead // (Final|Native|Private) // @ game+0x202b790
	void OnBtnSpectateClick(); // Function Solarland.OBTeammateInfoWidget.OnBtnSpectateClick // (Final|Native|Private) // @ game+0x202b770
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBTeammateInfoWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x202b6e0
};

// Class Solarland.OBVictory
// Size: 0x390 (Inherited: 0x350)
struct UOBVictory : UOBSettlementBase {
	char pad_350[0x10]; // 0x350(0x10)
	struct UWidgetAnimation* OpenVictoryAnim; // 0x360(0x08)
	struct UWidgetAnimation* CloseVictoryAnim; // 0x368(0x08)
	char pad_370[0x20]; // 0x370(0x20)

	void PlayAnim(); // Function Solarland.OBVictory.PlayAnim // (Final|Native|Public) // @ game+0x202bf70
	void OnOpenVictoryAnimFinished(); // Function Solarland.OBVictory.OnOpenVictoryAnimFinished // (Final|Native|Private) // @ game+0x202ba80
	void OnCloseVictoryAnimFinished(); // Function Solarland.OBVictory.OnCloseVictoryAnimFinished // (Final|Native|Private) // @ game+0x202b230
	void OnAnimEnd__DelegateSignature(); // DelegateFunction Solarland.OBVictory.OnAnimEnd__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void InitPanel(struct UOBSettlementRoot* InOwner); // Function Solarland.OBVictory.InitPanel // (Native|Public|BlueprintCallable) // @ game+0x2017bd0
	void BroadcastOnAnimEnd(); // Function Solarland.OBVictory.BroadcastOnAnimEnd // (Final|Native|Private) // @ game+0x202b230
};

// Class Solarland.OBVictoryMember
// Size: 0x350 (Inherited: 0x348)
struct UOBVictoryMember : USolarUserWidget {
	struct ASolarPlayerState* PlayerState; // 0x348(0x08)

	void InitPlayer(struct ASolarPlayerState* InState); // Function Solarland.OBVictoryMember.InitPlayer // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.OBVictoryTeam
// Size: 0x398 (Inherited: 0x350)
struct UOBVictoryTeam : UOBSettlementBase {
	struct UOBVictory* BigVictory; // 0x350(0x08)
	struct UOBVictory* SmallVictory; // 0x358(0x08)
	struct UCanvasPanel* TeamPanel; // 0x360(0x08)
	struct USolarTextBlock* Txt_TeamNum; // 0x368(0x08)
	struct USolarTextBlock* Txt_KillNum; // 0x370(0x08)
	struct USolarTextBlock* Txt_TeamCnt; // 0x378(0x08)
	struct UHorizontalBox* AvatarHorization; // 0x380(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x388(0x08)
	char pad_390[0x8]; // 0x390(0x08)

	void OnAnimEndEvent(); // Function Solarland.OBVictoryTeam.OnAnimEndEvent // (Final|Native|Private) // @ game+0x202b6c0
	void InitPanel(struct UOBSettlementRoot* InOwner); // Function Solarland.OBVictoryTeam.InitPanel // (Native|Public|BlueprintCallable) // @ game+0x2017bd0
};

// Class Solarland.OpenTreasureBoxProgressWidget
// Size: 0x390 (Inherited: 0x348)
struct UOpenTreasureBoxProgressWidget : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct USolarBattleModel* BattleViewModel; // 0x350(0x08)
	char pad_358[0x10]; // 0x358(0x10)
	struct UButton* Button_Open; // 0x368(0x08)
	struct UButton* Button_Cancel; // 0x370(0x08)
	struct UProgressBar* ProgressBar_Percent; // 0x378(0x08)
	struct UImage* ProgressBar_Percent_PC; // 0x380(0x08)
	struct UTextBlock* Txt_Time; // 0x388(0x08)

	void UpdateProgress(struct ASolarTreasureBoxActor* InBoxActor, float InProgress); // Function Solarland.OpenTreasureBoxProgressWidget.UpdateProgress // (Final|Native|Protected) // @ game+0x202c980
	void UnBindDelegates(); // Function Solarland.OpenTreasureBoxProgressWidget.UnBindDelegates // (Final|Native|Protected) // @ game+0x8e9ae0
	bool TryOpenAirdropBox(); // Function Solarland.OpenTreasureBoxProgressWidget.TryOpenAirdropBox // (Final|Native|Protected) // @ game+0x202c7a0
	void SetTBoxActor(struct ASolarTreasureBoxActor* InBoxActor); // Function Solarland.OpenTreasureBoxProgressWidget.SetTBoxActor // (Final|Native|Protected) // @ game+0x202c5f0
	void SetSelfVisibility(bool InShow); // Function Solarland.OpenTreasureBoxProgressWidget.SetSelfVisibility // (Final|Native|Protected) // @ game+0x202c4d0
	void SetAirdropBoxActor(struct AActor* InBoxActor); // Function Solarland.OpenTreasureBoxProgressWidget.SetAirdropBoxActor // (Final|Native|Protected) // @ game+0x202c270
	void OnPressCancelButtonPC(); // Function Solarland.OpenTreasureBoxProgressWidget.OnPressCancelButtonPC // (Final|Native|Protected) // @ game+0x202bc80
	bool OnPressButtonPC(); // Function Solarland.OpenTreasureBoxProgressWidget.OnPressButtonPC // (Final|Native|Protected) // @ game+0x202bc50
	void OnPressButtonOpen(); // Function Solarland.OpenTreasureBoxProgressWidget.OnPressButtonOpen // (Final|Native|Protected) // @ game+0x202bc30
	void OnPressButtonCancel(); // Function Solarland.OpenTreasureBoxProgressWidget.OnPressButtonCancel // (Final|Native|Protected) // @ game+0x202bc10
	void OnOpenCharacterChanged(struct AAirDropTreasureBox* InBoxActor); // Function Solarland.OpenTreasureBoxProgressWidget.OnOpenCharacterChanged // (Final|Native|Protected) // @ game+0x202b9f0
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.OpenTreasureBoxProgressWidget.OnDrivingStateChanged // (Final|Native|Protected) // @ game+0x202b8d0
	void OnBtnActiveChanged(bool Inactive); // Function Solarland.OpenTreasureBoxProgressWidget.OnBtnActiveChanged // (Final|Native|Protected) // @ game+0x1f99610
	void OnAirdropProgressChanged(struct AAirDropTreasureBox* InBoxActor); // Function Solarland.OpenTreasureBoxProgressWidget.OnAirdropProgressChanged // (Final|Native|Protected) // @ game+0x202b630
	void HideSelfByThisID(int64_t InThisID); // Function Solarland.OpenTreasureBoxProgressWidget.HideSelfByThisID // (Final|Native|Protected) // @ game+0x202b4e0
	void ForceCancel(); // Function Solarland.OpenTreasureBoxProgressWidget.ForceCancel // (Final|Native|Protected) // @ game+0x202b270
	bool BSameThisID(int64_t InThisID); // Function Solarland.OpenTreasureBoxProgressWidget.BSameThisID // (Final|Native|Protected) // @ game+0x202b090
	void BindDelegates(); // Function Solarland.OpenTreasureBoxProgressWidget.BindDelegates // (Final|Native|Protected) // @ game+0x202b1d0
};

// Class Solarland.OpenTreasureBoxWidget
// Size: 0x378 (Inherited: 0x348)
struct UOpenTreasureBoxWidget : USolarUserWidget {
	char pad_348[0x20]; // 0x348(0x20)
	struct UButton* Button_Open; // 0x368(0x08)
	struct UTextBlock* Text_CostNum; // 0x370(0x08)

	void UpdateCost(); // Function Solarland.OpenTreasureBoxWidget.UpdateCost // (Final|Native|Protected) // @ game+0x202c8d0
	void UpdateButtonState(); // Function Solarland.OpenTreasureBoxWidget.UpdateButtonState // (Final|Native|Protected) // @ game+0x202c820
	void UnBindDelegates(); // Function Solarland.OpenTreasureBoxWidget.UnBindDelegates // (Final|Native|Protected) // @ game+0x8e9ae0
	bool TryOpenTreasureBox(); // Function Solarland.OpenTreasureBoxWidget.TryOpenTreasureBox // (Final|Native|Protected) // @ game+0x202c7d0
	void SetTreasureBoxActor(struct AActor* InBoxActor); // Function Solarland.OpenTreasureBoxWidget.SetTreasureBoxActor // (Final|Native|Protected) // @ game+0x202c710
	void SetTBoxActor(struct ASolarTreasureBoxActor* InBoxActor); // Function Solarland.OpenTreasureBoxWidget.SetTBoxActor // (Final|Native|Protected) // @ game+0x202c680
	void SetSelfVisibility(bool InShow); // Function Solarland.OpenTreasureBoxWidget.SetSelfVisibility // (Final|Native|Protected) // @ game+0x202c560
	void OnOpenBox(); // Function Solarland.OpenTreasureBoxWidget.OnOpenBox // (Final|Native|Protected) // @ game+0x202b9d0
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.OpenTreasureBoxWidget.OnDrivingStateChanged // (Final|Native|Protected) // @ game+0x202b950
	void OnClickButtonOpen(); // Function Solarland.OpenTreasureBoxWidget.OnClickButtonOpen // (Final|Native|Protected) // @ game+0x202b8b0
	void HideSelfByThisID(int64_t InThisID); // Function Solarland.OpenTreasureBoxWidget.HideSelfByThisID // (Final|Native|Protected) // @ game+0x202b570
	bool BSameThisID(int64_t InThisID); // Function Solarland.OpenTreasureBoxWidget.BSameThisID // (Final|Native|Protected) // @ game+0x202b130
	void BindDelegates(); // Function Solarland.OpenTreasureBoxWidget.BindDelegates // (Final|Native|Protected) // @ game+0x202b1f0
};

// Class Solarland.OpponentPerspectiveEffectController
// Size: 0x270 (Inherited: 0x28)
struct UOpponentPerspectiveEffectController : UActorEffectController {
	float ParamsSmoothSpeed; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct FOpponentPerspectiveMaterialParams DefaultMaterialParams; // 0x30(0x220)
	struct TArray<struct FOpponentPerspectiveMaterialParamsConditional> ConditionalMaterialParams; // 0x250(0x10)
	char pad_260[0x10]; // 0x260(0x10)
};

// Class Solarland.OrnamentComponentVisibilityConfig
// Size: 0x88 (Inherited: 0x30)
struct UOrnamentComponentVisibilityConfig : UDataAsset {
	struct FGameplayTagRequirements VisibleTagRequirements; // 0x30(0x50)
	struct FGameplayTag VisibilityFlagTag; // 0x80(0x08)

	struct FGameplayTagRequirements GetVisibleTagRequirements(); // Function Solarland.OrnamentComponentVisibilityConfig.GetVisibleTagRequirements // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x202b480
	struct FGameplayTag GetVisibilityFlagTag(); // Function Solarland.OrnamentComponentVisibilityConfig.GetVisibilityFlagTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x202b460
};

// Class Solarland.PakHashManager
// Size: 0xb0 (Inherited: 0x28)
struct UPakHashManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FMulticastInlineDelegate OnPakHashCheckFailed; // 0x30(0x10)
	bool bEnablePakHash; // 0x40(0x01)
	char pad_41[0x1f]; // 0x41(0x1f)
	struct TMap<struct FString, struct FString> MountedPakHashMap; // 0x60(0x50)

	bool IsPakFileHashsReady(); // Function Solarland.PakHashManager.IsPakFileHashsReady // (Final|Native|Public|BlueprintCallable) // @ game+0x202b600
	bool IsEnablePakHash(); // Function Solarland.PakHashManager.IsEnablePakHash // (Final|Native|Public|BlueprintCallable) // @ game+0x1ff35f0
	struct TMap<struct FString, struct FString> GetReadyPakFileHashs(); // Function Solarland.PakHashManager.GetReadyPakFileHashs // (Final|Native|Public|BlueprintCallable) // @ game+0x202b370
	struct TArray<struct FString> GetAllMountedPakNames(); // Function Solarland.PakHashManager.GetAllMountedPakNames // (Final|Native|Public|BlueprintCallable) // @ game+0x202b290
	bool CheckAllMountedPaks(struct TMap<struct FString, struct FString>& BasePakMap, struct TMap<struct FString, struct FString>& PatchPakMap); // Function Solarland.PakHashManager.CheckAllMountedPaks // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void CalculatePakFileMD5(); // Function Solarland.PakHashManager.CalculatePakFileMD5 // (Final|Native|Public|BlueprintCallable) // @ game+0x202b250
};

// Class Solarland.ParallelMoveSubsystem
// Size: 0x78 (Inherited: 0x30)
struct UParallelMoveSubsystem : UWorldSubsystem {
	char pad_30[0x48]; // 0x30(0x48)
};

// Class Solarland.PassiveSkillDataAsset
// Size: 0x78 (Inherited: 0x30)
struct UPassiveSkillDataAsset : UPrimaryDataAsset {
	struct FSoftClassPath SkillClassPath; // 0x30(0x18)
	struct FSoftObjectPath SkillIconPath; // 0x48(0x18)
	struct FWrappedLocalTextID SkillName; // 0x60(0x04)
	struct FWrappedLocalTextID SkillDescription; // 0x64(0x04)
	struct TArray<struct FPassiveSkillLevelDescription> LevelUpConfigs; // 0x68(0x10)
};

// Class Solarland.PassiveSkillIcon
// Size: 0x278 (Inherited: 0x260)
struct UPassiveSkillIcon : UUserWidget {
	struct UImage* ImgIcon; // 0x260(0x08)
	char pad_268[0x10]; // 0x268(0x10)

	void UpdateImageIcon(int32_t InCharacterId); // Function Solarland.PassiveSkillIcon.UpdateImageIcon // (Final|Native|Protected) // @ game+0x202c8f0
};

// Class Solarland.PickupButtonWidget
// Size: 0x428 (Inherited: 0x348)
struct UPickupButtonWidget : USolarUserWidget {
	struct UCheckBox* CheckBox_Normal; // 0x348(0x08)
	struct USizeBox* SizeBox_Normal; // 0x350(0x08)
	struct FString CurrentCheckBoxSpName; // 0x358(0x10)
	struct FString CheckBoxIconNormalSpName; // 0x368(0x10)
	struct FString CheckBoxIconHightLightSpName; // 0x378(0x10)
	struct FString CheckBoxIconPrefix; // 0x388(0x10)
	struct FVector2D Vecter2DZero; // 0x398(0x08)
	struct FVector2D Vecter2DOne; // 0x3a0(0x08)
	enum class EPickupItemType FirstExistType; // 0x3a8(0x01)
	enum class EPickupItemType CurrentDisplayType; // 0x3a9(0x01)
	char pad_3AA[0x6]; // 0x3aa(0x06)
	struct TArray<struct AActor*> CurrentDispayActorList; // 0x3b0(0x10)
	char pad_3C0[0x68]; // 0x3c0(0x68)

	void UpdateCheckBoxesVisibilityRef(int32_t InItemCount); // Function Solarland.PickupButtonWidget.UpdateCheckBoxesVisibilityRef // (Final|Native|Protected) // @ game+0x202c840
	void UnbindPickUpDelegates(); // Function Solarland.PickupButtonWidget.UnbindPickUpDelegates // (Final|Native|Protected) // @ game+0x202c800
	void SetPickupSwitchByType(enum class EPickupItemType InType, bool InFlag); // Function Solarland.PickupButtonWidget.SetPickupSwitchByType // (Final|Native|Protected) // @ game+0x202c400
	void SetItemDataRef(struct TArray<struct AActor*>& InObjectList, enum class EPickupItemType InType); // Function Solarland.PickupButtonWidget.SetItemDataRef // (Final|Native|Protected|HasOutParms) // @ game+0x202c300
	void OnUpdatePickupListStates(bool bItemUpdate); // Function Solarland.PickupButtonWidget.OnUpdatePickupListStates // (Final|Native|Protected) // @ game+0x202bee0
	void OnUpdateCheckBoxesHighLight(enum class EPickupItemType InType, bool IsRecommend); // Function Solarland.PickupButtonWidget.OnUpdateCheckBoxesHighLight // (Final|Native|Protected) // @ game+0x202be10
	void OnTogglePickupListByKeyboard(); // Function Solarland.PickupButtonWidget.OnTogglePickupListByKeyboard // (Final|Native|Protected) // @ game+0x202bdd0
	void OnTogglePickupList(bool Flag, bool NotSelf); // Function Solarland.PickupButtonWidget.OnTogglePickupList // (Final|Native|Protected) // @ game+0x202bd00
	void OnPickupListClear(); // Function Solarland.PickupButtonWidget.OnPickupListClear // (Final|Native|Protected) // @ game+0x202baa0
	void OnCheckNormal(bool IsChecked); // Function Solarland.PickupButtonWidget.OnCheckNormal // (Final|Native|Protected) // @ game+0x202b820
	void BindPickUpDelegates(); // Function Solarland.PickupButtonWidget.BindPickUpDelegates // (Final|Native|Protected) // @ game+0x202b210
};

// Class Solarland.PickupItemObject
// Size: 0x90 (Inherited: 0x28)
struct UPickupItemObject : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	enum class EPickupListItemType ListViewDataType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UObject* CustomizedData; // 0x38(0x08)
	struct TMap<int32_t, struct FPickupListViewItemData> MergedDatas; // 0x40(0x50)

	void ResetData(); // Function Solarland.PickupItemObject.ResetData // (Final|Native|Public) // @ game+0x2030c00
};

// Class Solarland.PickupItemWidget
// Size: 0x6a8 (Inherited: 0x348)
struct UPickupItemWidget : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct UCanvasPanel* CanvasPanel_Anim; // 0x350(0x08)
	struct UTextBlock* Debug; // 0x358(0x08)
	struct UOverlay* Item; // 0x360(0x08)
	struct UImage* Img_Quality_BG; // 0x368(0x08)
	struct UImage* Img_Quality_BG_Line; // 0x370(0x08)
	struct UImage* ItemImage_BG; // 0x378(0x08)
	struct UImage* ItemImage; // 0x380(0x08)
	struct UImage* TagImage; // 0x388(0x08)
	struct UImage* ImgBulletType; // 0x390(0x08)
	struct USolarTextBlock* ItemName; // 0x398(0x08)
	struct UTextBlock* ItemCount; // 0x3a0(0x08)
	struct UTextBlock* ItemCountAdd; // 0x3a8(0x08)
	struct USolarTextBlock* ItemDesc; // 0x3b0(0x08)
	struct USolarTextBlock* Txt_WeaponSkill; // 0x3b8(0x08)
	struct USizeBox* ItemSubDesc; // 0x3c0(0x08)
	struct UCanvasPanel* CardItemIcon; // 0x3c8(0x08)
	struct USolarCheckBox* Mark; // 0x3d0(0x08)
	struct USizeBox* SizeBox_Select; // 0x3d8(0x08)
	struct FSolarItemData PreviewItemData; // 0x3e0(0xb8)
	struct TMap<int32_t, struct FPickupListViewItemData> MergedDatas; // 0x498(0x50)
	enum class EPickupListItemType ListViewDataType; // 0x4e8(0x01)
	char pad_4E9[0x7]; // 0x4e9(0x07)
	struct UObject* CustomizeData; // 0x4f0(0x08)
	struct FString WeaponPartPrePath; // 0x4f8(0x10)
	struct FString ItemPrePath; // 0x508(0x10)
	struct FLinearColor ColorNormal; // 0x518(0x10)
	struct FLinearColor ColorRecommend; // 0x528(0x10)
	struct FLinearColor ColorWeaponUp; // 0x538(0x10)
	struct FLinearColor ColorWeaponDown; // 0x548(0x10)
	struct TMap<enum class EWeaponType, struct FSoftObjectPath> WeaponType2BulltSpMap; // 0x558(0x50)
	int32_t WeaponMaxLevelLocalID; // 0x5a8(0x04)
	int32_t WeaponUpgradeLocalID; // 0x5ac(0x04)
	bool bForceResetAnim; // 0x5b0(0x01)
	bool bMarkForceUpdate; // 0x5b1(0x01)
	char pad_5B2[0x7b]; // 0x5b2(0x7b)
	bool bImplementedUpdateFunc; // 0x62d(0x01)
	char pad_62E[0x2]; // 0x62e(0x02)
	struct TArray<struct FLinearColor> ImgQualityBGColors; // 0x630(0x10)
	struct TArray<struct FSlateColor> ItemNameColors; // 0x640(0x10)
	struct TMap<int32_t, struct UTexture2D*> CacheQualityBgMap; // 0x650(0x50)
	char pad_6A0[0x8]; // 0x6a0(0x08)

	void UpdateQuality(int32_t SpecifyQuality); // Function Solarland.PickupItemWidget.UpdateQuality // (Final|Native|Protected|BlueprintCallable) // @ game+0x20315a0
	void TryResetEntryAnim(); // Function Solarland.PickupItemWidget.TryResetEntryAnim // (Final|Native|Protected) // @ game+0x20314b0
	void OnUpdateCustomizedItem(struct UObject* InObject); // Function Solarland.PickupItemWidget.OnUpdateCustomizedItem // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnRquestEntryPlayAnimCustom(struct UObject* InCustomObj); // Function Solarland.PickupItemWidget.OnRquestEntryPlayAnimCustom // (Final|Native|Protected|BlueprintCallable) // @ game+0x20300f0
	void OnRquestEntryPlayAnim(int32_t InThisID); // Function Solarland.PickupItemWidget.OnRquestEntryPlayAnim // (Final|Native|Protected|BlueprintCallable) // @ game+0x2030060
	void OnGameUserSettingChanged(); // Function Solarland.PickupItemWidget.OnGameUserSettingChanged // (Final|Native|Protected) // @ game+0x202fdd0
	void OnCustomizedItemClicked(struct UObject* InObject); // Function Solarland.PickupItemWidget.OnCustomizedItemClicked // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnCheckBoxMarkChanged(bool bIsChecked); // Function Solarland.PickupItemWidget.OnCheckBoxMarkChanged // (Final|Native|Protected) // @ game+0x202ed80
	void MarkItemInPickupList(); // Function Solarland.PickupItemWidget.MarkItemInPickupList // (Final|Native|Public) // @ game+0x202ea50
};

// Class Solarland.PickupListWidget
// Size: 0x4c8 (Inherited: 0x348)
struct UPickupListWidget : USolarUserWidget {
	struct USizeBox* SizeBoxItemList; // 0x348(0x08)
	struct USolarListView* ItemList; // 0x350(0x08)
	struct UPickupSightWidget* UI_Pickup_Sight; // 0x358(0x08)
	struct FVector2D ScopeOffset; // 0x360(0x08)
	int32_t PickupItemCount; // 0x368(0x04)
	float RefreshSelectDelay; // 0x36c(0x04)
	struct FName PickupPreActionName; // 0x370(0x08)
	struct FName PickupNextActionName; // 0x378(0x08)
	struct FVector2D ZeroVector; // 0x380(0x08)
	struct FTimerHandle PushHandler; // 0x388(0x08)
	int32_t DisplayLength; // 0x390(0x04)
	bool bIsMovePos; // 0x394(0x01)
	char pad_395[0x3]; // 0x395(0x03)
	int32_t SelectScopeThisID; // 0x398(0x04)
	char pad_39C[0x1c]; // 0x39c(0x1c)
	struct TMap<int64_t, struct UPickupItemObject*> CachedPickupItemsMap; // 0x3b8(0x50)
	struct TMap<int32_t, struct UPickupItemObject*> MergedPickupItemsMap; // 0x408(0x50)
	struct TArray<struct UObject*> WarppedItemList; // 0x458(0x10)
	struct TArray<struct UObject*> WarppedTeamCardList; // 0x468(0x10)
	char pad_478[0x50]; // 0x478(0x50)

	void UnbindPickUpDelegates(); // Function Solarland.PickupListWidget.UnbindPickUpDelegates // (Final|Native|Protected) // @ game+0x20314d0
	bool TryPickupFirstItem(bool bAutoPickup); // Function Solarland.PickupListWidget.TryPickupFirstItem // (Final|Native|Public) // @ game+0x2031410
	void SetSelectPreviousItem(); // Function Solarland.PickupListWidget.SetSelectPreviousItem // (Final|Native|Protected) // @ game+0x20311c0
	void SetSelectNextItem(); // Function Solarland.PickupListWidget.SetSelectNextItem // (Final|Native|Protected) // @ game+0x20311a0
	void SetIsMovePostion(bool InIsMovePos); // Function Solarland.PickupListWidget.SetIsMovePostion // (Final|Native|Public) // @ game+0x2030f50
	void RemoveCardItem(struct UObject* InCardItem, bool bPickup); // Function Solarland.PickupListWidget.RemoveCardItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x2030b30
	void RefreshPickupSightWidget(struct UObject* InSelectWidget, int32_t InSelectWidgetThisID); // Function Solarland.PickupListWidget.RefreshPickupSightWidget // (Final|Native|Public) // @ game+0x2030a60
	void RefreshListViewNextTick(); // Function Solarland.PickupListWidget.RefreshListViewNextTick // (Final|Native|Public) // @ game+0x2030a40
	void OnTogglePickupList(bool bShow, bool NotToSelf); // Function Solarland.PickupListWidget.OnTogglePickupList // (Final|Native|Protected) // @ game+0x20306b0
	void OnPickupListCalculated(struct TArray<struct AActor*>& InActorList, enum class EPickupItemType InType); // Function Solarland.PickupListWidget.OnPickupListCalculated // (Final|Native|Protected|HasOutParms) // @ game+0x202fe90
	void OnEntryPlayPickupAnim(float InAnimTime); // Function Solarland.PickupListWidget.OnEntryPlayPickupAnim // (Final|Native|Public) // @ game+0x202fa10
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.PickupListWidget.OnDrivingStateChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x202f870
	struct UObject* GetCustomObjData(struct UObject* InItemData); // Function Solarland.PickupListWidget.GetCustomObjData // (Final|Native|Public|BlueprintCallable) // @ game+0x202e940
	bool CheckIsPickupItemValid(int32_t InThisID); // Function Solarland.PickupListWidget.CheckIsPickupItemValid // (Final|Native|Public) // @ game+0x202e880
	void BindPickUpDelegates(); // Function Solarland.PickupListWidget.BindPickUpDelegates // (Final|Native|Protected) // @ game+0x202e830
	void AddCardItem(struct UObject* InCardItem); // Function Solarland.PickupListWidget.AddCardItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x202e7a0
};

// Class Solarland.PickupSightWidget
// Size: 0x3f0 (Inherited: 0x348)
struct UPickupSightWidget : USolarUserWidget {
	struct UImage* Img_WeaponA; // 0x348(0x08)
	struct UImage* Img_WeaponB; // 0x350(0x08)
	struct UImage* Img_Backpack; // 0x358(0x08)
	struct UImage* Img_DisableA; // 0x360(0x08)
	struct UImage* Img_DisableB; // 0x368(0x08)
	struct UImage* Img_Border_A; // 0x370(0x08)
	struct UImage* Img_Border_B; // 0x378(0x08)
	struct UImage* Img_Disable_Bag; // 0x380(0x08)
	struct UCanvasPanel* Panel_WP_UnarmA; // 0x388(0x08)
	struct UCanvasPanel* Panel_WP_UnarmB; // 0x390(0x08)
	struct UCanvasPanel* Panel_Arrow_Left; // 0x398(0x08)
	struct UCanvasPanel* Panel_Arrow_Right; // 0x3a0(0x08)
	struct UUIWeaponPartWidget* WeaponPartA; // 0x3a8(0x08)
	struct UUIWeaponPartWidget* WeaponPartB; // 0x3b0(0x08)
	struct UUIWeaponPartWidget* WeaponPartBag; // 0x3b8(0x08)
	enum class EWeaponPartType PickScopeType; // 0x3c0(0x01)
	char pad_3C1[0x3]; // 0x3c1(0x03)
	int32_t PickScopeLevel; // 0x3c4(0x04)
	struct AActor* PickActor; // 0x3c8(0x08)
	int32_t PickThisId; // 0x3d0(0x04)
	enum class EItemType PickActorType; // 0x3d4(0x04)
	struct FLinearColor ColorDisable; // 0x3d8(0x10)
	char pad_3E8[0x8]; // 0x3e8(0x08)

	void UpdateBagScope(); // Function Solarland.PickupSightWidget.UpdateBagScope // (Final|Native|Public) // @ game+0x20314f0
	void OnWeaponUpgradeLevel(int32_t InWeaponSlot); // Function Solarland.PickupSightWidget.OnWeaponUpgradeLevel // (Final|Native|Public) // @ game+0x2030990
	void OnWeaponUpdate(struct ASolarCharacter* InCharacter); // Function Solarland.PickupSightWidget.OnWeaponUpdate // (Final|Native|Public) // @ game+0x2030900
	void OnClickWeaponB(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickWeaponB // (Final|Native|Protected|HasOutParms) // @ game+0x202f6d0
	void OnClickWeaponA(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickWeaponA // (Final|Native|Protected|HasOutParms) // @ game+0x202f530
	void OnClickImgDisableBag(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickImgDisableBag // (Final|Native|Protected|HasOutParms) // @ game+0x202f390
	void OnClickImgDisableB(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickImgDisableB // (Final|Native|Protected|HasOutParms) // @ game+0x202f1f0
	void OnClickImgDisableA(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickImgDisableA // (Final|Native|Protected|HasOutParms) // @ game+0x202f050
	void OnClickBag(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickBag // (Final|Native|Protected|HasOutParms) // @ game+0x202ee10
};

// Class Solarland.PlayerMark
// Size: 0x280 (Inherited: 0x260)
struct UPlayerMark : UUserWidget {
	struct UImage* PlayerMarkImage; // 0x260(0x08)
	struct UTextBlock* Length; // 0x268(0x08)
	struct USolarMapManager* MapManager; // 0x270(0x08)
	struct FVector2D MarkPoint; // 0x278(0x08)
};

// Class Solarland.PlayerOperationList
// Size: 0x710 (Inherited: 0x348)
struct UPlayerOperationList : USolarUserWidget {
	char pad_348[0x10]; // 0x348(0x10)
	struct TMap<struct FString, struct UWidget*> CollectedLayout; // 0x358(0x50)
	char pad_3A8[0x50]; // 0x3a8(0x50)
	enum class EPlayerWidgetState WidgetVisibilityState; // 0x3f8(0x01)
	char pad_3F9[0x7]; // 0x3f9(0x07)
	struct UCanvasPanel* Panel_AngleView; // 0x400(0x08)
	struct UWidgetControlGroup* FlyActiveControl; // 0x408(0x08)
	struct UWidgetControlGroup* JetActiveControl; // 0x410(0x08)
	struct USolarMovablePad* FreeLookPad; // 0x418(0x08)
	struct UImage* FreeLookIcon; // 0x420(0x08)
	struct UImage* Img_SprintActive; // 0x428(0x08)
	struct UImage* Img_SprintLock; // 0x430(0x08)
	struct UImage* FX_CircleLoop; // 0x438(0x08)
	struct TSoftObjectPtr<UPaperSprite> PressedFreeLook; // 0x440(0x28)
	struct TSoftObjectPtr<UPaperSprite> ReleasedFreeLook; // 0x468(0x28)
	struct TSoftObjectPtr<UTexture> SkydiveSprintImage; // 0x490(0x28)
	struct TSoftObjectPtr<UTexture> SkydiveSprintHoveredImage; // 0x4b8(0x28)
	struct TSoftObjectPtr<UTexture> VehicleAutoMoveImage; // 0x4e0(0x28)
	struct TSoftObjectPtr<UTexture> VehicleAutoMoveHoveredImage; // 0x508(0x28)
	struct UCanvasPanel* Panel_SpectateHide; // 0x530(0x08)
	struct UHUDCountdownWidget* Panel_CountDown; // 0x538(0x08)
	struct USolarInputButton* BT_Jump; // 0x540(0x08)
	struct UButton* BTN_TeamRescue; // 0x548(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_RescueBTN; // 0x550(0x08)
	struct UHUDPassiveHeadWidget* UI_PassiveHead_item; // 0x558(0x08)
	struct UCanvasPanel* Panel_Crouch; // 0x560(0x08)
	struct UCanvasPanel* Sprint; // 0x568(0x08)
	struct UCanvasPanel* SprintActiveOncePanel; // 0x570(0x08)
	struct USolarTextBlock* Txt_JoystickLock; // 0x578(0x08)
	struct UWidgetAnimation* FX_CircleOnce_Anim; // 0x580(0x08)
	struct UWidgetAnimation* FX_CircleLoop_Anim; // 0x588(0x08)
	int32_t JoystickLockTipsSprintTextID; // 0x590(0x04)
	int32_t JoystickLockTipsSkydiveTextID; // 0x594(0x04)
	struct UButton* BTN_BuyResurrection; // 0x598(0x08)
	struct UCanvasPanel* Panel_ShieldUpgrade; // 0x5a0(0x08)
	struct UWidgetSwitcher* Switcher_State; // 0x5a8(0x08)
	struct UCanvasPanel* Panel_Btn; // 0x5b0(0x08)
	struct UCanvasPanel* Panel_CD; // 0x5b8(0x08)
	struct USolarButton* Btn_ShiledUpgrade; // 0x5c0(0x08)
	struct UImage* Img_Light; // 0x5c8(0x08)
	struct UImage* Img_Enter_Light_2; // 0x5d0(0x08)
	struct UImage* Img_Enter_Light_3; // 0x5d8(0x08)
	struct UImage* Img_Loop_Light_2; // 0x5e0(0x08)
	struct UImage* Img_Loop_Light_3; // 0x5e8(0x08)
	struct UImage* Img_Loop_Arrow_4; // 0x5f0(0x08)
	char pad_5F8[0x8]; // 0x5f8(0x08)
	struct UImage* Img_Shield; // 0x600(0x08)
	struct UTextBlock* Text_GameProgressTime; // 0x608(0x08)
	struct UButton* BTN_GameProgressCancel; // 0x610(0x08)
	struct UGaugeImage* Image_GameProgressBar; // 0x618(0x08)
	struct UWidgetAnimation* Anim_ShieldUpgrade_Enter; // 0x620(0x08)
	struct UWidgetAnimation* Anim_ShieldUpgrade_Exit; // 0x628(0x08)
	float CircleOnceAnimInterval; // 0x630(0x04)
	int32_t FastReliefSkillCharacterID; // 0x634(0x04)
	char pad_638[0x50]; // 0x638(0x50)
	struct USolarButton* BT_ElectricShop; // 0x688(0x08)
	char pad_690[0xc]; // 0x690(0x0c)
	float EShopHUDCheckTime; // 0x69c(0x04)
	struct FString EShopHUDName; // 0x6a0(0x10)
	char pad_6B0[0x8]; // 0x6b0(0x08)
	struct UHorizontalBox* Vehicle_Drive; // 0x6b8(0x08)
	struct UHorizontalBox* Vehicle_Passenger; // 0x6c0(0x08)
	struct UHorizontalBox* Vehicle_Passenger_PC; // 0x6c8(0x08)
	struct UCanvasPanel* Vehicle_Repair_Status; // 0x6d0(0x08)
	struct UCanvasPanel* Panel_Vehicle_Drive_Passenger; // 0x6d8(0x08)
	struct USolarVehicleHealthWidget* UI_Vehicle_Health; // 0x6e0(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_VehicleRepair; // 0x6e8(0x08)
	struct UWalkWidgetNew* WalkJoyStick; // 0x6f0(0x08)
	char bJoyStickVisible : 1; // 0x6f8(0x01)
	char pad_6F8_1 : 7; // 0x6f8(0x01)
	char pad_6F9[0x7]; // 0x6f9(0x07)
	struct UCanvasPanel* Panel_FollowDance; // 0x700(0x08)
	struct USolarInputButton* Btn_FollowDance; // 0x708(0x08)

	void UpdateFreeLookUI(bool bHide); // Function Solarland.PlayerOperationList.UpdateFreeLookUI // (Final|Native|Public|BlueprintCallable) // @ game+0x2031510
	void SwitchWidgetVisibilityByState(enum class EPlayerWidgetState NewState); // Function Solarland.PlayerOperationList.SwitchWidgetVisibilityByState // (Final|Native|Public|BlueprintCallable) // @ game+0x2031390
	void SetUIShowForSwimming(bool bSwimming); // Function Solarland.PlayerOperationList.SetUIShowForSwimming // (Final|Native|Public|BlueprintCallable) // @ game+0x2031270
	void SetUIShowForSpectateMode(bool InSepectateMode); // Function Solarland.PlayerOperationList.SetUIShowForSpectateMode // (Final|Native|Public|BlueprintCallable) // @ game+0x20311e0
	void SetShowBattleControls(bool bShow); // Function Solarland.PlayerOperationList.SetShowBattleControls // (Final|Native|Public|BlueprintCallable) // @ game+0x202ea70
	void SetRescueBtnVisibility(bool bShow); // Function Solarland.PlayerOperationList.SetRescueBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x2031110
	void SetJoyStickForVehicle(); // Function Solarland.PlayerOperationList.SetJoyStickForVehicle // (Final|Native|Public) // @ game+0x20310f0
	void SetJoyStickForSkydive(); // Function Solarland.PlayerOperationList.SetJoyStickForSkydive // (Final|Native|Public) // @ game+0x20310d0
	void SetJoyStickForNormal(); // Function Solarland.PlayerOperationList.SetJoyStickForNormal // (Final|Native|Public) // @ game+0x20310b0
	void SetJoyStickDisplay(bool bShow, bool bParachutingType); // Function Solarland.PlayerOperationList.SetJoyStickDisplay // (Final|Native|Public) // @ game+0x2030fe0
	void SetForceCollapsedFreeLook(bool bCollapsed); // Function Solarland.PlayerOperationList.SetForceCollapsedFreeLook // (Final|Native|Public|BlueprintCallable) // @ game+0x2030ec0
	void SetCanClimbFromWater(bool bEnable); // Function Solarland.PlayerOperationList.SetCanClimbFromWater // (Final|Native|Public|BlueprintCallable) // @ game+0x2030e30
	void SetBuyResurrecBTNVisibility(bool bShow); // Function Solarland.PlayerOperationList.SetBuyResurrecBTNVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x2030da0
	void ScopeUIStateChanged(bool BOpened); // Function Solarland.PlayerOperationList.ScopeUIStateChanged // (Final|Native|Public) // @ game+0x2030c80
	void ResetJoyStickSprintState(); // Function Solarland.PlayerOperationList.ResetJoyStickSprintState // (Final|Native|Protected) // @ game+0x2030c60
	void ResetJoyStickControlInput(); // Function Solarland.PlayerOperationList.ResetJoyStickControlInput // (Final|Native|Protected) // @ game+0x2030c40
	void ResetJoyStick(); // Function Solarland.PlayerOperationList.ResetJoyStick // (Final|Native|Protected) // @ game+0x2030c20
	void RecheckElectricShopInteraction(); // Function Solarland.PlayerOperationList.RecheckElectricShopInteraction // (Final|Native|Protected) // @ game+0x2030a20
	void OnVehicleWeaponAbilityActivated(bool bInActive); // Function Solarland.PlayerOperationList.OnVehicleWeaponAbilityActivated // (Final|Native|Protected) // @ game+0x2030870
	void OnVehicleTypeChanged(); // Function Solarland.PlayerOperationList.OnVehicleTypeChanged // (Final|Native|Protected) // @ game+0x2030850
	void OnUpdateVehicleInteractionUIState(enum class EVehicleInterationUIState InUiState, struct ASolarVehiclePawn* InVehicleComponent); // Function Solarland.PlayerOperationList.OnUpdateVehicleInteractionUIState // (Final|Native|Protected) // @ game+0x2030780
	void OnTerminateSprintFree(); // Function Solarland.PlayerOperationList.OnTerminateSprintFree // (Final|Native|Public) // @ game+0x2030690
	void OnSprintLockIconActiveFunc(struct FVector2D SprintPosition); // Function Solarland.PlayerOperationList.OnSprintLockIconActiveFunc // (Final|Native|Public|HasDefaults) // @ game+0x2030610
	void OnSprintIconHideFunc(); // Function Solarland.PlayerOperationList.OnSprintIconHideFunc // (Final|Native|Public) // @ game+0x20305f0
	void OnSprintIconActiveFunc(struct FVector2D SprintPosition); // Function Solarland.PlayerOperationList.OnSprintIconActiveFunc // (Final|Native|Public|HasDefaults) // @ game+0x2030570
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.PlayerOperationList.OnSpectateTargetChanged // (Final|Native|Protected) // @ game+0x20304a0
	void OnShieldUpgradeStart(); // Function Solarland.PlayerOperationList.OnShieldUpgradeStart // (Final|Native|Protected) // @ game+0x2030480
	void OnShieldUpgradeItemChanged(int32_t NewCount, int32_t LastCount); // Function Solarland.PlayerOperationList.OnShieldUpgradeItemChanged // (Final|Native|Public) // @ game+0x20303b0
	void OnShieldUpgradeInterrupt(); // Function Solarland.PlayerOperationList.OnShieldUpgradeInterrupt // (Final|Native|Protected) // @ game+0x2030390
	void OnShieldUpgradeFinish(); // Function Solarland.PlayerOperationList.OnShieldUpgradeFinish // (Final|Native|Protected) // @ game+0x2030390
	void OnShieldChanged(float InCurValue, float InMaxValue, int32_t QualityColor, bool bIsAdvancedShield); // Function Solarland.PlayerOperationList.OnShieldChanged // (Final|Native|Public) // @ game+0x2030230
	void OnShieldAvailableChanged(bool bShow); // Function Solarland.PlayerOperationList.OnShieldAvailableChanged // (Final|Native|Public) // @ game+0x20301a0
	void OnSettingConfigSaved(); // Function Solarland.PlayerOperationList.OnSettingConfigSaved // (Final|Native|Protected) // @ game+0x2030180
	void OnPickupSwitchChanged(bool Inactive, bool InNotToSelf); // Function Solarland.PlayerOperationList.OnPickupSwitchChanged // (Final|Native|Protected) // @ game+0x202ff90
	void OnLocalPlaySet(); // Function Solarland.PlayerOperationList.OnLocalPlaySet // (Final|Native|Public) // @ game+0x202fe70
	void OnInVehicleJoyStickChange(enum class EDriveState InDriveState); // Function Solarland.PlayerOperationList.OnInVehicleJoyStickChange // (Final|Native|Protected) // @ game+0x202fdf0
	void OnFreeLookPadRelease(struct FGeometry& InGeometry, struct FPointerEvent& Event); // Function Solarland.PlayerOperationList.OnFreeLookPadRelease // (Final|Native|Public|HasOutParms) // @ game+0x202fc30
	void OnFreeLookPadPressed(struct FGeometry& InGeometry, struct FPointerEvent& Event); // Function Solarland.PlayerOperationList.OnFreeLookPadPressed // (Final|Native|Public|HasOutParms) // @ game+0x202fa90
	void OnEnterParachuting(); // Function Solarland.PlayerOperationList.OnEnterParachuting // (Final|Native|Public|BlueprintCallable) // @ game+0x202f9f0
	void OnEnterLanding(); // Function Solarland.PlayerOperationList.OnEnterLanding // (Final|Native|Public|BlueprintCallable) // @ game+0x202f9d0
	void OnEnterCruising(); // Function Solarland.PlayerOperationList.OnEnterCruising // (Final|Native|Public|BlueprintCallable) // @ game+0x202f9b0
	void OnElectricShopBtnClickedPC(); // Function Solarland.PlayerOperationList.OnElectricShopBtnClickedPC // (Final|Native|Protected) // @ game+0x202f990
	void OnElectricShopBtnClicked(); // Function Solarland.PlayerOperationList.OnElectricShopBtnClicked // (Final|Native|Protected) // @ game+0x202f970
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.PlayerOperationList.OnDrivingStateChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x202f8f0
	void OnClickFollowDance(); // Function Solarland.PlayerOperationList.OnClickFollowDance // (Final|Native|Protected) // @ game+0x202f030
	void OnClickBuyResurrection(); // Function Solarland.PlayerOperationList.OnClickBuyResurrection // (Final|Native|Public) // @ game+0x202f010
	void OnClickBtnTeamRescue(); // Function Solarland.PlayerOperationList.OnClickBtnTeamRescue // (Final|Native|Public) // @ game+0x202eff0
	void OnClickBtnShieldUpgrade(); // Function Solarland.PlayerOperationList.OnClickBtnShieldUpgrade // (Final|Native|Public) // @ game+0x202efd0
	void OnClickBtnCancelShieldUpgrade(); // Function Solarland.PlayerOperationList.OnClickBtnCancelShieldUpgrade // (Final|Native|Public) // @ game+0x202efb0
	void OnCharacterUsingSkillStatusChanged(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.PlayerOperationList.OnCharacterUsingSkillStatusChanged // (Final|Native|Public) // @ game+0x202ecb0
	void OnCharacterSet(struct ASolarCharacter* ControlledCharacter); // Function Solarland.PlayerOperationList.OnCharacterSet // (Final|Native|Protected) // @ game+0x202ec20
	void OnCharacterOverlapedElectricShop(bool InFlag); // Function Solarland.PlayerOperationList.OnCharacterOverlapedElectricShop // (Final|Native|Protected) // @ game+0x202eb90
	void OnCharacterIDSet(int32_t InCharacterId); // Function Solarland.PlayerOperationList.OnCharacterIDSet // (Final|Native|Protected) // @ game+0x202eb00
	void InputSprintLockStart(); // Function Solarland.PlayerOperationList.InputSprintLockStart // (Final|Native|Public) // @ game+0x202ea30
	void InputSprintFreeStart(); // Function Solarland.PlayerOperationList.InputSprintFreeStart // (Final|Native|Public) // @ game+0x202ea10
	enum class EDriveState GetLocallPlayerDriveState(); // Function Solarland.PlayerOperationList.GetLocallPlayerDriveState // (Final|Native|Public) // @ game+0x202e9e0
	void DoUpdateEShopButton(); // Function Solarland.PlayerOperationList.DoUpdateEShopButton // (Final|Native|Protected) // @ game+0x202e920
	bool CheckEShopHUDActive(); // Function Solarland.PlayerOperationList.CheckEShopHUDActive // (Final|Native|Protected) // @ game+0x202e850
	void ApplyPlayerJoyStickLayout(); // Function Solarland.PlayerOperationList.ApplyPlayerJoyStickLayout // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.PlayerOperationListPC
// Size: 0x718 (Inherited: 0x710)
struct UPlayerOperationListPC : UPlayerOperationList {
	struct UCanvasPanel* Panel_MobileHide; // 0x710(0x08)

	void OnChangedDriveState(enum class EDriveState InDriveState); // Function Solarland.PlayerOperationListPC.OnChangedDriveState // (Final|Native|Protected) // @ game+0x2034070
};

// Class Solarland.WeaponRecoilComponent
// Size: 0x228 (Inherited: 0xb0)
struct UWeaponRecoilComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct USolarGameInstanceBase* GameInstance; // 0xb8(0x08)
	bool bHActive; // 0xc0(0x01)
	bool bVActive; // 0xc1(0x01)
	bool bRActive; // 0xc2(0x01)
	char pad_C3[0x5]; // 0xc3(0x05)
	struct ASolarWeapon* MyWeaponActor; // 0xc8(0x08)
	struct USingleWeaponConfig* WeaponConfig; // 0xd0(0x08)
	struct UCurveFloat* YawCurve; // 0xd8(0x08)
	struct UCurveFloat* PitchCurve; // 0xe0(0x08)
	struct UCurveFloat* RollCurve; // 0xe8(0x08)
	struct UCurveFloat* ScopeRollCurve; // 0xf0(0x08)
	struct UCurveFloat* ScopePitchCurve; // 0xf8(0x08)
	struct TArray<struct FRichCurveKey> OriginalScopePitchKeys; // 0x100(0x10)
	struct UAmmoConfig* CurrentAmmoConfig; // 0x110(0x08)
	char pad_118[0xc8]; // 0x118(0xc8)
	struct TArray<struct UCurveFloat*> YawCurveArray; // 0x1e0(0x10)
	struct TArray<struct UCurveFloat*> PitchCurveArray; // 0x1f0(0x10)
	struct UCurveFloat* PitchEndCurve; // 0x200(0x08)
	struct TArray<struct UCurveFloat*> RollCurveArray; // 0x208(0x10)
	struct TArray<struct UCurveFloat*> ScopeRollCurveArray; // 0x218(0x10)

	void SetRecoilVActive(bool bActive); // Function Solarland.WeaponRecoilComponent.SetRecoilVActive // (Final|Native|Public|BlueprintCallable) // @ game+0x22b55c0
	void SetRecoilRActive(bool bActive); // Function Solarland.WeaponRecoilComponent.SetRecoilRActive // (Final|Native|Public|BlueprintCallable) // @ game+0x22b5530
	void SetRecoilHActive(bool bActive); // Function Solarland.WeaponRecoilComponent.SetRecoilHActive // (Final|Native|Public|BlueprintCallable) // @ game+0x22b54a0
	void SetRecoilActive(bool bActive); // Function Solarland.WeaponRecoilComponent.SetRecoilActive // (Final|Native|Public|BlueprintCallable) // @ game+0x22b5410
	bool JudgeHorizontalRecoilDir(struct FVector& factorVector, bool bCurrentRight, int32_t instantCout); // Function Solarland.WeaponRecoilComponent.JudgeHorizontalRecoilDir // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x22b5260
	bool IsRunning(); // Function Solarland.WeaponRecoilComponent.IsRunning // (Final|Native|Public|BlueprintCallable) // @ game+0x22b5200
	struct UCurveFloat* GetYawCurve(uint32_t Mode, struct UAmmoConfig* AmmoConfig); // Function Solarland.WeaponRecoilComponent.GetYawCurve // (Final|Native|Private) // @ game+0x22b4ec0
	struct UCurveFloat* GetRollCurve(uint32_t Mode, struct UAmmoConfig* AmmoConfig); // Function Solarland.WeaponRecoilComponent.GetRollCurve // (Final|Native|Private) // @ game+0x22b4d00
	struct UCurveFloat* GetPitchCurve(uint32_t Mode, struct UAmmoConfig* AmmoConfig); // Function Solarland.WeaponRecoilComponent.GetPitchCurve // (Final|Native|Private) // @ game+0x22b4c30
	struct FRotator GetCurrentRecoil(); // Function Solarland.WeaponRecoilComponent.GetCurrentRecoil // (Final|Native|Public|HasDefaults|Const) // @ game+0x22b4a90
	struct FRotator GetAndClearCurrentRecoil(); // Function Solarland.WeaponRecoilComponent.GetAndClearCurrentRecoil // (Final|Native|Public|HasDefaults) // @ game+0x22b49d0
	void Fire(bool hipfire, bool Primary); // Function Solarland.WeaponRecoilComponent.Fire // (Final|Native|Public|BlueprintCallable) // @ game+0x22b4900
};

// Class Solarland.PlayerWeaponRecoilComponent
// Size: 0x238 (Inherited: 0x228)
struct UPlayerWeaponRecoilComponent : UWeaponRecoilComponent {
	char pad_228[0x8]; // 0x228(0x08)
	enum class ECharacterStateForWeapon CurrentCharacterState; // 0x230(0x01)
	enum class EPosture CurrentPostureType; // 0x231(0x01)
	char pad_232[0x6]; // 0x232(0x06)
};

// Class Solarland.PostLoadEffectUIData
// Size: 0x30 (Inherited: 0x28)
struct UPostLoadEffectUIData : UGameplayEffectUIData {
	bool bPostLoaded; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)

	void ReceivePostLoadUIData(struct FGameplayEffectSpec& OwnerSpec); // Function Solarland.PostLoadEffectUIData.ReceivePostLoadUIData // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.PreviewActor
// Size: 0x540 (Inherited: 0x228)
struct APreviewActor : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct FTransform DefaultSpawnTransform; // 0x230(0x30)
	struct FTransform ShowTransformRight; // 0x260(0x30)
	struct FTransform ShowTransformBattlePassRight; // 0x290(0x30)
	struct FTransform ShowTransformLuckDraw; // 0x2c0(0x30)
	struct FTransform ShowTransformCarouselDraw; // 0x2f0(0x30)
	struct FTransform ShowTransformGetReward; // 0x320(0x30)
	struct FTransform ShowTransformGrowTask; // 0x350(0x30)
	struct FTransform ShowTransformSupplyBoxRaffle; // 0x380(0x30)
	struct FTransform ShowTransformSupplyBoxLobby; // 0x3b0(0x30)
	struct FTransform ShowTransformCharacterWarehouse; // 0x3e0(0x30)
	struct TSoftObjectPtr<UCurveVector> DissolveCurvePath; // 0x410(0x28)
	struct TSoftObjectPtr<UMaterialInterface> DissolveMatPath; // 0x438(0x28)
	struct TSoftObjectPtr<UCurveVector> FresnelCurvePath; // 0x460(0x28)
	struct TSoftObjectPtr<UMaterialInterface> FresnelMatPath; // 0x488(0x28)
	struct TSoftObjectPtr<UParticleSystem> SwitchParticleEffectPath; // 0x4b0(0x28)
	char pad_4D8[0x8]; // 0x4d8(0x08)
	bool bPlaySwitchEffect; // 0x4e0(0x01)
	char pad_4E1[0x3]; // 0x4e1(0x03)
	float SwitchEffectInterval; // 0x4e4(0x04)
	float SelfDelayShowSeconds; // 0x4e8(0x04)
	char pad_4EC[0x4]; // 0x4ec(0x04)
	struct FBackpackAnimInfo BackpackAnimInfo; // 0x4f0(0x0c)
	char pad_4FC[0x44]; // 0x4fc(0x44)

	void UpdatePreviewActorConfig(struct FVector DefaultLoc); // Function Solarland.PreviewActor.UpdatePreviewActorConfig // (Final|Native|Public|HasDefaults) // @ game+0x2035c40
	void TransformToMirror(enum class EItemType ItemType, struct FTransform OriginalTransform); // Function Solarland.PreviewActor.TransformToMirror // (Final|Native|Public|HasDefaults) // @ game+0x2035b00
	void TransformCapsuleToMirror(struct FTransform OriginalTransform); // Function Solarland.PreviewActor.TransformCapsuleToMirror // (Final|Native|Public|HasDefaults) // @ game+0x2035a10
	void TransformBackpackToMirror(struct FTransform OriginalTransform); // Function Solarland.PreviewActor.TransformBackpackToMirror // (Final|Native|Public|HasDefaults) // @ game+0x2035920
	void StartPlaySwitchEffect(); // Function Solarland.PreviewActor.StartPlaySwitchEffect // (Final|Native|Public) // @ game+0x2035900
	void StartPlayFresnelEffect(); // Function Solarland.PreviewActor.StartPlayFresnelEffect // (Final|Native|Public) // @ game+0x20358e0
	void StartPlayDissovleEffect(); // Function Solarland.PreviewActor.StartPlayDissovleEffect // (Final|Native|Public) // @ game+0x20358c0
	void ShowAnimLuaCall(); // Function Solarland.PreviewActor.ShowAnimLuaCall // (Final|Native|Public) // @ game+0x20358a0
	void ShowAnim(); // Function Solarland.PreviewActor.ShowAnim // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ShowActorWithTrans(struct FTransform& InOffset); // Function Solarland.PreviewActor.ShowActorWithTrans // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x20357c0
	void ShowActor(); // Function Solarland.PreviewActor.ShowActor // (Final|Native|Public) // @ game+0x20357a0
	void SetSwitchEffectCompProperties(struct UMeshComponent* EffectComp, struct UMeshComponent* DefaultComp, struct FSwitchEffectInfo& EffectInfo, struct UMaterialInterface* EffectMat); // Function Solarland.PreviewActor.SetSwitchEffectCompProperties // (Final|Native|Public|HasOutParms) // @ game+0x2035620
	void SetSwitchEffectComp(struct TArray<struct UActorComponent*> DefaultComps, struct UMaterialInterface* EffectMat, struct TArray<struct FSwitchEffectInfo>& EffectInfos); // Function Solarland.PreviewActor.SetSwitchEffectComp // (Final|Native|Public|HasOutParms) // @ game+0x2035470
	void PlayAnimInfo(struct FVertexAnimInfo& InAnimInfo); // Function Solarland.PreviewActor.PlayAnimInfo // (Final|Native|Public|HasOutParms) // @ game+0x2035000
	void PlayAnim(int32_t InStartFrame, int32_t InEndFrame, float InLength, bool InLoop); // Function Solarland.PreviewActor.PlayAnim // (Final|Native|Public) // @ game+0x2034ea0
	void HideActor(); // Function Solarland.PreviewActor.HideActor // (Final|Native|Public) // @ game+0x2033da0
	void DetachFX(struct AActor* FXActor); // Function Solarland.PreviewActor.DetachFX // (Final|Native|Public) // @ game+0x2033c80
	struct AActor* AttachFX(struct FString FXBPPath, struct FString SokectName, bool AutoActivate); // Function Solarland.PreviewActor.AttachFX // (Final|Native|Public) // @ game+0x2033af0
};

// Class Solarland.PreviewHomeActor
// Size: 0x550 (Inherited: 0x540)
struct APreviewHomeActor : APreviewActor {
	struct USolarHomeActorManager* HomeActorMgr; // 0x540(0x08)
	struct UStaticMeshComponent* StaticMeshComp; // 0x548(0x08)

	void SetMaterial(int32_t InItemID); // Function Solarland.PreviewHomeActor.SetMaterial // (Final|Native|Public) // @ game+0x2035360
	struct UDataTable* GetTextureDataTable(); // Function Solarland.PreviewHomeActor.GetTextureDataTable // (Final|Native|Private) // @ game+0x2033d70
	struct USolarHomeShaderConfig* GetShaderConfig(); // Function Solarland.PreviewHomeActor.GetShaderConfig // (Final|Native|Public) // @ game+0x2033d40
};

// Class Solarland.QuickChatUnit
// Size: 0x290 (Inherited: 0x260)
struct UQuickChatUnit : UUserWidget {
	struct UButton* BtnUnit; // 0x260(0x08)
	struct USolarTextBlock* TxtChat; // 0x268(0x08)
	char pad_270[0x20]; // 0x270(0x20)

	void SendChatMessage(); // Function Solarland.QuickChatUnit.SendChatMessage // (Final|Native|Protected) // @ game+0x20352b0
	void OnChatMessageReleased(); // Function Solarland.QuickChatUnit.OnChatMessageReleased // (Final|Native|Protected) // @ game+0x20341a0
	void OnChatMessagePressed(); // Function Solarland.QuickChatUnit.OnChatMessagePressed // (Final|Native|Protected) // @ game+0x2034180
};

// Class Solarland.QuickVoice
// Size: 0x410 (Inherited: 0x348)
struct UQuickVoice : USolarUserWidget {
	char pad_348[0x10]; // 0x348(0x10)
	struct UCanvasPanel* CanvasPanel_61; // 0x358(0x08)
	struct USolarCheckBox* Cancel; // 0x360(0x08)
	struct USolarCheckBox* GetIn; // 0x368(0x08)
	struct USolarCheckBox* Rescue; // 0x370(0x08)
	struct USolarCheckBox* FollowMe; // 0x378(0x08)
	struct USolarCheckBox* Weapon; // 0x380(0x08)
	struct USolarCheckBox* Vehicle; // 0x388(0x08)
	struct USolarCheckBox* Attack; // 0x390(0x08)
	struct USolarCheckBox* Defend; // 0x398(0x08)
	struct USolarCheckBox* Someone; // 0x3a0(0x08)
	struct UOverlay* Overlay_Point; // 0x3a8(0x08)
	struct USolarTextBlock* Txt_Content; // 0x3b0(0x08)
	struct UImage* Img_Arrow_1; // 0x3b8(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x3c0(0x08)
	struct UWidgetAnimation* Exit_Enter; // 0x3c8(0x08)
	float PointMoveRange; // 0x3d0(0x04)
	float PointMoveSensitivity; // 0x3d4(0x04)
	float CancelSelectRadius; // 0x3d8(0x04)
	char pad_3DC[0x4]; // 0x3dc(0x04)
	struct TArray<struct USolarCheckBox*> AllCheckBoxs; // 0x3e0(0x10)
	char pad_3F0[0x20]; // 0x3f0(0x20)

	void ReceiveMarkButtonTouchMoved(float DegreeToCenter, struct FVector2D TouchLocalPos); // Function Solarland.QuickVoice.ReceiveMarkButtonTouchMoved // (Final|Native|Private|HasDefaults) // @ game+0x20351f0
	void ReceiveMarkButtonHoverChanged(bool bIsHovered); // Function Solarland.QuickVoice.ReceiveMarkButtonHoverChanged // (Final|Native|Private) // @ game+0x2035160
	void ReceiveMarkButtonDragSelectEnded(bool bPlayerDead); // Function Solarland.QuickVoice.ReceiveMarkButtonDragSelectEnded // (Final|Native|Private) // @ game+0x20350d0
	void ReceiveMarkButtonBeenLongPressed(); // Function Solarland.QuickVoice.ReceiveMarkButtonBeenLongPressed // (Final|Native|Private) // @ game+0x20350b0
	void OnSelectedChanged(int32_t ChosenIndex); // Function Solarland.QuickVoice.OnSelectedChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnExitAnimFinished(); // Function Solarland.QuickVoice.OnExitAnimFinished // (Final|Native|Private) // @ game+0x20342d0
	void OnCustomGameStateChanged(enum class ESCMInGameState NewGameState); // Function Solarland.QuickVoice.OnCustomGameStateChanged // (Final|Native|Private) // @ game+0x2034250
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.QuickVoice.OnCharacterDead // (Final|Native|Private) // @ game+0x20340f0
	void InitCheckBoxesArray(); // Function Solarland.QuickVoice.InitCheckBoxesArray // (Native|Event|Protected|BlueprintEvent) // @ game+0x15480b0
	void DoSelectOption(int32_t ChosenIndex); // Function Solarland.QuickVoice.DoSelectOption // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void CloseQuickChatWheel(); // Function Solarland.QuickVoice.CloseQuickChatWheel // (Final|Native|Public) // @ game+0x2033c60
};

// Class Solarland.RadarEffectController
// Size: 0x30 (Inherited: 0x28)
struct URadarEffectController : UActorEffectController {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Solarland.RandomPackActorBase
// Size: 0x228 (Inherited: 0x228)
struct ARandomPackActorBase : AActor {

	void InitAnimationPosition(struct USkeletalMeshComponent* Mesh); // Function Solarland.RandomPackActorBase.InitAnimationPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x2033dc0
};

// Class Solarland.RoleSkillWidget
// Size: 0x4c8 (Inherited: 0x348)
struct URoleSkillWidget : USolarUserWidget {
	struct UImage* icon_Skill; // 0x348(0x08)
	struct USolarTextBlock* Txt_SkillType; // 0x350(0x08)
	struct UImage* Img_Skill; // 0x358(0x08)
	struct USolarImage* img_Bg_Border; // 0x360(0x08)
	struct USolarImage* Img_Bg_2; // 0x368(0x08)
	struct UImage* img_SkillBg; // 0x370(0x08)
	struct UImage* Img_Loop; // 0x378(0x08)
	struct USizeBox* Img_Loop_Box; // 0x380(0x08)
	struct UWidgetAnimation* Loop_Anim; // 0x388(0x08)
	struct UWidgetAnimation* LevelUp_Anim; // 0x390(0x08)
	struct UCanvasPanel* Panel_ReduceCD; // 0x398(0x08)
	struct USolarTextBlock* Txt_Progress; // 0x3a0(0x08)
	struct UProgressBar* Progress_CD; // 0x3a8(0x08)
	struct UWidgetAnimation* Refresh_Anim; // 0x3b0(0x08)
	struct UWidgetAnimation* Reduce_Anim; // 0x3b8(0x08)
	struct UImage* img_Forbid; // 0x3c0(0x08)
	struct UCanvasPanel* Panel_Continuous; // 0x3c8(0x08)
	struct UWidgetAnimation* Continued_Loop_Anim; // 0x3d0(0x08)
	struct UImage* Progress_Duration; // 0x3d8(0x08)
	struct UImage* Img_Loop_New; // 0x3e0(0x08)
	struct UImage* Img_Skill_Continuous; // 0x3e8(0x08)
	struct UImage* img_BtnBg; // 0x3f0(0x08)
	struct UButton* BtnCancel; // 0x3f8(0x08)
	struct USolarMovablePad* RoleSkillPad; // 0x400(0x08)
	struct UWidget* PanelKeyMapping; // 0x408(0x08)
	float PadPaddingOnPress; // 0x410(0x04)
	char pad_414[0x8]; // 0x414(0x08)
	enum class ERoleWidgetType RoleWidgetType; // 0x41c(0x01)
	char pad_41D[0x3]; // 0x41d(0x03)
	struct TArray<struct FLinearColor> ImgBorderColor; // 0x420(0x10)
	struct TArray<struct FLinearColor> IconColor; // 0x430(0x10)
	struct TArray<struct FLinearColor> ImgBGColor; // 0x440(0x10)
	struct TArray<float> TacticalIconCapacity; // 0x450(0x10)
	struct TArray<struct FLinearColor> QualityColorBase; // 0x460(0x10)
	struct TArray<struct FLinearColor> QualityColorDecorate; // 0x470(0x10)
	bool bInCD; // 0x480(0x01)
	char pad_481[0x47]; // 0x481(0x47)

	void UpdateReduceCDWidgetColor(int32_t QualityIndex); // Function Solarland.RoleSkillWidget.UpdateReduceCDWidgetColor // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnSuperScaningWidgetShow(bool bShow); // Function Solarland.RoleSkillWidget.OnSuperScaningWidgetShow // (Final|Native|Protected) // @ game+0x1f99610
	void OnRoleAbilityStateChange(int32_t AbilityIndex, int32_t State); // Function Solarland.RoleSkillWidget.OnRoleAbilityStateChange // (Final|Native|Protected) // @ game+0x2034dd0
	void OnRoleAbilityStartCDServerTimeUpdate(int32_t AbilityIndex, float InServerTime); // Function Solarland.RoleSkillWidget.OnRoleAbilityStartCDServerTimeUpdate // (Final|Native|Protected) // @ game+0x2034d00
	void OnRoleAbilityStartCD(int32_t AbilityIndex, float InStartCDServerTime, float StartCDTimeForReplay); // Function Solarland.RoleSkillWidget.OnRoleAbilityStartCD // (Final|Native|Protected) // @ game+0x2034bf0
	void OnRoleAbilityInputAction(int32_t AbilityIndex, bool bPress, bool bCanActive); // Function Solarland.RoleSkillWidget.OnRoleAbilityInputAction // (Final|Native|Protected) // @ game+0x2034ae0
	void OnRoleAbilityEndCD(int32_t AbilityIndex); // Function Solarland.RoleSkillWidget.OnRoleAbilityEndCD // (Final|Native|Protected) // @ game+0x2034a50
	void OnRoleAbilityEnd(int32_t AbilityIndex); // Function Solarland.RoleSkillWidget.OnRoleAbilityEnd // (Final|Native|Protected) // @ game+0x20349c0
	void OnRoleAbilityContinous(int32_t AbilityIndex, bool bTurnOn, float Duration); // Function Solarland.RoleSkillWidget.OnRoleAbilityContinous // (Final|Native|Protected) // @ game+0x20348b0
	void OnRoleAbilityChange(int32_t AbilityIndex, bool bHaveRoleAbility, int32_t CharacterId, int32_t PlayerLevel); // Function Solarland.RoleSkillWidget.OnRoleAbilityChange // (Final|Native|Protected) // @ game+0x2034760
	void OnRoleAbilityCDDurationChange(int32_t AbilityIndex, int32_t Duration, bool bDurationReduced); // Function Solarland.RoleSkillWidget.OnRoleAbilityCDDurationChange // (Final|Native|Protected) // @ game+0x2034650
	void OnPadRelease(struct FGeometry& InGeometry, struct FPointerEvent& Event); // Function Solarland.RoleSkillWidget.OnPadRelease // (Final|Native|Protected|HasOutParms) // @ game+0x20344b0
	void OnPadPress(struct FGeometry& InGeometry, struct FPointerEvent& Event); // Function Solarland.RoleSkillWidget.OnPadPress // (Final|Native|Protected|HasOutParms) // @ game+0x2034310
	void OnExitSpectateMode(); // Function Solarland.RoleSkillWidget.OnExitSpectateMode // (Final|Native|Protected) // @ game+0x20342f0
	void OnEntertSpectateMode(); // Function Solarland.RoleSkillWidget.OnEntertSpectateMode // (Final|Native|Protected) // @ game+0x8e9ae0
	void OnControllerCharacterSet(struct ASolarCharacter* ControlledCharacter); // Function Solarland.RoleSkillWidget.OnControllerCharacterSet // (Final|Native|Protected) // @ game+0x20341c0
	void OnChangeDriveState(enum class EDriveState InDriveState); // Function Solarland.RoleSkillWidget.OnChangeDriveState // (Final|Native|Protected) // @ game+0x2033ff0
	void OnCancelBtnRelease(); // Function Solarland.RoleSkillWidget.OnCancelBtnRelease // (Final|Native|Protected) // @ game+0x2033fd0
	void OnCancelBtnPress(); // Function Solarland.RoleSkillWidget.OnCancelBtnPress // (Final|Native|Protected) // @ game+0x2033fb0
	void OnBattleHUDVisibleChange(bool bVisible); // Function Solarland.RoleSkillWidget.OnBattleHUDVisibleChange // (Final|Native|Protected) // @ game+0x2033f20
	void CancelAbility(); // Function Solarland.RoleSkillWidget.CancelAbility // (Final|Native|Protected) // @ game+0x2033c40
};

// Class Solarland.RotationBarMarkWidget
// Size: 0x2b0 (Inherited: 0x260)
struct URotationBarMarkWidget : UUserWidget {
	char pad_260[0x28]; // 0x260(0x28)
	struct FName FlagName; // 0x288(0x08)
	struct FName TextName; // 0x290(0x08)
	struct UImage* FlagImage; // 0x298(0x08)
	struct UTextBlock* TextBlock; // 0x2a0(0x08)
	struct TWeakObjectPtr<struct AActor> TargetActor; // 0x2a8(0x08)

	void SetupOrder(int32_t InOrderID); // Function Solarland.RotationBarMarkWidget.SetupOrder // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetUpdateState(bool ShouldUpdateLocation); // Function Solarland.RotationBarMarkWidget.SetUpdateState // (Final|Native|Public|BlueprintCallable) // @ game+0xba5e00
	void SetPosition(struct FVector2D InPosition); // Function Solarland.RotationBarMarkWidget.SetPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x20353f0
	void SetFlagIcon(struct UPaperSprite* InSprite); // Function Solarland.RotationBarMarkWidget.SetFlagIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x20352d0
	void InitializeMark(struct AActor* InTargetActor, bool InMoveable); // Function Solarland.RotationBarMarkWidget.InitializeMark // (Final|Native|Public|BlueprintCallable) // @ game+0x2033e50
	float GetAngle(); // Function Solarland.RotationBarMarkWidget.GetAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x2033d10
};

// Class Solarland.RotationBarWidget
// Size: 0x420 (Inherited: 0x348)
struct URotationBarWidget : USolarUserWidget {
	struct TMap<char, struct URotationBarMarkWidget*> MarkList; // 0x348(0x50)
	struct TArray<struct URotationBarMarkWidget*> CustomMarkList; // 0x398(0x10)
	struct TArray<struct URotationBarMarkWidget*> BuildingFlagList; // 0x3a8(0x10)
	struct TArray<struct URotationBarMarkWidget*> ActorMarkList; // 0x3b8(0x10)
	struct URotationBarMarkWidget* MarkWidgetClass; // 0x3c8(0x08)
	struct FString MarkWidgetName; // 0x3d0(0x10)
	struct FString MarkAtlasType; // 0x3e0(0x10)
	struct FName PanelName; // 0x3f0(0x08)
	struct FName DirectionImage1Name; // 0x3f8(0x08)
	struct FName DirectionImage2Name; // 0x400(0x08)
	struct UCanvasPanel* DirectionPanel; // 0x408(0x08)
	struct UImage* DirectionImage1; // 0x410(0x08)
	struct UImage* DirectionImage2; // 0x418(0x08)

	void ShowMark(char InPosInTeam, struct FVector InPosition); // Function Solarland.RotationBarWidget.ShowMark // (Final|Native|Public|HasDefaults) // @ game+0x203cab0
	struct TArray<struct URotationBarMarkWidget*> ShowActorMarkWithArray(struct TArray<struct AActor*> TargetActor); // Function Solarland.RotationBarWidget.ShowActorMarkWithArray // (Final|Native|Public|BlueprintCallable) // @ game+0x203c970
	struct URotationBarMarkWidget* ShowActorMark(struct AActor* TargetActor); // Function Solarland.RotationBarWidget.ShowActorMark // (Final|Native|Public|BlueprintCallable) // @ game+0x203c8d0
	void OnRotationBarVisibilityChanged(bool bVisible); // Function Solarland.RotationBarWidget.OnRotationBarVisibilityChanged // (Final|Native|Public) // @ game+0x202ea70
	void InitBuildingFlag(); // Function Solarland.RotationBarWidget.InitBuildingFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x203a8f0
	struct TArray<int32_t> GetLocationIconIDs(int32_t InMapID); // Function Solarland.RotationBarWidget.GetLocationIconIDs // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct FBuildingData GetBuildingData(int32_t InIconID); // Function Solarland.RotationBarWidget.GetBuildingData // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct URotationBarMarkWidget* CreateCustomMark(struct URotationBarMarkWidget* RotationBarMarkClass, struct FVector& InMarkPos, int32_t InZOrder); // Function Solarland.RotationBarWidget.CreateCustomMark // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x203a540
	bool ContainMapID(int32_t InMapID); // Function Solarland.RotationBarWidget.ContainMapID // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void CleanMark(char InPosInTeam); // Function Solarland.RotationBarWidget.CleanMark // (Final|Native|Public) // @ game+0x203a4c0
	void CleanCustomMark(struct URotationBarMarkWidget* InMarkWidget); // Function Solarland.RotationBarWidget.CleanCustomMark // (Final|Native|Public) // @ game+0x203a430
	void CleanActorMarkWithWidgetArray(struct TArray<struct URotationBarMarkWidget*> TargetMarkWidget); // Function Solarland.RotationBarWidget.CleanActorMarkWithWidgetArray // (Final|Native|Public|BlueprintCallable) // @ game+0x203a340
	void CleanActorMarkWithWidget(struct URotationBarMarkWidget* TargetMarkWidget); // Function Solarland.RotationBarWidget.CleanActorMarkWithWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x203a2b0
	void CleanActorMarkWithActorArray(struct TArray<struct AActor*> TargetActor); // Function Solarland.RotationBarWidget.CleanActorMarkWithActorArray // (Final|Native|Public|BlueprintCallable) // @ game+0x203a1c0
	void CleanActorMarkWithActor(struct AActor* TargetActor); // Function Solarland.RotationBarWidget.CleanActorMarkWithActor // (Final|Native|Public|BlueprintCallable) // @ game+0x203a130
};

// Class Solarland.SafeAreaProgressWidget
// Size: 0x420 (Inherited: 0x348)
struct USafeAreaProgressWidget : USolarUserWidget {
	struct UImage* Var_Avatar; // 0x348(0x08)
	struct UImage* Var_PoisonBar; // 0x350(0x08)
	struct UImage* Var_ImageWarnning; // 0x358(0x08)
	struct UTextBlock* Var_TextDistance; // 0x360(0x08)
	struct UTextBlock* Var_TextTime; // 0x368(0x08)
	struct UPanelWidget* Var_TimePanel; // 0x370(0x08)
	char pad_378[0x8]; // 0x378(0x08)
	struct TSoftObjectPtr<UPaperSprite> Warning01; // 0x380(0x28)
	struct TSoftObjectPtr<UPaperSprite> Warning02; // 0x3a8(0x28)
	char pad_3D0[0x50]; // 0x3d0(0x50)
};

// Class Solarland.SolarGameMode
// Size: 0x558 (Inherited: 0x310)
struct ASolarGameMode : AGameMode {
	struct FMulticastInlineDelegate PreStartPlay; // 0x310(0x10)
	struct FDelegate CalledStartPlay; // 0x320(0x10)
	struct FMulticastInlineDelegate PostStartPlay; // 0x330(0x10)
	struct FMulticastInlineDelegate PreHandleMatchHasStarted; // 0x340(0x10)
	struct FDelegate CalledHandleMatchHasStarted; // 0x350(0x10)
	struct FMulticastInlineDelegate PostHandleMatchHasStarted; // 0x360(0x10)
	struct FMulticastInlineDelegate PreRestartPlayer; // 0x370(0x10)
	struct FDelegate CalledRestartPlayer; // 0x380(0x10)
	struct FMulticastInlineDelegate PostRestartPlayer; // 0x390(0x10)
	struct FMulticastInlineDelegate PreEndPlay; // 0x3a0(0x10)
	struct FDelegate CalledEndPlay; // 0x3b0(0x10)
	struct FMulticastInlineDelegate PostEndPlay; // 0x3c0(0x10)
	struct TArray<struct UGameModeCompBase*> GameModeComponents; // 0x3d0(0x10)
	char pad_3E0[0x4]; // 0x3e0(0x04)
	int32_t GamePlayMode; // 0x3e4(0x04)
	struct TArray<struct AActor*> ManagerClasses; // 0x3e8(0x10)
	struct FString CharacterClassPath; // 0x3f8(0x10)
	int32_t CharacterIdInTrainningCourse; // 0x408(0x04)
	int32_t SkinIdInTrainningCourse; // 0x40c(0x04)
	int32_t BagIdInTrainingCourse; // 0x410(0x04)
	bool bManuallyModifyCharacter; // 0x414(0x01)
	char pad_415[0x3]; // 0x415(0x03)
	int32_t SpecifiedCharacterSkinID; // 0x418(0x04)
	bool bManuallyModifyCharacterBagId; // 0x41c(0x01)
	char pad_41D[0x3]; // 0x41d(0x03)
	int32_t SpecifiedCharacterBagID; // 0x420(0x04)
	bool bManuallyModifyCharacterBagTrailId; // 0x424(0x01)
	char pad_425[0x3]; // 0x425(0x03)
	int32_t SpecifiedCharacterBagTrailID; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)
	struct FMulticastInlineDelegate OnPostSpawnDefaultSolarCharacterAtTransform; // 0x430(0x10)
	struct USolarGameModeAIComponent* AIMgrComponent; // 0x440(0x08)
	struct USolarGameModeStatisticsComponent* StatComponent; // 0x448(0x08)
	struct TArray<struct ASolarTeamInfo*> Teams; // 0x450(0x10)
	struct TArray<struct ASolarTeamInfo*> AliveTeams; // 0x460(0x10)
	struct TArray<struct ASolarPlayerState*> AlivePlayers; // 0x470(0x10)
	struct ASolarTeamInfo* TeamClass; // 0x480(0x08)
	struct UDataTable* TeamDataTable; // 0x488(0x08)
	char pad_490[0xb0]; // 0x490(0xb0)
	struct ASolarFlyTrail* FlyTrailActor; // 0x540(0x08)
	struct TArray<struct FString> BannedPlayerIDList; // 0x548(0x10)

	void UpdatePlayerDataForBotAI(int32_t AIConfigID, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarGameMode.UpdatePlayerDataForBotAI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UpdatePlayerData(int32_t CharacterSkinID, int32_t CharacterBagID, int32_t CharacterBagTrailID, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarGameMode.UpdatePlayerData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UpdateBotPlayerData(struct ASolarPlayerState* PlayerState); // Function Solarland.SolarGameMode.UpdateBotPlayerData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UpdateAliveTeamsAndPlayers(); // Function Solarland.SolarGameMode.UpdateAliveTeamsAndPlayers // (Native|Public|BlueprintCallable) // @ game+0x15560c0
	struct FString TryKickOutOnlinePlayer(struct FString PlayerId, bool IsAllowReconnect); // Function Solarland.SolarGameMode.TryKickOutOnlinePlayer // (Final|Native|Public) // @ game+0x20e7e50
	void SolarGM_SetAntiCheatData(struct FString InVariableName, float InMin, float InMax, float InThreshold, bool bInBanPlayer); // Function Solarland.SolarGameMode.SolarGM_SetAntiCheatData // (Final|Exec|Native|Protected) // @ game+0x20e7c90
	void SetGamePlayMode(int32_t InGamePlayMode); // Function Solarland.SolarGameMode.SetGamePlayMode // (Native|Public|BlueprintCallable) // @ game+0x20e7c00
	void SendHitMsgWithBool(struct ASolarCharacterBase* HitedPlayer, struct TScriptInterface<ISolarCharacterController>& PC, enum class ESolarHitType MsgType, float Damage, bool bo); // Function Solarland.SolarGameMode.SendHitMsgWithBool // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20e7a40
	void SendHitMsg(struct ASolarCharacterBase* HitedPlayer, struct TScriptInterface<ISolarCharacterController>& PC, enum class ESolarHitType MsgType, float Damage, struct FString Params); // Function Solarland.SolarGameMode.SendHitMsg // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20e7860
	void RestartPlayerTakeChargeEvent__DelegateSignature(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // DelegateFunction Solarland.SolarGameMode.RestartPlayerTakeChargeEvent__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void RestartPlayerEvent__DelegateSignature(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // DelegateFunction Solarland.SolarGameMode.RestartPlayerEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void PresettleAll(); // Function Solarland.SolarGameMode.PresettleAll // (Native|Public|BlueprintCallable) // @ game+0x15559e0
	void PreAssignTeam(char DesiredTeamID, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarGameMode.PreAssignTeam // (Native|Public|BlueprintCallable) // @ game+0x20e76b0
	void PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature(struct ASolarPlayerState* NewPlayer, struct ASolarCharacter* NewCharacter); // DelegateFunction Solarland.SolarGameMode.PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnStartBattleresponded(); // Function Solarland.SolarGameMode.OnStartBattleresponded // (Final|Native|Public) // @ game+0x20e7560
	bool OnPlayerReJoinRequest(struct FString PlayerId, struct FString& ErrorMsg); // Function Solarland.SolarGameMode.OnPlayerReJoinRequest // (Native|Public|HasOutParms) // @ game+0x20e7420
	void NotifyItemStateChanged(struct AActor* Item, int32_t State); // Function Solarland.SolarGameMode.NotifyItemStateChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void KickOutPlayerToLobby(struct FString InPlayerID); // Function Solarland.SolarGameMode.KickOutPlayerToLobby // (Final|Native|Public) // @ game+0x20e7380
	void KickOutAllPlayerToLobby(); // Function Solarland.SolarGameMode.KickOutAllPlayerToLobby // (Final|Native|Public) // @ game+0x20e7360
	bool IsBannedForCheating(struct FString PlayerId); // Function Solarland.SolarGameMode.IsBannedForCheating // (Final|Native|Public|Const) // @ game+0x20e72b0
	void InitCharacterClassPath(int32_t CharacterId); // Function Solarland.SolarGameMode.InitCharacterClassPath // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void GetTeams(struct TArray<struct ASolarTeamInfo*>& OutTeams, bool FilterNoMemberTeam, bool FilterAlreadySettled); // Function Solarland.SolarGameMode.GetTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20e7170
	struct TArray<int32_t> GetRandomAISkinID(struct ASolarPlayerState* InPS); // Function Solarland.SolarGameMode.GetRandomAISkinID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetMatchTeammateCount(); // Function Solarland.SolarGameMode.GetMatchTeammateCount // (Final|Native|Public|BlueprintCallable) // @ game+0x20e7040
	int32_t GetGamePlayMode(); // Function Solarland.SolarGameMode.GetGamePlayMode // (Native|Public|BlueprintCallable) // @ game+0x20e7010
	struct UGameModeGlobalSetting* GetGameModeSetting(struct UObject* WorldContextObject); // Function Solarland.SolarGameMode.GetGameModeSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20e6f80
	void GetEmptyTeams(struct TArray<struct ASolarTeamInfo*>& OutTeams, bool Reverse); // Function Solarland.SolarGameMode.GetEmptyTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20e6e80
	int32_t GetBotAINumber(); // Function Solarland.SolarGameMode.GetBotAINumber // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void GameModeComponentTakeChargeEvent__DelegateSignature(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection); // DelegateFunction Solarland.SolarGameMode.GameModeComponentTakeChargeEvent__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void GameModeComponentEvent__DelegateSignature(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // DelegateFunction Solarland.SolarGameMode.GameModeComponentEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void EndPlayTakeChargeEvent__DelegateSignature(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // DelegateFunction Solarland.SolarGameMode.EndPlayTakeChargeEvent__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void EndPlayEvent__DelegateSignature(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // DelegateFunction Solarland.SolarGameMode.EndPlayEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	struct ASolarPlayerState* CreateBotAISingle(int32_t CharacterId, struct FVector& Location, struct TArray<enum class ETeamType> JoinPolicies, struct ASolarBotAIController* ControllerClass, int32_t Difficultly); // Function Solarland.SolarGameMode.CreateBotAISingle // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20e6a70
	struct ASolarPlayerState* CreateBotAIAndJoinTeamByName(int32_t CharacterId, struct FVector& Location, struct FString TeamName, struct ASolarBotAIController* ControllerClass, int32_t Difficultly); // Function Solarland.SolarGameMode.CreateBotAIAndJoinTeamByName // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20e6890
	struct ASolarPlayerState* CreateBotAIAndJoinTeamByID(int32_t CharacterId, struct FVector& Location, char TeamID, struct ASolarBotAIController* ControllerClass, int32_t Difficultly); // Function Solarland.SolarGameMode.CreateBotAIAndJoinTeamByID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20e66c0
	struct ASolarPlayerState* CreateBotAIAndJoinTeam(int32_t CharacterId, struct FVector& Location, struct ASolarTeamInfo* TeamInfo, struct ASolarBotAIController* ControllerClass, int32_t Difficultly); // Function Solarland.SolarGameMode.CreateBotAIAndJoinTeam // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20e64f0
	bool CanPlayerBattle(struct ASolarPlayerState* PlayerState); // Function Solarland.SolarGameMode.CanPlayerBattle // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x20e6450
};

// Class Solarland.SBattleGameMode
// Size: 0x588 (Inherited: 0x558)
struct ASBattleGameMode : ASolarGameMode {
	struct FMulticastInlineDelegate OnPlayerDisconnectedGame; // 0x558(0x10)
	struct FMulticastInlineDelegate OnPlayerReconnectedGame; // 0x568(0x10)
	char pad_578[0x8]; // 0x578(0x08)
	int32_t SettlementStageConfigID; // 0x580(0x04)
	char pad_584[0x4]; // 0x584(0x04)

	void SettlePlayerBattleData(struct ASolarPlayerState* Player); // Function Solarland.SBattleGameMode.SettlePlayerBattleData // (Native|Public|BlueprintCallable) // @ game+0x203c840
	void ReceiveBattleSettlement(); // Function Solarland.SBattleGameMode.ReceiveBattleSettlement // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveBattleOver(); // Function Solarland.SBattleGameMode.ReceiveBattleOver // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerLeaveDSTimeOut(struct ASolarPlayerState* PlayerState); // Function Solarland.SBattleGameMode.OnPlayerLeaveDSTimeOut // (Native|Public) // @ game+0x203aee0
	bool IsAutoSettlementWhenKilled(); // Function Solarland.SBattleGameMode.IsAutoSettlementWhenKilled // (Native|Event|Public|BlueprintEvent) // @ game+0x203aa60
	bool IsAllowReconnectGame(struct ASolarPlayerState* Player); // Function Solarland.SBattleGameMode.IsAllowReconnectGame // (Native|Public|BlueprintCallable) // @ game+0x203a9c0
};

// Class Solarland.SolarGameState
// Size: 0x440 (Inherited: 0x298)
struct ASolarGameState : AGameState {
	char pad_298[0x8]; // 0x298(0x08)
	struct TArray<struct ASolarPlayerState*> SolarPlayerStateArray; // 0x2a0(0x10)
	struct TArray<struct ASolarPlayerState*> RealPlayerStateArray; // 0x2b0(0x10)
	char bShowBattlePrompt : 1; // 0x2c0(0x01)
	char pad_2C0_1 : 7; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)
	struct TArray<int32_t> MapVehicleSpawnTypes; // 0x2c8(0x10)
	char pad_2D8[0x10]; // 0x2d8(0x10)
	struct TArray<struct FPrePooledBundle> PrePooledBundles; // 0x2e8(0x10)
	int32_t RemainingPlayersCount; // 0x2f8(0x04)
	int32_t AlivePlayersCount; // 0x2fc(0x04)
	int32_t RemainingTeamCount; // 0x300(0x04)
	int32_t PlayersCount; // 0x304(0x04)
	int32_t TeamCount; // 0x308(0x04)
	int32_t TotalBoardingNum; // 0x30c(0x04)
	int32_t CapsulePlayerNum; // 0x310(0x04)
	int32_t SettlementStageConfigID; // 0x314(0x04)
	struct TSet<struct UObject*> LimitMaxReplicatedNumClasses; // 0x318(0x50)
	float StartTime; // 0x368(0x04)
	int32_t NumPlayers; // 0x36c(0x04)
	int32_t GameWarmID; // 0x370(0x04)
	int32_t TeammateNumMode; // 0x374(0x04)
	bool bLuaReportBattleEndServer; // 0x378(0x01)
	char pad_379[0x7]; // 0x379(0x07)
	struct FGameStartConditionList GameStartConditions; // 0x380(0x58)
	struct USolarGameplayConfigComponent* GameplayConfigComponent; // 0x3d8(0x08)
	struct TArray<struct ASolarTeamInfo*> Teams; // 0x3e0(0x10)
	char NumReplicatedTeams; // 0x3f0(0x01)
	char pad_3F1[0x4f]; // 0x3f1(0x4f)

	void SetTeamLastVehicleLocation(char InTeamId, struct FVector& InVehiclePosition); // Function Solarland.SolarGameState.SetTeamLastVehicleLocation // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x20f9590
	void SetSettlementStageConfigID(int32_t InConfigID); // Function Solarland.SolarGameState.SetSettlementStageConfigID // (Final|Native|Public|BlueprintCallable) // @ game+0x20f9400
	void ServerUpdateMapVehicleSpawnTypes(struct TArray<int32_t>& InSpawnTargetVehicleTypes); // Function Solarland.SolarGameState.ServerUpdateMapVehicleSpawnTypes // (Final|Native|Public|HasOutParms) // @ game+0x20f8cb0
	void PlayTeamVictoryVoice(); // Function Solarland.SolarGameState.PlayTeamVictoryVoice // (Final|Native|Public|BlueprintCallable) // @ game+0x20f8c90
	void OnSafeAreaIndexChanged(int32_t NewIndex); // Function Solarland.SolarGameState.OnSafeAreaIndexChanged // (Final|Native|Public) // @ game+0x20f8c00
	void OnRep_SettlementStageConfigID(); // Function Solarland.SolarGameState.OnRep_SettlementStageConfigID // (Final|Native|Protected) // @ game+0x20f8be0
	void OnRep_RemainingTeamCountChange(); // Function Solarland.SolarGameState.OnRep_RemainingTeamCountChange // (Final|Native|Protected) // @ game+0x20f8bc0
	void OnRep_OnPlayersCountChange(); // Function Solarland.SolarGameState.OnRep_OnPlayersCountChange // (Final|Native|Protected) // @ game+0x20f8ba0
	void OnRep_OnAlivePlayersCountChange(); // Function Solarland.SolarGameState.OnRep_OnAlivePlayersCountChange // (Final|Native|Protected|Const) // @ game+0x20f8b80
	void OnRep_NumReplicatedTeams(); // Function Solarland.SolarGameState.OnRep_NumReplicatedTeams // (Final|Native|Public) // @ game+0x20f8b60
	void OnRep_NumPlayers(int32_t PreviousNumPlayers); // Function Solarland.SolarGameState.OnRep_NumPlayers // (Final|Native|Protected) // @ game+0x20f8ad0
	void OnRep_CapsulePlayerNum(); // Function Solarland.SolarGameState.OnRep_CapsulePlayerNum // (Final|Native|Protected) // @ game+0x20f8ab0
	void OnLocalSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.SolarGameState.OnLocalSpectateTargetChanged // (Final|Native|Protected) // @ game+0x20f89e0
	void NotifyCheatedPlayer(struct ASolarPlayerState* CheatedPlayerState, struct FText& OutReason); // Function Solarland.SolarGameState.NotifyCheatedPlayer // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void NotifyBombingEnd(int32_t BombId); // Function Solarland.SolarGameState.NotifyBombingEnd // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x20f8950
	void NotifyBombingBegin(int32_t BombId, struct FVector Location, float Radius); // Function Solarland.SolarGameState.NotifyBombingBegin // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x20f8840
	void NotifyAbnormalPlayer(struct ASolarPlayerState* AbnormalPlayerState, struct FText& OutReason); // Function Solarland.SolarGameState.NotifyAbnormalPlayer // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void NetMulticastNotifyCheatedPlayer(struct ASolarPlayerState* CheatedPlayerState, struct FText BanReason); // Function Solarland.SolarGameState.NetMulticastNotifyCheatedPlayer // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x20f8670
	void K2_SetCanShowBattlePrompt(bool NewValue); // Function Solarland.SolarGameState.K2_SetCanShowBattlePrompt // (Final|Native|Public|BlueprintCallable) // @ game+0x20f82b0
	bool IsSupportWeaponUpgrade(); // Function Solarland.SolarGameState.IsSupportWeaponUpgrade // (Final|Native|Public|BlueprintCallable) // @ game+0x20f8280
	bool IsSupportCharacterTacticalAbility(); // Function Solarland.SolarGameState.IsSupportCharacterTacticalAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x20f8250
	bool IsSupportCharacterSuperAbility(); // Function Solarland.SolarGameState.IsSupportCharacterSuperAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x20f8220
	bool IsSupportCharacterRole(); // Function Solarland.SolarGameState.IsSupportCharacterRole // (Final|Native|Public|BlueprintCallable) // @ game+0x20f81f0
	bool IsSupportCharacterInGameLeveling(); // Function Solarland.SolarGameState.IsSupportCharacterInGameLeveling // (Native|Event|Public|BlueprintEvent) // @ game+0x20f81c0
	float GetWorldStartTimeSeconds(); // Function Solarland.SolarGameState.GetWorldStartTimeSeconds // (Final|Native|Public|BlueprintCallable) // @ game+0x20f6dc0
	int32_t GetWatchingPlayerCount(bool IgnoreOffline); // Function Solarland.SolarGameState.GetWatchingPlayerCount // (Final|Native|Public) // @ game+0x20f8120
	void GetTeams(struct TArray<struct ASolarTeamInfo*>& OutTeams, bool FilterNoMemberTeam, bool FilterAlreadySettled); // Function Solarland.SolarGameState.GetTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20f7fe0
	struct ASolarPlayerState* GetTeamPlayerState(char InTeamId, char InPosInTeam); // Function Solarland.SolarGameState.GetTeamPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20f7e70
	int32_t GetTeamNumCount(); // Function Solarland.SolarGameState.GetTeamNumCount // (Native|Public) // @ game+0x20f7e40
	char GetTeammateNum(char InTeamId); // Function Solarland.SolarGameState.GetTeammateNum // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20f7f50
	struct ASolarTeamInfo* GetTeamByName(struct FString InTeamName); // Function Solarland.SolarGameState.GetTeamByName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20f7d40
	struct ASolarTeamInfo* GetTeam(char InTeamId); // Function Solarland.SolarGameState.GetTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20f7cb0
	enum class ERoleSkillOperation GetTacticalSkillStateOperationOnInit(); // Function Solarland.SolarGameState.GetTacticalSkillStateOperationOnInit // (Final|Native|Public|BlueprintCallable) // @ game+0x20f7c80
	enum class ERoleSkillOperation GetSuperSkillStateOperationOnInit(); // Function Solarland.SolarGameState.GetSuperSkillStateOperationOnInit // (Final|Native|Public|BlueprintCallable) // @ game+0x20f7c10
	struct ASolarPlayerState* GetSpecTargetOrLocalPlayerState(); // Function Solarland.SolarGameState.GetSpecTargetOrLocalPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20f7be0
	struct ASolarSafeArea* GetSolarSafeArea(); // Function Solarland.SolarGameState.GetSolarSafeArea // (Final|Native|Public|Const) // @ game+0x20f7bb0
	int32_t GetSettlementStageConfigID(); // Function Solarland.SolarGameState.GetSettlementStageConfigID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20f7b90
	int32_t GetRemainingTeamCount(); // Function Solarland.SolarGameState.GetRemainingTeamCount // (Native|Public) // @ game+0x20f7b60
	int32_t GetRemainingPlayersCount(); // Function Solarland.SolarGameState.GetRemainingPlayersCount // (Native|Public) // @ game+0x20f7b30
	void GetPlayerTeams(struct TArray<struct ASolarTeamInfo*>& OutTeams, bool FilterAlreadySettled); // Function Solarland.SolarGameState.GetPlayerTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20f78d0
	struct ASolarPlayerState* GetPlayerStateByPlayerId(struct FString InPlayerID); // Function Solarland.SolarGameState.GetPlayerStateByPlayerId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20f7820
	struct ASolarPlayerState* GetPlayerStateByNickName(struct FString InNickName); // Function Solarland.SolarGameState.GetPlayerStateByNickName // (Final|Native|Public|Const) // @ game+0x20f7770
	int32_t GetPlayersCount(); // Function Solarland.SolarGameState.GetPlayersCount // (Native|Public) // @ game+0x20f79d0
	struct ASolarCharacter* GetPlayerByPlayerID(struct FString InPlayerID); // Function Solarland.SolarGameState.GetPlayerByPlayerID // (Final|Native|Public) // @ game+0x20f76c0
	void GetOnlyPlayerTeams(struct TArray<struct ASolarTeamInfo*>& OutTeams, bool FilterAlreadySettled); // Function Solarland.SolarGameState.GetOnlyPlayerTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20f75c0
	void GetOnlyBotTeams(struct TArray<struct ASolarTeamInfo*>& OutTeams, bool FilterAlreadySettled); // Function Solarland.SolarGameState.GetOnlyBotTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20f74c0
	struct ASolarPlayerState* GetOfflinePlayerState(struct FString OfflinePlayerId); // Function Solarland.SolarGameState.GetOfflinePlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x20f7410
	struct ASolarPlayerState* GetLocalSolarPlayerState(); // Function Solarland.SolarGameState.GetLocalSolarPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20f6e20
	bool GetCanShowBattlePrompt(); // Function Solarland.SolarGameState.GetCanShowBattlePrompt // (Final|Native|Public|BlueprintCallable) // @ game+0x20f6df0
	float GetBattleStartTimeSeconds(); // Function Solarland.SolarGameState.GetBattleStartTimeSeconds // (Final|Native|Public|BlueprintCallable) // @ game+0x20f6dc0
	void GetAllCharactersExceptTeammate(struct TArray<struct ASolarCharacter*>& CharacterArray); // Function Solarland.SolarGameState.GetAllCharactersExceptTeammate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20f6d10
	int32_t GetAliveSolarPlayersCount(bool IgnoreOffline); // Function Solarland.SolarGameState.GetAliveSolarPlayersCount // (Final|Native|Public) // @ game+0x20f6c70
	int32_t GetAlivePlayersCount(); // Function Solarland.SolarGameState.GetAlivePlayersCount // (Final|Native|Public|Const) // @ game+0x20f6c50
	char GetAlivePlayerNumInTeamExceptDying(char InTeamId, bool bExceptCheater); // Function Solarland.SolarGameState.GetAlivePlayerNumInTeamExceptDying // (Native|Public|BlueprintCallable) // @ game+0x20f6b70
	char CalculateTeamNum(); // Function Solarland.SolarGameState.CalculateTeamNum // (Final|Native|Public|BlueprintCallable) // @ game+0x20f6b40
	void CacheSafeArea(struct ASolarSafeArea* SafeArea); // Function Solarland.SolarGameState.CacheSafeArea // (Final|Native|Public|BlueprintCallable) // @ game+0x20f6ab0
};

// Class Solarland.SBattleGameState
// Size: 0x460 (Inherited: 0x440)
struct ASBattleGameState : ASolarGameState {
	char pad_440[0x18]; // 0x440(0x18)
	bool IsBattleEnd; // 0x458(0x01)
	bool IsBattleSettlement; // 0x459(0x01)
	enum class EBattleEndType BattleEndType; // 0x45a(0x01)
	char pad_45B[0x5]; // 0x45b(0x05)

	bool IsBattleOver(); // Function Solarland.SBattleGameState.IsBattleOver // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x203aa90
	bool GetIsBattleSettlement(); // Function Solarland.SBattleGameState.GetIsBattleSettlement // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x203a680
	enum class EBattleEndType GetBattleEndType(); // Function Solarland.SBattleGameState.GetBattleEndType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x203a660
};

// Class Solarland.SBattleRoyaleGameModeAIComp
// Size: 0x180 (Inherited: 0x160)
struct USBattleRoyaleGameModeAIComp : USolarGameModeAIComponent {
	bool bBotSkipAICruise; // 0x160(0x01)
	char pad_161[0x3]; // 0x161(0x03)
	float MaxLootDistanceToAirline; // 0x164(0x04)
	bool bCanSelectLootZoneOutPoisonCircle; // 0x168(0x01)
	char pad_169[0x17]; // 0x169(0x17)
};

// Class Solarland.SCustomGameMode
// Size: 0x6f0 (Inherited: 0x588)
struct ASCustomGameMode : ASBattleGameMode {
	char pad_588[0x8]; // 0x588(0x08)
	float TimeOutSeconds; // 0x590(0x04)
	char pad_594[0xb4]; // 0x594(0xb4)
	struct UCGMLogicComponent* LogicComponent; // 0x648(0x08)
	struct UCGMDeathComponent* DeathComponent; // 0x650(0x08)
	char pad_658[0x10]; // 0x658(0x10)
	struct TArray<struct ASCMPlayerController*> WaitingPlayers; // 0x668(0x10)
	char pad_678[0x10]; // 0x678(0x10)
	struct FMulticastInlineDelegate OnPlayerJoin; // 0x688(0x10)
	struct FMulticastInlineDelegate OnAIJoin; // 0x698(0x10)
	struct FMulticastInlineDelegate OnPlayerOutEvent; // 0x6a8(0x10)
	struct TArray<struct AGameManagerBase*> GameManagerClasses; // 0x6b8(0x10)
	struct UCGMLogicComponent* LogicComponentClass; // 0x6c8(0x08)
	struct UCGMDeathComponent* DeathComponentClass; // 0x6d0(0x08)
	struct USCMPlayerRPCComponent* PlayerRPCComponentClass; // 0x6d8(0x08)
	char pad_6E0[0x10]; // 0x6e0(0x10)

	void TimerStartGame(); // Function Solarland.SCustomGameMode.TimerStartGame // (Final|Native|Public) // @ game+0x2050f20
	void StartBattle(); // Function Solarland.SCustomGameMode.StartBattle // (Final|Native|Public|BlueprintCallable) // @ game+0x2050b80
	bool RequestAllowReconnectGame(struct ASCMPlayerState* InPC); // Function Solarland.SCustomGameMode.RequestAllowReconnectGame // (Native|Event|Public|BlueprintEvent) // @ game+0x204e390
	void ReceiveSpectatorJoinData(struct ASCMPlayerState* Player); // Function Solarland.SCustomGameMode.ReceiveSpectatorJoinData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveServerLevelLoaded(struct FString LevelName); // Function Solarland.SCustomGameMode.ReceiveServerLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool ReceivePlayerTeamPreJoinRequest(struct TArray<struct ASCMPlayerState*>& PreJoinPlayers, int32_t TeamID); // Function Solarland.SCustomGameMode.ReceivePlayerTeamPreJoinRequest // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x204d970
	bool ReceivePlayerReJoinRequest(struct FString PlayerId, struct FString& ErrorMsg); // Function Solarland.SCustomGameMode.ReceivePlayerReJoinRequest // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x204d850
	void ReceivePlayerReJoin(struct ASCMPlayerState* NewPlayer); // Function Solarland.SCustomGameMode.ReceivePlayerReJoin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerPreLogin(struct FString PlayerId, struct ASCMPlayerState* OfflinePlayer, struct FString& ErrorMsg); // Function Solarland.SCustomGameMode.ReceivePlayerPreLogin // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerNonSpectatorJoinData(struct ASCMPlayerState* Player); // Function Solarland.SCustomGameMode.ReceivePlayerNonSpectatorJoinData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerLevelLoaded(struct ASCMPlayerController* Player, struct FString LevelName); // Function Solarland.SCustomGameMode.ReceivePlayerLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerJoinData(struct FString PlayerId); // Function Solarland.SCustomGameMode.ReceivePlayerJoinData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerJoinBattle(struct ASCMPlayerState* NewPlayer, bool IsAI); // Function Solarland.SCustomGameMode.ReceivePlayerJoinBattle // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerJoin(struct ASCMPlayerState* NewPlayer, bool IsAI); // Function Solarland.SCustomGameMode.ReceivePlayerJoin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerCheat(struct ASolarPlayerState* InCheater); // Function Solarland.SCustomGameMode.ReceivePlayerCheat // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerCancelJoin(struct FString PlayerId); // Function Solarland.SCustomGameMode.ReceivePlayerCancelJoin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerBattleEnd(struct ASCMPlayerState* Player, enum class ESCMPlayerOutType OutType); // Function Solarland.SCustomGameMode.ReceivePlayerBattleEnd // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlayerAbnormal(struct ASolarPlayerState* InAbnormalPlayer); // Function Solarland.SCustomGameMode.ReceivePlayerAbnormal // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveOBPlayersChanged(); // Function Solarland.SCustomGameMode.ReceiveOBPlayersChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveGameModeInit(); // Function Solarland.SCustomGameMode.ReceiveGameModeInit // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveBattleTick(float InBattleTime, float DeltaTime); // Function Solarland.SCustomGameMode.ReceiveBattleTick // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveBattleEnd(); // Function Solarland.SCustomGameMode.ReceiveBattleEnd // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveBattleBegin(); // Function Solarland.SCustomGameMode.ReceiveBattleBegin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnTeamInTournamentSettled(struct FString Side, char TeamID); // Function Solarland.SCustomGameMode.OnTeamInTournamentSettled // (Final|Native|Public) // @ game+0x204c9e0
	void OnReceivePlayerLogin(struct APlayerController* PlayerController); // Function Solarland.SCustomGameMode.OnReceivePlayerLogin // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnReceivePlayerBattleStart(struct APlayerController* PlayerController); // Function Solarland.SCustomGameMode.OnReceivePlayerBattleStart // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnReceiveBattleStart(); // Function Solarland.SCustomGameMode.OnReceiveBattleStart // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerSettled(struct ASCMPlayerState* Player); // Function Solarland.SCustomGameMode.OnPlayerSettled // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerOut__DelegateSignature(struct ASCMPlayerState* Player, enum class ESCMPlayerOutType OutType); // DelegateFunction Solarland.SCustomGameMode.OnPlayerOut__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnPlayerOfflineTimeOut(struct ASCMPlayerState* OfflineTimeoutPlayer); // Function Solarland.SCustomGameMode.OnPlayerOfflineTimeOut // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerJoin__DelegateSignature(struct ASCMPlayerState* Player); // DelegateFunction Solarland.SCustomGameMode.OnPlayerJoin__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnPlayerGiveUp(struct ASCMPlayerState* OfflineTimeoutPlayer); // Function Solarland.SCustomGameMode.OnPlayerGiveUp // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnMatchEnd(int32_t RPCID); // Function Solarland.SCustomGameMode.OnMatchEnd // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnDSClose(); // Function Solarland.SCustomGameMode.OnDSClose // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnBotAIDataReady(int32_t AICount); // Function Solarland.SCustomGameMode.OnBotAIDataReady // (Final|Native|Public) // @ game+0x204c950
	void OnAIJoin__DelegateSignature(struct ASCMPlayerState* BotAI); // DelegateFunction Solarland.SCustomGameMode.OnAIJoin__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void NotifyDSBattleOver(); // Function Solarland.SCustomGameMode.NotifyDSBattleOver // (Final|Native|Public) // @ game+0x204c7b0
	void NotifyBotAIDataReady(int32_t AICount); // Function Solarland.SCustomGameMode.NotifyBotAIDataReady // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool IsEnableLogicComp(); // Function Solarland.SCustomGameMode.IsEnableLogicComp // (Final|Native|Public|Const) // @ game+0x204bf10
	int32_t GetCurMapID(); // Function Solarland.SCustomGameMode.GetCurMapID // (Final|Native|Public) // @ game+0x2047520
	void CreateHomeActor(struct FString Path); // Function Solarland.SCustomGameMode.CreateHomeActor // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	bool CheckLogicComponentIsA(struct TSoftClassPtr<UObject> ClassPath); // Function Solarland.SCustomGameMode.CheckLogicComponentIsA // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x20439c0
	bool ChangePlayerCharacter(struct ASCMPlayerState* Player, int32_t CharacterId, int32_t SkinId); // Function Solarland.SCustomGameMode.ChangePlayerCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2043530
	bool ChangeBotAICharacter(struct ASolarPlayerState* Player, int32_t CharacterId, int32_t SkinId); // Function Solarland.SCustomGameMode.ChangeBotAICharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2043420
};

// Class Solarland.SCBattleRoyaleGameMode
// Size: 0x6f0 (Inherited: 0x6f0)
struct ASCBattleRoyaleGameMode : ASCustomGameMode {
};

// Class Solarland.SCBountyGameMode
// Size: 0x6f0 (Inherited: 0x6f0)
struct ASCBountyGameMode : ASCustomGameMode {
};

// Class Solarland.SolarCharacterBase
// Size: 0x5e0 (Inherited: 0x4d0)
struct ASolarCharacterBase : ACharacter {
	char pad_4D0[0x24]; // 0x4d0(0x24)
	struct FSpawnedActorHandle CachedActorHandle; // 0x4f4(0x04)
	struct USolarAbilityComponent* SolarAbilityComponent; // 0x4f8(0x08)
	bool bPendingEnterWater; // 0x500(0x01)
	char pad_501[0x7]; // 0x501(0x07)
	struct ASolarCharacterBase* InstigatorCharacter; // 0x508(0x08)
	struct TWeakObjectPtr<struct UParticleSystem> DedicatedDeathEffect; // 0x510(0x08)
	struct TSoftObjectPtr<UParticleSystem> DeathEffectSoft; // 0x518(0x28)
	char pad_540[0x34]; // 0x540(0x34)
	float VehicleCollisionProtectionTimeOnJumpingOff; // 0x574(0x04)
	float PushYScale; // 0x578(0x04)
	float PushXScaleOnSwimming; // 0x57c(0x04)
	float PushYScaleOnSwimming; // 0x580(0x04)
	float PushZScaleOnSwimming; // 0x584(0x04)
	struct USolarAbilitySystemComponent* SolarAbilitySystemComponent; // 0x588(0x08)
	char pad_590[0x24]; // 0x590(0x24)
	bool bHoldSignificanceWhenDyingForAutonomous; // 0x5b4(0x01)
	char pad_5B5[0x3]; // 0x5b5(0x03)
	struct UAkComponent* AkAudioComponent; // 0x5b8(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x5c0(0x08)
	struct UCharacterSoundConfig* CharacterSoundConfig; // 0x5c8(0x08)
	char pad_5D0[0x10]; // 0x5d0(0x10)

	void SetAttributeWithGAS(struct FGameplayAttribute InAttribute, enum class EGameplayModOp ModifyType, float InValue); // Function Solarland.SolarCharacterBase.SetAttributeWithGAS // (Native|Public|BlueprintCallable) // @ game+0x20b61c0
	void ResetAudioComponentTransform(); // Function Solarland.SolarCharacterBase.ResetAudioComponentTransform // (Final|Native|Public) // @ game+0x20b61a0
	void PostAkEventByName(struct FString EventName1, struct FString EventName2); // Function Solarland.SolarCharacterBase.PostAkEventByName // (Final|Native|Public|BlueprintCallable) // @ game+0x20b60a0
	void OnRep_PendingEnterWater(); // Function Solarland.SolarCharacterBase.OnRep_PendingEnterWater // (Native|Public) // @ game+0x1555e40
	void MulticastAddHitTrace(struct FHitTraceInfo Info); // Function Solarland.SolarCharacterBase.MulticastAddHitTrace // (Net|Native|Event|NetMulticast|Protected) // @ game+0x20b6010
	bool K2_IsInWater(); // Function Solarland.SolarCharacterBase.K2_IsInWater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20b5f70
	bool K2_IsAlive(); // Function Solarland.SolarCharacterBase.K2_IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20b5fd0
	bool IsPlayerLocallyControlled(); // Function Solarland.SolarCharacterBase.IsPlayerLocallyControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20b5fa0
	bool IsInWater(); // Function Solarland.SolarCharacterBase.IsInWater // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20b5f70
	bool IsInSight(struct FVector& InTargetPos, float InMaxAngle, bool bHorizontalOnly); // Function Solarland.SolarCharacterBase.IsInSight // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x20b5e40
	bool IsInRoom(); // Function Solarland.SolarCharacterBase.IsInRoom // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20b5e10
	bool IsBlocked(struct AActor* InOtherActor); // Function Solarland.SolarCharacterBase.IsBlocked // (Final|Native|Public) // @ game+0x20b5d70
	bool InSameTeamWithFirstPlayerController(); // Function Solarland.SolarCharacterBase.InSameTeamWithFirstPlayerController // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20b5c70
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarCharacterBase.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x20b5ca0
	struct FString GetSoundEventString(enum class ECharacterSoundOpt SoundOpt); // Function Solarland.SolarCharacterBase.GetSoundEventString // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20b5b90
	struct USolarAkGameObject* GetSolarAkGameObject(); // Function Solarland.SolarCharacterBase.GetSolarAkGameObject // (Final|Native|Public|BlueprintCallable) // @ game+0x20b5b70
	struct USolarAbilitySystemComponent* GetSafeASC(); // Function Solarland.SolarCharacterBase.GetSafeASC // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8530
	float GetMaxHealth(); // Function Solarland.SolarCharacterBase.GetMaxHealth // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20b5b30
	float GetCurrentHealth(); // Function Solarland.SolarCharacterBase.GetCurrentHealth // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20b5af0
	enum class ESolarCharacterType GetCharacterType(); // Function Solarland.SolarCharacterBase.GetCharacterType // (Native|Public|Const) // @ game+0x20b5ac0
	struct FVector GetCharacterLocation(bool bMiddle); // Function Solarland.SolarCharacterBase.GetCharacterLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x20b5a10
	struct FVector GetCharacterDirection(); // Function Solarland.SolarCharacterBase.GetCharacterDirection // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x20b59d0
	struct USolarBackpackComponent* GetBackpack(); // Function Solarland.SolarCharacterBase.GetBackpack // (Native|Public|Const) // @ game+0x20b59a0
	void ClientOnPushedByVehicle(); // Function Solarland.SolarCharacterBase.ClientOnPushedByVehicle // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x15557a0
	bool CheckOpenParticleOptimization(int32_t Bias); // Function Solarland.SolarCharacterBase.CheckOpenParticleOptimization // (Final|Native|Public|BlueprintCallable) // @ game+0x20b5900
	void ChangeCurrentHealthWithGAS(enum class EGameplayModOp ModifyType, float InValue); // Function Solarland.SolarCharacterBase.ChangeCurrentHealthWithGAS // (Native|Public|BlueprintCallable) // @ game+0x20b5830
};

// Class Solarland.SolarCharacter
// Size: 0x2080 (Inherited: 0x5e0)
struct ASolarCharacter : ASolarCharacterBase {
	char pad_5E0[0x80]; // 0x5e0(0x80)
	struct FMulticastInlineDelegate PendingBeginPlay; // 0x660(0x10)
	char pad_670[0x18]; // 0x670(0x18)
	struct FMulticastInlineDelegate OnPlayerStatePossessDelegate; // 0x688(0x10)
	struct FMulticastInlineDelegate OnPlayerStateRepDelegate; // 0x698(0x10)
	enum class ESolarCharacterType SolarCharacterType; // 0x6a8(0x01)
	char pad_6A9[0x5b]; // 0x6a9(0x5b)
	struct FVector2D CharacterCapsuleSizeOverride; // 0x704(0x08)
	char pad_70C[0x1]; // 0x70c(0x01)
	bool bInRoom; // 0x70d(0x01)
	char pad_70E[0x2d]; // 0x70e(0x2d)
	struct FReconnectionParams ReconnectionParams; // 0x73b(0x01)
	char pad_73C[0x1c]; // 0x73c(0x1c)
	struct USolarAnimInstance* SolarAnimInstance; // 0x758(0x08)
	struct TMap<enum class ESpecAnimInstType, struct UAnimInstance*> SolarAnimInstances; // 0x760(0x50)
	char pad_7B0[0x14]; // 0x7b0(0x14)
	int32_t BodyHitSoundCount; // 0x7c4(0x04)
	int32_t BodyHitByPunchSoundCount; // 0x7c8(0x04)
	char pad_7CC[0x4]; // 0x7cc(0x04)
	struct TArray<struct ASolarPile*> ChargingPileQueue; // 0x7d0(0x10)
	char pad_7E0[0x28]; // 0x7e0(0x28)
	struct FMulticastInlineDelegate OnCharacterIDSet; // 0x808(0x10)
	struct FMulticastInlineDelegate OnSkinIDSet; // 0x818(0x10)
	struct FMulticastInlineDelegate OnCharacterSkinReset; // 0x828(0x10)
	enum class ECharacterBodyScaleType BodyScaleType; // 0x838(0x01)
	char pad_839[0x3]; // 0x839(0x03)
	int32_t AssignedCharacterID; // 0x83c(0x04)
	int32_t AssignedSkinID; // 0x840(0x04)
	char pad_844[0xc]; // 0x844(0x0c)
	struct TMap<struct FGameplayTag, struct USkeletalMeshComponent*> SkeletalOrnaments; // 0x850(0x50)
	struct TMap<struct FGameplayTag, struct UStaticMeshComponent*> StaticOrnaments; // 0x8a0(0x50)
	struct TMap<struct FGameplayTag, struct UChildActorComponent*> ChildActorOrnaments; // 0x8f0(0x50)
	struct TMap<struct FGameplayTag, struct FCharacterTagListenerForOrnamentComp> OrnamentCompVisibleTagDependencies; // 0x940(0x50)
	struct FOrnamentMontageInfo OrnamentMontageInfo; // 0x990(0x18)
	char pad_9A8[0x140]; // 0x9a8(0x140)
	struct USolarAttributeSubComponent* AttributeSubComp; // 0xae8(0x08)
	char pad_AF0[0x38]; // 0xaf0(0x38)
	struct ASolarBackpackActor* SolarBackpackActor; // 0xb28(0x08)
	struct USolarBackpackComponent* SolarBackpackComponent; // 0xb30(0x08)
	char pad_B38[0x20]; // 0xb38(0x20)
	struct FMulticastInlineDelegate OnBackpackItemUpdate; // 0xb58(0x10)
	struct FMulticastInlineDelegate OnBackpackEnergyUpdate; // 0xb68(0x10)
	struct FMulticastInlineDelegate OnBackpackEquipUpdate; // 0xb78(0x10)
	struct FMulticastInlineDelegate OnBatteryIdUpdate; // 0xb88(0x10)
	struct FMulticastInlineDelegate OnEnergyStateUpdate; // 0xb98(0x10)
	struct FMulticastInlineDelegate OnChargeInfoUpdate; // 0xba8(0x10)
	struct FMulticastInlineDelegate OnConsumableNumUpdated; // 0xbb8(0x10)
	struct FMulticastInlineDelegate OnMaxEnergyUpdate; // 0xbc8(0x10)
	struct FMulticastInlineDelegate OnCurEnergyUpdate; // 0xbd8(0x10)
	struct FMulticastInlineDelegate OnBackpackWeaponPartUpdate; // 0xbe8(0x10)
	struct TMap<int32_t, int32_t> ShieldUpMatCostMap; // 0xbf8(0x50)
	struct TMap<int32_t, int32_t> MaxPileMap; // 0xc48(0x50)
	struct TArray<struct FReplicateMaxPileData> MaxPileArray; // 0xc98(0x10)
	struct TMap<int32_t, struct FSolarItemData> IdKeyItemMap; // 0xca8(0x50)
	struct TArray<struct FReplicateItemData> IdKeyItemArray; // 0xcf8(0x10)
	struct TMap<enum class EItemType, struct FSolarItemData> TypeKeyItemMap; // 0xd08(0x50)
	struct TArray<struct FReplicateItemData> TypeKeyItemArray; // 0xd58(0x10)
	struct TArray<struct FReplicateItemData> WeaponDataArray; // 0xd68(0x10)
	struct TMap<int32_t, struct FSolarItemData> WeaponDataMap; // 0xd78(0x50)
	char pad_DC8[0x50]; // 0xdc8(0x50)
	struct TArray<int32_t> WeaponPartsArray; // 0xe18(0x10)
	char pad_E28[0x8]; // 0xe28(0x08)
	struct TArray<char> IgnoreScopeSlots; // 0xe30(0x10)
	char EnergyState; // 0xe40(0x01)
	char pad_E41[0x3]; // 0xe41(0x03)
	float MaxEnergyValue; // 0xe44(0x04)
	float CurrEnergyValue; // 0xe48(0x04)
	float MaxExtraEnergyValue; // 0xe4c(0x04)
	float CurrExtraEnergyValue; // 0xe50(0x04)
	int32_t EnergyModuleID; // 0xe54(0x04)
	float AddedEnergyMax; // 0xe58(0x04)
	int32_t ExtraEnergyModuleID; // 0xe5c(0x04)
	float AddedExtraEnergyMax; // 0xe60(0x04)
	int32_t VJetPackModuleID; // 0xe64(0x04)
	int32_t HJetPackModuleID; // 0xe68(0x04)
	char pad_E6C[0x1]; // 0xe6c(0x01)
	bool bSettingEnergyCostEnabled; // 0xe6d(0x01)
	char pad_E6E[0x2]; // 0xe6e(0x02)
	int32_t DayLightID; // 0xe70(0x04)
	float SolarChargeRatio; // 0xe74(0x04)
	bool bReviveItemCleared; // 0xe78(0x01)
	char pad_E79[0x3]; // 0xe79(0x03)
	struct FBackpackJetPrepelInfo JetPropellingInfo; // 0xe7c(0x0c)
	enum class EBackpackPropellingMode BackpackPropellingMode; // 0xe88(0x01)
	char pad_E89[0x3]; // 0xe89(0x03)
	struct FVector2D InputVector; // 0xe8c(0x08)
	char pad_E94[0xc]; // 0xe94(0x0c)
	struct USolarInputActionContext* InputActionContext; // 0xea0(0x08)
	enum class EIdleTurnType IdleTurnType; // 0xea8(0x01)
	char pad_EA9[0x7]; // 0xea9(0x07)
	struct FRotator CharacterLookAt; // 0xeb0(0x0c)
	char pad_EBC[0x24]; // 0xebc(0x24)
	struct FCharacterOperationEvent CharacterOperationEvt; // 0xee0(0x10)
	char pad_EF0[0x18]; // 0xef0(0x18)
	struct FMulticastInlineDelegate OnHealthUpdateDelegate; // 0xf08(0x10)
	float PendingRegeneration; // 0xf18(0x04)
	float DiedTime; // 0xf1c(0x04)
	char pad_F20[0x4]; // 0xf20(0x04)
	char bIsDeathVerge : 1; // 0xf24(0x01)
	char pad_F24_1 : 7; // 0xf24(0x01)
	char pad_F25[0x13]; // 0xf25(0x13)
	struct USolarTeamRescueComponent* SolarTeamRescueComponent; // 0xf38(0x08)
	struct TWeakObjectPtr<struct ASolarCharacter> RescuingCharater; // 0xf40(0x08)
	struct TWeakObjectPtr<struct ASolarUAVRescue> RescuingUAV; // 0xf48(0x08)
	enum class ERescueState CurrentRescueState; // 0xf50(0x01)
	enum class ERescueState LastRescueState; // 0xf51(0x01)
	char pad_F52[0x2e]; // 0xf52(0x2e)
	struct TWeakObjectPtr<struct ASolarCharacter> RescuedCharater; // 0xf80(0x08)
	float RescuedStartTime; // 0xf88(0x04)
	char pad_F8C[0x4]; // 0xf8c(0x04)
	struct UStaticMeshComponent* RescueInjector; // 0xf90(0x08)
	char pad_F98[0x24]; // 0xf98(0x24)
	float RescueTime; // 0xfbc(0x04)
	char pad_FC0[0x8]; // 0xfc0(0x08)
	struct TArray<struct ASolarPlayerWeapon*> DeathBoxWeaponArray; // 0xfc8(0x10)
	struct TArray<struct FSolarItemData> DeathBoxArray; // 0xfd8(0x10)
	float DeathBoxEnergy; // 0xfe8(0x04)
	char pad_FEC[0x4]; // 0xfec(0x04)
	struct ASolarWaterActorNew* WaterActor; // 0xff0(0x08)
	struct UParticleSystemComponent* SwimmingWaterEffect; // 0xff8(0x08)
	struct UParticleSystemComponent* HeavyJumpWaterEffect; // 0x1000(0x08)
	struct TArray<struct UParticleSystemComponent*> HorizontalFlyWaterEffects; // 0x1008(0x10)
	char pad_1018[0x10]; // 0x1018(0x10)
	struct USolarItemComponent* SolarItemComponent; // 0x1028(0x08)
	struct USolarPickupComponent* SolarPickupComponent; // 0x1030(0x08)
	bool bIsElectricStoreOpened; // 0x1038(0x01)
	char pad_1039[0x7]; // 0x1039(0x07)
	struct USolarTreatmentComponent* SolarTreatmentComponent; // 0x1040(0x08)
	enum class ESolarTreatmentState CurrentTreatState; // 0x1048(0x01)
	char pad_1049[0x3]; // 0x1049(0x03)
	int32_t TreatmentCount; // 0x104c(0x04)
	char pad_1050[0x8]; // 0x1050(0x08)
	struct FMulticastInlineDelegate OnShieldRecharge; // 0x1058(0x10)
	struct FMulticastInlineDelegate OnShieldBreak; // 0x1068(0x10)
	struct FMulticastInlineDelegate OnShowShieldHUD; // 0x1078(0x10)
	struct FMulticastInlineDelegate OnShowShieldHUDItem; // 0x1088(0x10)
	struct FMulticastInlineDelegate OnShieldUpFX; // 0x1098(0x10)
	struct FMulticastInlineDelegate OnCurShieldValueChanged; // 0x10a8(0x10)
	struct FMulticastInlineDelegate OnShieldIDChanged; // 0x10b8(0x10)
	struct FMulticastInlineDelegate OnShieldValueLow; // 0x10c8(0x10)
	struct FMulticastInlineDelegate OnShieldValueChanged; // 0x10d8(0x10)
	char pad_10E8[0x4]; // 0x10e8(0x04)
	int32_t CurrShieldId; // 0x10ec(0x04)
	int32_t CurUniqueShieldId; // 0x10f0(0x04)
	float MaxShieldValue; // 0x10f4(0x04)
	int32_t NextUpgradeShieldID; // 0x10f8(0x04)
	int32_t NextUpgradeShieldEnergy; // 0x10fc(0x04)
	float CurrShieldValue; // 0x1100(0x04)
	enum class EShieldState CurrShieldState; // 0x1104(0x01)
	char pad_1105[0x3]; // 0x1105(0x03)
	int32_t CurrShieldLevel; // 0x1108(0x04)
	char pad_110C[0x4]; // 0x110c(0x04)
	bool bHasPreAdd; // 0x1110(0x01)
	char pad_1111[0xa7]; // 0x1111(0xa7)
	struct UStaticMeshComponent* ShieldRepairOperator; // 0x11b8(0x08)
	struct UStaticMesh* ShieldOperatorSM; // 0x11c0(0x08)
	struct UStaticMesh* ShieldOperatorBigSM; // 0x11c8(0x08)
	struct UParticleSystemComponent* ShieldRepairFX; // 0x11d0(0x08)
	struct UParticleSystemComponent* ShieldMultiRecoverFX; // 0x11d8(0x08)
	struct UParticleSystemComponent* ShieldUpgradeBodyFX; // 0x11e0(0x08)
	struct UStaticMeshComponent* ShieldUpgradeOperator; // 0x11e8(0x08)
	struct UStaticMesh* ShieldUpgradeOperatorSM; // 0x11f0(0x08)
	struct FTimeline ShieldOperatorExpandTimeline; // 0x11f8(0x98)
	struct FTimeline ShieldOperatorNarrowTimeline; // 0x1290(0x98)
	struct TMap<enum class EShieldSoundType, struct FShieldSoundData> ShieldSounds; // 0x1328(0x50)
	char pad_1378[0x8]; // 0x1378(0x08)
	struct UStaticMeshComponent* TreasureBoxOperator; // 0x1380(0x08)
	struct ADeathTreasureBox* CurChargingDeathBox; // 0x1388(0x08)
	struct TArray<struct ADeathTreasureBox*> DeathBoxes; // 0x1390(0x10)
	char pad_13A0[0x8]; // 0x13a0(0x08)
	struct FMulticastInlineDelegate OnLocalPlayerSpectateMeStatusChanged; // 0x13a8(0x10)
	char pad_13B8[0x30]; // 0x13b8(0x30)
	struct FDelegate OnHUDNickNameSet; // 0x13e8(0x10)
	struct FDelegate OnHUDTeamPosSet; // 0x13f8(0x10)
	struct FDelegate OnHUDDistanceSet; // 0x1408(0x10)
	struct FDelegate OnHUDDistanceDisplaySet; // 0x1418(0x10)
	struct FDelegate OnHUDRescueBtnActivitySet; // 0x1428(0x10)
	struct USolarTeammateHUDWidgetComponent* TeammateHUDComp; // 0x1438(0x08)
	char pad_1440[0x8]; // 0x1440(0x08)
	float HUDZNomral; // 0x1448(0x04)
	float HUDChangeTime; // 0x144c(0x04)
	char pad_1450[0x18]; // 0x1450(0x18)
	struct USolarRadarComponent* SolarRadarComponent; // 0x1468(0x08)
	struct FRadarDataSpecContainer ActivatedRadars; // 0x1470(0x120)
	struct TWeakObjectPtr<struct ASolarRadarStation> TargetRadarStation; // 0x1590(0x08)
	struct TWeakObjectPtr<struct ASolarElectricShop> TargetElectricShop; // 0x1598(0x08)
	char pad_15A0[0x10]; // 0x15a0(0x10)
	struct FTimerHandle StatisticsTimerHandle; // 0x15b0(0x08)
	char pad_15B8[0x70]; // 0x15b8(0x70)
	struct ASolarCharacter* CachedInstigatorCharacter; // 0x1628(0x08)
	char pad_1630[0x14]; // 0x1630(0x14)
	float ArmorReduceValue; // 0x1644(0x04)
	float HeadHitValue; // 0x1648(0x04)
	char pad_164C[0x4]; // 0x164c(0x04)
	struct FMulticastInlineDelegate OnTakeDamageDelegate; // 0x1650(0x10)
	char pad_1660[0x14]; // 0x1660(0x14)
	int32_t InstigatorCharacterWeaponItemID; // 0x1674(0x04)
	struct TArray<struct FCriticalHitInfo> CriticalHits; // 0x1678(0x10)
	char pad_1688[0x68]; // 0x1688(0x68)
	struct UWorldMarkComponent* WorldMarkComponent; // 0x16f0(0x08)
	struct UIMChatObject* IMChatObj; // 0x16f8(0x08)
	int32_t AIActorCapacity; // 0x1700(0x04)
	char pad_1704[0x94]; // 0x1704(0x94)
	float StandJogSpeed; // 0x1798(0x04)
	float StandRunSpeed; // 0x179c(0x04)
	float StandSprintSpeed; // 0x17a0(0x04)
	float CrouchJogSpeed; // 0x17a4(0x04)
	float CrouchRunSpeed; // 0x17a8(0x04)
	float CrouchSprintSpeed; // 0x17ac(0x04)
	char pad_17B0[0x8]; // 0x17b0(0x08)
	struct FMulticastInlineDelegate OnJogSetClient; // 0x17b8(0x10)
	bool bIsSprintingMove; // 0x17c8(0x01)
	char pad_17C9[0x57]; // 0x17c9(0x57)
	struct USolarCharacterMovementComponent* CachedSolarCharacterMovement; // 0x1820(0x08)
	char pad_1828_0 : 1; // 0x1828(0x01)
	char bIsJog : 1; // 0x1828(0x01)
	char pad_1828_2 : 6; // 0x1828(0x01)
	char pad_1829[0x3]; // 0x1829(0x03)
	float MoveSpeedReduceBonusInHipFire; // 0x182c(0x04)
	float MoveSpeedReduceBonusInAdsHipFire; // 0x1830(0x04)
	char pad_1834[0x10]; // 0x1834(0x10)
	enum class ECustomJumpType CurrentCustomJumpType; // 0x1844(0x01)
	char pad_1845[0x2]; // 0x1845(0x02)
	enum class EJetFlyType CurrentJetFlyType; // 0x1847(0x01)
	char bNewJetFlyCheckFlag : 1; // 0x1848(0x01)
	char pad_1848_1 : 7; // 0x1848(0x01)
	char pad_1849[0x47]; // 0x1849(0x47)
	struct UAnimSequence* CruiseStartAnim; // 0x1890(0x08)
	struct UAnimSequence* CruiseLoopAnim; // 0x1898(0x08)
	struct UAnimSequence* CruiseEndAnim; // 0x18a0(0x08)
	float PrepareToParachuteStartTime; // 0x18a8(0x04)
	float PrepareToParachuteDuration; // 0x18ac(0x04)
	struct FVector PrepareToParachuteLocation; // 0x18b0(0x0c)
	struct FVector AgreedParachuteLocation; // 0x18bc(0x0c)
	char pad_18C8[0x18]; // 0x18c8(0x18)
	int32_t CapsuleID; // 0x18e0(0x04)
	bool bEnableCruising; // 0x18e4(0x01)
	char pad_18E5[0x3]; // 0x18e5(0x03)
	struct ASolarCapsuleRoot* BoardedRoot; // 0x18e8(0x08)
	enum class ECruiseState CruiseState; // 0x18f0(0x01)
	char pad_18F1[0x3]; // 0x18f1(0x03)
	int32_t ForceParachuteCountDown; // 0x18f4(0x04)
	struct UCharacterCruiseComponent* CruiseComponentPrivate; // 0x18f8(0x08)
	char pad_1900[0x8]; // 0x1900(0x08)
	struct FMulticastInlineDelegate OnSkydiveTraced; // 0x1908(0x10)
	struct AExponentialHeightFog* HeightFogActor; // 0x1918(0x08)
	struct TArray<struct UParticleSystemComponent*> SkydiveFlyingEffects; // 0x1920(0x10)
	struct TArray<struct UParticleSystemComponent*> SkydiveLandingEffects; // 0x1930(0x10)
	struct TArray<struct UParticleSystemComponent*> SkydiveWholeLifetimeEffects; // 0x1940(0x10)
	enum class ESkydiveStage CurrentSkydiveStage; // 0x1950(0x01)
	char pad_1951[0x7]; // 0x1951(0x07)
	struct FMulticastInlineDelegate OnSkydivingStageChangedDelegate; // 0x1958(0x10)
	char pad_1968[0x20]; // 0x1968(0x20)
	struct UActorComponent* FollowedLeaderMovementComponent; // 0x1988(0x08)
	char pad_1990[0x30]; // 0x1990(0x30)
	struct UWeaponSystemPlayerBase* WeaponSystemComponent; // 0x19c0(0x08)
	char pad_19C8[0x8]; // 0x19c8(0x08)
	struct FMulticastInlineDelegate OnCharacterFired; // 0x19d0(0x10)
	char pad_19E0[0x18]; // 0x19e0(0x18)
	struct USkeletalMeshComponent* FirstPersonMesh; // 0x19f8(0x08)
	char pad_1A00[0x10]; // 0x1a00(0x10)
	struct ASolarPlayerWeapon* TempSwitchWeapon; // 0x1a10(0x08)
	struct ASolarPlayerWeapon* CachedCurrentWeapon; // 0x1a18(0x08)
	char pad_1A20[0xc8]; // 0x1a20(0xc8)
	struct UWeaponSystemVehicleComponent* WeaponSystemVehicle; // 0x1ae8(0x08)
	char pad_1AF0[0x18]; // 0x1af0(0x18)
	struct FBoardedVehicleInfo BoardedVehicleInfo; // 0x1b08(0x10)
	bool bOutVehicleShot; // 0x1b18(0x01)
	char pad_1B19[0xc7]; // 0x1b19(0xc7)
	struct UStaticMeshComponent* VehicleRepairToolMesh; // 0x1be0(0x08)
	char pad_1BE8[0x18]; // 0x1be8(0x18)
	struct FMulticastInlineDelegate OnCharacterActivateEMP; // 0x1c00(0x10)
	struct FMulticastInlineDelegate OnCharacterSwitchEMPEffect; // 0x1c10(0x10)
	bool bActiveEMP; // 0x1c20(0x01)
	bool bActiveInfiniteAmmo; // 0x1c21(0x01)
	bool bNoticedCantCharge; // 0x1c22(0x01)
	enum class ESkillAnimType CurrentSkillAnimType; // 0x1c23(0x01)
	enum class ESkillAnimRightHandType CurrentSkillAnimRightHandType; // 0x1c24(0x01)
	char pad_1C25[0x3]; // 0x1c25(0x03)
	struct UStaticMeshComponent* MassInvWarningIconComponent; // 0x1c28(0x08)
	char pad_1C30[0x38]; // 0x1c30(0x38)
	struct UScoutEnemyObject* ScoutEnemyObj; // 0x1c68(0x08)
	struct UDuckRollingMeshComponent* CachedDuckRollingMeshComponent; // 0x1c70(0x08)
	char pad_1C78[0x78]; // 0x1c78(0x78)
	char WallRunSurfaceAngle; // 0x1cf0(0x01)
	enum class EWallRunState WallRunState; // 0x1cf1(0x01)
	char pad_1CF2[0x2]; // 0x1cf2(0x02)
	int32_t LeadDanceID; // 0x1cf4(0x04)
	char pad_1CF8[0xa0]; // 0x1cf8(0xa0)
	struct FString DebugStringBotAIInfo; // 0x1d98(0x10)
	struct FString DebugStringToDrawGASServer; // 0x1da8(0x10)
	struct FString DebugStringDSTransferLog; // 0x1db8(0x10)
	int32_t RoleAbilityCharacterID; // 0x1dc8(0x04)
	char pad_1DCC[0x4]; // 0x1dcc(0x04)
	struct TArray<int32_t> RoleAbilityBoundPlayerLevels; // 0x1dd0(0x10)
	struct TArray<struct FGameplayAbilitySpecHandle> RoleAbilitySpecHandles; // 0x1de0(0x10)
	struct TArray<float> RoleAbilityStartCDServerTime; // 0x1df0(0x10)
	char pad_1E00[0x40]; // 0x1e00(0x40)
	int32_t BattleUpgradeEffectCurrentLevel; // 0x1e40(0x04)
	char pad_1E44[0x4]; // 0x1e44(0x04)
	struct FBattleUpgradeEffectContainer BattleUpgradeEffects; // 0x1e48(0x120)
	char pad_1F68[0x80]; // 0x1f68(0x80)
	struct TWeakObjectPtr<struct ASolarUAVRescue> PermanentRescueUAV; // 0x1fe8(0x08)
	char pad_1FF0[0x20]; // 0x1ff0(0x20)
	struct TMap<struct ASkywardDiveLauncher*, bool> AvailableSkywardDiveLaunchers; // 0x2010(0x50)
	char pad_2060[0x20]; // 0x2060(0x20)

	bool WorldToScreen(struct FVector& Location, struct FVector2D& Screen); // Function Solarland.SolarCharacter.WorldToScreen // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x20b3570
	void UseDanceEmoteByID(int32_t ID); // Function Solarland.SolarCharacter.UseDanceEmoteByID // (Final|Native|Public|BlueprintCallable) // @ game+0x20b34e0
	void UpgradeShieldResponse(bool bSuccess); // Function Solarland.SolarCharacter.UpgradeShieldResponse // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x20b3450
	void UpgradeGenericSkill(int32_t LevelUp); // Function Solarland.SolarCharacter.UpgradeGenericSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x20b33c0
	void UpgradeClassTypeSkill(int32_t LevelUp); // Function Solarland.SolarCharacter.UpgradeClassTypeSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x20b3330
	void UpdateWeaponCrosshair(float InDeltaTime); // Function Solarland.SolarCharacter.UpdateWeaponCrosshair // (Final|Native|Public) // @ game+0x20b32b0
	void UpdateVehicleStealthProgress(float StealthMaterialPercent); // Function Solarland.SolarCharacter.UpdateVehicleStealthProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x20b3230
	void UpdateTeammateHUDData(char InNewPosInTeam); // Function Solarland.SolarCharacter.UpdateTeammateHUDData // (Final|Native|Public|BlueprintCallable) // @ game+0x20b31b0
	void UpdateShieldUpgradeMatMaxPile(); // Function Solarland.SolarCharacter.UpdateShieldUpgradeMatMaxPile // (Final|Native|Public) // @ game+0x20b3190
	void UpdateShieldPropertyByAblility(); // Function Solarland.SolarCharacter.UpdateShieldPropertyByAblility // (Final|Native|Protected) // @ game+0x20b3170
	void UpdateRoleAbilityState(char RoleAbilityIndex, enum class ERoleSkillOperation Ope); // Function Solarland.SolarCharacter.UpdateRoleAbilityState // (Final|Native|Public|BlueprintCallable) // @ game+0x20b30a0
	void UpdateJetFlyDataToSpectating(); // Function Solarland.SolarCharacter.UpdateJetFlyDataToSpectating // (Final|Native|Private) // @ game+0x20b3080
	void UpdateExtraMagToSpectateInfo(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.SolarCharacter.UpdateExtraMagToSpectateInfo // (Final|Native|Private) // @ game+0x20b2ff0
	void UpdateDyingAttr(float DeltaTime); // Function Solarland.SolarCharacter.UpdateDyingAttr // (Final|Native|Public) // @ game+0x20b2f70
	float UpdateCurrentHealth(float UpdateValue, enum class EHealthChangeType ChangeType, struct ASolarCharacter* InInstigatorCharacter, struct AActor* InDamageCauserActor, struct FSolarPointDamageEvent& DamageEvent); // Function Solarland.SolarCharacter.UpdateCurrentHealth // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20b2d70
	void UpdateBattleUpgradeEffectToSpectateInfo(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.SolarCharacter.UpdateBattleUpgradeEffectToSpectateInfo // (Final|Native|Private) // @ game+0x20b2ce0
	void UnbindActorToSelfTeam(struct AActor* Actor); // Function Solarland.SolarCharacter.UnbindActorToSelfTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x20b2c50
	void TurnCharacterWithAngle(float Degree, bool bIsYawOrPitch); // Function Solarland.SolarCharacter.TurnCharacterWithAngle // (Final|Native|Protected|BlueprintCallable) // @ game+0x20b2b70
	void TurnCharacterToDirection(struct FVector& Dir); // Function Solarland.SolarCharacter.TurnCharacterToDirection // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20b2ae0
	void TryStopSpectateCountdown(); // Function Solarland.SolarCharacter.TryStopSpectateCountdown // (Final|Native|Public|BlueprintCallable) // @ game+0x20b2ac0
	void TryStopShieldRecharge(); // Function Solarland.SolarCharacter.TryStopShieldRecharge // (Final|Native|Public) // @ game+0x20b2aa0
	void TryStatisticsRechargedTimes(); // Function Solarland.SolarCharacter.TryStatisticsRechargedTimes // (Final|Native|Public) // @ game+0x20b2a80
	void TryStartSpectateCountdown(); // Function Solarland.SolarCharacter.TryStartSpectateCountdown // (Final|Native|Public|BlueprintCallable) // @ game+0x20b2a60
	void TryStartShieldRecharge(bool bUseBigRecharger); // Function Solarland.SolarCharacter.TryStartShieldRecharge // (Final|Native|Public) // @ game+0x20b29d0
	void TrySetTeammateHUDShow(); // Function Solarland.SolarCharacter.TrySetTeammateHUDShow // (Final|Native|Public|BlueprintCallable) // @ game+0x20b29b0
	void TrySetTeammateHUDHide(); // Function Solarland.SolarCharacter.TrySetTeammateHUDHide // (Final|Native|Public|BlueprintCallable) // @ game+0x20b2990
	void TrySetTeamateHUDVisiblity(); // Function Solarland.SolarCharacter.TrySetTeamateHUDVisiblity // (Final|Native|Public|BlueprintCallable) // @ game+0x20b2970
	void TryRechargeShield(bool bUseBigRecharger); // Function Solarland.SolarCharacter.TryRechargeShield // (Final|Native|Public) // @ game+0x20b28e0
	void TryHideShieldOperator(); // Function Solarland.SolarCharacter.TryHideShieldOperator // (Final|Native|Public) // @ game+0x20b28c0
	void TryDiscardShieldUpgradeMatItems(int32_t InItemNum); // Function Solarland.SolarCharacter.TryDiscardShieldUpgradeMatItems // (Final|Native|Public) // @ game+0x20b2830
	void TryCreatingOwnTeammate(); // Function Solarland.SolarCharacter.TryCreatingOwnTeammate // (Final|Native|Protected) // @ game+0x20b2810
	void TryBreakShieldRecharge(); // Function Solarland.SolarCharacter.TryBreakShieldRecharge // (Final|Native|Public) // @ game+0x20b27f0
	void TryBreakScopeStatus(); // Function Solarland.SolarCharacter.TryBreakScopeStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x20b27d0
	void TryBindPowerBarDelegates(); // Function Solarland.SolarCharacter.TryBindPowerBarDelegates // (Final|Native|Public) // @ game+0x20b27b0
	void TryBindPickupDelegates(); // Function Solarland.SolarCharacter.TryBindPickupDelegates // (Final|Native|Public) // @ game+0x8e9ae0
	void TryBindItemPanelDelegates(); // Function Solarland.SolarCharacter.TryBindItemPanelDelegates // (Final|Native|Public) // @ game+0x20b2790
	void TryBindHPPanelDelegates(); // Function Solarland.SolarCharacter.TryBindHPPanelDelegates // (Final|Native|Public) // @ game+0x20b2770
	void TryAutoMarkItemForTeammateServer(struct TArray<struct FSolarItemData> ItemData); // Function Solarland.SolarCharacter.TryAutoMarkItemForTeammateServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20b2670
	void ToggleDebugInfo(); // Function Solarland.SolarCharacter.ToggleDebugInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void ToggleDebugGASInfo(); // Function Solarland.SolarCharacter.ToggleDebugGASInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void TickShieldOperatorTimeline(float InDeltaTime); // Function Solarland.SolarCharacter.TickShieldOperatorTimeline // (Final|Native|Public) // @ game+0x20b25f0
	float TakeDamageResolve(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.TakeDamageResolve // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x20b2440
	void Suicide(); // Function Solarland.SolarCharacter.Suicide // (Final|Native|Public|BlueprintCallable) // @ game+0x20b2420
	void StopTreatmentProgressBar(); // Function Solarland.SolarCharacter.StopTreatmentProgressBar // (Final|Native|Public) // @ game+0x20b2400
	void StopTreatment(); // Function Solarland.SolarCharacter.StopTreatment // (Final|Native|Public|BlueprintCallable) // @ game+0x20b23e0
	void StopShieldRechargeProgressBar(); // Function Solarland.SolarCharacter.StopShieldRechargeProgressBar // (Final|Native|Public) // @ game+0x20b23c0
	void StopShieldRechargeProgress(); // Function Solarland.SolarCharacter.StopShieldRechargeProgress // (Final|Native|Public) // @ game+0x20b23a0
	void StopRescueProgressBar(int32_t TextID); // Function Solarland.SolarCharacter.StopRescueProgressBar // (Final|Native|Public) // @ game+0x20b2310
	void StopRepairWeakPointProgressBar(); // Function Solarland.SolarCharacter.StopRepairWeakPointProgressBar // (Final|Native|Public) // @ game+0x20b22f0
	void StopClimbSound(); // Function Solarland.SolarCharacter.StopClimbSound // (Final|Native|Public|BlueprintCallable) // @ game+0x20b22b0
	void StatisticElectricShopOnActivated(struct FVector& InLocation); // Function Solarland.SolarCharacter.StatisticElectricShopOnActivated // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x20b2220
	void StartTreatmentProgressBar(float Duration); // Function Solarland.SolarCharacter.StartTreatmentProgressBar // (Final|Native|Public) // @ game+0x20b21a0
	void StartTreatment(); // Function Solarland.SolarCharacter.StartTreatment // (Final|Native|Public|BlueprintCallable) // @ game+0x20b2180
	void StartShieldRechargeProgressBar(float InRechargeDuration, int32_t InContributorCharacterId); // Function Solarland.SolarCharacter.StartShieldRechargeProgressBar // (Final|Native|Public) // @ game+0x20b20b0
	void StartShieldRechargeProgress(); // Function Solarland.SolarCharacter.StartShieldRechargeProgress // (Final|Native|Public) // @ game+0x20b2090
	void StartRescueProgressBar(float Duration, float RemainingTime, int32_t TextID, bool bShowBtn, bool bIsUAV); // Function Solarland.SolarCharacter.StartRescueProgressBar // (Final|Native|Public) // @ game+0x20b1ee0
	void StartRepairWeakPointProgressBar(float Duration); // Function Solarland.SolarCharacter.StartRepairWeakPointProgressBar // (Final|Native|Public) // @ game+0x20b1e60
	void SpecAnimInstStopMontage(enum class ESpecAnimInstType SpecAnimType, struct UAnimMontage* AnimMontage); // Function Solarland.SolarCharacter.SpecAnimInstStopMontage // (Native|Public|BlueprintCallable) // @ game+0x20b1d70
	float SpecAnimInstPlayMontage(enum class ESpecAnimInstType SpecAnimType, struct UAnimMontage* AnimMontage, float InPlayRate, struct FName StartSectionName); // Function Solarland.SolarCharacter.SpecAnimInstPlayMontage // (Native|Public|BlueprintCallable) // @ game+0x20b1c10
	struct UAnimMontage* SpecAnimInstGetCurrentMontage(enum class ESpecAnimInstType SpecAnimType); // Function Solarland.SolarCharacter.SpecAnimInstGetCurrentMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x20b1b80
	void SpawnDeathBoxActor(); // Function Solarland.SolarCharacter.SpawnDeathBoxActor // (Final|Native|Protected) // @ game+0x20b1b60
	void SolarLaunchCharacter(struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride, struct AActor* JumpPad); // Function Solarland.SolarCharacter.SolarLaunchCharacter // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20b19d0
	void ShowShieldUIFX(int32_t ShiledID); // Function Solarland.SolarCharacter.ShowShieldUIFX // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ShowShieldUI(bool IsShow); // Function Solarland.SolarCharacter.ShowShieldUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ShowRevivePickupEffect(); // Function Solarland.SolarCharacter.ShowRevivePickupEffect // (Final|Native|Public) // @ game+0x20b19b0
	void ShowReviveClearEffect(); // Function Solarland.SolarCharacter.ShowReviveClearEffect // (Final|Native|Public) // @ game+0x20b1990
	void ShowRescueInjector(); // Function Solarland.SolarCharacter.ShowRescueInjector // (Final|Native|Public|BlueprintCallable) // @ game+0x20b1970
	void ShowNoticeCantCharge(); // Function Solarland.SolarCharacter.ShowNoticeCantCharge // (Final|Native|Public) // @ game+0x20b1950
	bool ShouldForceOverrideDamageTaken(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser, float& OverrideDamageTaken); // Function Solarland.SolarCharacter.ShouldForceOverrideDamageTaken // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x20b1740
	void ShieldUpgradeToNextLevel(); // Function Solarland.SolarCharacter.ShieldUpgradeToNextLevel // (Final|Native|Public) // @ game+0x20b1720
	void ShieldOperatorInterpFunc(float InValue); // Function Solarland.SolarCharacter.ShieldOperatorInterpFunc // (Final|Native|Public) // @ game+0x20b16a0
	void SetSpectateTargetCharacter(struct ASolarCharacter* InSpectateTargetCharacter); // Function Solarland.SolarCharacter.SetSpectateTargetCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x20b1610
	void SetSelfEnergyCostEnable(bool bEnable); // Function Solarland.SolarCharacter.SetSelfEnergyCostEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x20b1580
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope); // Function Solarland.SolarCharacter.SetOpenScopeDuration // (Native|Event|Public|BlueprintEvent) // @ game+0x20b14a0
	void SetNewCharacterSkin(struct USkeletalMesh* NewMesh, struct UMaterialInterface* NewMaterial, struct UObject* NewAnimClass); // Function Solarland.SolarCharacter.SetNewCharacterSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x20b1390
	void SetMaxWalkSpeed(float NewWalkSpeed); // Function Solarland.SolarCharacter.SetMaxWalkSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x20b1310
	void SetInfiniteAmmoState(bool Enable); // Function Solarland.SolarCharacter.SetInfiniteAmmoState // (Final|Native|Public|BlueprintCallable) // @ game+0x20b1280
	void SetCurrShieldValue(float InValue); // Function Solarland.SolarCharacter.SetCurrShieldValue // (Final|Native|Public|BlueprintCallable) // @ game+0x20b1200
	void SetCurrExtraEnergy(float Amount); // Function Solarland.SolarCharacter.SetCurrExtraEnergy // (Final|Native|Public) // @ game+0x20b1180
	void SetBackpackConfig(int32_t InCharacterId); // Function Solarland.SolarCharacter.SetBackpackConfig // (Final|Native|Public) // @ game+0x20b10f0
	void SetActiveRescueBtn(bool bIsActive); // Function Solarland.SolarCharacter.SetActiveRescueBtn // (Final|Native|Public|BlueprintCallable) // @ game+0x20b1060
	void ServerUseItemRequest(int32_t ItemID, int32_t Num); // Function Solarland.SolarCharacter.ServerUseItemRequest // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20b0f90
	bool ServerUpgradeShield(); // Function Solarland.SolarCharacter.ServerUpgradeShield // (Final|Native|Public) // @ game+0x20b0f60
	void ServerUpdateWallRunState(enum class EWallRunState NewState); // Function Solarland.SolarCharacter.ServerUpdateWallRunState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20b0ee0
	void ServerUpdateWallRunAngle(char ClientAngle); // Function Solarland.SolarCharacter.ServerUpdateWallRunAngle // (Net|Native|Event|Public|NetServer) // @ game+0x20b0e60
	void ServerTryRechargeShield(float InRecoverySpeed); // Function Solarland.SolarCharacter.ServerTryRechargeShield // (Final|Native|Public) // @ game+0x20b0d50
	void ServerTriggerRadarStation(struct ASolarRadarStation* InRadarStation); // Function Solarland.SolarCharacter.ServerTriggerRadarStation // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20b0cc0
	void ServerSwitchVehicleSeat(float LocalTime, struct ASolarVehiclePawn* InVehicle, int32_t TargetSeatIndex, struct FVector_NetQuantize VehicleLocation, struct FVector_NetQuantizeNormal VehicleEuler); // Function Solarland.SolarCharacter.ServerSwitchVehicleSeat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20b0b20
	void ServerSwitchShield(struct FSolarItemData NewShieldData); // Function Solarland.SolarCharacter.ServerSwitchShield // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20b0a40
	void ServerStatisticsRechargedTimes(int32_t RechargedTimes, int32_t BigRechargedTimes); // Function Solarland.SolarCharacter.ServerStatisticsRechargedTimes // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20b0970
	void ServerStatisticElectricShopOnActivated(struct FVector InLocation); // Function Solarland.SolarCharacter.ServerStatisticElectricShopOnActivated // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x20b08f0
	void ServerStartRescue(struct ASolarCharacter* TargetCharacter); // Function Solarland.SolarCharacter.ServerStartRescue // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20b0860
	void ServerSetTreasureBoxState(struct ASolarTreasureBoxActor* TreasureBox, enum class ETreasureBoxState NewState, struct ASolarCharacter* RequestCharacter); // Function Solarland.SolarCharacter.ServerSetTreasureBoxState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20b0750
	void ServerSetJetPackModule(int32_t NewJetPackModuleID, bool bForVertical); // Function Solarland.SolarCharacter.ServerSetJetPackModule // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20b0680
	void ServerSetInputVector(uint16_t AxisX, uint16_t AxisY); // Function Solarland.SolarCharacter.ServerSetInputVector // (Final|Net|Native|Event|Private|NetServer) // @ game+0x20b05b0
	void ServerSetIdleTurnType(enum class EIdleTurnType TurnType); // Function Solarland.SolarCharacter.ServerSetIdleTurnType // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20b0530
	void ServerSetEnergyState(enum class EEnergyState State); // Function Solarland.SolarCharacter.ServerSetEnergyState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20b04b0
	void ServerSetDebugCharacterGASValue(int32_t Value); // Function Solarland.SolarCharacter.ServerSetDebugCharacterGASValue // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x20b0420
	void ServerSetCurChargingDeathBox(struct ADeathTreasureBox* DeathBox); // Function Solarland.SolarCharacter.ServerSetCurChargingDeathBox // (Net|Native|Event|Public|NetServer) // @ game+0x20b0390
	void ServerSetChargingPile(bool bEnter, struct ASolarPile* InChargingPile); // Function Solarland.SolarCharacter.ServerSetChargingPile // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20b02c0
	void ServerSetCharacterOperation(enum class ECharacterOperation InType, struct UObject* Target); // Function Solarland.SolarCharacter.ServerSetCharacterOperation // (Final|Net|Native|Event|Private|NetServer) // @ game+0x20b01f0
	void ServerSetCanBeDamaged(bool bInCanBeDamaged); // Function Solarland.SolarCharacter.ServerSetCanBeDamaged // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20b0160
	void ServerSendGameplayEvent(struct FGameplayTag EventTag, struct FGameplayEventData Payload); // Function Solarland.SolarCharacter.ServerSendGameplayEvent // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20aff50
	void ServerSelectLevelSkill(int32_t Level, int32_t SelectedIndex); // Function Solarland.SolarCharacter.ServerSelectLevelSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20afe80
	void ServerRPCUpgradeWeapon(struct ASolarElectricShop* InTargetShop, struct ASolarPlayerWeapon* InTargetWeapon); // Function Solarland.SolarCharacter.ServerRPCUpgradeWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20afd20
	void ServerRPCUpgradeShield(); // Function Solarland.SolarCharacter.ServerRPCUpgradeShield // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x15549a0
	void ServerRPCTakeWeaponPartToBag(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarCharacter.ServerRPCTakeWeaponPartToBag // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20afc50
	void ServerRPCTakeBagPartToWeapon(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarCharacter.ServerRPCTakeBagPartToWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20afb80
	void ServerRPCSwitchWeaponPart(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarCharacter.ServerRPCSwitchWeaponPart // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20afab0
	void ServerRPCSetSelfEnergyCostEnable(bool bEnable); // Function Solarland.SolarCharacter.ServerRPCSetSelfEnergyCostEnable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20afa20
	void ServerRPCPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarCharacter.ServerRPCPurchaseEShopItems // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20af900
	void ServerRPCDisplayAllElectricShops(); // Function Solarland.SolarCharacter.ServerRPCDisplayAllElectricShops // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1554740
	void ServerRPCDiscardWeaponPart(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarCharacter.ServerRPCDiscardWeaponPart // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20af830
	void ServerRPCDiscardWeapon(int32_t InSlot); // Function Solarland.SolarCharacter.ServerRPCDiscardWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20af7a0
	void ServerRPCDiscardItem(int32_t InItemID, int32_t InItemNum); // Function Solarland.SolarCharacter.ServerRPCDiscardItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20af6d0
	void ServerRequestStartResurrect(struct ADeathTreasureBox* TargetDeathBox); // Function Solarland.SolarCharacter.ServerRequestStartResurrect // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x20afdf0
	void ServerRequestCancelResurrect(); // Function Solarland.SolarCharacter.ServerRequestCancelResurrect // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x15544a0
	void ServerPlayTreatmentCancelSound(); // Function Solarland.SolarCharacter.ServerPlayTreatmentCancelSound // (Net|Native|Event|Public|NetServer) // @ game+0x1555d80
	void ServerPickUpWeapon(struct AActor* Actor, bool bIsAutoPickup, struct FVector ClientCharPos, struct FVector ClientItemPos); // Function Solarland.SolarCharacter.ServerPickUpWeapon // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x20af530
	void ServerPickUpTreasureItem(struct ASolarTreasureBoxActor* TreasureBox, int64_t ItemThisID, bool bIsAutoPickup, int32_t TargetIndex, struct FVector ClientCharPos, struct FVector ClientItemPos); // Function Solarland.SolarCharacter.ServerPickUpTreasureItem // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x20af330
	void ServerPickUpItem(struct ASolarItemActor* ItemActor, bool bIsAutoPickup, int32_t TargetIndex, struct FVector ClientCharPos, struct FVector ClientItemPos); // Function Solarland.SolarCharacter.ServerPickUpItem // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x20af180
	void ServerPerformShieldUpgradeInteract(struct ASolarShieldUpgradeItemShop* InShop); // Function Solarland.SolarCharacter.ServerPerformShieldUpgradeInteract // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20af0f0
	void ServerOpenAirDropTreasureBox(struct AAirDropTreasureBox* InAirDropTreasureBox); // Function Solarland.SolarCharacter.ServerOpenAirDropTreasureBox // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20af060
	void ServerOnDestructActor(struct ASolarDestructibleActor* DestructibleActor, struct ASolarVehiclePawn* VehiclePawn, float SpeedDifference, struct FVector Impulse, struct FVector ImpactPoint); // Function Solarland.SolarCharacter.ServerOnDestructActor // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x20aeeb0
	void ServerMoveNoBaseEx(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode, uint32_t ClientCustomMoveData); // Function Solarland.SolarCharacter.ServerMoveNoBaseEx // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x20aebc0
	void ServerMoveDualNoBaseEx(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode, uint32_t ClientCustomMoveData); // Function Solarland.SolarCharacter.ServerMoveDualNoBaseEx // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x20ae780
	void ServerKillMe(enum class ESCMDamageType DamageType); // Function Solarland.SolarCharacter.ServerKillMe // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20ae700
	void ServerInitSheildComp(int32_t InShiledID); // Function Solarland.SolarCharacter.ServerInitSheildComp // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20ae670
	void ServerHideShieldOperator(); // Function Solarland.SolarCharacter.ServerHideShieldOperator // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1555020
	void ServerGMVehicleSubHealth(int32_t SubHealth); // Function Solarland.SolarCharacter.ServerGMVehicleSubHealth // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20ae230
	void ServerGetOnVehicle(float LocalTime, struct ASolarVehiclePawn* InVehicle, int32_t SeatIndex); // Function Solarland.SolarCharacter.ServerGetOnVehicle // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20ae560
	void ServerGetOffVehicleEjectedByDefaultParams(bool bNeedNotify, struct FVector_NetQuantizeNormal EjectDirection); // Function Solarland.SolarCharacter.ServerGetOffVehicleEjectedByDefaultParams // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20ae480
	void ServerGetOffVehicleEjected(bool bNeedNotify, struct FVector_NetQuantizeNormal EjectDirection, struct FVehicleEjectParams Params); // Function Solarland.SolarCharacter.ServerGetOffVehicleEjected // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20ae350
	void ServerGetOffVehicle(bool bNeedNotify); // Function Solarland.SolarCharacter.ServerGetOffVehicle // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20ae2c0
	void ServerDetectBlock(); // Function Solarland.SolarCharacter.ServerDetectBlock // (Final|Net|Native|Event|Private|NetServer) // @ game+0x1555de0
	void ServerConsumeExtraEnergy(float InAmount, enum class EEnergyUsage InUsage); // Function Solarland.SolarCharacter.ServerConsumeExtraEnergy // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20ae160
	void ServerConsumeEnergy(float InAmount, enum class EEnergyUsage InUsage); // Function Solarland.SolarCharacter.ServerConsumeEnergy // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20ae090
	void ServerClearJetModule(); // Function Solarland.SolarCharacter.ServerClearJetModule // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x15545e0
	void ServerClearEnergyState(enum class EEnergyState State); // Function Solarland.SolarCharacter.ServerClearEnergyState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20ae010
	void ServerChangeRechargeState(bool bRecharge, bool bUseBigRecharger); // Function Solarland.SolarCharacter.ServerChangeRechargeState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20adf40
	void ServerCancelVehicleAbility(char AbilityIndex); // Function Solarland.SolarCharacter.ServerCancelVehicleAbility // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20adec0
	void ServerCancelVault(float InAnimPosition, struct FVector InLandLocation); // Function Solarland.SolarCharacter.ServerCancelVault // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x20adde0
	void ServerCancelRescue(); // Function Solarland.SolarCharacter.ServerCancelRescue // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1555d20
	void ServerCancelOpenAirDropTreasureBox(struct AAirDropTreasureBox* InAirDropTreasureBox); // Function Solarland.SolarCharacter.ServerCancelOpenAirDropTreasureBox // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20add50
	void ServerCancelMeleeWarp(); // Function Solarland.SolarCharacter.ServerCancelMeleeWarp // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1555bc0
	void ServerBackpackGM(enum class EGmType InGmType, int32_t InItemID, int32_t InItemNum, int32_t InSlot); // Function Solarland.SolarCharacter.ServerBackpackGM // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20adc00
	void ServerAskForActiveAbilityInfosToRestoreOnReconnected(); // Function Solarland.SolarCharacter.ServerAskForActiveAbilityInfosToRestoreOnReconnected // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1555420
	void ServerApplyVehicleAbility(char AbilityIndex); // Function Solarland.SolarCharacter.ServerApplyVehicleAbility // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20adb80
	void ServerAddVehicleTime(float InAddTime); // Function Solarland.SolarCharacter.ServerAddVehicleTime // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x20adaf0
	void RoleAbilityForbiddenAbilityTagCallback(struct FGameplayTag Tag, int32_t NewCount, char AbilityIndex); // Function Solarland.SolarCharacter.RoleAbilityForbiddenAbilityTagCallback // (Final|Native|Private) // @ game+0x20ad9e0
	void RoleAbilityEndedCallBack(struct UGameplayAbility* InAbility); // Function Solarland.SolarCharacter.RoleAbilityEndedCallBack // (Final|Native|Private) // @ game+0x20ad950
	void RoleAbilityCoolDownTagCallback(struct FGameplayTag Tag, int32_t NewCount, char AbilityIndex); // Function Solarland.SolarCharacter.RoleAbilityCoolDownTagCallback // (Final|Native|Private) // @ game+0x20ad840
	void RoleAbilityCoolDownResetCallback(struct FGameplayTag Tag, int32_t NewCount, char AbilityIndex); // Function Solarland.SolarCharacter.RoleAbilityCoolDownResetCallback // (Final|Native|Private) // @ game+0x20ad730
	void RoleAbilityCommittedCallBack(struct UGameplayAbility* InAbility); // Function Solarland.SolarCharacter.RoleAbilityCommittedCallBack // (Final|Native|Private) // @ game+0x20ad6a0
	void RoleAbilityActiveCallBack(struct UGameplayAbility* InAbility); // Function Solarland.SolarCharacter.RoleAbilityActiveCallBack // (Final|Native|Private) // @ game+0x20ad610
	void ReturnMostValuableItemIDServer(char TeammatePosInTeam, int64_t ItemThisID); // Function Solarland.SolarCharacter.ReturnMostValuableItemIDServer // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x20ad540
	void ResponseChosenMark(); // Function Solarland.SolarCharacter.ResponseChosenMark // (Final|Native|Public) // @ game+0x20ad520
	void RequestUseBackpackItemServer(int32_t InItemID, int32_t InItemNum); // Function Solarland.SolarCharacter.RequestUseBackpackItemServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20ad450
	void RequestToStopVehicleRepairing(); // Function Solarland.SolarCharacter.RequestToStopVehicleRepairing // (Final|Native|Public|BlueprintCallable) // @ game+0x20ad430
	void RequestToStartVehicleRepairing(struct ASolarVehiclePawn* InVehicle); // Function Solarland.SolarCharacter.RequestToStartVehicleRepairing // (Final|Native|Public|BlueprintCallable) // @ game+0x20ad3a0
	void RequestPlayShieldSound(struct FShieldSoundData& ShieldSound, bool bIsOnly1P); // Function Solarland.SolarCharacter.RequestPlayShieldSound // (Final|Native|Public|HasOutParms) // @ game+0x20ad1c0
	void RequestDisplayAllElectricShops(); // Function Solarland.SolarCharacter.RequestDisplayAllElectricShops // (Final|Native|Public) // @ game+0x20ad1a0
	void RequestCancelRescue(); // Function Solarland.SolarCharacter.RequestCancelRescue // (Final|Native|Public) // @ game+0x20ad180
	void RemoveTreasureBoxOperator(); // Function Solarland.SolarCharacter.RemoveTreasureBoxOperator // (Final|Native|Public) // @ game+0x20ad160
	void RemoveTempComponent(struct UPrimitiveComponent* TargetComp); // Function Solarland.SolarCharacter.RemoveTempComponent // (Final|Native|Private|BlueprintCallable) // @ game+0x20ad0d0
	void RemoveTempAttributeModifies(int32_t AttributeID, bool bCumulOrFact, struct FName Tag); // Function Solarland.SolarCharacter.RemoveTempAttributeModifies // (Final|Native|Public|BlueprintCallable) // @ game+0x20acfc0
	void RemoveShieldUpgradeOperator(); // Function Solarland.SolarCharacter.RemoveShieldUpgradeOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x20acfa0
	void RemoveShieldRepairEffectItem(); // Function Solarland.SolarCharacter.RemoveShieldRepairEffectItem // (Final|Native|Public|BlueprintCallable) // @ game+0x20acf80
	void RemoveShieldOperator(); // Function Solarland.SolarCharacter.RemoveShieldOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x20acf60
	void RefreshWeaponDataMapAndArray(); // Function Solarland.SolarCharacter.RefreshWeaponDataMapAndArray // (Final|Native|Public) // @ game+0x20acf40
	void RefreshTypeItemMapAndArray(); // Function Solarland.SolarCharacter.RefreshTypeItemMapAndArray // (Final|Native|Public) // @ game+0x20acf20
	void RefreshTeammateHUDUI(struct ASolarPlayerState* SelfData); // Function Solarland.SolarCharacter.RefreshTeammateHUDUI // (Final|Native|Protected) // @ game+0x20ace90
	void RefreshRenderConsoleVarForSkydive(); // Function Solarland.SolarCharacter.RefreshRenderConsoleVarForSkydive // (Event|Public|BlueprintCallable|BlueprintEvent|Const) // @ game+0x25d85b0
	void RefreshMaxPileMapAndArray(); // Function Solarland.SolarCharacter.RefreshMaxPileMapAndArray // (Final|Native|Public) // @ game+0x20ace70
	void RefreshIdItemMapAndArray(); // Function Solarland.SolarCharacter.RefreshIdItemMapAndArray // (Final|Native|Public) // @ game+0x20ace50
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround); // Function Solarland.SolarCharacter.ReceiveUpdateSkydiveLandingEffects // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate); // Function Solarland.SolarCharacter.ReceiveUpdateSkydiveFlyingEffects // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater); // Function Solarland.SolarCharacter.ReceivePlaySkydiveLandingEndEffects // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceivedOnShieldIdChanged(int32_t LastShieldId); // Function Solarland.SolarCharacter.ReceivedOnShieldIdChanged // (Final|Native|Public) // @ game+0x20acdc0
	void ReceiveAfterTakeDamageResolve(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.ReceiveAfterTakeDamageResolve // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void QuitVehicleWholeShield(); // Function Solarland.SolarCharacter.QuitVehicleWholeShield // (Final|Native|Public|BlueprintCallable) // @ game+0x20acda0
	void QuitVehicleStealth(); // Function Solarland.SolarCharacter.QuitVehicleStealth // (Final|Native|Public|BlueprintCallable) // @ game+0x20acd80
	void PurchaseEShopItemsResponse(int32_t InProductID, bool bSuccess, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarCharacter.PurchaseEShopItemsResponse // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20acc60
	void PostNotEnoughEnergyNotice(); // Function Solarland.SolarCharacter.PostNotEnoughEnergyNotice // (Final|Native|Public) // @ game+0x20acc40
	void PlaySquatSound(); // Function Solarland.SolarCharacter.PlaySquatSound // (Final|Native|Protected) // @ game+0x20acba0
	void PlaySpeedUpEffect(bool bIsUp); // Function Solarland.SolarCharacter.PlaySpeedUpEffect // (Final|Native|Public) // @ game+0x20acb10
	void PlayShieldSoundByType(enum class EShieldSoundType ShieldSoundType); // Function Solarland.SolarCharacter.PlayShieldSoundByType // (Final|Native|Public|BlueprintCallable) // @ game+0x20aca90
	void PlayParachuteStartSound(); // Function Solarland.SolarCharacter.PlayParachuteStartSound // (Final|Native|Public|BlueprintCallable) // @ game+0x20aca70
	void PlayMontageOnOrnament(struct FGameplayTag OrnamentTag, struct UAnimMontage* MontageToPlay); // Function Solarland.SolarCharacter.PlayMontageOnOrnament // (Final|Native|Public|BlueprintCallable) // @ game+0x20ac9a0
	void PlayerStateReplicatedForHUD(); // Function Solarland.SolarCharacter.PlayerStateReplicatedForHUD // (Final|Native|Public) // @ game+0x20acc20
	void OnVaultInput(); // Function Solarland.SolarCharacter.OnVaultInput // (Final|Native|Public) // @ game+0x20ac960
	void OnUsingSkillStatusChanged(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarCharacter.OnUsingSkillStatusChanged // (Final|Native|Public) // @ game+0x20ac890
	void OnUpdateShieldId(); // Function Solarland.SolarCharacter.OnUpdateShieldId // (Final|Native|Public) // @ game+0x20ac870
	void OnUIDurationGameplayEffectRemoved(struct FActiveGameplayEffect& ActiveGameplayEffect); // Function Solarland.SolarCharacter.OnUIDurationGameplayEffectRemoved // (Final|Native|Private|HasOutParms) // @ game+0x20ac760
	void OnUIDurationGameplayEffectApplied(struct UAbilitySystemComponent* ASC, struct FGameplayEffectSpec& InGameplayEffectSpec, struct FActiveGameplayEffectHandle InGameplayEffectHandle); // Function Solarland.SolarCharacter.OnUIDurationGameplayEffectApplied // (Final|Native|Private|HasOutParms) // @ game+0x20ac600
	void OnUAVSpawnRelatedTagChange(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarCharacter.OnUAVSpawnRelatedTagChange // (Final|Native|Protected) // @ game+0x20ac530
	void OnTeamIDChange(); // Function Solarland.SolarCharacter.OnTeamIDChange // (Final|Native|Public|BlueprintCallable) // @ game+0x20ac510
	void OnTakeDamage__DelegateSignature(struct ASolarCharacter* Character, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // DelegateFunction Solarland.SolarCharacter.OnTakeDamage__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnStartResurrectProgress(int32_t InTextId, float InDuration, float InRemaining, bool bShowCancel); // Function Solarland.SolarCharacter.OnStartResurrectProgress // (Final|Native|Public) // @ game+0x20ac3b0
	void OnSpawnExpItem(); // Function Solarland.SolarCharacter.OnSpawnExpItem // (Final|Native|Public|BlueprintCallable) // @ game+0x20ac390
	void OnSkydiveTraced__DelegateSignature(struct FHitResult& HitResult); // DelegateFunction Solarland.SolarCharacter.OnSkydiveTraced__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnSkydiveStageChanged(enum class ESkydiveStage LastStage, enum class ESkydiveStage CurrentStage); // Function Solarland.SolarCharacter.OnSkydiveStageChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnShowShieldHUD__DelegateSignature(bool bIsShowShieldHUD); // DelegateFunction Solarland.SolarCharacter.OnShowShieldHUD__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	bool OnShouldTakeDamage(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.OnShouldTakeDamage // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x20ac1e0
	void OnShieldValueLowDelegate__DelegateSignature(bool bIsShieldValueLow); // DelegateFunction Solarland.SolarCharacter.OnShieldValueLowDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnShieldValueChanged__DelegateSignature(enum class EShieldWidgetState WidgetState, float CurValue, float ChangeValue, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // DelegateFunction Solarland.SolarCharacter.OnShieldValueChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnShieldRechargeStart(); // Function Solarland.SolarCharacter.OnShieldRechargeStart // (Final|Native|Public) // @ game+0x20ac1c0
	void OnShieldRechargeProgressBarComplete(); // Function Solarland.SolarCharacter.OnShieldRechargeProgressBarComplete // (Final|Native|Protected) // @ game+0x20ac1a0
	void OnShieldRechargeProgressBarCancel(); // Function Solarland.SolarCharacter.OnShieldRechargeProgressBarCancel // (Final|Native|Protected) // @ game+0x20ac180
	void OnShieldRechargeEnd(); // Function Solarland.SolarCharacter.OnShieldRechargeEnd // (Final|Native|Public) // @ game+0x20ac160
	void OnShieldIDChangedDelegate__DelegateSignature(bool bShiledAvailable, float CurValue, float MaxValue, int32_t QualityColor, bool bIsAdvancedShield); // DelegateFunction Solarland.SolarCharacter.OnShieldIDChangedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSheildUpFXDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnSheildUpFXDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSheildRechargeDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnSheildRechargeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSheildBreakDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnSheildBreakDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnReplayCameraModeChanged(enum class EReplayCameraMode OldMode, enum class EReplayCameraMode CurMode); // Function Solarland.SolarCharacter.OnReplayCameraModeChanged // (Final|Native|Private) // @ game+0x20ac090
	void OnRepItemWeaponParts(); // Function Solarland.SolarCharacter.OnRepItemWeaponParts // (Final|Native|Public) // @ game+0x20ab600
	void OnRepIgnoreScopeSlots(); // Function Solarland.SolarCharacter.OnRepIgnoreScopeSlots // (Final|Native|Public) // @ game+0x20ab5e0
	void OnRep_WeaponSystemVehicle(); // Function Solarland.SolarCharacter.OnRep_WeaponSystemVehicle // (Final|Native|Public) // @ game+0x20ac070
	void OnRep_WeaponSystemComponentChanged(); // Function Solarland.SolarCharacter.OnRep_WeaponSystemComponentChanged // (Final|Native|Private) // @ game+0x20ac050
	void OnRep_WeaponDataMap(); // Function Solarland.SolarCharacter.OnRep_WeaponDataMap // (Final|Native|Public) // @ game+0x20ac030
	void OnRep_VJetPackModuleID(); // Function Solarland.SolarCharacter.OnRep_VJetPackModuleID // (Final|Native|Public) // @ game+0x20ac010
	void OnRep_TypeKeyItemArrayChange(); // Function Solarland.SolarCharacter.OnRep_TypeKeyItemArrayChange // (Final|Native|Public) // @ game+0x20abff0
	void OnRep_TreatmentState(enum class ESolarTreatmentState LastState); // Function Solarland.SolarCharacter.OnRep_TreatmentState // (Final|Native|Public) // @ game+0x20abf70
	void OnRep_TreatmentCount(int32_t LastCount); // Function Solarland.SolarCharacter.OnRep_TreatmentCount // (Final|Native|Public) // @ game+0x20abee0
	void OnRep_SettingEnergyCostChanged(); // Function Solarland.SolarCharacter.OnRep_SettingEnergyCostChanged // (Final|Native|Public) // @ game+0x8e9ae0
	void OnRep_RoleAbilityStartCDServerTime(); // Function Solarland.SolarCharacter.OnRep_RoleAbilityStartCDServerTime // (Final|Native|Private) // @ game+0x20abec0
	void OnRep_RoleAbilitySpecHandles(); // Function Solarland.SolarCharacter.OnRep_RoleAbilitySpecHandles // (Final|Native|Private) // @ game+0x20abea0
	void OnRep_ReviveItemCleared(); // Function Solarland.SolarCharacter.OnRep_ReviveItemCleared // (Final|Native|Public) // @ game+0x20abe80
	void OnRep_RescueState(); // Function Solarland.SolarCharacter.OnRep_RescueState // (Final|Native|Public) // @ game+0x20abde0
	void OnRep_RescuedStartTime(float LastRescuedStartTime); // Function Solarland.SolarCharacter.OnRep_RescuedStartTime // (Final|Native|Public) // @ game+0x20abe00
	void OnRep_PlayBodyHitSound(int32_t LastBodyHitSoundCount); // Function Solarland.SolarCharacter.OnRep_PlayBodyHitSound // (Final|Native|Protected) // @ game+0x20abd50
	void OnRep_PlayBodyHitByPunchSound(int32_t LastBodyHitByPunchSoundCount); // Function Solarland.SolarCharacter.OnRep_PlayBodyHitByPunchSound // (Final|Native|Protected) // @ game+0x20abcc0
	void OnRep_PendingRegeneration(); // Function Solarland.SolarCharacter.OnRep_PendingRegeneration // (Final|Native|Public) // @ game+0x20abca0
	void OnRep_OutVehicleShotState(); // Function Solarland.SolarCharacter.OnRep_OutVehicleShotState // (Final|Native|Private) // @ game+0x20ab470
	void OnRep_OrnamentMontageInfo(struct FOrnamentMontageInfo LastInfo); // Function Solarland.SolarCharacter.OnRep_OrnamentMontageInfo // (Final|Native|Public) // @ game+0x20abc00
	void OnRep_MaxPileArrayChange(); // Function Solarland.SolarCharacter.OnRep_MaxPileArrayChange // (Final|Native|Public) // @ game+0x20abbc0
	void OnRep_MaxExtraEnergyChanged(); // Function Solarland.SolarCharacter.OnRep_MaxExtraEnergyChanged // (Final|Native|Public) // @ game+0x20abba0
	void OnRep_JetPropellingInfo(); // Function Solarland.SolarCharacter.OnRep_JetPropellingInfo // (Final|Native|Protected) // @ game+0x20abb80
	void OnRep_IsDeathVerge(); // Function Solarland.SolarCharacter.OnRep_IsDeathVerge // (Final|Native|Public) // @ game+0x20abb60
	void OnRep_IdKeyItemArrayChange(); // Function Solarland.SolarCharacter.OnRep_IdKeyItemArrayChange // (Final|Native|Public) // @ game+0x20abb40
	void OnRep_HJetPackModuleID(); // Function Solarland.SolarCharacter.OnRep_HJetPackModuleID // (Final|Native|Public) // @ game+0x20abb20
	void OnRep_ForceParachuteCountDown(); // Function Solarland.SolarCharacter.OnRep_ForceParachuteCountDown // (Final|Native|Protected) // @ game+0x20abb00
	void OnRep_ExtraEnergyModuleIDChanged(); // Function Solarland.SolarCharacter.OnRep_ExtraEnergyModuleIDChanged // (Final|Native|Public) // @ game+0x20abae0
	void OnRep_EnergyStateChanged(); // Function Solarland.SolarCharacter.OnRep_EnergyStateChanged // (Final|Native|Public) // @ game+0x20abac0
	void OnRep_EnableCruising(); // Function Solarland.SolarCharacter.OnRep_EnableCruising // (Final|Native|Protected) // @ game+0x20abaa0
	void OnRep_DiedTime(); // Function Solarland.SolarCharacter.OnRep_DiedTime // (Final|Native|Private) // @ game+0x20aba80
	void OnRep_CurUniqueShieldId(); // Function Solarland.SolarCharacter.OnRep_CurUniqueShieldId // (Final|Native|Public) // @ game+0x20ab790
	void OnRep_CurrShieldValue(float PreviousValue); // Function Solarland.SolarCharacter.OnRep_CurrShieldValue // (Final|Native|Public) // @ game+0x20ab8c0
	void OnRep_CurrShieldState(enum class EShieldState LastState); // Function Solarland.SolarCharacter.OnRep_CurrShieldState // (Final|Native|Public) // @ game+0x20ab840
	void OnRep_CurrShieldId(int32_t InLastShieldId); // Function Solarland.SolarCharacter.OnRep_CurrShieldId // (Final|Native|Public) // @ game+0x20ab7b0
	void OnRep_CurrentSkydiveStage(enum class ESkydiveStage LastStage); // Function Solarland.SolarCharacter.OnRep_CurrentSkydiveStage // (Final|Native|Private) // @ game+0x20aba00
	void OnRep_CurrentSkillAnimType(); // Function Solarland.SolarCharacter.OnRep_CurrentSkillAnimType // (Final|Native|Public) // @ game+0x20ab9e0
	void OnRep_CurrentEnergyChanged(float LastEnergyValue); // Function Solarland.SolarCharacter.OnRep_CurrentEnergyChanged // (Final|Native|Public) // @ game+0x20ab960
	void OnRep_CurChargingDeathBoxChanged(struct ADeathTreasureBox* PreBox); // Function Solarland.SolarCharacter.OnRep_CurChargingDeathBoxChanged // (Final|Native|Private) // @ game+0x20ab700
	void OnRep_CruiseState(); // Function Solarland.SolarCharacter.OnRep_CruiseState // (Final|Native|Protected) // @ game+0x20ab6e0
	void OnRep_CharacterCapsuleSizeOverride(); // Function Solarland.SolarCharacter.OnRep_CharacterCapsuleSizeOverride // (Final|Native|Private) // @ game+0x20ab6c0
	void OnRep_CapsuleID(); // Function Solarland.SolarCharacter.OnRep_CapsuleID // (Final|Native|Protected) // @ game+0x20ab6a0
	void OnRep_BackpackPropellingMode(); // Function Solarland.SolarCharacter.OnRep_BackpackPropellingMode // (Final|Native|Protected) // @ game+0x20ab680
	void OnRep_AssignedCharacterID(); // Function Solarland.SolarCharacter.OnRep_AssignedCharacterID // (Final|Native|Private) // @ game+0x20ab660
	void OnRep_ActiveInfiniteAmmo(); // Function Solarland.SolarCharacter.OnRep_ActiveInfiniteAmmo // (Final|Native|Protected) // @ game+0x20ab640
	void OnRep_ActiveEMP(); // Function Solarland.SolarCharacter.OnRep_ActiveEMP // (Final|Native|Protected) // @ game+0x20ab620
	void OnPlayingScrubCharactersCreated(); // Function Solarland.SolarCharacter.OnPlayingScrubCharactersCreated // (Final|Native|Private) // @ game+0x8e9ae0
	void OnPlayerKilled(struct ASCMPlayerState* KillerPlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.SolarCharacter.OnPlayerKilled // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerKill(struct ASCMPlayerState* KilledPlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.SolarCharacter.OnPlayerKill // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerDataRepAsPlayer(char TeamID); // Function Solarland.SolarCharacter.OnPlayerDataRepAsPlayer // (Final|Native|Protected) // @ game+0x20ab560
	void OnPlayerBackpackEnergyUpdate(); // Function Solarland.SolarCharacter.OnPlayerBackpackEnergyUpdate // (Final|Native|Public) // @ game+0x20ab540
	void OnPickupSettingChanged(); // Function Solarland.SolarCharacter.OnPickupSettingChanged // (Final|Native|Private) // @ game+0x20ab520
	void OnOwnTeammateHUDCreated(struct ASolarPlayerState* SelfData); // Function Solarland.SolarCharacter.OnOwnTeammateHUDCreated // (Final|Native|Protected) // @ game+0x20ab490
	void OnOutVehicleStateChanged(); // Function Solarland.SolarCharacter.OnOutVehicleStateChanged // (Final|Native|Public) // @ game+0x20ab470
	void OnMaxEnergyUpdateEvent__DelegateSignature(float InMaxValue); // DelegateFunction Solarland.SolarCharacter.OnMaxEnergyUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnLocalPlayerSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* LocalPlayerSpectateInfo); // Function Solarland.SolarCharacter.OnLocalPlayerSpectateTargetChanged // (Final|Native|Private) // @ game+0x20ab3a0
	void OnLocalPlayerSpectateMeStatusChanged__DelegateSignature(struct ASolarCharacter* Character, bool bIsSpectating); // DelegateFunction Solarland.SolarCharacter.OnLocalPlayerSpectateMeStatusChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnLevelSequence_PlayAirborneJumpSound(); // Function Solarland.SolarCharacter.OnLevelSequence_PlayAirborneJumpSound // (Final|Native|Public|BlueprintCallable) // @ game+0x20ab380
	void OnJogSetClient__DelegateSignature(bool bSet); // DelegateFunction Solarland.SolarCharacter.OnJogSetClient__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnHUDTeamPosSet__DelegateSignature(char PosInTeam); // DelegateFunction Solarland.SolarCharacter.OnHUDTeamPosSet__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	void OnHUDRescueBtnActivitySet__DelegateSignature(bool bIsActive); // DelegateFunction Solarland.SolarCharacter.OnHUDRescueBtnActivitySet__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	void OnHUDNickNameSet__DelegateSignature(struct FString NickName); // DelegateFunction Solarland.SolarCharacter.OnHUDNickNameSet__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	void OnHUDDistanceSet__DelegateSignature(float Distance); // DelegateFunction Solarland.SolarCharacter.OnHUDDistanceSet__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	void OnHUDDistanceDisplaySet__DelegateSignature(bool bShown); // DelegateFunction Solarland.SolarCharacter.OnHUDDistanceDisplaySet__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	void OnHealthUpdated__DelegateSignature(struct ASolarCharacter* Character); // DelegateFunction Solarland.SolarCharacter.OnHealthUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	bool OnExitOpenTreasureBox(); // Function Solarland.SolarCharacter.OnExitOpenTreasureBox // (Final|Native|Public|BlueprintCallable) // @ game+0x20ab350
	bool OnEnterOpenTreasureBox(); // Function Solarland.SolarCharacter.OnEnterOpenTreasureBox // (Final|Native|Public|BlueprintCallable) // @ game+0x20ab320
	void OnEnterCombat(enum class EEnterBattleType battleType); // Function Solarland.SolarCharacter.OnEnterCombat // (Final|Native|Public) // @ game+0x20ab2a0
	void OnEnergyStateUpdateEvent__DelegateSignature(char InEnergyState); // DelegateFunction Solarland.SolarCharacter.OnEnergyStateUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnDrivingStateChanged(struct ASolarVehiclePawn* SolarVehicle, enum class EDriveState NewDriveState, enum class EDriveState OldDriveState, int32_t NewSeatIndex, int32_t OldSeatIndex); // Function Solarland.SolarCharacter.OnDrivingStateChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnDetectRadarStation(bool bEnter, struct ASolarRadarStation* InRadarStation); // Function Solarland.SolarCharacter.OnDetectRadarStation // (Final|Native|Public|BlueprintCallable) // @ game+0x20ab1d0
	void OnDetectElectricShop(bool bEnter, struct ASolarElectricShop* InElectricShop); // Function Solarland.SolarCharacter.OnDetectElectricShop // (Final|Native|Public|BlueprintCallable) // @ game+0x20ab100
	void OnCurShieldValueChangedDelegate__DelegateSignature(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID); // DelegateFunction Solarland.SolarCharacter.OnCurShieldValueChangedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCurEnergyUpdateEvent__DelegateSignature(float InCurValue, float InChangeValue); // DelegateFunction Solarland.SolarCharacter.OnCurEnergyUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnConsumableNumChangedEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnConsumableNumChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnClientMovementComponentEnabled(); // Function Solarland.SolarCharacter.OnClientMovementComponentEnabled // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1555480
	void OnChargeInfoUpdateEvent__DelegateSignature(struct ASolarCharacter* OwnerCharacter, float ChargeFrequency, float ChargeQuantity); // DelegateFunction Solarland.SolarCharacter.OnChargeInfoUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterSpawnDeathBox(bool bCheat, bool bKilledByTeammate, int32_t InExpItemCount, int32_t InMaxSheildMatCount); // Function Solarland.SolarCharacter.OnCharacterSpawnDeathBox // (Final|Native|Public) // @ game+0x20aaf90
	void OnCharacterSkinReset__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnCharacterSkinReset__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterDeathEnd(); // Function Solarland.SolarCharacter.OnCharacterDeathEnd // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15556e0
	void OnCharacterDaraSet__DelegateSignature(int32_t DataID); // DelegateFunction Solarland.SolarCharacter.OnCharacterDaraSet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCancelResurrectProgress(int32_t InTextId); // Function Solarland.SolarCharacter.OnCancelResurrectProgress // (Final|Native|Public) // @ game+0x20aaf00
	void OnBatteryIdUpdateEvent__DelegateSignature(int32_t InBatteryId); // DelegateFunction Solarland.SolarCharacter.OnBatteryIdUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnBackpackWeaponPartUpdateEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnBackpackWeaponPartUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnBackpackItemUpdateEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnBackpackItemUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnBackpackEquipUpdateEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnBackpackEquipUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnBackpackEnergyUpdateEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnBackpackEnergyUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnApplyDyingDamage(float DeltaTime); // Function Solarland.SolarCharacter.OnApplyDyingDamage // (Final|Native|Public) // @ game+0x20aae80
	void NotifyLeaveSafeArea(); // Function Solarland.SolarCharacter.NotifyLeaveSafeArea // (Final|Native|Public|BlueprintCallable) // @ game+0x20aae60
	void NotifyEnterSafeArea(); // Function Solarland.SolarCharacter.NotifyEnterSafeArea // (Final|Native|Public|BlueprintCallable) // @ game+0x20aae40
	void NetTriggerRadarStation(); // Function Solarland.SolarCharacter.NetTriggerRadarStation // (Final|Native|Public|BlueprintCallable) // @ game+0x20aae20
	bool NetGetOnVehicle(struct ASolarVehiclePawn* InVehicle, int32_t SeatIndex); // Function Solarland.SolarCharacter.NetGetOnVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x20aad50
	bool NetGetOffVehicle(bool bShouldEject, bool bNeedNotify); // Function Solarland.SolarCharacter.NetGetOffVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x20aac70
	void MultiSetGetOffVehicleLocationAndRotation(struct FVector DropLocation, float TeleportRotYaw); // Function Solarland.SolarCharacter.MultiSetGetOffVehicleLocationAndRotation // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x20aaa90
	void MultiResetCharacter(struct FVector Location, struct FRotator Rotation, bool bClearWeapons); // Function Solarland.SolarCharacter.MultiResetCharacter // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x20aa980
	void MultiOnRebirth(); // Function Solarland.SolarCharacter.MultiOnRebirth // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15548e0
	void MulticastPlayDuckRollingHitCharacterEffect(struct ASolarCharacter* TargetCharacter, struct FVector HitLocation, bool bNoDamage); // Function Solarland.SolarCharacter.MulticastPlayDuckRollingHitCharacterEffect // (Net|Native|Event|NetMulticast|Protected|HasDefaults) // @ game+0x20aab60
	void MarkWarningOnWorld(); // Function Solarland.SolarCharacter.MarkWarningOnWorld // (Final|Native|Public) // @ game+0x20aa960
	void MarkQuickChatOnWorld(struct FString IconImg); // Function Solarland.SolarCharacter.MarkQuickChatOnWorld // (Final|Native|Public) // @ game+0x20aa8c0
	void MarkPointOnWorld(); // Function Solarland.SolarCharacter.MarkPointOnWorld // (Final|Native|Public) // @ game+0x20aa8a0
	void MarkItemInPickupList(struct FVector& ItemLocation, struct FSolarItemData& ItemData); // Function Solarland.SolarCharacter.MarkItemInPickupList // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x20aa750
	void K2_SetCanShowBattlePrompt(bool NewValue); // Function Solarland.SolarCharacter.K2_SetCanShowBattlePrompt // (Final|Native|Public|BlueprintCallable) // @ game+0x20aa6c0
	void K2_RemoveGameplayTag(struct FGameplayTag Tag, bool bReplicated); // Function Solarland.SolarCharacter.K2_RemoveGameplayTag // (Final|Native|Public|BlueprintCallable) // @ game+0x20aa5f0
	void K2_PlaySoundGroup(struct FName GroupName, struct FSoundGroupPlayContext Context); // Function Solarland.SolarCharacter.K2_PlaySoundGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x20aa520
	bool K2_IsSwimming(); // Function Solarland.SolarCharacter.K2_IsSwimming // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x20aa4f0
	bool K2_IsInAir(); // Function Solarland.SolarCharacter.K2_IsInAir // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x20aa4c0
	bool K2_HasMatchingGameplayTag(struct FGameplayTag Tag); // Function Solarland.SolarCharacter.K2_HasMatchingGameplayTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20aa420
	struct UWidgetComponent* K2_GetTeamHUDComp(); // Function Solarland.SolarCharacter.K2_GetTeamHUDComp // (Final|Native|Protected|BlueprintCallable) // @ game+0x20aa3f0
	struct AHUD* K2_GetControlledHUD(); // Function Solarland.SolarCharacter.K2_GetControlledHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20aa3c0
	void K2_AddGameplayTag(struct FGameplayTag Tag, bool bReplicated); // Function Solarland.SolarCharacter.K2_AddGameplayTag // (Final|Native|Public|BlueprintCallable) // @ game+0x20aa2b0
	bool IsWeaponsAvailable(); // Function Solarland.SolarCharacter.IsWeaponsAvailable // (Final|Native|Public) // @ game+0x20aa280
	bool IsWeaponCauseTeamDamage(); // Function Solarland.SolarCharacter.IsWeaponCauseTeamDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x20aa250
	bool IsViewportFocused(); // Function Solarland.SolarCharacter.IsViewportFocused // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9e40
	bool IsVerticalJetFlying(); // Function Solarland.SolarCharacter.IsVerticalJetFlying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20aa220
	bool IsVehicleFire(); // Function Solarland.SolarCharacter.IsVehicleFire // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20aa1f0
	bool IsTeammateWithLocalOrSpecTargetPlayer(bool bIncludingSelf); // Function Solarland.SolarCharacter.IsTeammateWithLocalOrSpecTargetPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20aa150
	bool IsTeammateWith(struct ASolarCharacter* Other); // Function Solarland.SolarCharacter.IsTeammateWith // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20aa0b0
	bool IsTeamHUDValid(); // Function Solarland.SolarCharacter.IsTeamHUDValid // (Final|Native|Public|BlueprintCallable) // @ game+0x20aa080
	bool IsSprinting(); // Function Solarland.SolarCharacter.IsSprinting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20aa050
	bool IsSpectatingOtherPlayer(); // Function Solarland.SolarCharacter.IsSpectatingOtherPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20aa020
	bool IsSkyCharging(); // Function Solarland.SolarCharacter.IsSkyCharging // (Final|Native|Public|Const) // @ game+0x20a9ff0
	bool IsShieldValueLow(); // Function Solarland.SolarCharacter.IsShieldValueLow // (Final|Native|Public) // @ game+0x20a9fc0
	bool IsShieldMaxLevel(); // Function Solarland.SolarCharacter.IsShieldMaxLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9f90
	bool IsShieldFullyCharged(); // Function Solarland.SolarCharacter.IsShieldFullyCharged // (Final|Native|Public|Const) // @ game+0x20a9f60
	bool IsScopeOpening(); // Function Solarland.SolarCharacter.IsScopeOpening // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9f30
	bool IsRescuing(); // Function Solarland.SolarCharacter.IsRescuing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9f00
	bool IsReplayPlaying(); // Function Solarland.SolarCharacter.IsReplayPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9ed0
	bool IsReloading(); // Function Solarland.SolarCharacter.IsReloading // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9ea0
	bool IsRechargerEnough(); // Function Solarland.SolarCharacter.IsRechargerEnough // (Final|Native|Public|Const) // @ game+0x20a9e70
	bool IsPlayerLocallyControlledOrSpectated(); // Function Solarland.SolarCharacter.IsPlayerLocallyControlledOrSpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9e40
	bool IsPileCharging(); // Function Solarland.SolarCharacter.IsPileCharging // (Final|Native|Public|Const) // @ game+0x20a9e10
	bool IsOwnerOffline(); // Function Solarland.SolarCharacter.IsOwnerOffline // (Final|Native|Protected) // @ game+0x20a9de0
	bool IsOpeningTreasureBox(); // Function Solarland.SolarCharacter.IsOpeningTreasureBox // (Final|Native|Public|Const) // @ game+0x20a9db0
	bool IsNoCharging(); // Function Solarland.SolarCharacter.IsNoCharging // (Final|Native|Public|Const) // @ game+0x20a9d80
	bool IsMovingOnGround(enum class EVelocityStatus VelocityStatus); // Function Solarland.SolarCharacter.IsMovingOnGround // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9cf0
	bool IsMeleeAttacking(); // Function Solarland.SolarCharacter.IsMeleeAttacking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9cc0
	bool IsMaxLevelInGame(); // Function Solarland.SolarCharacter.IsMaxLevelInGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9c90
	bool IsLocalPlayerSpectateAsThirdPerson(); // Function Solarland.SolarCharacter.IsLocalPlayerSpectateAsThirdPerson // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9c60
	bool IsLaunching(); // Function Solarland.SolarCharacter.IsLaunching // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9c30
	bool IsJumping(); // Function Solarland.SolarCharacter.IsJumping // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9c00
	bool IsJetFlying(); // Function Solarland.SolarCharacter.IsJetFlying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9bd0
	bool IsInVehicle(); // Function Solarland.SolarCharacter.IsInVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9b10
	bool IsInSkywardDive(); // Function Solarland.SolarCharacter.IsInSkywardDive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9ae0
	bool IsInsideVehicle(); // Function Solarland.SolarCharacter.IsInsideVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9b70
	bool IsInShoulderOrScopeView(); // Function Solarland.SolarCharacter.IsInShoulderOrScopeView // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9ab0
	bool IsInScopeView(); // Function Solarland.SolarCharacter.IsInScopeView // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9a80
	bool IsInRescueState(); // Function Solarland.SolarCharacter.IsInRescueState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9a50
	bool IsInMassInvisibilityPrepare(); // Function Solarland.SolarCharacter.IsInMassInvisibilityPrepare // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9a20
	bool IsInMassInvisibility(); // Function Solarland.SolarCharacter.IsInMassInvisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a99f0
	bool IsInInvisibleStatus(); // Function Solarland.SolarCharacter.IsInInvisibleStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a99c0
	bool IsInDeathVerge(); // Function Solarland.SolarCharacter.IsInDeathVerge // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a97d0
	bool IsHumanCharacter(); // Function Solarland.SolarCharacter.IsHumanCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x20a9990
	bool IsHorizontalJetFlying(); // Function Solarland.SolarCharacter.IsHorizontalJetFlying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9960
	bool IsHoldingWeapon(); // Function Solarland.SolarCharacter.IsHoldingWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9920
	bool IsFullHealth(); // Function Solarland.SolarCharacter.IsFullHealth // (Final|Native|Public|Const) // @ game+0x20a98f0
	bool IsFullBodyMeleeAttacking(); // Function Solarland.SolarCharacter.IsFullBodyMeleeAttacking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a98c0
	bool IsFiring(); // Function Solarland.SolarCharacter.IsFiring // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9890
	bool IsExistWeaponSeatedVehicleSeat(); // Function Solarland.SolarCharacter.IsExistWeaponSeatedVehicleSeat // (Final|Native|Public|Const) // @ game+0x20a9860
	bool IsEnergyCostAndChargeDisabled(); // Function Solarland.SolarCharacter.IsEnergyCostAndChargeDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9830
	bool IsE2M(); // Function Solarland.SolarCharacter.IsE2M // (Final|Native|Public|Const) // @ game+0x20a9800
	bool IsDying(); // Function Solarland.SolarCharacter.IsDying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a97d0
	bool IsDoingAnyAttack(); // Function Solarland.SolarCharacter.IsDoingAnyAttack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a97a0
	bool IsCruising(); // Function Solarland.SolarCharacter.IsCruising // (Final|Native|Public|Const) // @ game+0x20a9770
	bool IsClimbing(bool bIncludeWallRun); // Function Solarland.SolarCharacter.IsClimbing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a96d0
	bool IsCharacterDebugBlockDetectionEnabled(); // Function Solarland.SolarCharacter.IsCharacterDebugBlockDetectionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a96a0
	bool IsCanShowTeammateHUD(); // Function Solarland.SolarCharacter.IsCanShowTeammateHUD // (Final|Native|Public|Const) // @ game+0x20a9670
	bool IsBoxCharging(); // Function Solarland.SolarCharacter.IsBoxCharging // (Final|Native|Public|Const) // @ game+0x20a9640
	bool IsBolting(); // Function Solarland.SolarCharacter.IsBolting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9610
	bool IsBigRechargerEnough(); // Function Solarland.SolarCharacter.IsBigRechargerEnough // (Final|Native|Public|Const) // @ game+0x20a95e0
	bool IsBeingSpectated(); // Function Solarland.SolarCharacter.IsBeingSpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a95b0
	bool IsBeingRescue(); // Function Solarland.SolarCharacter.IsBeingRescue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9580
	bool IsAllEnergyFull(); // Function Solarland.SolarCharacter.IsAllEnergyFull // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9550
	bool IsAiming(); // Function Solarland.SolarCharacter.IsAiming // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a9520
	bool IsAbleToContinueRecharge(); // Function Solarland.SolarCharacter.IsAbleToContinueRecharge // (Final|Native|Public|Const) // @ game+0x20a94f0
	void InputRoleAbilityTacticalReleased(); // Function Solarland.SolarCharacter.InputRoleAbilityTacticalReleased // (Final|Native|Public) // @ game+0x20a94d0
	void InputRoleAbilityTacticalPressed(); // Function Solarland.SolarCharacter.InputRoleAbilityTacticalPressed // (Final|Native|Public) // @ game+0x20a94b0
	void InputRoleAbilitySuperReleased(); // Function Solarland.SolarCharacter.InputRoleAbilitySuperReleased // (Final|Native|Public) // @ game+0x20a9490
	void InputRoleAbilitySuperPressed(); // Function Solarland.SolarCharacter.InputRoleAbilitySuperPressed // (Final|Native|Public) // @ game+0x20a9470
	void InputCancelRoleAbility(); // Function Solarland.SolarCharacter.InputCancelRoleAbility // (Final|Native|Public) // @ game+0x20a9450
	void InitShieldUpgradeMatMaxPile(); // Function Solarland.SolarCharacter.InitShieldUpgradeMatMaxPile // (Final|Native|Public) // @ game+0x20a9360
	void InitShieldPropertyByConfig(); // Function Solarland.SolarCharacter.InitShieldPropertyByConfig // (Final|Native|Protected) // @ game+0x20a9340
	void InitShieldOperatorTimeline(); // Function Solarland.SolarCharacter.InitShieldOperatorTimeline // (Final|Native|Public) // @ game+0x20a9320
	void InitializeCharacterData(int32_t InCharacterId, int32_t InSkinID); // Function Solarland.SolarCharacter.InitializeCharacterData // (Final|Native|Public|BlueprintCallable) // @ game+0x20a9380
	void InitGameStatisticEquipment(); // Function Solarland.SolarCharacter.InitGameStatisticEquipment // (Final|Native|Public) // @ game+0x20a9300
	void InitCharacterDefaultShield(struct FSolarItemData& InShiledID); // Function Solarland.SolarCharacter.InitCharacterDefaultShield // (Final|Native|Public|HasOutParms) // @ game+0x20a9210
	void IncreaseRechargedTimes(); // Function Solarland.SolarCharacter.IncreaseRechargedTimes // (Final|Native|Public) // @ game+0x20a91f0
	void HideShieldUpgradeOperator(); // Function Solarland.SolarCharacter.HideShieldUpgradeOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x20a91d0
	void HideShieldRepairEffectItem(); // Function Solarland.SolarCharacter.HideShieldRepairEffectItem // (Final|Native|Public|BlueprintCallable) // @ game+0x20a91b0
	void HideShieldOperator(); // Function Solarland.SolarCharacter.HideShieldOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x20a9190
	void HideRescueInjector(); // Function Solarland.SolarCharacter.HideRescueInjector // (Final|Native|Public|BlueprintCallable) // @ game+0x20a9170
	bool HasBlockBetweenUs(struct AActor* A, struct AActor* B, bool bIsVehicle, bool bShowLog); // Function Solarland.SolarCharacter.HasBlockBetweenUs // (Final|Native|Public) // @ game+0x20a8fd0
	bool HasAnyShieldEquiped(); // Function Solarland.SolarCharacter.HasAnyShieldEquiped // (Final|Native|Public|BlueprintCallable) // @ game+0x20a8fa0
	bool HasAnyRecharger(); // Function Solarland.SolarCharacter.HasAnyRecharger // (Final|Native|Public|Const) // @ game+0x20a8f70
	bool HandleDying(enum class EHealthChangeType ChangeType, struct AController* InstigatorController); // Function Solarland.SolarCharacter.HandleDying // (Final|Native|Public|BlueprintCallable) // @ game+0x20a8ea0
	struct TMap<enum class EWeaponPartType, int32_t> GetWeaponPartsMap(); // Function Solarland.SolarCharacter.GetWeaponPartsMap // (Final|Native|Public|Const) // @ game+0x20a8e70
	struct TArray<int32_t> GetWeaponPartsArray(); // Function Solarland.SolarCharacter.GetWeaponPartsArray // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8e40
	bool GetWeaponItemDataBySlot(int32_t InSlot, struct FSolarItemData& ItemData); // Function Solarland.SolarCharacter.GetWeaponItemDataBySlot // (Final|Native|Public|HasOutParms|Const) // @ game+0x20a8cf0
	struct TMap<int32_t, struct FSolarItemData> GetWeaponDataMap(); // Function Solarland.SolarCharacter.GetWeaponDataMap // (Final|Native|Public|Const) // @ game+0x20a8cc0
	int32_t GetVerticalJetFlyTotalTimes(); // Function Solarland.SolarCharacter.GetVerticalJetFlyTotalTimes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8c90
	int32_t GetVerticalJetFlyRestTimes(); // Function Solarland.SolarCharacter.GetVerticalJetFlyRestTimes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8c60
	void GetVerticalJetFlyCharging(float& OutValue, float& OutPercent); // Function Solarland.SolarCharacter.GetVerticalJetFlyCharging // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8b80
	void GetVerticalJetFlyCD(float& OutValue, float& OutPercent); // Function Solarland.SolarCharacter.GetVerticalJetFlyCD // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8aa0
	struct ASolarVehicleWeapon* GetVehicleWeapon(); // Function Solarland.SolarCharacter.GetVehicleWeapon // (Final|Native|Public|Const) // @ game+0x20a8a70
	char GetVehicleAbilityCounter(); // Function Solarland.SolarCharacter.GetVehicleAbilityCounter // (Final|Native|Public) // @ game+0x20a8a40
	struct TMap<enum class EItemType, struct FSolarItemData> GetTypeKeyItemMap(); // Function Solarland.SolarCharacter.GetTypeKeyItemMap // (Final|Native|Public|Const) // @ game+0x20a89a0
	float GetTreatmentRemaining(); // Function Solarland.SolarCharacter.GetTreatmentRemaining // (Final|Native|Public|Const) // @ game+0x20a8970
	float GetTreatmentDuration(); // Function Solarland.SolarCharacter.GetTreatmentDuration // (Final|Native|Public|Const) // @ game+0x20a8940
	void GetTeamHUDTranslucentData(float& CheckDistance, float& TranslucentValue); // Function Solarland.SolarCharacter.GetTeamHUDTranslucentData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8860
	struct UUserWidget* GetTeamHUD(); // Function Solarland.SolarCharacter.GetTeamHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8830
	struct ASolarSpectateInfo* GetSpectateInfo(); // Function Solarland.SolarCharacter.GetSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8800
	struct UAnimInstance* GetSpecAnimInstance(enum class ESpecAnimInstType SpecAnimType); // Function Solarland.SolarCharacter.GetSpecAnimInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8770
	struct ASolarReplayPlayerController* GetSolarReplayPlayerController(); // Function Solarland.SolarCharacter.GetSolarReplayPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8740
	struct ASolarPlayerState* GetSolarPlayerState(); // Function Solarland.SolarCharacter.GetSolarPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8710
	struct FString GetSolarPlayerID(); // Function Solarland.SolarCharacter.GetSolarPlayerID // (Final|Native|Public|Const) // @ game+0x20a8690
	struct ASolarPlayerController* GetSolarPlayerController(bool bSkipPossessCheck); // Function Solarland.SolarCharacter.GetSolarPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a85f0
	struct USolarCharacterMovementComponent* GetSolarCharacterMovementComponent(); // Function Solarland.SolarCharacter.GetSolarCharacterMovementComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8170
	struct ASolarBotAIController* GetSolarAIController(); // Function Solarland.SolarCharacter.GetSolarAIController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8500
	struct USolarAbilitySystemComponent* GetSolarAbilitySystemComponentSimple(); // Function Solarland.SolarCharacter.GetSolarAbilitySystemComponentSimple // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8530
	struct FVector GetSocketLocationAtPrimaryMesh(struct FName& InSocketName); // Function Solarland.SolarCharacter.GetSocketLocationAtPrimaryMesh // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8450
	float GetSkydiveLandingHeight(); // Function Solarland.SolarCharacter.GetSkydiveLandingHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8420
	struct UCharacterSkinConfig* GetSkinConfig(int32_t InSkinID); // Function Solarland.SolarCharacter.GetSkinConfig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20a8390
	int32_t GetShieldWorthByID(int32_t InShieldID); // Function Solarland.SolarCharacter.GetShieldWorthByID // (Final|Native|Protected) // @ game+0x20a82f0
	int32_t GetShieldUpgradeNeedMatNum(); // Function Solarland.SolarCharacter.GetShieldUpgradeNeedMatNum // (Final|Native|Public|Const) // @ game+0x20a82c0
	int32_t GetShieldUpgradeMatNum(); // Function Solarland.SolarCharacter.GetShieldUpgradeMatNum // (Final|Native|Public|Const) // @ game+0x20a8290
	int32_t GetShieldUpgradeMatMaxPile(); // Function Solarland.SolarCharacter.GetShieldUpgradeMatMaxPile // (Final|Native|Public|Const) // @ game+0x20a8260
	float GetShieldRecoveryAmount(); // Function Solarland.SolarCharacter.GetShieldRecoveryAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8230
	float GetShieldRechargeRemainningTime(); // Function Solarland.SolarCharacter.GetShieldRechargeRemainningTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8200
	float GetShieldRechargeDuration(); // Function Solarland.SolarCharacter.GetShieldRechargeDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a81d0
	int32_t GetShieldMaxLevel(); // Function Solarland.SolarCharacter.GetShieldMaxLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a81a0
	struct USolarCharacterMovementComponent* GetSafeSolarCharacterMovement(); // Function Solarland.SolarCharacter.GetSafeSolarCharacterMovement // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a8170
	enum class ERoleSkillStatus GetRoleAbilityState(char RoleAbilityIndex); // Function Solarland.SolarCharacter.GetRoleAbilityState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a80e0
	struct ASolarUAVRescue* GetRescuingUAV(); // Function Solarland.SolarCharacter.GetRescuingUAV // (Final|Native|Public|Const) // @ game+0x20a80a0
	struct ASolarCharacter* GetRescuingCharacter(); // Function Solarland.SolarCharacter.GetRescuingCharacter // (Final|Native|Public|Const) // @ game+0x20a8060
	float GetRescueTime(); // Function Solarland.SolarCharacter.GetRescueTime // (Final|Native|Public|Const) // @ game+0x20a8030
	float GetRecoveryDuartionModify(); // Function Solarland.SolarCharacter.GetRecoveryDuartionModify // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	float GetRecoveryAmountModify(); // Function Solarland.SolarCharacter.GetRecoveryAmountModify // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct ASolarUAVRescue* GetPermanentRescueUAV(); // Function Solarland.SolarCharacter.GetPermanentRescueUAV // (Final|Native|Public|Const) // @ game+0x20a7ff0
	struct FRotator GetNormalizeCameraRotation(); // Function Solarland.SolarCharacter.GetNormalizeCameraRotation // (Final|Native|Public|HasDefaults|Const) // @ game+0x20a7fb0
	bool GetNewItemData(int32_t InItemID, int32_t InItemNum, struct FSolarItemData& OutItemData); // Function Solarland.SolarCharacter.GetNewItemData // (Final|Native|Public|HasOutParms) // @ game+0x20a7e20
	char GetMyTeamID(); // Function Solarland.SolarCharacter.GetMyTeamID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a7df0
	float GetMaxShieldValue(); // Function Solarland.SolarCharacter.GetMaxShieldValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a7dc0
	float GetMaxExtraEnergy(); // Function Solarland.SolarCharacter.GetMaxExtraEnergy // (Final|Native|Public|Const) // @ game+0x20a7d90
	float GetMaxEnergy(); // Function Solarland.SolarCharacter.GetMaxEnergy // (Final|Native|Public|Const) // @ game+0x20a7d90
	struct ASolarPlayerState* GetLastDownBy(); // Function Solarland.SolarCharacter.GetLastDownBy // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x20a7d50
	int32_t GetJetPackModuleLevel(bool bVertical); // Function Solarland.SolarCharacter.GetJetPackModuleLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a7cb0
	int32_t GetItemNumById(int32_t InItemID); // Function Solarland.SolarCharacter.GetItemNumById // (Final|Native|Public|Const) // @ game+0x20a7c10
	int32_t GetItemMaxPile(int32_t InItemID); // Function Solarland.SolarCharacter.GetItemMaxPile // (Final|Native|Public|Const) // @ game+0x20a7b70
	bool GetItemDataByType(enum class EItemType ItemType, struct FSolarItemData& ItemData); // Function Solarland.SolarCharacter.GetItemDataByType // (Final|Native|Public|HasOutParms|Const) // @ game+0x20a7a20
	bool GetItemDataById(int32_t InItemID, struct FSolarItemData& ItemData); // Function Solarland.SolarCharacter.GetItemDataById // (Final|Native|Public|HasOutParms|Const) // @ game+0x20a78d0
	bool GetIsActiveEMP(); // Function Solarland.SolarCharacter.GetIsActiveEMP // (Final|Native|Public|Const) // @ game+0x20a78b0
	struct FVector GetInputVector(); // Function Solarland.SolarCharacter.GetInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a7870
	struct TMap<int32_t, struct FSolarItemData> GetIdKeyItemMap(); // Function Solarland.SolarCharacter.GetIdKeyItemMap // (Final|Native|Public|Const) // @ game+0x20a7840
	int32_t GetHorizontalJetFlyTotalTimes(); // Function Solarland.SolarCharacter.GetHorizontalJetFlyTotalTimes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a7810
	int32_t GetHorizontalJetFlyRestTimes(); // Function Solarland.SolarCharacter.GetHorizontalJetFlyRestTimes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a77e0
	void GetHorizontalJetFlyCharging(float& OutValue, float& OutPercent); // Function Solarland.SolarCharacter.GetHorizontalJetFlyCharging // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a7700
	void GetHorizontalJetFlyCD(float& OutValue, float& OutPercent); // Function Solarland.SolarCharacter.GetHorizontalJetFlyCD // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a7620
	int32_t GetGenericSkillLevel(); // Function Solarland.SolarCharacter.GetGenericSkillLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a75f0
	float GetFactorialAttributeModifies(int32_t AttributeID); // Function Solarland.SolarCharacter.GetFactorialAttributeModifies // (Final|Native|Public|BlueprintCallable) // @ game+0x20a7550
	int32_t GetExtraEnergyModuleID(); // Function Solarland.SolarCharacter.GetExtraEnergyModuleID // (Final|Native|Public|Const) // @ game+0x20a7530
	float GetEnergyConsumptionModify(); // Function Solarland.SolarCharacter.GetEnergyConsumptionModify // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	enum class EDriveState GetDriveState(); // Function Solarland.SolarCharacter.GetDriveState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a7500
	struct AActor* GetDamagerCauserActor(); // Function Solarland.SolarCharacter.GetDamagerCauserActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a74d0
	float GetCurrShieldValue(); // Function Solarland.SolarCharacter.GetCurrShieldValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a72d0
	int32_t GetCurrShieldID(); // Function Solarland.SolarCharacter.GetCurrShieldID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a72a0
	float GetCurrExtraEnergy(); // Function Solarland.SolarCharacter.GetCurrExtraEnergy // (Final|Native|Public|Const) // @ game+0x20a7270
	struct ASolarPlayerWeapon* GetCurrentWeapon(); // Function Solarland.SolarCharacter.GetCurrentWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a74a0
	enum class EWalkMode GetCurrentWalkMode(); // Function Solarland.SolarCharacter.GetCurrentWalkMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a7470
	float GetCurrentVehicleAbilityCooldownRemaining(char AbilityIndex); // Function Solarland.SolarCharacter.GetCurrentVehicleAbilityCooldownRemaining // (Final|Native|Public|Const) // @ game+0x20a73e0
	float GetCurrentVehicleAbilityCooldownDuration(char AbilityIndex); // Function Solarland.SolarCharacter.GetCurrentVehicleAbilityCooldownDuration // (Final|Native|Public|Const) // @ game+0x20a7350
	int32_t GetCurrentShieldLevel(); // Function Solarland.SolarCharacter.GetCurrentShieldLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a7320
	enum class ECustomJumpType GetCurrentCustomJumpType(); // Function Solarland.SolarCharacter.GetCurrentCustomJumpType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a7300
	float GetCurrEnergy(); // Function Solarland.SolarCharacter.GetCurrEnergy // (Final|Native|Public|Const) // @ game+0x20a7270
	float GetCumulativeAttributeModifies(int32_t AttributeID); // Function Solarland.SolarCharacter.GetCumulativeAttributeModifies // (Final|Native|Public|BlueprintCallable) // @ game+0x20a71d0
	struct APlayerController* GetControllingOrReplayController(); // Function Solarland.SolarCharacter.GetControllingOrReplayController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a7170
	struct UStaticMesh* GetClipMeshOfHoldingWeapon(); // Function Solarland.SolarCharacter.GetClipMeshOfHoldingWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x20a7140
	int32_t GetClassTypeSkillLevel(); // Function Solarland.SolarCharacter.GetClassTypeSkillLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a7110
	void GetChargingStateForUI(bool& IsSky, bool& IsPile, bool& IsBox, bool& IsE2M); // Function Solarland.SolarCharacter.GetChargingStateForUI // (Final|Native|Public|HasOutParms) // @ game+0x20a6f70
	struct FRotator GetCharacterLookAt(); // Function Solarland.SolarCharacter.GetCharacterLookAt // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a6f30
	bool GetCanShowBattlePrompt(); // Function Solarland.SolarCharacter.GetCanShowBattlePrompt // (Final|Native|Public|BlueprintCallable) // @ game+0x20a6f00
	struct FRotator GetCameraRotation(); // Function Solarland.SolarCharacter.GetCameraRotation // (Final|Native|Public|HasDefaults|Const) // @ game+0x20a6ec0
	struct FVector GetCameraLocation(); // Function Solarland.SolarCharacter.GetCameraLocation // (Final|Native|Public|HasDefaults|Const) // @ game+0x20a6e80
	void GetAllSkydiveLandingEffects(struct TArray<struct UParticleSystemComponent*>& OutEffects); // Function Solarland.SolarCharacter.GetAllSkydiveLandingEffects // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a6dd0
	void GetAllSkydiveFlyingEffects(struct TArray<struct UParticleSystemComponent*>& OutEffects); // Function Solarland.SolarCharacter.GetAllSkydiveFlyingEffects // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a6d20
	void GatheringDeathBoxItem(bool bCheat, bool bKilledByTeammate, int32_t InExpItemCount, int32_t InMaxSheildMatCount); // Function Solarland.SolarCharacter.GatheringDeathBoxItem // (Final|Native|Protected) // @ game+0x20a6bb0
	void GameStatisticsWeaponHit(struct ASolarCharacterBase* DamageCauserCharacter, struct FSolarPointDamageEvent& DamageInfo, float ActualDamage); // Function Solarland.SolarCharacter.GameStatisticsWeaponHit // (Final|Native|Public|HasOutParms) // @ game+0x20a6a50
	void GameStatisticsVehicleLanded(struct FHitResult& Hit); // Function Solarland.SolarCharacter.GameStatisticsVehicleLanded // (Final|Native|Public|HasOutParms) // @ game+0x20a6970
	void GameStatisticsVehicleInAir(); // Function Solarland.SolarCharacter.GameStatisticsVehicleInAir // (Final|Native|Public) // @ game+0x20a6950
	void GameStatisticsVehicleHit(struct AActor* DamageCauser, float HitDamage); // Function Solarland.SolarCharacter.GameStatisticsVehicleHit // (Final|Native|Public) // @ game+0x20a6880
	void GameStatisticsItemChange(int32_t ItemID, enum class EItemChangeType PickType, int32_t OldNum, int32_t NewNum, int32_t TriggerType); // Function Solarland.SolarCharacter.GameStatisticsItemChange // (Final|Native|Public) // @ game+0x20a66e0
	void GameStatisticsGodWeapon(); // Function Solarland.SolarCharacter.GameStatisticsGodWeapon // (Final|Native|Public) // @ game+0x20a66c0
	void GameStatisticsGetOnVehicleReason(int32_t Type, struct FString Type_Parameter); // Function Solarland.SolarCharacter.GameStatisticsGetOnVehicleReason // (Final|Native|Public) // @ game+0x20a6590
	void GameStatisticsGetOffVehicleReason(struct ASolarWeapon* CurrentWeapon, struct FString Param); // Function Solarland.SolarCharacter.GameStatisticsGetOffVehicleReason // (Final|Native|Public) // @ game+0x20a64b0
	void GameStatisticsEquipment(); // Function Solarland.SolarCharacter.GameStatisticsEquipment // (Final|Native|Public) // @ game+0x20a6490
	void GameStatisticsElectricShopActivated(struct FVector& InLocation); // Function Solarland.SolarCharacter.GameStatisticsElectricShopActivated // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x20a6400
	void GameStatisticsDamageReason(struct FSolarPointDamageEvent& InDamageEvent, float ActualDamage); // Function Solarland.SolarCharacter.GameStatisticsDamageReason // (Final|Native|Public|HasOutParms) // @ game+0x20a62f0
	void GameStatisticsCharacterSkill(bool bIsSuperSkill); // Function Solarland.SolarCharacter.GameStatisticsCharacterSkill // (Final|Native|Public) // @ game+0x20a6260
	void GameStatisticsBackpackFly(struct FBackpackStatisticsInfo& InBackpackStatisticsInfo); // Function Solarland.SolarCharacter.GameStatisticsBackpackFly // (Final|Native|Public|HasOutParms) // @ game+0x20a61d0
	void ForceBreakSprintState(); // Function Solarland.SolarCharacter.ForceBreakSprintState // (Final|Native|Public|BlueprintCallable) // @ game+0x20a61b0
	void FindMostValuableItemClient(struct TArray<struct FSolarItemData> ItemData, char FromWhichTeammate); // Function Solarland.SolarCharacter.FindMostValuableItemClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a6060
	void ExitDyingMovement(); // Function Solarland.SolarCharacter.ExitDyingMovement // (Final|Native|Public) // @ game+0x20a6040
	void ExitDeathVerge(bool bClientSimulation); // Function Solarland.SolarCharacter.ExitDeathVerge // (Native|Public|BlueprintCallable) // @ game+0x20a5fb0
	void ExecuteGM(struct FString GMType, struct FString Param1, struct FString Param2); // Function Solarland.SolarCharacter.ExecuteGM // (Final|Native|Public|BlueprintCallable) // @ game+0x20a5e60
	void EnterVehicleWholeShield(struct UMaterialInterface* ShieldMaterialSource); // Function Solarland.SolarCharacter.EnterVehicleWholeShield // (Final|Native|Public|BlueprintCallable) // @ game+0x20a5dd0
	void EnterVehicleStealth(); // Function Solarland.SolarCharacter.EnterVehicleStealth // (Final|Native|Public|BlueprintCallable) // @ game+0x20a5db0
	void EnterDyingMovement(); // Function Solarland.SolarCharacter.EnterDyingMovement // (Final|Native|Public) // @ game+0x20a5d90
	void EnterDeathVerge(bool bClientSimulation); // Function Solarland.SolarCharacter.EnterDeathVerge // (Native|Public|BlueprintCallable) // @ game+0x20a5d00
	void EnableCharacterDebugInfo_BlockDetection(bool bEnabled); // Function Solarland.SolarCharacter.EnableCharacterDebugInfo_BlockDetection // (Final|Native|Public|BlueprintCallable) // @ game+0x1f99610
	void DoReceivingPoisonDamage(); // Function Solarland.SolarCharacter.DoReceivingPoisonDamage // (Final|Native|Public) // @ game+0x20a5ce0
	void DoOperation(enum class ECharacterOperation OperationType, struct UObject* Target); // Function Solarland.SolarCharacter.DoOperation // (Final|Native|Public|BlueprintCallable) // @ game+0x20a5c10
	void DisCardShield(); // Function Solarland.SolarCharacter.DisCardShield // (Final|Native|Public) // @ game+0x20a5bf0
	void CreateTreasureBoxOperator(); // Function Solarland.SolarCharacter.CreateTreasureBoxOperator // (Final|Native|Public) // @ game+0x20a5bd0
	void CreateShieldUpgradeOperator(); // Function Solarland.SolarCharacter.CreateShieldUpgradeOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x20a5bb0
	void CreateShieldRepairEffectItem(); // Function Solarland.SolarCharacter.CreateShieldRepairEffectItem // (Final|Native|Public|BlueprintCallable) // @ game+0x20a5b90
	void CreateShieldOperator(); // Function Solarland.SolarCharacter.CreateShieldOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x20a5b70
	struct UWidgetComponent* CreateOwnTeammateHUDInternal(struct ASolarPlayerState* SelfData); // Function Solarland.SolarCharacter.CreateOwnTeammateHUDInternal // (Final|Native|Protected) // @ game+0x20a5ad0
	struct UWidgetComponent* CreateOwnTeammateHUD(); // Function Solarland.SolarCharacter.CreateOwnTeammateHUD // (Final|Native|Public|BlueprintCallable) // @ game+0x20a5aa0
	void ClientUpdateTracking(int32_t Mode, int32_t Index, struct FVector Location); // Function Solarland.SolarCharacter.ClientUpdateTracking // (Final|Net|NetReliableNative|Event|Private|HasDefaults|NetClient) // @ game+0x20a58c0
	void ClientSuperRadarOnceScanned(int32_t ScannedNum); // Function Solarland.SolarCharacter.ClientSuperRadarOnceScanned // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a5830
	void ClientStartRecharge(float InCurrentValue, float InRecoveryDuration, float InRecoveryAmount, enum class EShieldRechargeState ShieldRechargeType, int32_t InShieldContributorCharacterId, bool bFixPreAdd); // Function Solarland.SolarCharacter.ClientStartRecharge // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a5640
	void ClientSetServerBlockDetectionResult(struct FString Info); // Function Solarland.SolarCharacter.ClientSetServerBlockDetectionResult // (Final|Net|Native|Event|Private|NetClient) // @ game+0x20a55a0
	void ClientRPCDisplayAllElectricShops(struct TArray<struct FVector> AllPositions); // Function Solarland.SolarCharacter.ClientRPCDisplayAllElectricShops // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x20a4fe0
	void ClientRestoreActiveAbilitiesOnReconnected(struct TArray<struct FRestoreAbilityInfo> SpecHandles); // Function Solarland.SolarCharacter.ClientRestoreActiveAbilitiesOnReconnected // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x20a5500
	void ClientReceiveVehicleWeaponMessageArray(struct TArray<struct FPlayerWeaponMsg> InPlayerWeaponMessageArray); // Function Solarland.SolarCharacter.ClientReceiveVehicleWeaponMessageArray // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a5430
	void ClientReceiveVehicleWeaponMessage(struct FPlayerWeaponMsg InPlayerWeaponMessage); // Function Solarland.SolarCharacter.ClientReceiveVehicleWeaponMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a5380
	void ClientReceiveScanResult(struct TArray<struct FScannedInfo_NetQuantize> ScannedDatas, float SpanTimer); // Function Solarland.SolarCharacter.ClientReceiveScanResult // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a5290
	void ClientReceiveCharacterWeaponMessageArray(struct TArray<struct FPlayerWeaponMsg> InPlayerWeaponMessageArray); // Function Solarland.SolarCharacter.ClientReceiveCharacterWeaponMessageArray // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a51c0
	void ClientReceiveCharacterWeaponMessage(struct FPlayerWeaponMsg InPlayerWeaponMessage); // Function Solarland.SolarCharacter.ClientReceiveCharacterWeaponMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a5110
	void ClientRadarOnceScanned(int32_t ScannedNum); // Function Solarland.SolarCharacter.ClientRadarOnceScanned // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a5080
	void ClientPlaySoundGroup(struct FName GroupName); // Function Solarland.SolarCharacter.ClientPlaySoundGroup // (Net|Native|Event|Public|NetClient) // @ game+0x20a4f50
	void ClientPlayKillEffect(struct ASolarWeapon* AttackerWeapon); // Function Solarland.SolarCharacter.ClientPlayKillEffect // (Net|NetReliableNative|Event|NetMulticast|Public|NetClient) // @ game+0x20a4ec0
	void ClientPlayHitEffect(struct FHitResult HitResult, struct ASolarBullet* BulletClass, enum class ESolarHitType HitType, struct APlayerController* Attacker, struct FVector RelativeVector, float VFXScale, struct ASolarWeapon* AttackerWeapon); // Function Solarland.SolarCharacter.ClientPlayHitEffect // (Net|Native|Event|NetMulticast|Public|HasDefaults|NetClient) // @ game+0x20a4c60
	void ClientOpenAirdropResponse(bool bIsOpening); // Function Solarland.SolarCharacter.ClientOpenAirdropResponse // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a4bd0
	void ClientOnTriggerCharacterDown(); // Function Solarland.SolarCharacter.ClientOnTriggerCharacterDown // (Net|Native|Event|Public|NetClient) // @ game+0x15543c0
	void ClientOnShieldUpgrade(); // Function Solarland.SolarCharacter.ClientOnShieldUpgrade // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1555400
	void ClientOnReconnecting(struct FReconnectionParams Params); // Function Solarland.SolarCharacter.ClientOnReconnecting // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x20a4b50
	void ClientOnContinuousTreatmentStarted(); // Function Solarland.SolarCharacter.ClientOnContinuousTreatmentStarted // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1555220
	void ClientNotifyMarkedBySuperRadar(float InRadarLifeTime, struct FGameplayTag InTag); // Function Solarland.SolarCharacter.ClientNotifyMarkedBySuperRadar // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a4a70
	void ClientNotifyMarkedByOnceScan(float InRadarLifeTime, struct FGameplayTag InTag); // Function Solarland.SolarCharacter.ClientNotifyMarkedByOnceScan // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a4990
	void ClientNotifyGameProgressCondition(struct FGameplayTag& InProgressTag); // Function Solarland.SolarCharacter.ClientNotifyGameProgressCondition // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20a4900
	void ClientNotifyCharacterExposed(float InRadarLifeTime, struct FGameplayTag InTag); // Function Solarland.SolarCharacter.ClientNotifyCharacterExposed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a4820
	void ClientNoticePickup(int32_t ItemID, int32_t ItemQuality); // Function Solarland.SolarCharacter.ClientNoticePickup // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a4750
	void ClientLeaveFromSkywardDiveLauncher(struct ASkywardDiveLauncher* InLauncher); // Function Solarland.SolarCharacter.ClientLeaveFromSkywardDiveLauncher // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a46c0
	void ClientKilledCharacter(); // Function Solarland.SolarCharacter.ClientKilledCharacter // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1554720
	void ClientHideShieldOperator(); // Function Solarland.SolarCharacter.ClientHideShieldOperator // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1555a80
	void ClientEnterAndRefreshSkywardDiveLauncher(struct ASkywardDiveLauncher* InLauncher, bool bInHasAvailableDevice); // Function Solarland.SolarCharacter.ClientEnterAndRefreshSkywardDiveLauncher // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a45f0
	void ClientCreateTreatEffect(); // Function Solarland.SolarCharacter.ClientCreateTreatEffect // (Net|Native|Event|NetMulticast|Public|NetClient) // @ game+0x15551e0
	void ClientCompleteRecharge(float InCurrentValue, float InChangeValue); // Function Solarland.SolarCharacter.ClientCompleteRecharge // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a4520
	void ClientCancelRecharge(bool BreakAnimOnly, float InCurrentValue, float InChangeValue, float MaxShieldVal, enum class EShieldCancelRechargeReason CancelReason); // Function Solarland.SolarCharacter.ClientCancelRecharge // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a4370
	void ClientBroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, char RoleAbilityIndex); // Function Solarland.SolarCharacter.ClientBroadcastCharacterRoleAbilityContinousEvent // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a4250
	void ClientAddHitTrace(struct FHitTraceInfo Info); // Function Solarland.SolarCharacter.ClientAddHitTrace // (Net|Native|Event|Public|NetClient) // @ game+0x20a41c0
	void ClientAckValidShieldUpgradeInteract(struct ASolarShieldUpgradeItemShop* InShop, enum class EShieldUpgradeInteractAckType AckReason); // Function Solarland.SolarCharacter.ClientAckValidShieldUpgradeInteract // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20a40f0
	void ClearGameStatisticEquipment(); // Function Solarland.SolarCharacter.ClearGameStatisticEquipment // (Final|Native|Public) // @ game+0x20a40d0
	void ClearDeathBoxData(); // Function Solarland.SolarCharacter.ClearDeathBoxData // (Final|Native|Protected) // @ game+0x20a40b0
	float CheckSelfAltitudeInstantlyByTrace(struct FHitResult& HitGeography, bool bCheckEveryFrame, float traceDistOverride, bool bSimpleCheck); // Function Solarland.SolarCharacter.CheckSelfAltitudeInstantlyByTrace // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20a3f00
	void ChangeSeatByIndex(int32_t TargetSeatIndex); // Function Solarland.SolarCharacter.ChangeSeatByIndex // (Final|Native|Public) // @ game+0x20a3e70
	void ChangeSeatByDefault(); // Function Solarland.SolarCharacter.ChangeSeatByDefault // (Final|Native|Public) // @ game+0x20a3e50
	void CGM_SpawnDeathBox(); // Function Solarland.SolarCharacter.CGM_SpawnDeathBox // (Final|Native|Public|BlueprintCallable) // @ game+0x20a3bc0
	void CGM_EnterDeath(); // Function Solarland.SolarCharacter.CGM_EnterDeath // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1554460
	bool CanStickOutOfVehicle(bool bIgnoreSelfWeaponCheck); // Function Solarland.SolarCharacter.CanStickOutOfVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a3d70
	bool CanRebirth(); // Function Solarland.SolarCharacter.CanRebirth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20a3d40
	bool CanOperateBackpack(); // Function Solarland.SolarCharacter.CanOperateBackpack // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x20a3d10
	bool CanMarkPointOnWorld(); // Function Solarland.SolarCharacter.CanMarkPointOnWorld // (Final|Native|Public) // @ game+0x20a3ce0
	void CancelVehicleAbility(); // Function Solarland.SolarCharacter.CancelVehicleAbility // (Final|Native|Public) // @ game+0x20a3e30
	void CancelTreatment(); // Function Solarland.SolarCharacter.CancelTreatment // (Final|Native|Public|BlueprintCallable) // @ game+0x20a3e10
	void CalculateBubbleKillNum(struct TArray<struct ASolarCharacter*>& InstigatorCharacters, struct AActor* AttackWeapon); // Function Solarland.SolarCharacter.CalculateBubbleKillNum // (Final|Native|Public|HasOutParms) // @ game+0x20a3be0
	void BroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, char RoleAbilityIndex); // Function Solarland.SolarCharacter.BroadcastCharacterRoleAbilityContinousEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x20a3aa0
	void BreakRechargeShield(); // Function Solarland.SolarCharacter.BreakRechargeShield // (Final|Native|Public) // @ game+0x20a3a80
	void BindUpdateHUDToOnHealthUpdateDelegateProc(struct ASolarCharacter* Character); // Function Solarland.SolarCharacter.BindUpdateHUDToOnHealthUpdateDelegateProc // (Final|Native|Private) // @ game+0x20a3940
	void BindLocalPlayerSpectateDelegates(struct ASolarSpectateInfo* LocalSpecInfo); // Function Solarland.SolarCharacter.BindLocalPlayerSpectateDelegates // (Final|Native|Public) // @ game+0x20a38b0
	void BindActorToSelfTeam(struct AActor* Actor); // Function Solarland.SolarCharacter.BindActorToSelfTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x20a3820
	void BeginplayPending__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.BeginplayPending__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void BeginPlayBlueprint(); // Function Solarland.SolarCharacter.BeginPlayBlueprint // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void AutoMarkItemForTeammateClient(int64_t ItemThisID); // Function Solarland.SolarCharacter.AutoMarkItemForTeammateClient // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x20a3790
	void ApplyVehicleAbility(char AbilityIndex); // Function Solarland.SolarCharacter.ApplyVehicleAbility // (Final|Native|Public) // @ game+0x20a3710
	void AfterTakeDamageResolve(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.AfterTakeDamageResolve // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void AfterDealDamageResolve(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.AfterDealDamageResolve // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void AddTrackingTarget(struct ASolarCharacterBase* Tracked); // Function Solarland.SolarCharacter.AddTrackingTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x20a3680
	void AddTempAttributeModifies(int32_t AttributeID, bool bCumulOrFact, struct FName Tag, float Value); // Function Solarland.SolarCharacter.AddTempAttributeModifies // (Final|Native|Public|BlueprintCallable) // @ game+0x20a3520
	void AddDebugString(struct FString DebugString); // Function Solarland.SolarCharacter.AddDebugString // (Final|Native|Public|BlueprintCallable) // @ game+0x20a3480
	void AddCurrExtraEnergyValue(float DeltaEnergy); // Function Solarland.SolarCharacter.AddCurrExtraEnergyValue // (Final|Native|Public) // @ game+0x20a3400
};

// Class Solarland.SCMCharacter
// Size: 0x2080 (Inherited: 0x2080)
struct ASCMCharacter : ASolarCharacter {
};

// Class Solarland.SCMLoadLevelAction
// Size: 0x78 (Inherited: 0x30)
struct USCMLoadLevelAction : UBlueprintAsyncActionBase {
	char pad_30[0x28]; // 0x30(0x28)
	struct FMulticastInlineDelegate OnElementLoadComplete; // 0x58(0x10)
	struct FMulticastInlineDelegate OnLoadComplete; // 0x68(0x10)

	struct USCMLoadLevelAction* LoadLevel(struct UObject* WorldContextObject, struct FString LevelName, struct TArray<struct FString>& Elements); // Function Solarland.SCMLoadLevelAction.LoadLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x203ac00
	void HandleLoadComplete(); // Function Solarland.SCMLoadLevelAction.HandleLoadComplete // (Final|Native|Public) // @ game+0x203a800
};

// Class Solarland.SCMLoadElementAction
// Size: 0x58 (Inherited: 0x30)
struct USCMLoadElementAction : UBlueprintAsyncActionBase {
	char pad_30[0x18]; // 0x30(0x18)
	struct FMulticastInlineDelegate OnElementLoadComplete; // 0x48(0x10)

	struct USCMLoadElementAction* LoadElementLevel(struct UObject* WorldContextObject, struct TArray<struct FString>& Elements); // Function Solarland.SCMLoadElementAction.LoadElementLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x203aaf0
	void HandleElementLoadComplete(); // Function Solarland.SCMLoadElementAction.HandleElementLoadComplete // (Final|Native|Public) // @ game+0x203a7e0
};

// Class Solarland.SCMUnLoadElementAction
// Size: 0x58 (Inherited: 0x30)
struct USCMUnLoadElementAction : UBlueprintAsyncActionBase {
	char pad_30[0x18]; // 0x30(0x18)
	struct FMulticastInlineDelegate OnElementUnLoadComplete; // 0x48(0x10)

	struct USCMUnLoadElementAction* UnLoadElementLevel(struct UObject* WorldContextObject, struct TArray<struct FString>& Elements); // Function Solarland.SCMUnLoadElementAction.UnLoadElementLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x203cb80
	void HandleElementUnLoadComplete(); // Function Solarland.SCMUnLoadElementAction.HandleElementUnLoadComplete // (Final|Native|Public) // @ game+0x203a7e0
};

// Class Solarland.SCMMapElementBase
// Size: 0x280 (Inherited: 0x228)
struct ASCMMapElementBase : AActor {
	bool bPersistent; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)
	struct FString Side; // 0x230(0x10)
	struct FString Job; // 0x240(0x10)
	struct FString ElementID; // 0x250(0x10)
	enum class ESCMMapElementType Type; // 0x260(0x01)
	enum class ESCMMapElementStateType State; // 0x261(0x01)
	enum class ESCMMapElementVisibilityType Visibility; // 0x262(0x01)
	char pad_263[0x5]; // 0x263(0x05)
	struct USCMMapElementRPCComponent* MapElementRPCComponentClass; // 0x268(0x08)
	struct FName ElementName; // 0x270(0x08)
	char bUseSceneActorOptimization; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)

	enum class ESCMMapElementVisibilityType SetElementVisibility(enum class ESCMMapElementVisibilityType NewType); // Function Solarland.SCMMapElementBase.SetElementVisibility // (Native|Public|BlueprintCallable) // @ game+0x203c720
	enum class ESCMMapElementStateType SetElementState(enum class ESCMMapElementStateType NewState); // Function Solarland.SCMMapElementBase.SetElementState // (Native|Public|BlueprintCallable) // @ game+0x203c600
	void OnRep_ElementVisibility(); // Function Solarland.SCMMapElementBase.OnRep_ElementVisibility // (Final|Native|Public) // @ game+0x203afb0
	void OnRep_ElementState(); // Function Solarland.SCMMapElementBase.OnRep_ElementState // (Final|Native|Public) // @ game+0x203af90
	void OnElementVisibilityChanged(enum class ESCMMapElementVisibilityType CurrentVisibility); // Function Solarland.SCMMapElementBase.OnElementVisibilityChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnElementStateChanged(enum class ESCMMapElementStateType CurrentState); // Function Solarland.SCMMapElementBase.OnElementStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SCMMapElementRPCComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USCMMapElementRPCComponent : UActorComponent {
};

// Class Solarland.SCMMatchChannelAction
// Size: 0x60 (Inherited: 0x30)
struct USCMMatchChannelAction : UBlueprintAsyncActionBase {
	char pad_30[0x18]; // 0x30(0x18)
	struct UObject* WorldContextObject; // 0x48(0x08)
	struct FMulticastInlineDelegate OnMatchChannelChange; // 0x50(0x10)

	struct USCMMatchChannelAction* OpenMatchChannel(struct UObject* WorldContextObject, enum class EMatchType MatchType, struct TArray<int32_t>& PlayerStructure, int32_t MaxMatchTime); // Function Solarland.SCMMatchChannelAction.OpenMatchChannel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x203b080
	void HandleMatchChannelChange(bool InMatchResult, int32_t RPCID); // Function Solarland.SCMMatchChannelAction.HandleMatchChannelChange // (Final|Native|Public) // @ game+0x203a820
};

// Class Solarland.SolarPlayerController
// Size: 0xe58 (Inherited: 0x5a8)
struct ASolarPlayerController : APlayerController {
	char pad_5A8[0x40]; // 0x5a8(0x40)
	struct FMulticastInlineDelegate OnPawnReplicated; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnPlayerStateRepDelegate; // 0x5f8(0x10)
	struct FMulticastInlineDelegate OnCatchInputActionDelegate; // 0x608(0x10)
	struct FMulticastInlineDelegate OnEnterLandingDelegate; // 0x618(0x10)
	struct FMulticastInlineDelegate OnNotifiedMarkedItemWasPickedUpDelegate; // 0x628(0x10)
	struct USolarInputManager* InputManager; // 0x638(0x08)
	char pad_640[0x8]; // 0x640(0x08)
	struct UAiPalComponent* AiPalComponent; // 0x648(0x08)
	struct USolarEasyAntiCheatComponent* AntiCheatComponent; // 0x650(0x08)
	struct FMulticastInlineDelegate OnHUDSpawnedDelegate; // 0x658(0x10)
	char pad_668[0xf0]; // 0x668(0xf0)
	struct USolarInputModePolicyComponent* SolarInputModePolicyComponent; // 0x758(0x08)
	struct TArray<struct USolarInputActionContext*> InputActionContextArray; // 0x760(0x10)
	char pad_770[0x8]; // 0x770(0x08)
	struct FVector2D InputMovementVector; // 0x778(0x08)
	float InputRotatePitch; // 0x780(0x04)
	char pad_784[0xc]; // 0x784(0x0c)
	float ActionWheelHoldDownTime; // 0x790(0x04)
	char pad_794[0x10]; // 0x794(0x10)
	float WorldMarkMessageDelayTime; // 0x7a4(0x04)
	float WarningMarkRadius; // 0x7a8(0x04)
	float PingHoldDownTime; // 0x7ac(0x04)
	float VoiceWheelMouseMoveRatio; // 0x7b0(0x04)
	float WheelRadius; // 0x7b4(0x04)
	float CancelRadius; // 0x7b8(0x04)
	float OpenMarkWheelRadius; // 0x7bc(0x04)
	char pad_7C0[0x68]; // 0x7c0(0x68)
	struct TArray<struct UActorMarkBase*> DeathBoxWorldMarks; // 0x828(0x10)
	char pad_838[0x4]; // 0x838(0x04)
	float DeathBoxMarksRefreshInterval; // 0x83c(0x04)
	char pad_840[0x4]; // 0x840(0x04)
	int32_t MaxDeathBoxWorldMarkNumber; // 0x844(0x04)
	struct UActorMarkBase* DeathBoxMarkClass; // 0x848(0x08)
	char pad_850[0x28]; // 0x850(0x28)
	struct USolarCharacterSpringArmComponent* FollowArmClass; // 0x878(0x08)
	struct USolarCharacterCameraComponent* FollowCameraClass; // 0x880(0x08)
	float FreeLookSmoothSpeed; // 0x888(0x04)
	char pad_88C[0x1c]; // 0x88c(0x1c)
	struct USolarCharacterSpringArmComponent* FollowArm; // 0x8a8(0x08)
	struct USolarCharacterCameraComponent* FollowCamera; // 0x8b0(0x08)
	char pad_8B8[0xa8]; // 0x8b8(0xa8)
	struct FString PlayerId; // 0x960(0x10)
	char pad_970[0x18]; // 0x970(0x18)
	float VehicleInteractionDistance; // 0x988(0x04)
	char pad_98C[0x4]; // 0x98c(0x04)
	struct TArray<struct ASolarVehiclePawn*> InteractingVehicles; // 0x990(0x10)
	struct ASolarVehiclePawn* BestInteractingVehicle; // 0x9a0(0x08)
	char pad_9A8[0x60]; // 0x9a8(0x60)
	struct FMulticastInlineDelegate OnTeammateHUDDodgeSet; // 0xa08(0x10)
	struct TMap<struct ASolarCharacter*, int32_t> TeammateCandidates; // 0xa18(0x50)
	bool bIsAlreadyParachuted; // 0xa68(0x01)
	char pad_A69[0x7]; // 0xa69(0x07)
	struct TArray<struct FGameplayHitInfo> WeaponMessageArray; // 0xa70(0x10)
	char pad_A80[0x18]; // 0xa80(0x18)
	struct TArray<struct TWeakObjectPtr<struct AActor>> UniqueActorArray; // 0xa98(0x10)
	float HangUpTime; // 0xaa8(0x04)
	char pad_AAC[0x1c]; // 0xaac(0x1c)
	struct TWeakObjectPtr<struct UUserWidget> DamageTextWidget; // 0xac8(0x08)
	struct TArray<struct FSolarDamageText> SameFrameDamageTextDataCache; // 0xad0(0x10)
	struct FTimerHandle SameFrameDamageTextDataHandle; // 0xae0(0x08)
	char pad_AE8[0xa8]; // 0xae8(0xa8)
	struct FMulticastInlineDelegate OnSpectateInfoRep; // 0xb90(0x10)
	char pad_BA0[0x60]; // 0xba0(0x60)
	struct FSoftClassPath SwitchTargetCameraControlCompClass; // 0xc00(0x18)
	bool bShowCursorWhenSpectateOthers; // 0xc18(0x01)
	char pad_C19[0x3]; // 0xc19(0x03)
	float SpectateNetCamUpdatePositionLimit; // 0xc1c(0x04)
	char pad_C20[0x8]; // 0xc20(0x08)
	struct APlayerController* ScoutPlayerController; // 0xc28(0x08)
	struct AActor* ScoutViewTarget; // 0xc30(0x08)
	struct USolarSwitchTargetCameraControlComp* SolarSwitchTargetCameraControlComp; // 0xc38(0x08)
	char pad_C40[0x8]; // 0xc40(0x08)
	struct TArray<int32_t> UsableJetpacks; // 0xc48(0x10)
	struct TArray<int32_t> UsableTailFlames; // 0xc58(0x10)
	struct TArray<int32_t> AllCharacterSkins; // 0xc68(0x10)
	struct FName PickUpExpItemSound; // 0xc78(0x08)
	struct FString CachedRechamberSound; // 0xc80(0x10)
	char pad_C90[0x3c]; // 0xc90(0x3c)
	struct FName EMPScreenEffectName; // 0xccc(0x08)
	float AntiCheatUploadInterval; // 0xcd4(0x04)
	struct FFixedAntiCheatData FixedAntiCheatData; // 0xcd8(0x1c)
	char pad_CF4[0x84]; // 0xcf4(0x84)
	struct TArray<struct FString> CustomAntiCheatNames; // 0xd78(0x10)
	struct TArray<struct FString> CustomAntiCheatContents; // 0xd88(0x10)
	char pad_D98[0xc0]; // 0xd98(0xc0)

	void WorldMarkWheelYAxis(float Movement); // Function Solarland.SolarPlayerController.WorldMarkWheelYAxis // (Final|Native|Public) // @ game+0x21729f0
	void WorldMarkWheelXAxis(float Movement); // Function Solarland.SolarPlayerController.WorldMarkWheelXAxis // (Final|Native|Public) // @ game+0x2172970
	void WorldMarkDelayExecFunction(); // Function Solarland.SolarPlayerController.WorldMarkDelayExecFunction // (Final|Native|Public) // @ game+0x2172950
	void UseMedicine(); // Function Solarland.SolarPlayerController.UseMedicine // (Final|Native|Public) // @ game+0x2172930
	void UpdateEnableAiPalRate(int32_t Rate); // Function Solarland.SolarPlayerController.UpdateEnableAiPalRate // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UnMarkWorldInLevel(int64_t instanceID); // Function Solarland.SolarPlayerController.UnMarkWorldInLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x21728a0
	void Turn(float Value); // Function Solarland.SolarPlayerController.Turn // (Final|Native|Public) // @ game+0x2172820
	void TryRecordBattlePlayerData(); // Function Solarland.SolarPlayerController.TryRecordBattlePlayerData // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void TryRechargeShield(bool bUseBigRecharger); // Function Solarland.SolarPlayerController.TryRechargeShield // (Native|Public) // @ game+0x2172790
	void TriggerVoiceByType(enum class EPassiveTriggeredVoice VoiceType); // Function Solarland.SolarPlayerController.TriggerVoiceByType // (Final|Native|Public) // @ game+0x2172700
	void TriggerVoiceByNumber(int32_t VoiceIndex); // Function Solarland.SolarPlayerController.TriggerVoiceByNumber // (Final|Native|Public|BlueprintCallable) // @ game+0x2172670
	void ToggleEMPScreenEffect(bool bInVisible); // Function Solarland.SolarPlayerController.ToggleEMPScreenEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x21725e0
	void ToggleCursor(); // Function Solarland.SolarPlayerController.ToggleCursor // (Final|Native|Public|BlueprintCallable) // @ game+0x21725c0
	void TakeOverNextClientSetViewTargetBySwitchTargetComp(bool bRestartBlendEvenIfSameTarget); // Function Solarland.SolarPlayerController.TakeOverNextClientSetViewTargetBySwitchTargetComp // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2172530
	void SwtichVehicleSeatNotification(); // Function Solarland.SolarPlayerController.SwtichVehicleSeatNotification // (Final|Native|Public) // @ game+0x2172510
	void SwitchWeaponByReverseOrder(); // Function Solarland.SolarPlayerController.SwitchWeaponByReverseOrder // (Final|Native|Public) // @ game+0x21724f0
	void SwitchWeaponByOrder(); // Function Solarland.SolarPlayerController.SwitchWeaponByOrder // (Final|Native|Public) // @ game+0x21724d0
	void SwitchSpectatedCharacterInTeam(int32_t PosInTeam); // Function Solarland.SolarPlayerController.SwitchSpectatedCharacterInTeam // (Final|Native|Protected|BlueprintCallable) // @ game+0x2172440
	void SwitchInputBinding(struct FName& InputName, enum class EInputSwitchType SwitchTpye); // Function Solarland.SolarPlayerController.SwitchInputBinding // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2172360
	void StopSpectateCountdown(); // Function Solarland.SolarPlayerController.StopSpectateCountdown // (Final|Native|Public) // @ game+0x2172340
	void StopRecordingAtDS(); // Function Solarland.SolarPlayerController.StopRecordingAtDS // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2172320
	void StartSpectateCountdown(struct FRepCountdownData InCountdownData); // Function Solarland.SolarPlayerController.StartSpectateCountdown // (Final|Native|Public) // @ game+0x2172240
	void StartRecordingAtDS(struct FString Filename, struct FString UploadUrl, enum class ERecordingType ForceRecordingType); // Function Solarland.SolarPlayerController.StartRecordingAtDS // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2172100
	void SolarSlot(int32_t ID); // Function Solarland.SolarPlayerController.SolarSlot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2172070
	void SolarShowPanelUI(int32_t Type); // Function Solarland.SolarPlayerController.SolarShowPanelUI // (Final|Exec|Native|Public) // @ game+0x2171fe0
	void SolarServerNetProfileStop(); // Function Solarland.SolarPlayerController.SolarServerNetProfileStop // (Final|Exec|Native|Public) // @ game+0x2171fc0
	void SolarServerNetProfileStart(); // Function Solarland.SolarPlayerController.SolarServerNetProfileStart // (Final|Exec|Native|Public) // @ game+0x2171fa0
	void SolarOpenUI(struct FString UIID, int32_t RootID); // Function Solarland.SolarPlayerController.SolarOpenUI // (Final|Exec|Native|Public) // @ game+0x2171ec0
	void SolarModule(int32_t ID); // Function Solarland.SolarPlayerController.SolarModule // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2171e30
	void SolarISPC(struct FString _str); // Function Solarland.SolarPlayerController.SolarISPC // (Final|Exec|Native|Public) // @ game+0x2171d40
	void SolarGM_Weapon(struct FString Type, struct FString paramOne, struct FString paramTwo); // Function Solarland.SolarPlayerController.SolarGM_Weapon // (Final|Exec|Native|Public) // @ game+0x2170940
	void SolarGM_UpdateTaskInfo(); // Function Solarland.SolarPlayerController.SolarGM_UpdateTaskInfo // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_TeleportToBotAIServer(uint32_t CtrlIndex); // Function Solarland.SolarPlayerController.SolarGM_TeleportToBotAIServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2171cb0
	void SolarGM_StopRecordingAtDS(); // Function Solarland.SolarPlayerController.SolarGM_StopRecordingAtDS // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_StopBotAIBehaviorTreeServer(bool bStop); // Function Solarland.SolarPlayerController.SolarGM_StopBotAIBehaviorTreeServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2171c20
	void SolarGM_StartShrinkSafeArea(); // Function Solarland.SolarPlayerController.SolarGM_StartShrinkSafeArea // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_StartRecordingAtDS(struct FString Filename, struct FString UploadUrl, enum class ERecordingType ForceRecordingType); // Function Solarland.SolarPlayerController.SolarGM_StartRecordingAtDS // (Final|Exec|Native|Public) // @ game+0x2171ae0
	void SolarGM_SpawnBotAIAtCrosshairByNumServer(int32_t Num, int32_t CharacterId, bool bAsTeammate, int32_t DifficultyLevel); // Function Solarland.SolarPlayerController.SolarGM_SpawnBotAIAtCrosshairByNumServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2171980
	void SolarGM_SpawnBotAIAtCrosshair(int32_t CharacterId, bool bAsTeammate, int32_t DifficultyLevel); // Function Solarland.SolarPlayerController.SolarGM_SpawnBotAIAtCrosshair // (Final|Exec|Native|Public) // @ game+0x2171870
	void SolarGM_SpawnAIAtCrosshairServer(int32_t CharacterId, bool bAsTeammate, int32_t DifficultyLevel); // Function Solarland.SolarPlayerController.SolarGM_SpawnAIAtCrosshairServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2171760
	void SolarGM_ShowRedZoneDamage(bool IsShow); // Function Solarland.SolarPlayerController.SolarGM_ShowRedZoneDamage // (Final|Exec|Native|Public) // @ game+0x1f99610
	void SolarGM_ShowNotice(int32_t NoticeId); // Function Solarland.SolarPlayerController.SolarGM_ShowNotice // (Final|Exec|Native|Public) // @ game+0x15936f0
	void SolarGM_SetTeamID(int32_t InTeamId); // Function Solarland.SolarPlayerController.SolarGM_SetTeamID // (Final|Exec|Native|Public) // @ game+0x15936f0
	void SolarGM_SetStatDataForDebug(); // Function Solarland.SolarPlayerController.SolarGM_SetStatDataForDebug // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_SetSolarPlayerID(struct FString InSolarPlayer); // Function Solarland.SolarPlayerController.SolarGM_SetSolarPlayerID // (Final|Exec|Native|Public) // @ game+0x20a3480
	void SolarGM_SetReconnection(bool IsReconnection); // Function Solarland.SolarPlayerController.SolarGM_SetReconnection // (Final|Exec|Native|Public) // @ game+0x1f99610
	void SolarGM_SetPlayerData(struct FString InPlayerID); // Function Solarland.SolarPlayerController.SolarGM_SetPlayerData // (Final|Exec|Native|Public) // @ game+0x20a3480
	void SolarGM_SetGyroscopeTiltZThresholdSwitch(struct FString bSwitch); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeTiltZThresholdSwitch // (Final|Exec|Native|Public) // @ game+0x20a3480
	void SolarGM_SetGyroscopeTiltZThreshold(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeTiltZThreshold // (Final|Exec|Native|Public) // @ game+0xb28b80
	void SolarGM_SetGyroscopeTiltYThreshold(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeTiltYThreshold // (Final|Exec|Native|Public) // @ game+0xb28b80
	void SolarGM_SetGyroscopeTiltFrameCount(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeTiltFrameCount // (Final|Exec|Native|Public) // @ game+0xb28b80
	void SolarGM_SetGyroscopeRotationRateYThreshold(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeRotationRateYThreshold // (Final|Exec|Native|Public) // @ game+0xb28b80
	void SolarGM_SetGyroscopeRotationRateXThreshold(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeRotationRateXThreshold // (Final|Exec|Native|Public) // @ game+0xb28b80
	void SolarGM_ServerStartShrinkSafeArea(); // Function Solarland.SolarPlayerController.SolarGM_ServerStartShrinkSafeArea // (Net|Native|Event|Public|NetServer) // @ game+0x2171740
	void SolarGM_ServerShowRedZoneDamage(bool IsShow); // Function Solarland.SolarPlayerController.SolarGM_ServerShowRedZoneDamage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x21716b0
	void SolarGM_ServerSetTeamID(int32_t InTeamId); // Function Solarland.SolarPlayerController.SolarGM_ServerSetTeamID // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2171620
	void SolarGM_ServerSetStatDataForDebug(); // Function Solarland.SolarPlayerController.SolarGM_ServerSetStatDataForDebug // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2171600
	void SolarGM_ServerSetSolarPlayerID(struct FString InSolarPlayer); // Function Solarland.SolarPlayerController.SolarGM_ServerSetSolarPlayerID // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2171560
	void SolarGM_ServerSetReconnection(bool IsReconnection); // Function Solarland.SolarPlayerController.SolarGM_ServerSetReconnection // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x21714d0
	void SolarGM_ServerSetPlayerData(struct FString InPlayerID); // Function Solarland.SolarPlayerController.SolarGM_ServerSetPlayerData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2171430
	void SolarGM_ServerMarkVehicleSpawnerInMap(); // Function Solarland.SolarPlayerController.SolarGM_ServerMarkVehicleSpawnerInMap // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2171410
	void SolarGM_ServerDumpAllPlayer(); // Function Solarland.SolarPlayerController.SolarGM_ServerDumpAllPlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x21713f0
	void SolarGM_ServerDebugOffline(); // Function Solarland.SolarPlayerController.SolarGM_ServerDebugOffline // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x21713d0
	void SolarGM_ServerConsoleCommand(struct FString InConsoleCommand); // Function Solarland.SolarPlayerController.SolarGM_ServerConsoleCommand // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x2171330
	void SolarGM_ServerClosePoisonDamage(bool isClose); // Function Solarland.SolarPlayerController.SolarGM_ServerClosePoisonDamage // (Net|Native|Event|Public|NetServer) // @ game+0x21712a0
	void SolarGM_ServerChangeDayLight(int32_t ID); // Function Solarland.SolarPlayerController.SolarGM_ServerChangeDayLight // (Net|Native|Event|Public|NetServer) // @ game+0x2171210
	void SolarGM_ResetZoneBombsFire(); // Function Solarland.SolarPlayerController.SolarGM_ResetZoneBombsFire // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_RedZoneServer(int32_t ZoneId); // Function Solarland.SolarPlayerController.SolarGM_RedZoneServer // (Net|Native|Event|Public|NetServer) // @ game+0x2171180
	void SolarGM_RedZone(int32_t ZoneId); // Function Solarland.SolarPlayerController.SolarGM_RedZone // (Final|Exec|Native|Public) // @ game+0x15936f0
	void SolarGM_PoisonServer(struct FString GMType); // Function Solarland.SolarPlayerController.SolarGM_PoisonServer // (Net|Native|Event|Public|NetServer) // @ game+0x21710e0
	void SolarGM_Poison(struct FString GMType); // Function Solarland.SolarPlayerController.SolarGM_Poison // (Final|Exec|Native|Public) // @ game+0x20a3480
	void SolarGM_PlayerUndetectableByAIServer(int32_t debugValue); // Function Solarland.SolarPlayerController.SolarGM_PlayerUndetectableByAIServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2171050
	void SolarGM_PlayerUndetectableByAI(int32_t debugValue); // Function Solarland.SolarPlayerController.SolarGM_PlayerUndetectableByAI // (Final|Exec|Native|Public) // @ game+0x2170fc0
	void SolarGM_NoviceGuidance(int32_t ActionID, bool bOn); // Function Solarland.SolarPlayerController.SolarGM_NoviceGuidance // (Final|Exec|Native|Public) // @ game+0x2170ef0
	void SolarGM_NotifyPlayerHasCheatByNickName(struct FString NickName); // Function Solarland.SolarPlayerController.SolarGM_NotifyPlayerHasCheatByNickName // (Final|Exec|Native|Public) // @ game+0x20a3480
	void SolarGM_NotifyPlayerHasCheat(struct FString SolarPlayerID); // Function Solarland.SolarPlayerController.SolarGM_NotifyPlayerHasCheat // (Final|Exec|Native|Public) // @ game+0x20a3480
	void SolarGM_KillAllAIServer(bool KillBot); // Function Solarland.SolarPlayerController.SolarGM_KillAllAIServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2170e60
	void SolarGM_KickMeOut(); // Function Solarland.SolarPlayerController.SolarGM_KickMeOut // (Final|Native|Public) // @ game+0x8e9ae0
	void SolarGM_InitTaskInfo(); // Function Solarland.SolarPlayerController.SolarGM_InitTaskInfo // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_GoPreviousHomeCameraMode(); // Function Solarland.SolarPlayerController.SolarGM_GoPreviousHomeCameraMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void SolarGM_GoNextHomeCameraMode(); // Function Solarland.SolarPlayerController.SolarGM_GoNextHomeCameraMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void SolarGM_GoHomeCameraModeByIndex(int32_t Index); // Function Solarland.SolarPlayerController.SolarGM_GoHomeCameraModeByIndex // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x15936f0
	void SolarGM_GMGoSpectatePreviousPlayer(); // Function Solarland.SolarPlayerController.SolarGM_GMGoSpectatePreviousPlayer // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_GMGoSpectatePlayerByIndex(uint32_t Index); // Function Solarland.SolarPlayerController.SolarGM_GMGoSpectatePlayerByIndex // (Final|Exec|Native|Public) // @ game+0x20e3520
	void SolarGM_GMGoSpectateNextPlayer(); // Function Solarland.SolarPlayerController.SolarGM_GMGoSpectateNextPlayer // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_Freelook(bool Open); // Function Solarland.SolarPlayerController.SolarGM_Freelook // (Final|Exec|Native|Public) // @ game+0x1f99610
	void SolarGM_DumpAllPlayer(bool bSendToServer); // Function Solarland.SolarPlayerController.SolarGM_DumpAllPlayer // (Final|Exec|Native|Public) // @ game+0x1f99610
	void SolarGM_DebugOffline(); // Function Solarland.SolarPlayerController.SolarGM_DebugOffline // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_DebugAllAIServer(int32_t debugValue); // Function Solarland.SolarPlayerController.SolarGM_DebugAllAIServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2170dd0
	void SolarGM_DebugAllAI(int32_t debugValue); // Function Solarland.SolarPlayerController.SolarGM_DebugAllAI // (Final|Exec|Native|Public) // @ game+0x15936f0
	void SolarGM_ClosePoisonDamage(bool isClose); // Function Solarland.SolarPlayerController.SolarGM_ClosePoisonDamage // (Final|Exec|Native|Public) // @ game+0x1f99610
	void SolarGM_ClientShowRedZoneDamage(struct FVector bombLocation, struct FVector characterlocation, float Distance, float Damage); // Function Solarland.SolarPlayerController.SolarGM_ClientShowRedZoneDamage // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x2170c30
	void SolarGM_ClientSetPlayerData(struct FString InPlayerID); // Function Solarland.SolarPlayerController.SolarGM_ClientSetPlayerData // (Final|Native|Public) // @ game+0x20a3480
	void SolarGM_ClientMarkVehicleSpawnerInMap(struct TArray<struct FVector> VehicleSpawnerLocations, struct TArray<int32_t> VehicleSpawnerSpawnIds); // Function Solarland.SolarPlayerController.SolarGM_ClientMarkVehicleSpawnerInMap // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2170b30
	void SolarGM_ClientGotoLogin(); // Function Solarland.SolarPlayerController.SolarGM_ClientGotoLogin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SolarGM_ClientDumpAllPlayer(struct FString DumpString); // Function Solarland.SolarPlayerController.SolarGM_ClientDumpAllPlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2170a90
	void SolarGM_Character(struct FString GMType, struct FString Param1, struct FString Param2); // Function Solarland.SolarPlayerController.SolarGM_Character // (Final|Exec|Native|Public) // @ game+0x2170940
	void SolarGM_ChangeVehicleVectorProperty(struct FString InPropertyName, float InX, float InY, float InZ); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleVectorProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x21707d0
	void SolarGM_ChangeVehicleRotatorProperty(struct FString InPropertyName, float InPitch, float InYaw, float InRoll); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleRotatorProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x21707d0
	void SolarGM_ChangeVehicleIntProperty(struct FString InPropertyName, int32_t inInt); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleIntProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x21706f0
	void SolarGM_ChangeVehicleGASAttribute(struct FString InPropertyName, float InValue); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleGASAttribute // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x2170600
	void SolarGM_ChangeVehicleFloatProperty(struct FString InPropertyName, float InFloat); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleFloatProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x2170600
	void SolarGM_ChangeVehicleCurveProperty(struct FString InPropertyName, char InChangeType, float InKey, float InValue); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleCurveProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x2170490
	void SolarGM_ChangeVehicleBoolProperty(struct FString InPropertyName, bool InBool); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleBoolProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20e3440
	void SolarGM_ChangeDayLight(int32_t ID); // Function Solarland.SolarPlayerController.SolarGM_ChangeDayLight // (Final|Exec|Native|Public) // @ game+0x15936f0
	void SolarGM_BattleLua(struct FString CmdName, struct TArray<struct FString>& Params); // Function Solarland.SolarPlayerController.SolarGM_BattleLua // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void SolarGM_Battle(struct FString CmdName, struct TArray<struct FString>& Params); // Function Solarland.SolarPlayerController.SolarGM_Battle // (Final|Exec|Native|Public|HasOutParms) // @ game+0x20e3210
	void SolarGM(struct FString _str); // Function Solarland.SolarPlayerController.SolarGM // (Final|Exec|Native|Public) // @ game+0x20a3480
	void SolarEnergy(int32_t InMode, int32_t ID); // Function Solarland.SolarPlayerController.SolarEnergy // (Final|Exec|Native|Public) // @ game+0x20c3160
	void SolarCloseUI(struct FString UIID); // Function Solarland.SolarPlayerController.SolarCloseUI // (Final|Exec|Native|Public) // @ game+0x21703f0
	void SolarClosePanelUI(int32_t Type); // Function Solarland.SolarPlayerController.SolarClosePanelUI // (Final|Exec|Native|Public) // @ game+0x2170360
	void SolarClientNetProfileStop(); // Function Solarland.SolarPlayerController.SolarClientNetProfileStop // (Final|Exec|Native|Public) // @ game+0x2170340
	void SolarClientNetProfileStart(); // Function Solarland.SolarPlayerController.SolarClientNetProfileStart // (Final|Exec|Native|Public) // @ game+0x2170320
	void ShowBackpackUI(); // Function Solarland.SolarPlayerController.ShowBackpackUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetInputActionSwitch(int32_t ActionID, bool bOn); // Function Solarland.SolarPlayerController.SetInputActionSwitch // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetAllTeammateHUDDodge(bool bDodge); // Function Solarland.SolarPlayerController.SetAllTeammateHUDDodge // (Final|Native|Public|BlueprintCallable) // @ game+0x2170290
	void ServerUpdateTaskInfo(); // Function Solarland.SolarPlayerController.ServerUpdateTaskInfo // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2170270
	void ServerUnforbidRoleAbilitySkillDebugOnly(); // Function Solarland.SolarPlayerController.ServerUnforbidRoleAbilitySkillDebugOnly // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x2170250
	void ServerTriggleScreenshotTask(struct FString TargetPlayerId); // Function Solarland.SolarPlayerController.ServerTriggleScreenshotTask // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x21701b0
	void ServerTeleportTo(struct FVector DestLocation); // Function Solarland.SolarPlayerController.ServerTeleportTo // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x2170130
	void ServerSyncPlayerSelfReport(); // Function Solarland.SolarPlayerController.ServerSyncPlayerSelfReport // (Final|Native|Public) // @ game+0x2170110
	void ServerSwitchSpectatedCharacterInTeam(int32_t PosInTeam); // Function Solarland.SolarPlayerController.ServerSwitchSpectatedCharacterInTeam // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2170080
	void ServerSpawnVehicleWithVehicleID(int32_t VehicleID); // Function Solarland.SolarPlayerController.ServerSpawnVehicleWithVehicleID // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216fff0
	void ServerSpawnVehicle(int32_t SpawnID); // Function Solarland.SolarPlayerController.ServerSpawnVehicle // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216ff60
	void ServerSpawnTreasureBox(int32_t TreasureBoxID); // Function Solarland.SolarPlayerController.ServerSpawnTreasureBox // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216fed0
	void ServerSpawnSolarRadar(struct FString BpPath); // Function Solarland.SolarPlayerController.ServerSpawnSolarRadar // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216fe30
	void ServerSpawnOutcomeContent(int32_t OutcomeID); // Function Solarland.SolarPlayerController.ServerSpawnOutcomeContent // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216fda0
	void ServerSpawnChargingPile(struct FString BpPath); // Function Solarland.SolarPlayerController.ServerSpawnChargingPile // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216fd00
	void ServerSpawnAirship(float Loc_X, float Loc_Y); // Function Solarland.SolarPlayerController.ServerSpawnAirship // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216fc30
	void ServerSpawnAirdrop(int32_t AirdropID); // Function Solarland.SolarPlayerController.ServerSpawnAirdrop // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216fba0
	void ServerSolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed); // Function Solarland.SolarPlayerController.ServerSolarWeaponSpreadForWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216f9b0
	void ServerSolarWeaponReload(int32_t PrimaryAmmoCap, int32_t SecondaryAmmoCap); // Function Solarland.SolarPlayerController.ServerSolarWeaponReload // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216f8e0
	void ServerSolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod); // Function Solarland.SolarPlayerController.ServerSolarWeaponOverload // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216f780
	void ServerSolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead); // Function Solarland.SolarPlayerController.ServerSolarWeaponFiringMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216f5a0
	void ServerSolarSetPlayerValue(struct FString InType, struct FString InValue); // Function Solarland.SolarPlayerController.ServerSolarSetPlayerValue // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216f4a0
	void ServerSolarAmmoSpreadPerBullet(int32_t AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed); // Function Solarland.SolarPlayerController.ServerSolarAmmoSpreadPerBullet // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216f280
	void ServerSolarAmmoRangeSpeedDamage(int32_t AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload); // Function Solarland.SolarPlayerController.ServerSolarAmmoRangeSpeedDamage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216efd0
	void ServerSolarAmmoFiring(int32_t AmmoIndex, int32_t FireCostType, int32_t FireCostPerAttack, int32_t FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval); // Function Solarland.SolarPlayerController.ServerSolarAmmoFiring // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216ed70
	void ServerSolarAmmoBoltAndMag(int32_t AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag); // Function Solarland.SolarPlayerController.ServerSolarAmmoBoltAndMag // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216ebc0
	void ServerSolarAmmoBasicMovement(int32_t AmmoIndex, int32_t TimedExplode, int32_t BounceTimes, float LifeTime, float BaseReloadTime, int32_t TrajectoryType, float CustomValue); // Function Solarland.SolarPlayerController.ServerSolarAmmoBasicMovement // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216e9a0
	void ServerSetRoleAbilitySkillCDDurationDebugOnly(float InCD); // Function Solarland.SolarPlayerController.ServerSetRoleAbilitySkillCDDurationDebugOnly // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x216e910
	void ServerSetPlayerLevel(int32_t InLevel); // Function Solarland.SolarPlayerController.ServerSetPlayerLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216e880
	void ServerSetHangUpBehavior(); // Function Solarland.SolarPlayerController.ServerSetHangUpBehavior // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216e860
	void ServerSetFreeLook(bool bInFreeLook); // Function Solarland.SolarPlayerController.ServerSetFreeLook // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216e7d0
	void ServerSetAppLifetimeState(enum class EAppLifetimeState NewLifeState); // Function Solarland.SolarPlayerController.ServerSetAppLifetimeState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216e750
	void ServerSetActorOwner(struct AActor* TargetActor); // Function Solarland.SolarPlayerController.ServerSetActorOwner // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216e6c0
	void ServerScreenshotProcessing(struct FSShotImageInfo ImageInfo); // Function Solarland.SolarPlayerController.ServerScreenshotProcessing // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216e5a0
	void ServerRPCResetZoneBombsFire(); // Function Solarland.SolarPlayerController.ServerRPCResetZoneBombsFire // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216e430
	void ServerResetUniqueSkillCDDebugOnly(); // Function Solarland.SolarPlayerController.ServerResetUniqueSkillCDDebugOnly // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x216e580
	void ServerRequestTransferSkydivingLeaderTo(char PosInTeam); // Function Solarland.SolarPlayerController.ServerRequestTransferSkydivingLeaderTo // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x216e500
	void ServerRequestSkydivingFollow(struct ASolarPlayerState* LeaderPlayerState); // Function Solarland.SolarPlayerController.ServerRequestSkydivingFollow // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x216e470
	void ServerReqStartReviveItemRecycleCountDownData(); // Function Solarland.SolarPlayerController.ServerReqStartReviveItemRecycleCountDownData // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x216e450
	void ServerPlayerUpgrade(int32_t InLevel); // Function Solarland.SolarPlayerController.ServerPlayerUpgrade // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216e3a0
	void ServerPlayerResumeSettlement(); // Function Solarland.SolarPlayerController.ServerPlayerResumeSettlement // (Final|Native|Public) // @ game+0x216e380
	void ServerPlayerRequestLogout(); // Function Solarland.SolarPlayerController.ServerPlayerRequestLogout // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216e360
	void ServerPlayerOutBySelf(enum class ESCMPlayerOutPath InPath); // Function Solarland.SolarPlayerController.ServerPlayerOutBySelf // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216e2e0
	void ServerPlayerGoToSettlement(); // Function Solarland.SolarPlayerController.ServerPlayerGoToSettlement // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x216e290
	void ServerNotifyShowEmoji(int32_t EmojiID, struct ASolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance); // Function Solarland.SolarPlayerController.ServerNotifyShowEmoji // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216e180
	void ServerNotifyPlayerHasCheatByNickName(struct FString NickName); // Function Solarland.SolarPlayerController.ServerNotifyPlayerHasCheatByNickName // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216e0e0
	void ServerNotifyPlayerHasCheat(struct FString SolarPlayerID); // Function Solarland.SolarPlayerController.ServerNotifyPlayerHasCheat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216e040
	void ServerNetProfile(bool startOrStop); // Function Solarland.SolarPlayerController.ServerNetProfile // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216dfb0
	void ServerInitTaskInfo(); // Function Solarland.SolarPlayerController.ServerInitTaskInfo // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216df90
	void ServerGoSpectatePreviousPlayer(); // Function Solarland.SolarPlayerController.ServerGoSpectatePreviousPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x216df70
	void ServerGoSpectatePlayerByPlayerIdInternal(struct FString SolarPlayerID); // Function Solarland.SolarPlayerController.ServerGoSpectatePlayerByPlayerIdInternal // (Final|Net|Native|Event|Private|NetServer) // @ game+0x216ded0
	void ServerGoSpectatePlayerByPlayerId(struct FString SolarPlayerID); // Function Solarland.SolarPlayerController.ServerGoSpectatePlayerByPlayerId // (Final|Native|Public|BlueprintCallable) // @ game+0x216de30
	void ServerGoSpectatePlayerByIndex_Internal(int32_t Index); // Function Solarland.SolarPlayerController.ServerGoSpectatePlayerByIndex_Internal // (Final|Net|Native|Event|Private|NetServer) // @ game+0x216dda0
	void ServerGoSpectatePlayerByIndex(int32_t Index); // Function Solarland.SolarPlayerController.ServerGoSpectatePlayerByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x216dd10
	void ServerGoSpectateNextPlayer(); // Function Solarland.SolarPlayerController.ServerGoSpectateNextPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x216dcf0
	void ServerGainExperience(int32_t InExp); // Function Solarland.SolarPlayerController.ServerGainExperience // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216dc60
	void ServerEnableCheats(); // Function Solarland.SolarPlayerController.ServerEnableCheats // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216dc40
	void ServerCmd(struct FString Cmd); // Function Solarland.SolarPlayerController.ServerCmd // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216dba0
	void ServerClearUniqueSkillCDDebugOnly(); // Function Solarland.SolarPlayerController.ServerClearUniqueSkillCDDebugOnly // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x216db80
	void ServerChangeVehicleVectorProperty(struct FString InPropertyName, float InX, float InY, float InZ); // Function Solarland.SolarPlayerController.ServerChangeVehicleVectorProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216da20
	void ServerChangeVehicleRotatorProperty(struct FString InPropertyName, float InPitch, float InYaw, float InRoll); // Function Solarland.SolarPlayerController.ServerChangeVehicleRotatorProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216d8c0
	void ServerChangeVehicleIntProperty(struct FString InPropertyName, int32_t InFloat); // Function Solarland.SolarPlayerController.ServerChangeVehicleIntProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216d7e0
	void ServerChangeVehicleGASAttribute(struct FString InPropertyName, float InValue); // Function Solarland.SolarPlayerController.ServerChangeVehicleGASAttribute // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216d6f0
	void ServerChangeVehicleFloatProperty(struct FString InPropertyName, float InFloat); // Function Solarland.SolarPlayerController.ServerChangeVehicleFloatProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216d600
	void ServerChangeVehicleCurveProperty(struct FString InPropertyName, char InChangeType, float InKey, float InValue); // Function Solarland.SolarPlayerController.ServerChangeVehicleCurveProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216d490
	void ServerChangeVehicleBoolProperty(struct FString InPropertyName, bool InBool); // Function Solarland.SolarPlayerController.ServerChangeVehicleBoolProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216d3a0
	void ServerCancelSkydivingFollow(); // Function Solarland.SolarPlayerController.ServerCancelSkydivingFollow // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x216d380
	void SendRepliableMessageServer(int32_t Message); // Function Solarland.SolarPlayerController.SendRepliableMessageServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216d2f0
	void SendRepliableMessageInMsgBucket(struct TArray<int32_t>& MessageIDs); // Function Solarland.SolarPlayerController.SendRepliableMessageInMsgBucket // (Final|Native|Public|HasOutParms) // @ game+0x216d240
	void SendRepliableMessageByMessageID(int32_t& ID); // Function Solarland.SolarPlayerController.SendRepliableMessageByMessageID // (Final|Native|Public|HasOutParms) // @ game+0x216d1b0
	void SendQuickMessageServer(struct FString Message, bool bSound); // Function Solarland.SolarPlayerController.SendQuickMessageServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216d0c0
	void SendQuickMessageNewServer(int32_t VoiceType); // Function Solarland.SolarPlayerController.SendQuickMessageNewServer // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x216d030
	void SendQuickMessageNewClient(struct FString NickName, int32_t VoiceType, int32_t CharID, int32_t SkinId, bool bGender, int32_t PosInTeam, bool bLocalPlayer, bool bShowLocMessage); // Function Solarland.SolarPlayerController.SendQuickMessageNewClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x216cdb0
	void SendQuickMessageClient(struct FString NickName, struct FString Message, bool IsLocalPlayer, bool bSound, int32_t PosInTeam); // Function Solarland.SolarPlayerController.SendQuickMessageClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x216cbe0
	void SendLocalizationTeamMessageServer(int32_t TextID, struct TArray<struct FLocTextParam> TextParams, struct FString SoundEvent); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessageServer // (Net|NetReliableNative|Event|Public|NetServer|Const) // @ game+0x216ca80
	void SendLocalizationTeamMessageNewServer(struct TArray<struct FLocTextParam> TextParams, int32_t SoundID1, int32_t SoundDI2); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessageNewServer // (Net|NetReliableNative|Event|Public|NetServer|Const) // @ game+0x216c930
	void SendLocalizationTeamMessageNewClient(int32_t CharacterId, int32_t SkinId, bool bGender, int32_t SoundID1, struct FString NickName, struct TArray<struct FLocTextParam> TextParams, int32_t PosInTeam, int32_t SoundID2); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessageNewClient // (Net|NetReliableNative|Event|Public|NetClient|Const) // @ game+0x216c680
	void SendLocalizationTeamMessageClient(struct ASolarPlayerState* SenderPS, int32_t TextID, struct TArray<struct FLocTextParam> TextParams, struct FString SoundEvent, int32_t PosInTeam); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessageClient // (Net|NetReliableNative|Event|Public|NetClient|Const) // @ game+0x216c4a0
	void SendLocalizationTeamMessage(int32_t TextID, struct TMap<struct FString, int32_t>& TextParamsId, struct FString SoundEvent1, struct FString SoundEvent2); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessage // (Final|Native|Public|HasOutParms) // @ game+0x216c290
	void SendDamageTextDataNextTick(struct FSolarDamageText& InSolarDamageText); // Function Solarland.SolarPlayerController.SendDamageTextDataNextTick // (Final|Native|Public|HasOutParms) // @ game+0x216c1a0
	void ResetJoyStickControlInput(); // Function Solarland.SolarPlayerController.ResetJoyStickControlInput // (Final|Native|Public|BlueprintCallable) // @ game+0x216c180
	void ResetAllInput(); // Function Solarland.SolarPlayerController.ResetAllInput // (Final|Native|Public|BlueprintCallable) // @ game+0x216c160
	void RequestTransferSkydivingLeaderTo(char PosInTeam); // Function Solarland.SolarPlayerController.RequestTransferSkydivingLeaderTo // (Final|Native|Public|BlueprintCallable) // @ game+0x216c0e0
	void RequestSkydivingFollow(struct ASolarPlayerState* LeaderPlayerState); // Function Solarland.SolarPlayerController.RequestSkydivingFollow // (Final|Native|Public|BlueprintCallable) // @ game+0x216c050
	void RequestNotifyShowEmoji(int32_t EmojiID, struct ASolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance); // Function Solarland.SolarPlayerController.RequestNotifyShowEmoji // (Final|Native|Public) // @ game+0x216bf40
	void RecordSpectateInfoToBI(struct FSpectateReportInfo& SpectateReportInfo); // Function Solarland.SolarPlayerController.RecordSpectateInfoToBI // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void QuickMessageLuaCall(struct FString Message, bool bSound); // Function Solarland.SolarPlayerController.QuickMessageLuaCall // (Final|Native|Public|BlueprintCallable) // @ game+0x216be60
	int32_t QueryStage(); // Function Solarland.SolarPlayerController.QueryStage // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void PushInputModeUIOnly(struct FName Name, bool bShowCursor, struct UWidget* InWidgetToFocus, bool bLockMouseToViewport); // Function Solarland.SolarPlayerController.PushInputModeUIOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x216bd00
	void PushInputModeGameOnly(struct FName Name, bool bShowCursor); // Function Solarland.SolarPlayerController.PushInputModeGameOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x216bc30
	void PushInputModeGameAndUI(struct FName Name, bool bShowCursor, struct UWidget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture); // Function Solarland.SolarPlayerController.PushInputModeGameAndUI // (Final|Native|Public|BlueprintCallable) // @ game+0x216ba70
	void PostInputAction(struct FName ActionName, enum class EInputEvent KeyEvent); // Function Solarland.SolarPlayerController.PostInputAction // (Final|Native|Public|BlueprintCallable) // @ game+0x216b9a0
	void PostAkEventByName(struct FString EventName1, struct FString EventName2); // Function Solarland.SolarPlayerController.PostAkEventByName // (Final|Native|Public|BlueprintCallable) // @ game+0x216b8a0
	void PopInputMode(struct FName Name); // Function Solarland.SolarPlayerController.PopInputMode // (Final|Native|Public|BlueprintCallable) // @ game+0x216b810
	void PlayerGoToSettleMent(); // Function Solarland.SolarPlayerController.PlayerGoToSettleMent // (Final|Native|Public) // @ game+0x216b7d0
	void PlayerGotoLobbyWithLogout(); // Function Solarland.SolarPlayerController.PlayerGotoLobbyWithLogout // (Final|Native|Public) // @ game+0x216b7f0
	void PassiveTriggeredVoice(enum class EPassiveTriggeredVoice VoiceType); // Function Solarland.SolarPlayerController.PassiveTriggeredVoice // (Final|Native|Public) // @ game+0x216b740
	void OnVehiclePitchRotateInputDelegate__DelegateSignature(float InputValue); // DelegateFunction Solarland.SolarPlayerController.OnVehiclePitchRotateInputDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeamNumChangeFun(enum class ESCMDataChangeType ChangeType, int32_t OldValue, int32_t NewValue); // Function Solarland.SolarPlayerController.OnTeamNumChangeFun // (Final|Native|Public) // @ game+0x216b630
	void OnTeammateHUDDodgeSet__DelegateSignature(bool bDodge); // DelegateFunction Solarland.SolarPlayerController.OnTeammateHUDDodgeSet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSuperScaningStart(struct TArray<struct FString>& InScanPlayers); // Function Solarland.SolarPlayerController.OnSuperScaningStart // (Final|Native|Public|HasOutParms) // @ game+0x216b560
	void OnSuperScaningRemovePlayer(struct FString InRemovePlayer); // Function Solarland.SolarPlayerController.OnSuperScaningRemovePlayer // (Final|Native|Public) // @ game+0x216b4c0
	void OnSuperScaningEnd(); // Function Solarland.SolarPlayerController.OnSuperScaningEnd // (Final|Native|Public) // @ game+0x216b4a0
	void OnStopUpdateSpectateInfo(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.SolarPlayerController.OnStopUpdateSpectateInfo // (Final|Native|Protected) // @ game+0x216b410
	void OnSpectateTargetItemsChanged(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.SolarPlayerController.OnSpectateTargetItemsChanged // (Final|Native|Public) // @ game+0x216b380
	void OnSpectateTargetChangedHandler(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* MySpecInfo); // Function Solarland.SolarPlayerController.OnSpectateTargetChangedHandler // (Final|Native|Protected) // @ game+0x216b2b0
	void OnSpectateInfoRep__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarPlayerController.OnSpectateInfoRep__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSkydivingStatusUpdated(struct ASolarPlayerState* SelfPlayerState, bool bInIsSkydiving); // Function Solarland.SolarPlayerController.OnSkydivingStatusUpdated // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnShowGameNotice(int32_t InNoticeID, struct TMap<struct FString, struct FString>& InNoticeParams); // Function Solarland.SolarPlayerController.OnShowGameNotice // (Final|Native|Public|HasOutParms) // @ game+0x216b160
	struct TArray<struct URotationBarMarkWidget*> OnShowActorMarkDelegate__DelegateSignature(struct TArray<struct AActor*> MarkActors); // DelegateFunction Solarland.SolarPlayerController.OnShowActorMarkDelegate__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	void OnSeamlessTravelEnd(); // Function Solarland.SolarPlayerController.OnSeamlessTravelEnd // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x216b140
	void OnScopeAxisInput(float InAxisValue); // Function Solarland.SolarPlayerController.OnScopeAxisInput // (Final|Native|Private) // @ game+0x216b0c0
	void OnReviveSelfTriggered(bool bAppear); // Function Solarland.SolarPlayerController.OnReviveSelfTriggered // (Final|Native|Public|BlueprintCallable) // @ game+0x216b030
	void OnReceiveBattleEnd(); // Function Solarland.SolarPlayerController.OnReceiveBattleEnd // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnPutAwayWeaponPressed(); // Function Solarland.SolarPlayerController.OnPutAwayWeaponPressed // (Final|Native|Public) // @ game+0x216b010
	void OnPlayerStateSpectateInfoRepHandler(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.SolarPlayerController.OnPlayerStateSpectateInfoRepHandler // (Native|Public) // @ game+0x216af80
	void OnPlayerStateRepHandlerForSpectate(enum class EPlayerStateRepType RepType, struct APlayerState* InPlayerState); // Function Solarland.SolarPlayerController.OnPlayerStateRepHandlerForSpectate // (Final|Native|Public) // @ game+0x216aeb0
	void OnPawnReplicated__DelegateSignature(); // DelegateFunction Solarland.SolarPlayerController.OnPawnReplicated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnNotifiedMarkedItemWasPickedUpDelegate__DelegateSignature(int64_t& InItemInstanceId); // DelegateFunction Solarland.SolarPlayerController.OnNotifiedMarkedItemWasPickedUpDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnEnterVoyageDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarPlayerController.OnEnterVoyageDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnEnterLanding(); // Function Solarland.SolarPlayerController.OnEnterLanding // (Native|Public) // @ game+0x216adb0
	void OnCustomizeLevelLoaded(); // Function Solarland.SolarPlayerController.OnCustomizeLevelLoaded // (Final|Native|Public) // @ game+0x216ad90
	void OnCleanActorMarkWithWidgetsDelegate__DelegateSignature(struct TArray<struct URotationBarMarkWidget*> MarkWidgets); // DelegateFunction Solarland.SolarPlayerController.OnCleanActorMarkWithWidgetsDelegate__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	void OnCleanActorMarkWithActorsDelegate__DelegateSignature(struct TArray<struct AActor*> MarkActors); // DelegateFunction Solarland.SolarPlayerController.OnCleanActorMarkWithActorsDelegate__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	void OnCharacterRebirthLua(); // Function Solarland.SolarPlayerController.OnCharacterRebirthLua // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnCharacterDeathLua(); // Function Solarland.SolarPlayerController.OnCharacterDeathLua // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnCatchInputActionDelegate__DelegateSignature(struct FName ActionName, enum class EInputEvent InputEventType); // DelegateFunction Solarland.SolarPlayerController.OnCatchInputActionDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnBeginUpdateSpectateInfo(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.SolarPlayerController.OnBeginUpdateSpectateInfo // (Final|Native|Protected) // @ game+0x216ad00
	void OnBeforeSpectateTargetChange(struct ASolarPlayerState* NewTarget, struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.SolarPlayerController.OnBeforeSpectateTargetChange // (Final|Native|Protected) // @ game+0x216ac30
	void OnAppHasReactivated(); // Function Solarland.SolarPlayerController.OnAppHasReactivated // (Final|Native|Public) // @ game+0x216ac10
	void OnAppHasDeactiveated(); // Function Solarland.SolarPlayerController.OnAppHasDeactiveated // (Final|Native|Public) // @ game+0x216abf0
	void OnActionWheelClosed(); // Function Solarland.SolarPlayerController.OnActionWheelClosed // (Final|Native|Public) // @ game+0x216abd0
	void NotifyMonsterSpawn(); // Function Solarland.SolarPlayerController.NotifyMonsterSpawn // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyCrouchIsLocked(); // Function Solarland.SolarPlayerController.NotifyCrouchIsLocked // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyAppReactivate(); // Function Solarland.SolarPlayerController.NotifyAppReactivate // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyAppHasDeactivate(); // Function Solarland.SolarPlayerController.NotifyAppHasDeactivate // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NofityCustomizeLevelLoaded(); // Function Solarland.SolarPlayerController.NofityCustomizeLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void MarkWorldInLevelLuaCall(struct FWorldMarkData& InWorldMarkedData); // Function Solarland.SolarPlayerController.MarkWorldInLevelLuaCall // (Final|Native|Public|HasOutParms) // @ game+0x216aaa0
	void MarkWorldInLevel(struct FWorldMarkData InWorldMarkedData); // Function Solarland.SolarPlayerController.MarkWorldInLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216a9c0
	void MarkPointInNavMapLuaCall(struct FVector2D& InMarkedPoint); // Function Solarland.SolarPlayerController.MarkPointInNavMapLuaCall // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x216a930
	void MarkPointInNavMap(struct FVector2D InMarkedPoint, bool bFromWorldMark); // Function Solarland.SolarPlayerController.MarkPointInNavMap // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x216a860
	void MarkOnWorldByMinimapPosition(int32_t PosInTeam, struct FVector2D MinimapPos); // Function Solarland.SolarPlayerController.MarkOnWorldByMinimapPosition // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x216a790
	void MarkedAsAppHasReactivated(); // Function Solarland.SolarPlayerController.MarkedAsAppHasReactivated // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216abb0
	void MarkedAsAppHasDeactivated(); // Function Solarland.SolarPlayerController.MarkedAsAppHasDeactivated // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216ab90
	void LuaShowUI(struct FString WidgetPath, struct FString UIName); // Function Solarland.SolarPlayerController.LuaShowUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void LuaCallInputTouch(uint32_t Handle, enum class ETouchType Type, struct FVector2D& TouchLocation); // Function Solarland.SolarPlayerController.LuaCallInputTouch // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x216a670
	void LookUp(float Value); // Function Solarland.SolarPlayerController.LookUp // (Final|Native|Public) // @ game+0x216a5f0
	void LogMarkAndQuickVoice(int32_t Type, int32_t SubType); // Function Solarland.SolarPlayerController.LogMarkAndQuickVoice // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216a520
	void KickMeOutAtDS(struct FString InPlayerID); // Function Solarland.SolarPlayerController.KickMeOutAtDS // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x216a480
	void K2_ShowDamageText(float InDamage, struct FHitResult& InHitResult, struct AActor* InDamageSource, struct AController* InAutonomousController, struct FSolarPointDamageEvent& InPointDamageEvent); // Function Solarland.SolarPlayerController.K2_ShowDamageText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x216a260
	bool IsThirdPersonSpectateCameraMode(); // Function Solarland.SolarPlayerController.IsThirdPersonSpectateCameraMode // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x216a230
	bool IsSpectatingOtherPlayer(); // Function Solarland.SolarPlayerController.IsSpectatingOtherPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x216a200
	bool IsMatching(); // Function Solarland.SolarPlayerController.IsMatching // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool IsHasSkydiveAndEnd(); // Function Solarland.SolarPlayerController.IsHasSkydiveAndEnd // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x216a1d0
	bool IsHasCharacterAndSkin(int32_t CharacterId, int32_t SkinId); // Function Solarland.SolarPlayerController.IsHasCharacterAndSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x216a100
	void InputWorldMarkReleased(); // Function Solarland.SolarPlayerController.InputWorldMarkReleased // (Final|Native|Public) // @ game+0x216a0e0
	void InputWorldMarkPressed(); // Function Solarland.SolarPlayerController.InputWorldMarkPressed // (Final|Native|Public) // @ game+0x216a0c0
	void InputVerticalJetReleased(); // Function Solarland.SolarPlayerController.InputVerticalJetReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x216a0a0
	void InputVerticalJetPressed(); // Function Solarland.SolarPlayerController.InputVerticalJetPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x216a080
	void InputVehicleInteractionReleased(); // Function Solarland.SolarPlayerController.InputVehicleInteractionReleased // (Final|Native|Public) // @ game+0x216a060
	void InputVehicleInteractionPressed(); // Function Solarland.SolarPlayerController.InputVehicleInteractionPressed // (Final|Native|Public) // @ game+0x216a040
	void InputUseMedicineReleased(); // Function Solarland.SolarPlayerController.InputUseMedicineReleased // (Final|Native|Public) // @ game+0x216a020
	void InputUseMedicinePressed(); // Function Solarland.SolarPlayerController.InputUseMedicinePressed // (Final|Native|Public) // @ game+0x216a000
	void InputToggleTertiaryWeapon_Checkbox(); // Function Solarland.SolarPlayerController.InputToggleTertiaryWeapon_Checkbox // (Final|Native|Public) // @ game+0x2169fe0
	void InputToggleSkydivingFollowRouletteTriggered(); // Function Solarland.SolarPlayerController.InputToggleSkydivingFollowRouletteTriggered // (Final|Native|Public|BlueprintCallable) // @ game+0x2169fc0
	void InputToggleSecondaryWeaponReleased(); // Function Solarland.SolarPlayerController.InputToggleSecondaryWeaponReleased // (Final|Native|Public) // @ game+0x2169f80
	void InputToggleSecondaryWeaponPressed(); // Function Solarland.SolarPlayerController.InputToggleSecondaryWeaponPressed // (Final|Native|Public) // @ game+0x2169f60
	void InputToggleSecondaryWeapon_Checkbox(); // Function Solarland.SolarPlayerController.InputToggleSecondaryWeapon_Checkbox // (Final|Native|Public) // @ game+0x2169fa0
	void InputTogglePrimaryWeaponReleased(); // Function Solarland.SolarPlayerController.InputTogglePrimaryWeaponReleased // (Final|Native|Public) // @ game+0x2169f20
	void InputTogglePrimaryWeaponPressed(); // Function Solarland.SolarPlayerController.InputTogglePrimaryWeaponPressed // (Final|Native|Public) // @ game+0x2169f00
	void InputTogglePrimaryWeapon_Checkbox(); // Function Solarland.SolarPlayerController.InputTogglePrimaryWeapon_Checkbox // (Final|Native|Public) // @ game+0x2169f40
	void InputTogglePickupReleased(); // Function Solarland.SolarPlayerController.InputTogglePickupReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x2169ee0
	void InputTogglePickupPressed(); // Function Solarland.SolarPlayerController.InputTogglePickupPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x2169ec0
	bool InputTestPriority3Pressed(); // Function Solarland.SolarPlayerController.InputTestPriority3Pressed // (Final|Native|Public) // @ game+0x20a96a0
	bool InputTestPriority2Pressed(); // Function Solarland.SolarPlayerController.InputTestPriority2Pressed // (Final|Native|Public) // @ game+0x2169e90
	bool InputTestPriority1Released(); // Function Solarland.SolarPlayerController.InputTestPriority1Released // (Final|Native|Public) // @ game+0x20a96a0
	bool InputTestPriority1Pressed(); // Function Solarland.SolarPlayerController.InputTestPriority1Pressed // (Final|Native|Public) // @ game+0x20a96a0
	void InputSwitchToSeatTwoPressed(); // Function Solarland.SolarPlayerController.InputSwitchToSeatTwoPressed // (Final|Native|Public) // @ game+0x2169e70
	void InputSwitchToSeatThreePressed(); // Function Solarland.SolarPlayerController.InputSwitchToSeatThreePressed // (Final|Native|Public) // @ game+0x2169e50
	void InputSwitchToSeatOnePressed(); // Function Solarland.SolarPlayerController.InputSwitchToSeatOnePressed // (Final|Native|Public) // @ game+0x2169e30
	void InputSwitchToSeatFourPressed(); // Function Solarland.SolarPlayerController.InputSwitchToSeatFourPressed // (Final|Native|Public) // @ game+0x2169e10
	void InputSwitchFireModeReleased(); // Function Solarland.SolarPlayerController.InputSwitchFireModeReleased // (Final|Native|Public) // @ game+0x2169df0
	void InputSwitchFireModePressed(); // Function Solarland.SolarPlayerController.InputSwitchFireModePressed // (Final|Native|Public) // @ game+0x2169dd0
	void InputStartRepairVehicleReleased(); // Function Solarland.SolarPlayerController.InputStartRepairVehicleReleased // (Final|Native|Public) // @ game+0x2169db0
	void InputSprintLockStart(); // Function Solarland.SolarPlayerController.InputSprintLockStart // (Final|Native|Public) // @ game+0x21698a0
	void InputSprintFreeTerminate(); // Function Solarland.SolarPlayerController.InputSprintFreeTerminate // (Final|Native|Public) // @ game+0x2169d90
	void InputSprintFreeStart(); // Function Solarland.SolarPlayerController.InputSprintFreeStart // (Final|Native|Public) // @ game+0x2169d70
	void InputSprintFreeReleasedOnPC(); // Function Solarland.SolarPlayerController.InputSprintFreeReleasedOnPC // (Final|Native|Public) // @ game+0x2169d50
	void InputSprintFreePressedOnPC(); // Function Solarland.SolarPlayerController.InputSprintFreePressedOnPC // (Final|Native|Public) // @ game+0x2169d30
	void InputSkydivingFollowRouletteSelect4(); // Function Solarland.SolarPlayerController.InputSkydivingFollowRouletteSelect4 // (Final|Native|Public) // @ game+0x2169c80
	void InputSkydivingFollowRouletteSelect3(); // Function Solarland.SolarPlayerController.InputSkydivingFollowRouletteSelect3 // (Final|Native|Public) // @ game+0x2169c60
	void InputSkydivingFollowRouletteSelect2(); // Function Solarland.SolarPlayerController.InputSkydivingFollowRouletteSelect2 // (Final|Native|Public) // @ game+0x2169c40
	void InputSkydivingFollowRouletteSelect1(); // Function Solarland.SolarPlayerController.InputSkydivingFollowRouletteSelect1 // (Final|Native|Public) // @ game+0x2169c20
	void InputSkydivingFollowRouletteSelect(int32_t PosInTeam); // Function Solarland.SolarPlayerController.InputSkydivingFollowRouletteSelect // (Final|Native|Public|BlueprintCallable) // @ game+0x2169ca0
	void InputShieldUpgradeReleased(); // Function Solarland.SolarPlayerController.InputShieldUpgradeReleased // (Final|Native|Public) // @ game+0x2169c00
	void InputShieldUpgradePressed(); // Function Solarland.SolarPlayerController.InputShieldUpgradePressed // (Final|Native|Public) // @ game+0x2169be0
	void InputShieldUpgradeCancelReleased(); // Function Solarland.SolarPlayerController.InputShieldUpgradeCancelReleased // (Final|Native|Public) // @ game+0x2169bc0
	void InputShieldUpgradeCancelPressed(); // Function Solarland.SolarPlayerController.InputShieldUpgradeCancelPressed // (Final|Native|Public) // @ game+0x2169ba0
	void InputRightMouseButtonReleased(); // Function Solarland.SolarPlayerController.InputRightMouseButtonReleased // (Final|Native|Public) // @ game+0x21697a0
	void InputRightMouseButtonPressed(); // Function Solarland.SolarPlayerController.InputRightMouseButtonPressed // (Final|Native|Public) // @ game+0x2169b80
	void InputReviveSelfReleased(); // Function Solarland.SolarPlayerController.InputReviveSelfReleased // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void InputReloadReleased(); // Function Solarland.SolarPlayerController.InputReloadReleased // (Final|Native|Public) // @ game+0x2169b60
	void InputReloadPressed(); // Function Solarland.SolarPlayerController.InputReloadPressed // (Final|Native|Public) // @ game+0x2169b40
	void InputRechargeShieldReleased(); // Function Solarland.SolarPlayerController.InputRechargeShieldReleased // (Final|Native|Public) // @ game+0x21694e0
	void InputRechargeShieldPressed(); // Function Solarland.SolarPlayerController.InputRechargeShieldPressed // (Final|Native|Public) // @ game+0x2169b20
	void InputQuickAdsReleased(); // Function Solarland.SolarPlayerController.InputQuickAdsReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x2169b00
	void InputQuickAdsPressed(); // Function Solarland.SolarPlayerController.InputQuickAdsPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x2169ae0
	void InputPSTouchpadButton(float InValueX); // Function Solarland.SolarPlayerController.InputPSTouchpadButton // (Final|Native|Public) // @ game+0x2169a20
	void InputPickupReleased(); // Function Solarland.SolarPlayerController.InputPickupReleased // (Final|Native|Public) // @ game+0x2169ac0
	void InputPickupPressed(); // Function Solarland.SolarPlayerController.InputPickupPressed // (Final|Native|Public) // @ game+0x2169aa0
	void InputMoveRight(float InValueY); // Function Solarland.SolarPlayerController.InputMoveRight // (Final|Native|Public) // @ game+0x21699a0
	void InputMovementYReceived(float InValueY); // Function Solarland.SolarPlayerController.InputMovementYReceived // (Final|Native|Public) // @ game+0x21699a0
	void InputMovementXReceived(float InValueX); // Function Solarland.SolarPlayerController.InputMovementXReceived // (Final|Native|Public) // @ game+0x2169920
	void InputMoveForward(float InValueX); // Function Solarland.SolarPlayerController.InputMoveForward // (Final|Native|Public) // @ game+0x2169920
	void InputMapPressed(); // Function Solarland.SolarPlayerController.InputMapPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x2169900
	void InputLeftFireReleased(); // Function Solarland.SolarPlayerController.InputLeftFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21698e0
	void InputLeftFirePressed(); // Function Solarland.SolarPlayerController.InputLeftFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21698c0
	void InputKeepSprintPressed(); // Function Solarland.SolarPlayerController.InputKeepSprintPressed // (Final|Native|Public) // @ game+0x21698a0
	void InputJumpReleased(); // Function Solarland.SolarPlayerController.InputJumpReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x2169880
	void InputJumpPressed(); // Function Solarland.SolarPlayerController.InputJumpPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x2169860
	void InputItemActionWheelReleased(); // Function Solarland.SolarPlayerController.InputItemActionWheelReleased // (Final|Native|Public) // @ game+0x2169840
	void InputItemActionWheelPressed(); // Function Solarland.SolarPlayerController.InputItemActionWheelPressed // (Final|Native|Public) // @ game+0x2169820
	void InputInteractPressed(); // Function Solarland.SolarPlayerController.InputInteractPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x2169800
	void InputHorizontalJetReleased(); // Function Solarland.SolarPlayerController.InputHorizontalJetReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21697e0
	void InputHorizontalJetPressed(); // Function Solarland.SolarPlayerController.InputHorizontalJetPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21697c0
	void InputGunsightReleased(); // Function Solarland.SolarPlayerController.InputGunsightReleased // (Final|Native|Public) // @ game+0x21697a0
	void InputGunsightPressed(); // Function Solarland.SolarPlayerController.InputGunsightPressed // (Final|Native|Public) // @ game+0x2169780
	void InputGetOnVehicleReleased(); // Function Solarland.SolarPlayerController.InputGetOnVehicleReleased // (Final|Native|Public) // @ game+0x2169760
	void InputGetOffVehicleReleased(); // Function Solarland.SolarPlayerController.InputGetOffVehicleReleased // (Final|Native|Public) // @ game+0x2169740
	void InputFreeLookReleased(); // Function Solarland.SolarPlayerController.InputFreeLookReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x2169720
	void InputFreeLookPressed(); // Function Solarland.SolarPlayerController.InputFreeLookPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x2169700
	void InputFireReleased(); // Function Solarland.SolarPlayerController.InputFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21696e0
	void InputFirePressed(); // Function Solarland.SolarPlayerController.InputFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21696c0
	void InputEquip2Released(); // Function Solarland.SolarPlayerController.InputEquip2Released // (Final|Native|Public) // @ game+0x21696a0
	void InputEquip2Pressed(); // Function Solarland.SolarPlayerController.InputEquip2Pressed // (Final|Native|Public) // @ game+0x2169680
	void InputEquip1Released(); // Function Solarland.SolarPlayerController.InputEquip1Released // (Final|Native|Public) // @ game+0x2169660
	void InputEquip1Pressed(); // Function Solarland.SolarPlayerController.InputEquip1Pressed // (Final|Native|Public) // @ game+0x2169640
	void InputEmoteActionWheelReleased(); // Function Solarland.SolarPlayerController.InputEmoteActionWheelReleased // (Final|Native|Public) // @ game+0x2169620
	void InputEmoteActionWheelPressed(); // Function Solarland.SolarPlayerController.InputEmoteActionWheelPressed // (Final|Native|Public) // @ game+0x2169600
	void InputEjectReleased(); // Function Solarland.SolarPlayerController.InputEjectReleased // (Final|Native|Public) // @ game+0x21695e0
	void InputEjectPressed(); // Function Solarland.SolarPlayerController.InputEjectPressed // (Final|Native|Public) // @ game+0x21695c0
	void InputDriveVehicleReleased(); // Function Solarland.SolarPlayerController.InputDriveVehicleReleased // (Final|Native|Public) // @ game+0x21695a0
	void InputCrouchReleased(); // Function Solarland.SolarPlayerController.InputCrouchReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x2169580
	void InputCrouchPressed(); // Function Solarland.SolarPlayerController.InputCrouchPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x2169560
	void InputCancelVehicleAbilityReleased(); // Function Solarland.SolarPlayerController.InputCancelVehicleAbilityReleased // (Final|Native|Public) // @ game+0x2169540
	void InputCancelSkydivingFollowingTriggered(); // Function Solarland.SolarPlayerController.InputCancelSkydivingFollowingTriggered // (Final|Native|Public|BlueprintCallable) // @ game+0x2169520
	void InputBuilding(); // Function Solarland.SolarPlayerController.InputBuilding // (Final|Native|Public) // @ game+0x2169500
	void InputBigRechargeShieldReleased(); // Function Solarland.SolarPlayerController.InputBigRechargeShieldReleased // (Final|Native|Public) // @ game+0x21694e0
	void InputBigRechargeShieldPressed(); // Function Solarland.SolarPlayerController.InputBigRechargeShieldPressed // (Final|Native|Public) // @ game+0x21694c0
	void InputBackpackReleased(); // Function Solarland.SolarPlayerController.InputBackpackReleased // (Final|Native|Public) // @ game+0x21694a0
	void InputBackpackPressed(); // Function Solarland.SolarPlayerController.InputBackpackPressed // (Final|Native|Public) // @ game+0x2169480
	void InputAltFireReleased(); // Function Solarland.SolarPlayerController.InputAltFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x2169460
	void InputAltFirePressed(); // Function Solarland.SolarPlayerController.InputAltFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x2169440
	void InputActiveVehicleSecondAbilityReleased(); // Function Solarland.SolarPlayerController.InputActiveVehicleSecondAbilityReleased // (Final|Native|Public) // @ game+0x2169420
	void InputActiveVehicleSecondAbilityPressed(); // Function Solarland.SolarPlayerController.InputActiveVehicleSecondAbilityPressed // (Final|Native|Public) // @ game+0x2169340
	void InputActiveVehicleFirstAbilityReleased(); // Function Solarland.SolarPlayerController.InputActiveVehicleFirstAbilityReleased // (Final|Native|Public) // @ game+0x2169400
	void InputActiveVehicleFirstAbilityPressed(); // Function Solarland.SolarPlayerController.InputActiveVehicleFirstAbilityPressed // (Final|Native|Public) // @ game+0x2169300
	void InputActionWheelPreviousPage(); // Function Solarland.SolarPlayerController.InputActionWheelPreviousPage // (Final|Native|Public) // @ game+0x21693e0
	void InputActionWheelNextPage(); // Function Solarland.SolarPlayerController.InputActionWheelNextPage // (Final|Native|Public) // @ game+0x21693c0
	void InputActionWheelExec(); // Function Solarland.SolarPlayerController.InputActionWheelExec // (Final|Native|Public) // @ game+0x21693a0
	void InputActionWheelCancel(); // Function Solarland.SolarPlayerController.InputActionWheelCancel // (Final|Native|Public) // @ game+0x2169380
	void InputActionSecondaryReleased(); // Function Solarland.SolarPlayerController.InputActionSecondaryReleased // (Final|Native|Public) // @ game+0x2169360
	void InputActionSecondaryPressed(); // Function Solarland.SolarPlayerController.InputActionSecondaryPressed // (Final|Native|Public) // @ game+0x2169340
	void InputActionPrimaryReleased(); // Function Solarland.SolarPlayerController.InputActionPrimaryReleased // (Final|Native|Public) // @ game+0x2169320
	void InputActionPrimaryPressed(); // Function Solarland.SolarPlayerController.InputActionPrimaryPressed // (Final|Native|Public) // @ game+0x2169300
	bool IfSolarCharacterIsDriver(); // Function Solarland.SolarPlayerController.IfSolarCharacterIsDriver // (Final|Native|Public) // @ game+0x21692d0
	bool HasSkin(int32_t InSkinID); // Function Solarland.SolarPlayerController.HasSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x2169230
	void HandleBeginSpectateRequest(); // Function Solarland.SolarPlayerController.HandleBeginSpectateRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x2169210
	void GyroscopeTilt(struct FVector Tilt); // Function Solarland.SolarPlayerController.GyroscopeTilt // (Final|Native|Public|HasDefaults) // @ game+0x2169180
	void GyroscopeRotationRate(struct FVector RotationRate); // Function Solarland.SolarPlayerController.GyroscopeRotationRate // (Final|Native|Public|HasDefaults) // @ game+0x21690f0
	struct ASolarCharacter* GetViewportFocusedCharacter(bool bReturnPossessedCharacterIfSpectateNull); // Function Solarland.SolarPlayerController.GetViewportFocusedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2169050
	struct FVector2D GetViewportCenter(); // Function Solarland.SolarPlayerController.GetViewportCenter // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2169010
	struct ASolarPlayerState* GetSpectateTargetPlayerState(); // Function Solarland.SolarPlayerController.GetSpectateTargetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168fb0
	struct ASolarSpectateInfo* GetSpectateInfo(); // Function Solarland.SolarPlayerController.GetSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168f80
	struct ASolarCharacter* GetSpectatedCharacter(); // Function Solarland.SolarPlayerController.GetSpectatedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168fe0
	struct ASolarPlayerState* GetSolarViewPlayerState(); // Function Solarland.SolarPlayerController.GetSolarViewPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168f50
	struct ASolarPlayerState* GetSolarPlayerState(); // Function Solarland.SolarPlayerController.GetSolarPlayerState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168f10
	struct ASolarCharacter* GetSolarCharacter(); // Function Solarland.SolarPlayerController.GetSolarCharacter // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168ed0
	enum class EPlayerNetStateInGame GetPlayNetStateInGame(); // Function Solarland.SolarPlayerController.GetPlayNetStateInGame // (Final|Native|Public) // @ game+0x2168c00
	struct FRotator GetPlayerViewRotation(bool bWithoutCameraModifiers, bool bWithRotationInput); // Function Solarland.SolarPlayerController.GetPlayerViewRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168de0
	struct FVector GetPlayerViewLocation(bool bWithoutCameraModifiers, bool bWithRotationInput); // Function Solarland.SolarPlayerController.GetPlayerViewLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168cf0
	struct UPlayerStatisticsData* GetPlayerStatData(); // Function Solarland.SolarPlayerController.GetPlayerStatData // (Final|Native|Public) // @ game+0x2168cc0
	struct FString GetPlayerID(); // Function Solarland.SolarPlayerController.GetPlayerID // (Native|Public|Const) // @ game+0x2168c30
	struct FString GetNoticeLocalText(int32_t InNoticeID, struct TMap<struct FString, struct FString>& InNoticeParams); // Function Solarland.SolarPlayerController.GetNoticeLocalText // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	char GetMyTeamID(); // Function Solarland.SolarPlayerController.GetMyTeamID // (Native|Public|Const) // @ game+0x2168bc0
	char GetMyPosInTeam(); // Function Solarland.SolarPlayerController.GetMyPosInTeam // (Final|Native|Public|Const) // @ game+0x2168b90
	struct FVector2D GetMyMarkedPointInNavMap(); // Function Solarland.SolarPlayerController.GetMyMarkedPointInNavMap // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168b50
	int32_t GetMultiKillNum(); // Function Solarland.SolarPlayerController.GetMultiKillNum // (Final|Native|Public|Const) // @ game+0x2168b20
	int32_t GetKillNum(); // Function Solarland.SolarPlayerController.GetKillNum // (Final|Native|Public|Const) // @ game+0x2168ac0
	int32_t GetKillingSpreesNum(); // Function Solarland.SolarPlayerController.GetKillingSpreesNum // (Final|Native|Public|Const) // @ game+0x2168af0
	bool GetIsDropAndPickUpItemOrWeaponSwitchOnValue(); // Function Solarland.SolarPlayerController.GetIsDropAndPickUpItemOrWeaponSwitchOnValue // (Final|Native|Public) // @ game+0x2168a90
	struct USolarInputModePolicyComponent* GetInputModePolicyComp(); // Function Solarland.SolarPlayerController.GetInputModePolicyComp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168a70
	struct FSolarInputModeDataBase GetInputMode(struct FName Name, enum class ESolarInputMode& OutInputMode, bool& bFound); // Function Solarland.SolarPlayerController.GetInputMode // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168940
	struct USolarCameraComponent* GetCurrentCameraComponent(); // Function Solarland.SolarPlayerController.GetCurrentCameraComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21687b0
	void GetControlledVehiclePropertyContainer(struct TArray<struct UObject*>& OutObjects); // Function Solarland.SolarPlayerController.GetControlledVehiclePropertyContainer // (Final|Native|Public|HasOutParms) // @ game+0x2168700
	struct FRotator GetCharacterViewRotation(); // Function Solarland.SolarPlayerController.GetCharacterViewRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x21686c0
	struct FRotator GetCameraRotation(); // Function Solarland.SolarPlayerController.GetCameraRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168670
	struct FVector GetCameraLocation(); // Function Solarland.SolarPlayerController.GetCameraLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168620
	struct ASolarCharacter* GetCameraFocusedCharacter(); // Function Solarland.SolarPlayerController.GetCameraFocusedCharacter // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21685f0
	float GetCameraDefaultFOVAngle(); // Function Solarland.SolarPlayerController.GetCameraDefaultFOVAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21685c0
	float GetCameraCurrentFOVAngle(); // Function Solarland.SolarPlayerController.GetCameraCurrentFOVAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168590
	struct USolarCameraComponent* GetActiveCamera(); // Function Solarland.SolarPlayerController.GetActiveCamera // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2168560
	void ForceCompleteClientBlendToSpectateTarget(); // Function Solarland.SolarPlayerController.ForceCompleteClientBlendToSpectateTarget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2168540
	void ExcludeDifferentTeam(int32_t TeamID); // Function Solarland.SolarPlayerController.ExcludeDifferentTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x21684b0
	void EndOBCurrentBattle(); // Function Solarland.SolarPlayerController.EndOBCurrentBattle // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x2168490
	void DropPassengerNotification(); // Function Solarland.SolarPlayerController.DropPassengerNotification // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2168470
	void DestroyCharacterCorpse(); // Function Solarland.SolarPlayerController.DestroyCharacterCorpse // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2168450
	void DebugUpdateTask(); // Function Solarland.SolarPlayerController.DebugUpdateTask // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void DebugSetPlayerData(); // Function Solarland.SolarPlayerController.DebugSetPlayerData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void DebugInitTask(); // Function Solarland.SolarPlayerController.DebugInitTask // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void CustomModeShowNotice(int32_t InType, int32_t InNoticeID, struct UObject* InClass, float InTime, struct FString InText, struct UObject* InIcon, int32_t InNoticeColor); // Function Solarland.SolarPlayerController.CustomModeShowNotice // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void CustomAntiCheatDataExport(struct TArray<struct FString>& DataName, struct TArray<struct FString>& DataContent); // Function Solarland.SolarPlayerController.CustomAntiCheatDataExport // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void ClientSyncPlayerSelfReport(struct FSolarPlayerReport SelfReport, struct FSolarGameModeInfo GameInfo); // Function Solarland.SolarPlayerController.ClientSyncPlayerSelfReport // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2168350
	void ClientStartReviveItemRecycleCountDown(int32_t CurrentTime, int32_t DurationTime); // Function Solarland.SolarPlayerController.ClientStartReviveItemRecycleCountDown // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x2168280
	void ClientShowUI(struct FString WidgetPath, struct FString UIName); // Function Solarland.SolarPlayerController.ClientShowUI // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2168180
	void ClientShowDiePage(); // Function Solarland.SolarPlayerController.ClientShowDiePage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2168160
	void ClientScreenshotTask(struct FScreenshotSetting Setting); // Function Solarland.SolarPlayerController.ClientScreenshotTask // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x21680b0
	void ClientReviveWillBeDisabledHint(int32_t Duration); // Function Solarland.SolarPlayerController.ClientReviveWillBeDisabledHint // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x2168020
	void ClientReviveBeDisabledHint(); // Function Solarland.SolarPlayerController.ClientReviveBeDisabledHint // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x2168000
	void ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving(struct ASolarPlayerState* NewLeaderPlayerState, struct ASolarPlayerState* OldLeaderPlayerState); // Function Solarland.SolarPlayerController.ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving // (Final|Net|Native|Event|Private|NetClient) // @ game+0x2167f30
	void ClientReplacePlayerKillEffect(struct AActor* InSource, struct AActor* InTarget); // Function Solarland.SolarPlayerController.ClientReplacePlayerKillEffect // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2167e60
	void ClientReceviceDamageText(struct TArray<struct FSolarDamageText> InSolarDamageTextDatas); // Function Solarland.SolarPlayerController.ClientReceviceDamageText // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2167dc0
	void ClientRaiseScreenshotJob(enum class EShotMomentFlag ShotMoment); // Function Solarland.SolarPlayerController.ClientRaiseScreenshotJob // (Net|Native|Event|Public|NetClient) // @ game+0x2167d40
	void ClientPlayerGoToSettlement(struct TArray<struct FSolarPlayerReport> Reports, struct FSolarGameModeInfo GameInfo, struct TArray<int32_t> InSettlementPageIndexs, bool IsCustomRoom); // Function Solarland.SolarPlayerController.ClientPlayerGoToSettlement // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2167b80
	void ClientNotifyShowEmoji(int32_t EmojiID, struct ASolarCharacter* UseEmojiCharacter); // Function Solarland.SolarPlayerController.ClientNotifyShowEmoji // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2167ab0
	void ClientNotifyCheatedPlayer(struct FText OutReason); // Function Solarland.SolarPlayerController.ClientNotifyCheatedPlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x21679f0
	void ClientNotifyAbnormalPlayer(struct FText OutReason); // Function Solarland.SolarPlayerController.ClientNotifyAbnormalPlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2167930
	void ClientEnableAiPalComponent(int32_t Rate); // Function Solarland.SolarPlayerController.ClientEnableAiPalComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x21678a0
	void ClientDoCharacterOperation(struct FCharacterOperationEvent ChOperationEvt); // Function Solarland.SolarPlayerController.ClientDoCharacterOperation // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2167810
	void ClientCloseUI(struct FString UIName); // Function Solarland.SolarPlayerController.ClientCloseUI // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2167770
	void ClientClearAudioListenerOverride(); // Function Solarland.SolarPlayerController.ClientClearAudioListenerOverride // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2167750
	void ClientCharacterIsDead(); // Function Solarland.SolarPlayerController.ClientCharacterIsDead // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0x2167700
	void ClientBeginOBCurrentBattleInternal(); // Function Solarland.SolarPlayerController.ClientBeginOBCurrentBattleInternal // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x21676e0
	void ClearMarkedPointInNavMapLuaCall(); // Function Solarland.SolarPlayerController.ClearMarkedPointInNavMapLuaCall // (Final|Native|Public) // @ game+0x21676c0
	void ClearMarkedPointInNavMap(); // Function Solarland.SolarPlayerController.ClearMarkedPointInNavMap // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x21676a0
	void ChangeVehicleVectorPropertyInternal(struct FString InPropertyName, float InX, float InY, float InZ); // Function Solarland.SolarPlayerController.ChangeVehicleVectorPropertyInternal // (Final|Native|Public) // @ game+0x2167530
	void ChangeVehicleRotatorPropertyInternal(struct FString InPropertyName, float InPitch, float InYaw, float InRoll); // Function Solarland.SolarPlayerController.ChangeVehicleRotatorPropertyInternal // (Final|Native|Public) // @ game+0x2167530
	void ChangeVehicleIntPropertyInternal(struct FString InPropertyName, int32_t InFloat); // Function Solarland.SolarPlayerController.ChangeVehicleIntPropertyInternal // (Final|Native|Public) // @ game+0x2167450
	void ChangeVehicleFloatPropertyInternal(struct FString InPropertyName, float InFloat); // Function Solarland.SolarPlayerController.ChangeVehicleFloatPropertyInternal // (Final|Native|Public) // @ game+0x2167360
	void ChangeVehicleCurvePropertyInternal(struct FString InPropertyName, char InChangeType, float InKey, float InValue); // Function Solarland.SolarPlayerController.ChangeVehicleCurvePropertyInternal // (Final|Native|Public) // @ game+0x21671f0
	void ChangeVehicleBoolPropertyInternal(struct FString InPropertyName, bool InBool); // Function Solarland.SolarPlayerController.ChangeVehicleBoolPropertyInternal // (Final|Native|Public) // @ game+0x2167110
	bool CanWorldMark(); // Function Solarland.SolarPlayerController.CanWorldMark // (Final|Native|Public) // @ game+0x21670c0
	bool CanSolarCharacterLaunchJetPack(); // Function Solarland.SolarPlayerController.CanSolarCharacterLaunchJetPack // (Final|Native|Public) // @ game+0x2167090
	bool CanSolarCharacterInput(); // Function Solarland.SolarPlayerController.CanSolarCharacterInput // (Final|Native|Public) // @ game+0x2167060
	bool CanSolarCharacterCrouch(); // Function Solarland.SolarPlayerController.CanSolarCharacterCrouch // (Final|Native|Public) // @ game+0x2167030
	void CancelSkydivingFollow(); // Function Solarland.SolarPlayerController.CancelSkydivingFollow // (Final|Native|Public|BlueprintCallable) // @ game+0x21670f0
	void BuildSkydivingFollowOnLeavingTeam(bool bIgnoreNotification); // Function Solarland.SolarPlayerController.BuildSkydivingFollowOnLeavingTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x2166fa0
	void BuildSkydivingFollowOnEnteringTeam(); // Function Solarland.SolarPlayerController.BuildSkydivingFollowOnEnteringTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x2166f80
	void BindDelegatesDependGameState(); // Function Solarland.SolarPlayerController.BindDelegatesDependGameState // (Final|Native|Public|BlueprintCallable) // @ game+0x2166f60
	void BeNotifiedMarkedItemWasPickedUp(int64_t InItemInstanceId); // Function Solarland.SolarPlayerController.BeNotifiedMarkedItemWasPickedUp // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2166eb0
	void BeginOBCurrentBattle(); // Function Solarland.SolarPlayerController.BeginOBCurrentBattle // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x2166f40
	void BackToLobby(); // Function Solarland.SolarPlayerController.BackToLobby // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2166e90
	void AssembleCustomAntiCheatData(struct ASolarWeapon* ActiveWeapon, struct ASolarVehiclePawn* BoardedVehicle); // Function Solarland.SolarPlayerController.AssembleCustomAntiCheatData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void AntiCheatDataSchedulerUpload(struct TArray<struct FString> DataName, struct TArray<struct FString> DataContent, struct FFixedAntiCheatData FixedData); // Function Solarland.SolarPlayerController.AntiCheatDataSchedulerUpload // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2166cd0
	void AddTeammateCandidate(struct ASolarCharacter* Candidate, int32_t TeamID); // Function Solarland.SolarPlayerController.AddTeammateCandidate // (Final|Native|Public|BlueprintCallable) // @ game+0x2166c00
};

// Class Solarland.SCMPlayerController
// Size: 0xe60 (Inherited: 0xe58)
struct ASCMPlayerController : ASolarPlayerController {
	struct USCMPlayerRPCComponent* RpcComponent; // 0xe58(0x08)

	void ServerHandlePlayerLevelLoaded(struct FString LevelName); // Function Solarland.SCMPlayerController.ServerHandlePlayerLevelLoaded // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x203c560
	void RequestUpdataDataManager(); // Function Solarland.SCMPlayerController.RequestUpdataDataManager // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x203c4b0
};

// Class Solarland.SCMPlayerRPCComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USCMPlayerRPCComponent : UActorComponent {

	void ReceivedLevelLoaded(struct FString LevelName); // Function Solarland.SCMPlayerRPCComponent.ReceivedLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivedCharacter(); // Function Solarland.SCMPlayerRPCComponent.ReceivedCharacter // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivedBeginLevelLoad(struct FString LevelName); // Function Solarland.SCMPlayerRPCComponent.ReceivedBeginLevelLoad // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SCMPlayerStart
// Size: 0x2b8 (Inherited: 0x258)
struct ASCMPlayerStart : APlayerStart {
	float Distance; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)
	struct FString Side; // 0x260(0x10)
	struct FString Job; // 0x270(0x10)
	struct FString ElementID; // 0x280(0x10)
	enum class ESCMMapElementType Type; // 0x290(0x01)
	enum class ESCMMapElementStateType State; // 0x291(0x01)
	enum class ESCMMapElementVisibilityType Visibility; // 0x292(0x01)
	char pad_293[0x1]; // 0x293(0x01)
	struct FName ElementName; // 0x294(0x08)
	char pad_29C[0x4]; // 0x29c(0x04)
	struct TArray<struct FVector> PlayerLocations; // 0x2a0(0x10)
	char pad_2B0[0x8]; // 0x2b0(0x08)

	enum class ESCMMapElementVisibilityType SetElementVisibility(enum class ESCMMapElementVisibilityType NewType); // Function Solarland.SCMPlayerStart.SetElementVisibility // (Native|Public|BlueprintCallable) // @ game+0x203c7b0
	enum class ESCMMapElementStateType SetElementState(enum class ESCMMapElementStateType NewState); // Function Solarland.SCMPlayerStart.SetElementState // (Native|Public|BlueprintCallable) // @ game+0x203c690
	void OnElementVisibilityChanged(enum class ESCMMapElementVisibilityType CurrentVisibility); // Function Solarland.SCMPlayerStart.OnElementVisibilityChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnElementStateChanged(enum class ESCMMapElementStateType CurrentState); // Function Solarland.SCMPlayerStart.OnElementStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarPlayerState
// Size: 0xa98 (Inherited: 0x330)
struct ASolarPlayerState : APlayerState {
	struct FMulticastInlineDelegate OnTeammatePlayerStateRepDelegate; // 0x330(0x10)
	struct FMulticastInlineDelegate OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate; // 0x340(0x10)
	struct FMulticastInlineDelegate OnTeammatePlayerStateRemovedInBattlePhaseDelegate; // 0x350(0x10)
	struct FMulticastInlineDelegate OnPlayerChangedGoldsDelegate; // 0x360(0x10)
	struct FMulticastInlineDelegate OnOBPlayerRepDelegate; // 0x370(0x10)
	int32_t Gold; // 0x380(0x04)
	char pad_384[0x4]; // 0x384(0x04)
	struct TArray<int32_t> CostedGolds; // 0x388(0x10)
	struct TArray<int32_t> ReceivedGolds; // 0x398(0x10)
	int32_t CharacterId; // 0x3a8(0x04)
	int32_t SkinId; // 0x3ac(0x04)
	struct FString ClanId; // 0x3b0(0x10)
	struct FString ClanName; // 0x3c0(0x10)
	struct FString ClanShortName; // 0x3d0(0x10)
	int32_t BagId; // 0x3e0(0x04)
	int32_t CapsuleID; // 0x3e4(0x04)
	struct FString SolarPlayerID; // 0x3e8(0x10)
	struct FString NickName; // 0x3f8(0x10)
	uint32_t BattleVoiceId; // 0x408(0x04)
	char pad_40C[0x4]; // 0x40c(0x04)
	int64_t RTCType; // 0x410(0x08)
	uint64_t UserId; // 0x418(0x08)
	char PosInTeam; // 0x420(0x01)
	char pad_421[0x7]; // 0x421(0x07)
	struct FString Side; // 0x428(0x10)
	struct FString Job; // 0x438(0x10)
	int32_t CharacterLevel; // 0x448(0x04)
	int32_t AvatarID; // 0x44c(0x04)
	int32_t AvatarFrameID; // 0x450(0x04)
	int32_t Gender; // 0x454(0x04)
	int32_t AccountLevel; // 0x458(0x04)
	int32_t FriendNum; // 0x45c(0x04)
	int32_t RoleID; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)
	struct TArray<struct FMedalInfo> Medals; // 0x468(0x10)
	struct TArray<struct FBattleCharacterData> AllCharacterData; // 0x478(0x10)
	struct FBattleCharacterData CurUsedCharacterData; // 0x488(0x40)
	struct TArray<struct FExpRankMedalData> AllExpRankMedalData; // 0x4c8(0x10)
	struct FLastBattleInfo LastBattleInfo; // 0x4d8(0x1c)
	int32_t RoleUltimateSkillCDState; // 0x4f4(0x04)
	struct TArray<struct FSettlementParam_ExtraRewardInfo> ExtraRewards; // 0x4f8(0x10)
	struct TArray<struct FSettlementReward> SettlementRewards; // 0x508(0x10)
	struct TArray<struct FSettlementCrateReward> CrateRewards; // 0x518(0x10)
	uint32_t PlayerNumber; // 0x528(0x04)
	char pad_52C[0x4]; // 0x52c(0x04)
	struct TMap<int32_t, int32_t> VehicleSkinData; // 0x530(0x50)
	float CurrentHealth; // 0x580(0x04)
	float MaxHealth; // 0x584(0x04)
	struct FShieldInfo CurShieldInfo; // 0x588(0x08)
	char ReviveItemNum; // 0x590(0x01)
	char ReviveCountByItem; // 0x591(0x01)
	char pad_592[0x2]; // 0x592(0x02)
	int32_t TalentID; // 0x594(0x04)
	int32_t LikeValue; // 0x598(0x04)
	int32_t ReceivedGiftNum; // 0x59c(0x04)
	int32_t SpectatorNum; // 0x5a0(0x04)
	enum class ETalentState TalentState; // 0x5a4(0x01)
	bool HasBackendVerified; // 0x5a5(0x01)
	bool HasGroupBackendVerified; // 0x5a6(0x01)
	char pad_5A7[0x1]; // 0x5a7(0x01)
	struct FVector2D MarkedPointInNavMap; // 0x5a8(0x08)
	struct FVector SelfLastVehicleLocation; // 0x5b0(0x0c)
	struct FVector TeamLastVehicleLocation; // 0x5bc(0x0c)
	char CurrentPlayerStateInGame; // 0x5c8(0x01)
	char CurrentCharacterStateInGame; // 0x5c9(0x01)
	char pad_5CA[0x56]; // 0x5ca(0x56)
	int32_t AccountFlag; // 0x620(0x04)
	int32_t ClanFlag; // 0x624(0x04)
	struct TArray<int32_t> EquippedEmotes; // 0x628(0x10)
	struct FString OS; // 0x638(0x10)
	struct FString OsType; // 0x648(0x10)
	struct FString DeviceModel; // 0x658(0x10)
	enum class ECommonInputType InputType; // 0x668(0x01)
	bool bIsSameTeamWithLocalPlayer; // 0x669(0x01)
	bool HasReconnection; // 0x66a(0x01)
	char pad_66B[0x5]; // 0x66b(0x05)
	bool bHasHangUpBehavior; // 0x670(0x01)
	char pad_671[0x3]; // 0x671(0x03)
	float HangUpTime; // 0x674(0x04)
	float OfflineBattleTime; // 0x678(0x04)
	int32_t Elo; // 0x67c(0x04)
	int32_t RankLevel; // 0x680(0x04)
	int32_t RankLevel2; // 0x684(0x04)
	int32_t LegendRank; // 0x688(0x04)
	char VipType; // 0x68c(0x01)
	char pad_68D[0x3]; // 0x68d(0x03)
	int32_t WarmupTag; // 0x690(0x04)
	float Frustration; // 0x694(0x04)
	bool bMonitor; // 0x698(0x01)
	char LobbyTeamMemberNum; // 0x699(0x01)
	char pad_69A[0x16]; // 0x69a(0x16)
	bool bTeamIDHasChanged; // 0x6b0(0x01)
	char pad_6B1[0x3]; // 0x6b1(0x03)
	int32_t RepliableMessageID; // 0x6b4(0x04)
	float RepliableMessageStartTime; // 0x6b8(0x04)
	char pad_6BC[0xc]; // 0x6bc(0x0c)
	bool bIsOBPlayer; // 0x6c8(0x01)
	char pad_6C9[0x3]; // 0x6c9(0x03)
	int32_t WarmId; // 0x6cc(0x04)
	int32_t WarmType; // 0x6d0(0x04)
	bool AllowOtherJoin; // 0x6d4(0x01)
	char pad_6D5[0x3]; // 0x6d5(0x03)
	float WaitTimeBeforeEnterSpectateMode; // 0x6d8(0x04)
	char pad_6DC[0x4]; // 0x6dc(0x04)
	struct FMulticastInlineDelegate OnSpectateInfoRep; // 0x6e0(0x10)
	struct ASolarPlayerState* KillerPlayerState; // 0x6f0(0x08)
	struct ASolarPlayerState* RevengePlayerState; // 0x6f8(0x08)
	struct ASolarSpectateInfo* SpectateInfo; // 0x700(0x08)
	enum class EPlayerNetStateInGame NetStateInGame; // 0x708(0x01)
	bool bHasLogin; // 0x709(0x01)
	char pad_70A[0xe]; // 0x70a(0x0e)
	bool bHasUpdateByServerData; // 0x718(0x01)
	char pad_719[0x7]; // 0x719(0x07)
	struct USolarReplayHighlightComponent* ReplayHightlightComp; // 0x720(0x08)
	int32_t KillNum; // 0x728(0x04)
	char pad_72C[0x1c]; // 0x72c(0x1c)
	int32_t AssistNum; // 0x748(0x04)
	char pad_74C[0x1c]; // 0x74c(0x1c)
	struct FVector DeathPos; // 0x768(0x0c)
	int32_t ReconnectNum; // 0x774(0x04)
	char pad_778[0x10]; // 0x778(0x10)
	float MultiKillDurationTime; // 0x788(0x04)
	char pad_78C[0x14]; // 0x78c(0x14)
	float TotalReceivedDamage; // 0x7a0(0x04)
	float HealSelf; // 0x7a4(0x04)
	float ReceivedHeal; // 0x7a8(0x04)
	float LifeTime; // 0x7ac(0x04)
	struct FSettlementTempData SettleSyncData; // 0x7b0(0xd8)
	int32_t PlayerRank; // 0x888(0x04)
	bool IsAce; // 0x88c(0x01)
	bool bMVP; // 0x88d(0x01)
	bool IsVictory; // 0x88e(0x01)
	char pad_88F[0x1]; // 0x88f(0x01)
	float MvpScore; // 0x890(0x04)
	float KDA; // 0x894(0x04)
	int32_t ResurrectionTimes; // 0x898(0x04)
	int32_t CharacterExp; // 0x89c(0x04)
	struct TArray<int32_t> CharacterExpReason; // 0x8a0(0x10)
	int32_t AccountExp; // 0x8b0(0x04)
	char pad_8B4[0x4]; // 0x8b4(0x04)
	struct TMap<int32_t, int32_t> WeaponExps; // 0x8b8(0x50)
	int32_t Zomborg; // 0x908(0x04)
	int32_t ZomborgExtra; // 0x90c(0x04)
	struct TArray<enum class ESCMPlayerPunishType> SettlePunishTypes; // 0x910(0x10)
	struct TArray<int32_t> StrategyConditionIDs; // 0x920(0x10)
	int32_t SettlementDisplayStrategyID; // 0x930(0x04)
	char pad_934[0x3]; // 0x934(0x03)
	enum class ESCMPlayerOutPath PlayerOutPath; // 0x937(0x01)
	struct TArray<int32_t> UsedCharacterIDs; // 0x938(0x10)
	bool bPresettling; // 0x948(0x01)
	bool bHasSettled; // 0x949(0x01)
	bool bIsPlayerBattleEnd; // 0x94a(0x01)
	char pad_94B[0x1]; // 0x94b(0x01)
	int32_t InteractValue; // 0x94c(0x04)
	float LastInteractTime; // 0x950(0x04)
	float DamageFactor; // 0x954(0x04)
	float VehicleProbability; // 0x958(0x04)
	bool bIsTimeoutPlayer; // 0x95c(0x01)
	char bShowBattlePrompt : 1; // 0x95d(0x01)
	char pad_95D_1 : 7; // 0x95d(0x01)
	char pad_95E[0x12]; // 0x95e(0x12)
	struct FExposeLocationMap ExposeLocationMap; // 0x970(0x58)
	struct TArray<struct ASolarPlayerState*> ExposeLocationArray; // 0x9c8(0x10)
	struct FVector PlayerLocation; // 0x9d8(0x0c)
	char pad_9E4[0x4]; // 0x9e4(0x04)
	struct ASolarPlayerState* ExposeTo; // 0x9e8(0x08)
	char pad_9F0[0x8]; // 0x9f0(0x08)
	int32_t SkydivingLeaderPosInTeam; // 0x9f8(0x04)
	char SkydivingFollowFormationPos; // 0x9fc(0x01)
	char pad_9FD[0x7]; // 0x9fd(0x07)
	enum class ESkydivingState SkydivingState; // 0xa04(0x01)
	char pad_A05[0x3]; // 0xa05(0x03)
	struct USolarAchievementComponent* AchievementComponent; // 0xa08(0x08)
	char pad_A10[0x8]; // 0xa10(0x08)
	struct TArray<int32_t> PreCompletedAchievementIDs; // 0xa18(0x10)
	int32_t PlayerLevel; // 0xa28(0x04)
	int32_t PlayerExperience; // 0xa2c(0x04)
	int32_t HistoryShieldUpgradeItemNum; // 0xa30(0x04)
	char pad_A34[0x1c]; // 0xa34(0x1c)
	struct ASpatializeInfoTrack* TrackInfo; // 0xa50(0x08)
	float TrackMaxRevealDistance; // 0xa58(0x04)
	enum class EAppLifetimeState AppLifetimeState; // 0xa5c(0x01)
	char pad_A5D[0x3]; // 0xa5d(0x03)
	int32_t TailFlameId; // 0xa60(0x04)
	char pad_A64[0x4]; // 0xa64(0x04)
	struct ASolarTeamInfo* Team; // 0xa68(0x08)
	char pad_A70[0x10]; // 0xa70(0x10)
	struct TArray<struct FSolarBattleWeaponData> BattleWeaponDataArray; // 0xa80(0x10)
	struct AHeroPickInfo* HeroPickInfo; // 0xa90(0x08)

	bool WillFollowMovementOfSkydivingLeader(); // Function Solarland.SolarPlayerState.WillFollowMovementOfSkydivingLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217fad0
	void UpgradePlayerLevel(int32_t LevelAdded); // Function Solarland.SolarPlayerState.UpgradePlayerLevel // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x217fa40
	void UpdateCurUseCharacterData(int32_t InCharacterId); // Function Solarland.SolarPlayerState.UpdateCurUseCharacterData // (Final|Native|Public) // @ game+0x217f9b0
	void UpdateCurUseCharacterAndSkinData(int32_t InCharacterId, int32_t InSkinID); // Function Solarland.SolarPlayerState.UpdateCurUseCharacterAndSkinData // (Final|Native|Public) // @ game+0x217f8e0
	void UpdateAICharacterDataList(struct FBattleCharacterData& InCharacterData); // Function Solarland.SolarPlayerState.UpdateAICharacterDataList // (Final|Native|Public|HasOutParms) // @ game+0x217f830
	void SyncMarkedWorldData(struct FWorldMarkData InMarkData); // Function Solarland.SolarPlayerState.SyncMarkedWorldData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x217f5b0
	void SynchronizePlayerStateInGame(enum class EPlayerStateInGame InEPlayerStateInGame, bool InIfOrNot); // Function Solarland.SolarPlayerState.SynchronizePlayerStateInGame // (Final|Native|Public) // @ game+0x217f760
	void SynchronizeCharacterStateInGame(enum class ECharacterStateInGame InECharacterStateInGame, bool InIfOrNot); // Function Solarland.SolarPlayerState.SynchronizeCharacterStateInGame // (Final|Native|Public) // @ game+0x217f690
	void StatVehicleDriveTypeLuaCall(int32_t DriveType); // Function Solarland.SolarPlayerState.StatVehicleDriveTypeLuaCall // (Final|Native|Public|BlueprintCallable) // @ game+0x217f520
	void StatVehicleDriveType(int32_t DriveType); // Function Solarland.SolarPlayerState.StatVehicleDriveType // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x217f490
	void ShowTeammatesHUD(struct TArray<struct ASolarPlayerState*>& TeammateStates, struct ASolarPlayerState* InSpectateTargetPlayerState); // Function Solarland.SolarPlayerState.ShowTeammatesHUD // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x217f390
	void SetRoleUltimateSkillCDState(int32_t NewState); // Function Solarland.SolarPlayerState.SetRoleUltimateSkillCDState // (Final|Native|Public) // @ game+0x217efb0
	void SetRoleID(int32_t InRoleID); // Function Solarland.SolarPlayerState.SetRoleID // (Final|Native|Public) // @ game+0x217ef20
	void SetPlayerNetStateInGame(enum class EPlayerNetStateInGame InPlayerNetStateInGame); // Function Solarland.SolarPlayerState.SetPlayerNetStateInGame // (Final|Native|Public) // @ game+0x217eea0
	void SetIsTimeoutPlayer(bool InValue); // Function Solarland.SolarPlayerState.SetIsTimeoutPlayer // (Final|Native|Public) // @ game+0x217ee10
	void SetIsPlayerBattleEnd(bool bPlayerBattleEnd); // Function Solarland.SolarPlayerState.SetIsPlayerBattleEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x217ed80
	void ServerUpdateInputType(enum class ECommonInputType NowInputType); // Function Solarland.SolarPlayerState.ServerUpdateInputType // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x217ec80
	void ServerUnexposeLocationToOtherOnce(struct ASolarPlayerState* OtherPS); // Function Solarland.SolarPlayerState.ServerUnexposeLocationToOtherOnce // (Final|Native|Public|BlueprintCallable) // @ game+0x217ebf0
	void ServerUnexposeLocationToOther(struct ASolarPlayerState* OtherPS); // Function Solarland.SolarPlayerState.ServerUnexposeLocationToOther // (Final|Native|Public|BlueprintCallable) // @ game+0x217eb60
	void ServerPlayerSelectSkin(int32_t InCharacterId, int32_t InSkinID); // Function Solarland.SolarPlayerState.ServerPlayerSelectSkin // (Final|Native|Public) // @ game+0x217ea90
	void ServerExposeLocationToOther(struct ASolarPlayerState* OtherPS); // Function Solarland.SolarPlayerState.ServerExposeLocationToOther // (Final|Native|Public|BlueprintCallable) // @ game+0x217ea00
	void ServerChangeRoleID(int32_t InRoleID); // Function Solarland.SolarPlayerState.ServerChangeRoleID // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x217e970
	void ReviseWeaponExp(int32_t weaponid, int32_t WeaponExp, int32_t CurLevel, int32_t CurExp); // Function Solarland.SolarPlayerState.ReviseWeaponExp // (Final|Native|Protected|BlueprintCallable) // @ game+0x217e820
	void RequestServerUpdateInputType(enum class ECommonInputType NowInputType); // Function Solarland.SolarPlayerState.RequestServerUpdateInputType // (Final|Native|Public|BlueprintCallable) // @ game+0x217d470
	void ReceiveTeamIdReplicated(); // Function Solarland.SolarPlayerState.ReceiveTeamIdReplicated // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveTalentStateSet(enum class ETalentState InState); // Function Solarland.SolarPlayerState.ReceiveTalentStateSet // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveTalentIDReplication(enum class EPlayerStateRepType RepType, struct APlayerState* ClientOwnerPS); // Function Solarland.SolarPlayerState.ReceiveTalentIDReplication // (Final|Native|Protected) // @ game+0x217e750
	void ReceiveSideReplicatedAfter(); // Function Solarland.SolarPlayerState.ReceiveSideReplicatedAfter // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePostInitializeComponents(); // Function Solarland.SolarPlayerState.ReceivePostInitializeComponents // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool ReceiveGold(int32_t InReceivedGold, bool NeedSyncToServer, bool NeedSyncToDS); // Function Solarland.SolarPlayerState.ReceiveGold // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x217e640
	void ReceiveClientInitialize(struct AController* C); // Function Solarland.SolarPlayerState.ReceiveClientInitialize // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void PlayerSelectSkin(int32_t InCharacterId, int32_t InSkinID); // Function Solarland.SolarPlayerState.PlayerSelectSkin // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x217e4a0
	void PlayerSelectHero(int32_t InCharacterId, int32_t InSkinID, bool bConfirm); // Function Solarland.SolarPlayerState.PlayerSelectHero // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x217e390
	bool PlayerIsResurrecting(); // Function Solarland.SolarPlayerState.PlayerIsResurrecting // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	bool PlayerHasLogin(); // Function Solarland.SolarPlayerState.PlayerHasLogin // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217e370
	bool PlayerCanRebirthByReviveItem(bool bCheckItemNum, bool bIncludingReviving); // Function Solarland.SolarPlayerState.PlayerCanRebirthByReviveItem // (Final|Native|Public|Const) // @ game+0x217e290
	bool PlayerCanRebirthByBuyResurrection(); // Function Solarland.SolarPlayerState.PlayerCanRebirthByBuyResurrection // (Final|Native|Public|BlueprintCallable) // @ game+0x217e260
	bool PlayerCanRebirthByAllMeans(); // Function Solarland.SolarPlayerState.PlayerCanRebirthByAllMeans // (Final|Native|Public|BlueprintCallable) // @ game+0x217e230
	bool PlayerCanRebirthBlueprint(); // Function Solarland.SolarPlayerState.PlayerCanRebirthBlueprint // (Native|Event|Protected|BlueprintEvent) // @ game+0x217e200
	bool PlayerCanRebirth(); // Function Solarland.SolarPlayerState.PlayerCanRebirth // (Native|Public|BlueprintCallable) // @ game+0x203a680
	bool PlayerCanBuyRescue(); // Function Solarland.SolarPlayerState.PlayerCanBuyRescue // (Native|Public|BlueprintCallable) // @ game+0x217e1d0
	void OnUpdatedPlayerStateLoginData(); // Function Solarland.SolarPlayerState.OnUpdatedPlayerStateLoginData // (Final|Native|Public) // @ game+0x217e1b0
	void OnTeammatePlayerStateRepDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarPlayerState.OnTeammatePlayerStateRepDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnTeammatePlayerStateRemovedDelegate__DelegateSignature(char& InPosInTeam, bool InIsLastOne); // DelegateFunction Solarland.SolarPlayerState.OnTeammatePlayerStateRemovedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnTeamInfoChanged__DelegateSignature(struct ASolarTeamInfo* PreviousTeam, struct ASolarTeamInfo* NowTeam); // DelegateFunction Solarland.SolarPlayerState.OnTeamInfoChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnStopReceiveExposedLocation(struct ASolarPlayerState* OtherPS); // Function Solarland.SolarPlayerState.OnStopReceiveExposedLocation // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnStartResurrectProgress(int32_t InTextId, float InDuration, float InRemaining, bool bShowCancel); // Function Solarland.SolarPlayerState.OnStartResurrectProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x217e050
	void OnSpectateTargetChanged(struct ASolarPlayerState* InOldTarget, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x217df80
	void OnSpectateInfoRep__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarPlayerState.OnSpectateInfoRep__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRequestStartResurrect(struct ADeathTreasureBox* InDeatbox); // Function Solarland.SolarPlayerState.OnRequestStartResurrect // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnRequestCancelResurrect(struct ADeathTreasureBox* InDeatbox); // Function Solarland.SolarPlayerState.OnRequestCancelResurrect // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnReplayRecordingStarted(); // Function Solarland.SolarPlayerState.OnReplayRecordingStarted // (Final|Native|Private) // @ game+0x217dee0
	void OnRep_UserId(); // Function Solarland.SolarPlayerState.OnRep_UserId // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnRep_TotalReceivedDamage(); // Function Solarland.SolarPlayerState.OnRep_TotalReceivedDamage // (Final|Native|Private) // @ game+0x217dec0
	void OnRep_TeammatesState(); // Function Solarland.SolarPlayerState.OnRep_TeammatesState // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnRep_TeamLastVehicleLocation(); // Function Solarland.SolarPlayerState.OnRep_TeamLastVehicleLocation // (Native|Public) // @ game+0x15556a0
	void OnRep_TeamChanged(struct ASolarTeamInfo* PreviousTeam); // Function Solarland.SolarPlayerState.OnRep_TeamChanged // (Final|Native|Public) // @ game+0x217de30
	void OnRep_TalentID(); // Function Solarland.SolarPlayerState.OnRep_TalentID // (Final|Native|Public) // @ game+0x217de10
	void OnRep_TailFlameId(); // Function Solarland.SolarPlayerState.OnRep_TailFlameId // (Final|Native|Public) // @ game+0x217ddf0
	void OnRep_SpectateInfo(); // Function Solarland.SolarPlayerState.OnRep_SpectateInfo // (Final|Native|Private) // @ game+0x217ddd0
	void OnRep_SkydivingState(); // Function Solarland.SolarPlayerState.OnRep_SkydivingState // (Final|Native|Public) // @ game+0x217ddb0
	void OnRep_SkydivingLeaderPosInTeam(int32_t OldValue); // Function Solarland.SolarPlayerState.OnRep_SkydivingLeaderPosInTeam // (Final|Native|Public) // @ game+0x217dd20
	void OnRep_SkinId(); // Function Solarland.SolarPlayerState.OnRep_SkinId // (Native|Public) // @ game+0x1555b20
	void OnRep_Side(struct FString OldSide); // Function Solarland.SolarPlayerState.OnRep_Side // (Native|Public) // @ game+0x217dc80
	void OnRep_SelfLastVehicleLocation(); // Function Solarland.SolarPlayerState.OnRep_SelfLastVehicleLocation // (Native|Public) // @ game+0x1555940
	void OnRep_RTCType(); // Function Solarland.SolarPlayerState.OnRep_RTCType // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnRep_RoleID(); // Function Solarland.SolarPlayerState.OnRep_RoleID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnRep_ReviveItemNum(); // Function Solarland.SolarPlayerState.OnRep_ReviveItemNum // (Native|Public) // @ game+0x1555f60
	void OnRep_ReviveCountByItem(); // Function Solarland.SolarPlayerState.OnRep_ReviveCountByItem // (Native|Public) // @ game+0x1555ce0
	void OnRep_RepliableMsg(); // Function Solarland.SolarPlayerState.OnRep_RepliableMsg // (Final|Native|Public) // @ game+0x217dc60
	void OnRep_PosInTeam(char& InLastPosInTeam); // Function Solarland.SolarPlayerState.OnRep_PosInTeam // (Native|Public|HasOutParms) // @ game+0x217dbc0
	void OnRep_PlayerLocation(); // Function Solarland.SolarPlayerState.OnRep_PlayerLocation // (Native|Protected) // @ game+0x1555f40
	void OnRep_PlayerLevel(); // Function Solarland.SolarPlayerState.OnRep_PlayerLevel // (Native|Public) // @ game+0x1555be0
	void OnRep_PlayerExp(); // Function Solarland.SolarPlayerState.OnRep_PlayerExp // (Native|Public) // @ game+0x1555440
	void OnRep_NickName(struct FString OldNickName); // Function Solarland.SolarPlayerState.OnRep_NickName // (Final|Native|Public) // @ game+0x217db20
	void OnRep_NetStateInGame(); // Function Solarland.SolarPlayerState.OnRep_NetStateInGame // (Native|Public) // @ game+0x1555860
	void OnRep_MaxHealth(); // Function Solarland.SolarPlayerState.OnRep_MaxHealth // (Native|Public) // @ game+0x1555680
	void OnRep_MarkedPointInNavMap(); // Function Solarland.SolarPlayerState.OnRep_MarkedPointInNavMap // (Native|Public) // @ game+0x15555c0
	void OnRep_KillNum(); // Function Solarland.SolarPlayerState.OnRep_KillNum // (Final|Native|Public) // @ game+0x217db00
	void OnRep_Job(); // Function Solarland.SolarPlayerState.OnRep_Job // (Final|Native|Public) // @ game+0x8e9ae0
	void OnRep_IsOBPlayer(); // Function Solarland.SolarPlayerState.OnRep_IsOBPlayer // (Final|Native|Public) // @ game+0x217dae0
	void OnRep_InputType(); // Function Solarland.SolarPlayerState.OnRep_InputType // (Final|Native|Public) // @ game+0x8e9ae0
	void OnRep_HeroPickInfo(); // Function Solarland.SolarPlayerState.OnRep_HeroPickInfo // (Final|Native|Public) // @ game+0x217dac0
	void OnRep_Gold(); // Function Solarland.SolarPlayerState.OnRep_Gold // (Final|Native|Public) // @ game+0x217daa0
	void OnRep_ExposeLocationArray(); // Function Solarland.SolarPlayerState.OnRep_ExposeLocationArray // (Native|Protected) // @ game+0x1555b80
	void OnRep_CurShieldInfo(struct FShieldInfo& InLastShieldInfo); // Function Solarland.SolarPlayerState.OnRep_CurShieldInfo // (Native|Public|HasOutParms) // @ game+0x217d8c0
	void OnRep_CurrentPlayerStateInGame(char& InLastPlayerStateInGame); // Function Solarland.SolarPlayerState.OnRep_CurrentPlayerStateInGame // (Native|Public|HasOutParms) // @ game+0x217da00
	void OnRep_CurrentHealth(); // Function Solarland.SolarPlayerState.OnRep_CurrentHealth // (Native|Public) // @ game+0x15558c0
	void OnRep_CurrentCharacterStateInGame(char& InLastCharacterStateInGame); // Function Solarland.SolarPlayerState.OnRep_CurrentCharacterStateInGame // (Native|Public|HasOutParms) // @ game+0x217d960
	void OnRep_ClanId(); // Function Solarland.SolarPlayerState.OnRep_ClanId // (Native|Public) // @ game+0x15556c0
	void OnRep_ClanFlag(); // Function Solarland.SolarPlayerState.OnRep_ClanFlag // (Final|Native|Public) // @ game+0x217d8a0
	void OnRep_CharacterId(); // Function Solarland.SolarPlayerState.OnRep_CharacterId // (Native|Public) // @ game+0x1555ac0
	void OnRep_BattleVoiceId(); // Function Solarland.SolarPlayerState.OnRep_BattleVoiceId // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnRep_BagId(); // Function Solarland.SolarPlayerState.OnRep_BagId // (Final|Native|Public) // @ game+0x217d880
	void OnRep_AssistNum(); // Function Solarland.SolarPlayerState.OnRep_AssistNum // (Final|Native|Public) // @ game+0x217d860
	void OnRep_AccountFlag(); // Function Solarland.SolarPlayerState.OnRep_AccountFlag // (Final|Native|Public) // @ game+0x217d840
	void OnRefreshReviveInfo(); // Function Solarland.SolarPlayerState.OnRefreshReviveInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x217d820
	void OnReceiveExposedLocation(struct ASolarPlayerState* OtherPS, struct FVector& Location); // Function Solarland.SolarPlayerState.OnReceiveExposedLocation // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
	struct FString OnPlayerUpgrade(int32_t NewLevel, bool bFromServer); // Function Solarland.SolarPlayerState.OnPlayerUpgrade // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerUpdateStatData(enum class EStatisticsType InType); // Function Solarland.SolarPlayerState.OnPlayerUpdateStatData // (Final|Native|Public) // @ game+0x217d7a0
	void OnPlayerGainExperience(int32_t GainedExp, int32_t CurrentExp, int32_t TotalExp, enum class EExpBehaviorType BehaviorType); // Function Solarland.SolarPlayerState.OnPlayerGainExperience // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerChangedGolds(enum class EPlayerChangedGoldType ChangedGoldType, int32_t CostGoldNum, enum class EPlayerChangedGoldResult CostResult); // Function Solarland.SolarPlayerState.OnPlayerChangedGolds // (Net|Native|Event|Public|NetClient) // @ game+0x217d690
	void OnOtherPlayerStopSpectateMyTeam(struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnOtherPlayerStopSpectateMyTeam // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnOtherPlayerStopSpectateMe(struct ASolarPlayerState* InSpectatorPlayerState, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnOtherPlayerStopSpectateMe // (Final|Native|Private) // @ game+0x217d5c0
	void OnOtherPlayerBeginSpectateMe(struct ASolarPlayerState* InSpectatorPlayerState, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnOtherPlayerBeginSpectateMe // (Final|Native|Private) // @ game+0x217d4f0
	void OnOBPlayerRepDelegate__DelegateSignature(bool bIsOBPlayer); // DelegateFunction Solarland.SolarPlayerState.OnOBPlayerRepDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnInputTypeChanged(enum class ECommonInputType NowInputType); // Function Solarland.SolarPlayerState.OnInputTypeChanged // (Final|Native|Public) // @ game+0x217d470
	void OnDamageChanged__DelegateSignature(float Damage); // DelegateFunction Solarland.SolarPlayerState.OnDamageChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnClientSpectateTargetChanged(struct ASolarPlayerState* InOldTarget, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnClientSpectateTargetChanged // (Final|Native|Private) // @ game+0x217d310
	void OnCancelResurrectProgress(int32_t InTextId); // Function Solarland.SolarPlayerState.OnCancelResurrectProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x217d280
	void NotifyUpdateTeamMateLevelUI(); // Function Solarland.SolarPlayerState.NotifyUpdateTeamMateLevelUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyAddExperience(int32_t ExpAdded); // Function Solarland.SolarPlayerState.NotifyAddExperience // (Net|Native|Event|Public|NetClient) // @ game+0x217d1f0
	void NewMarkedWorldDataInClient(int32_t InPosInTeam, struct FWorldMarkData InMarkData); // Function Solarland.SolarPlayerState.NewMarkedWorldDataInClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x217d0b0
	bool NeedPerformSpectateInfoOnSimulate(); // Function Solarland.SolarPlayerState.NeedPerformSpectateInfoOnSimulate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217d080
	int32_t LuaGetExpFromWeaponImplementation(enum class EExpBehaviorType InBehaviorType, int32_t InParamOne, int32_t InParamTwo, float InDamage); // Function Solarland.SolarPlayerState.LuaGetExpFromWeaponImplementation // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void LeaveTeam(); // Function Solarland.SolarPlayerState.LeaveTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x217d060
	void JoinTeamByPolicies(struct TArray<enum class ETeamType> JoinPolicies); // Function Solarland.SolarPlayerState.JoinTeamByPolicies // (Final|Native|Public|BlueprintCallable) // @ game+0x217cf70
	void JoinTeamByName(struct FString InTeamName); // Function Solarland.SolarPlayerState.JoinTeamByName // (Final|Native|Public|BlueprintCallable) // @ game+0x217ced0
	void JoinTeamByID(char InTeamId); // Function Solarland.SolarPlayerState.JoinTeamByID // (Final|Native|Public|BlueprintCallable) // @ game+0x217ce50
	void JoinTeam(struct ASolarTeamInfo* InTeam); // Function Solarland.SolarPlayerState.JoinTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x217cdc0
	bool IsWaitingLogin(); // Function Solarland.SolarPlayerState.IsWaitingLogin // (Native|Public|Const) // @ game+0x217cd90
	bool IsUsingClanForFlag(); // Function Solarland.SolarPlayerState.IsUsingClanForFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217cd60
	bool IsUnfollowShortcutEnabled(); // Function Solarland.SolarPlayerState.IsUnfollowShortcutEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217cd30
	bool IsTimeOutPlayer(); // Function Solarland.SolarPlayerState.IsTimeOutPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217cd10
	bool IsTeammateWithLocalOrSpecTargetPlayer(); // Function Solarland.SolarPlayerState.IsTeammateWithLocalOrSpecTargetPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217cce0
	bool IsTeammateWith(struct ASolarPlayerState* Other); // Function Solarland.SolarPlayerState.IsTeammateWith // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217cc40
	bool IsSpectatingOtherPlayer(); // Function Solarland.SolarPlayerState.IsSpectatingOtherPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217cc00
	bool IsSkydivingLeader(); // Function Solarland.SolarPlayerState.IsSkydivingLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217cbd0
	bool IsSkydivingCompleted(); // Function Solarland.SolarPlayerState.IsSkydivingCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217cba0
	bool IsSkydiving(); // Function Solarland.SolarPlayerState.IsSkydiving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217cb70
	bool IsSameTeamWithLocalPlayer(); // Function Solarland.SolarPlayerState.IsSameTeamWithLocalPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217cb40
	bool IsReconnecting(); // Function Solarland.SolarPlayerState.IsReconnecting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217cb10
	bool IsPreStartSkydiving(); // Function Solarland.SolarPlayerState.IsPreStartSkydiving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217cae0
	bool IsPlayerWaitingForTeammatesHelp(); // Function Solarland.SolarPlayerState.IsPlayerWaitingForTeammatesHelp // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	bool IsPlayerTeam(); // Function Solarland.SolarPlayerState.IsPlayerTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x217cab0
	bool IsPlayerOnline(); // Function Solarland.SolarPlayerState.IsPlayerOnline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217ca80
	bool IsPlayerOffline(); // Function Solarland.SolarPlayerState.IsPlayerOffline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217ca50
	bool IsPlayer(); // Function Solarland.SolarPlayerState.IsPlayer // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x203aa90
	bool IsOutBySelf(); // Function Solarland.SolarPlayerState.IsOutBySelf // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217ca20
	bool IsOfflinePlayer(); // Function Solarland.SolarPlayerState.IsOfflinePlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c9f0
	bool IsOBPlayer(); // Function Solarland.SolarPlayerState.IsOBPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c9d0
	bool IsMySkydivingLeader(int32_t LeaderPosInTeam); // Function Solarland.SolarPlayerState.IsMySkydivingLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c930
	bool IsMVP(); // Function Solarland.SolarPlayerState.IsMVP // (Final|Native|Protected|BlueprintCallable) // @ game+0x217c8d0
	bool IsMaxLevelInGame(); // Function Solarland.SolarPlayerState.IsMaxLevelInGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c900
	bool IsLocalPlayerCameraFocusingMe(); // Function Solarland.SolarPlayerState.IsLocalPlayerCameraFocusingMe // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c8a0
	bool IsKickOutByServer(); // Function Solarland.SolarPlayerState.IsKickOutByServer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c870
	bool IsBuyingResurrection(); // Function Solarland.SolarPlayerState.IsBuyingResurrection // (Event|Public|BlueprintEvent|Const) // @ game+0x25d85b0
	bool IsBeingSpectated(); // Function Solarland.SolarPlayerState.IsBeingSpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c840
	bool IsAIPlayer(); // Function Solarland.SolarPlayerState.IsAIPlayer // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c810
	bool IsACheater(); // Function Solarland.SolarPlayerState.IsACheater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c7e0
	void InitInputType(); // Function Solarland.SolarPlayerState.InitInputType // (Final|Native|Public) // @ game+0x217c7a0
	void IncreaseReviveCount(); // Function Solarland.SolarPlayerState.IncreaseReviveCount // (Native|Public|BlueprintCallable) // @ game+0x1555d00
	void HideTeammatesHUD(struct TArray<struct ASolarPlayerState*>& TeammateStates); // Function Solarland.SolarPlayerState.HideTeammatesHUD // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x217c6f0
	bool HasSkydivingLeader(); // Function Solarland.SolarPlayerState.HasSkydivingLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c6c0
	bool HasSettled(); // Function Solarland.SolarPlayerState.HasSettled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c6a0
	bool HasCheatSelf(); // Function Solarland.SolarPlayerState.HasCheatSelf // (Final|Native|Public) // @ game+0x217c670
	int32_t GetWeaponSettlmentExp(int32_t weaponid); // Function Solarland.SolarPlayerState.GetWeaponSettlmentExp // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetVehicleSkinID(int32_t VehicleID); // Function Solarland.SolarPlayerState.GetVehicleSkinID // (Final|Native|Public) // @ game+0x217c5d0
	struct FString GetUserID(); // Function Solarland.SolarPlayerState.GetUserID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c540
	struct TArray<int32_t> GetUsableTailFlameIds(); // Function Solarland.SolarPlayerState.GetUsableTailFlameIds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c4c0
	void GetUsableSkinsForCharacter(int32_t InCharacterId, struct TArray<int32_t>& Result, bool& bCharacterUsable); // Function Solarland.SolarPlayerState.GetUsableSkinsForCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c390
	struct TArray<int32_t> GetUsableJetpackIds(); // Function Solarland.SolarPlayerState.GetUsableJetpackIds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c310
	float GetTotalReceivedDamage(); // Function Solarland.SolarPlayerState.GetTotalReceivedDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x217c2f0
	float GetTotalCausedDamage(); // Function Solarland.SolarPlayerState.GetTotalCausedDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x217c2b0
	char GetTeamRank(); // Function Solarland.SolarPlayerState.GetTeamRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c040
	void GetTeammatePlayers(bool bIncludingSelf, struct TArray<struct ASolarPlayerState*>& OutTeammates); // Function Solarland.SolarPlayerState.GetTeammatePlayers // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x217c1b0
	struct ASolarPlayerState* GetTeammatePlayerByPosInTeam(int32_t InPosInTeam); // Function Solarland.SolarPlayerState.GetTeammatePlayerByPosInTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c110
	int32_t GetTeammateNum(bool bIncludeSelf); // Function Solarland.SolarPlayerState.GetTeammateNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c070
	char GetTeamID(); // Function Solarland.SolarPlayerState.GetTeamID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217c010
	struct USolarGameModeStatisticsComponent* GetStatComponent(); // Function Solarland.SolarPlayerState.GetStatComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bfe0
	struct ASolarSpectateInfo* GetSpectateTargetSpectateInfo(); // Function Solarland.SolarPlayerState.GetSpectateTargetSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bfa0
	struct ASolarPlayerState* GetSpectateTargetPlayerState(); // Function Solarland.SolarPlayerState.GetSpectateTargetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bf60
	struct ASolarCharacter* GetSpectateTargetCharacter(); // Function Solarland.SolarPlayerState.GetSpectateTargetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bf10
	struct ASolarSpectateInfo* GetSpectateInfo(); // Function Solarland.SolarPlayerState.GetSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bef0
	struct ASolarReplayPlayerController* GetSolarReplayPlayerController(); // Function Solarland.SolarPlayerState.GetSolarReplayPlayerController // (Final|Native|Public|Const) // @ game+0x217bec0
	struct ASolarPlayerController* GetSolarPlayerController(); // Function Solarland.SolarPlayerState.GetSolarPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217be90
	struct ASolarCharacter* GetSolarCharacter(); // Function Solarland.SolarPlayerState.GetSolarCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217be60
	struct ASolarBotAIController* GetSolarBotAIController(); // Function Solarland.SolarPlayerState.GetSolarBotAIController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217be30
	int32_t GetRankScore(); // Function Solarland.SolarPlayerState.GetRankScore // (Final|Native|Public) // @ game+0x217be10
	int32_t GetRankLevelID(); // Function Solarland.SolarPlayerState.GetRankLevelID // (Final|Native|Public) // @ game+0x217bdf0
	struct ASolarCharacter* GetPossessedCharacter(); // Function Solarland.SolarPlayerState.GetPossessedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bdc0
	struct UPlayerStatisticsData* GetPlayerStatData(); // Function Solarland.SolarPlayerState.GetPlayerStatData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bd90
	enum class EPlayerNetStateInGame GetPlayerNetState(); // Function Solarland.SolarPlayerState.GetPlayerNetState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bd70
	struct FString GetPlayerNameWithoutUID(); // Function Solarland.SolarPlayerState.GetPlayerNameWithoutUID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bcf0
	struct TArray<struct FMedalInfo> GetMedalInfo(); // Function Solarland.SolarPlayerState.GetMedalInfo // (Final|Native|Public|Const) // @ game+0x217bc70
	int32_t GetMaxShieldMatCountToDeathbox(); // Function Solarland.SolarPlayerState.GetMaxShieldMatCountToDeathbox // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bc40
	struct ASolarPlayerState* GetLocalPlayerState(); // Function Solarland.SolarPlayerState.GetLocalPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bc10
	struct ASolarPlayerState* GetLocalOrSpecTargetPlayerState(); // Function Solarland.SolarPlayerState.GetLocalOrSpecTargetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bbe0
	struct ASolarCharacter* GetLocalOrSpecTargetCharacter(); // Function Solarland.SolarPlayerState.GetLocalOrSpecTargetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bbb0
	struct ASolarCharacter* GetLocalCharacter(); // Function Solarland.SolarPlayerState.GetLocalCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bb80
	int32_t GetLegendRank(); // Function Solarland.SolarPlayerState.GetLegendRank // (Final|Native|Public) // @ game+0x217bb60
	struct ASolarPlayerState* GetKillerPlayerState(); // Function Solarland.SolarPlayerState.GetKillerPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bb40
	bool GetIsPlayerBattleEnd(); // Function Solarland.SolarPlayerState.GetIsPlayerBattleEnd // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217bb10
	float GetExpSettleModePunishRatio(); // Function Solarland.SolarPlayerState.GetExpSettleModePunishRatio // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetExpItemCount(int32_t InLevelGap); // Function Solarland.SolarPlayerState.GetExpItemCount // (Final|Native|Public|BlueprintCallable) // @ game+0x217ba70
	int32_t GetExpByBehavior(enum class EExpBehaviorType InBehaviorType, int32_t InParamOne, int32_t InParamTwo, float InDamage); // Function Solarland.SolarPlayerState.GetExpByBehavior // (Native|Event|Public|BlueprintEvent) // @ game+0x217b910
	int32_t GetDriveVehicleID(); // Function Solarland.SolarPlayerState.GetDriveVehicleID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217b750
	struct FVector GetDeathBoxLocation(); // Function Solarland.SolarPlayerState.GetDeathBoxLocation // (Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x25d85b0
	float GetCurrentTalentCDDuration(); // Function Solarland.SolarPlayerState.GetCurrentTalentCDDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217b720
	float GetCurrentTalentActiveDuration(); // Function Solarland.SolarPlayerState.GetCurrentTalentActiveDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217b6f0
	void GetCurrentSkinForCharacter(int32_t InCharacterId, bool& bCharacterUsable, int32_t& OutSkinId); // Function Solarland.SolarPlayerState.GetCurrentSkinForCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x217b5d0
	struct FVector GetCharacterLocation(); // Function Solarland.SolarPlayerState.GetCharacterLocation // (Final|Native|Public|HasDefaults|Const) // @ game+0x217b590
	struct TArray<struct FString> GetBuyResurrectionSavedTeammateIDArr(); // Function Solarland.SolarPlayerState.GetBuyResurrectionSavedTeammateIDArr // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<int32_t> GetBuyResurrectionSavedTeammateBonusArr(); // Function Solarland.SolarPlayerState.GetBuyResurrectionSavedTeammateBonusArr // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool CostGold(int32_t InCostedGold, bool NeedSyncToServer); // Function Solarland.SolarPlayerState.CostGold // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x217b310
	void ClientNotifyKillNumChanged(int32_t KillNumber, int32_t SpreesNum); // Function Solarland.SolarPlayerState.ClientNotifyKillNumChanged // (Net|Native|Event|Public|NetClient) // @ game+0x217b240
	void ClientImmediatelyTeammatesSkinID(struct TArray<struct ASolarPlayerState*> InTeammates, struct TArray<int32_t> InSkinID); // Function Solarland.SolarPlayerState.ClientImmediatelyTeammatesSkinID // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x217b140
	void ClearTeammatesMark(); // Function Solarland.SolarPlayerState.ClearTeammatesMark // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1554260
	bool CheckIfTeamLastVehicleLocationValid(); // Function Solarland.SolarPlayerState.CheckIfTeamLastVehicleLocationValid // (Final|Native|Public|Const) // @ game+0x217b110
	bool CheckIfTeamIdValid(); // Function Solarland.SolarPlayerState.CheckIfTeamIdValid // (Final|Native|Public|Const) // @ game+0x217b0e0
	bool CheckIfSelfLastVehicleLocationValid(); // Function Solarland.SolarPlayerState.CheckIfSelfLastVehicleLocationValid // (Final|Native|Public|Const) // @ game+0x217b0b0
	bool CheckIfPosInTeamValid(); // Function Solarland.SolarPlayerState.CheckIfPosInTeamValid // (Final|Native|Public|Const) // @ game+0x217b080
	bool CheckIfMarkedPointInNavMapValid(); // Function Solarland.SolarPlayerState.CheckIfMarkedPointInNavMapValid // (Final|Native|Public|Const) // @ game+0x217b050
	bool CheckIfInactive(); // Function Solarland.SolarPlayerState.CheckIfInactive // (Final|Native|Public|Const) // @ game+0x217b020
	bool CheckIfDataValid(); // Function Solarland.SolarPlayerState.CheckIfDataValid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217aff0
	bool CheckIfBeInSpecifiedPlayerState(enum class EPlayerStateInGame InEPlayerStateInGame); // Function Solarland.SolarPlayerState.CheckIfBeInSpecifiedPlayerState // (Final|Native|Public) // @ game+0x217af60
	bool CheckIfBeInSpecifiedCharacterState(enum class ECharacterStateInGame InECharacterStateInGame); // Function Solarland.SolarPlayerState.CheckIfBeInSpecifiedCharacterState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217aed0
	bool CheckIfBattleVoiceIdValid(); // Function Solarland.SolarPlayerState.CheckIfBattleVoiceIdValid // (Final|Native|Public|Const) // @ game+0x217aea0
	bool CheckGoldIsEnough(int32_t InCostedGold); // Function Solarland.SolarPlayerState.CheckGoldIsEnough // (Final|Native|Public) // @ game+0x217ae00
	void ChangeTailFlameId(int32_t InTailFlameId); // Function Solarland.SolarPlayerState.ChangeTailFlameId // (Final|Native|Public|BlueprintCallable) // @ game+0x217ad70
	void ChangeBagById(int32_t InBagId); // Function Solarland.SolarPlayerState.ChangeBagById // (Final|Native|Public|BlueprintCallable) // @ game+0x217ace0
	bool CanReviveItemPutInDeathBox(); // Function Solarland.SolarPlayerState.CanReviveItemPutInDeathBox // (Final|Native|Public) // @ game+0x20a96a0
	bool CanAcceptSkydivingLeaderTransferRequest(struct ASolarPlayerState* RequesterPlayerState); // Function Solarland.SolarPlayerState.CanAcceptSkydivingLeaderTransferRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217abb0
	bool CanAcceptSkydivingFollowRequest(struct ASolarPlayerState* RequesterPlayerState); // Function Solarland.SolarPlayerState.CanAcceptSkydivingFollowRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217ab10
	bool CanAcceptSkydivingFollowInvitation(struct ASolarPlayerState* InviterPlayerState); // Function Solarland.SolarPlayerState.CanAcceptSkydivingFollowInvitation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x217aa70
	int32_t CalculateZomborg(); // Function Solarland.SolarPlayerState.CalculateZomborg // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	float CalculateCharacterExp(); // Function Solarland.SolarPlayerState.CalculateCharacterExp // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	float CalculateAccountExp(); // Function Solarland.SolarPlayerState.CalculateAccountExp // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void AssignPosInTeam(); // Function Solarland.SolarPlayerState.AssignPosInTeam // (Final|Native|Public) // @ game+0x217aa50
	void AddMarkedWorldData(int32_t InPosInTeam, struct FWorldMarkData& InMarkData); // Function Solarland.SolarPlayerState.AddMarkedWorldData // (Final|Native|Public|HasOutParms) // @ game+0x217a910
	void AddExperience(int32_t InExp, enum class EExpBehaviorType InType); // Function Solarland.SolarPlayerState.AddExperience // (Final|Native|Public|BlueprintCallable) // @ game+0x217a840
};

// Class Solarland.SCMPlayerState
// Size: 0xb08 (Inherited: 0xa98)
struct ASCMPlayerState : ASolarPlayerState {
	enum class ESCMPlayerState BattleState; // 0xa98(0x01)
	enum class ESCMPlayerOutType PlayerOutType; // 0xa99(0x01)
	enum class ESCMPlayerType PlayerType; // 0xa9a(0x01)
	enum class ESCMPlayerGameRole PlayerGameRole; // 0xa9b(0x01)
	char pad_A9C[0x14]; // 0xa9c(0x14)
	struct FMulticastInlineDelegate OnSideChange; // 0xab0(0x10)
	struct TArray<struct FSCMReplicateHostData> ReplicateData; // 0xac0(0x10)
	char pad_AD0[0x10]; // 0xad0(0x10)
	float ReviveStartTime; // 0xae0(0x04)
	char pad_AE4[0x4]; // 0xae4(0x04)
	struct ASolarPlayerState* RevivingTeammatePS; // 0xae8(0x08)
	char pad_AF0[0x10]; // 0xaf0(0x10)
	struct USolarTaskComponent* TaskSystem; // 0xb00(0x08)

	void UpdateTaskInfo(struct FTaskUpdateInfo& InTaskInfo); // Function Solarland.SCMPlayerState.UpdateTaskInfo // (Final|Native|Public|HasOutParms) // @ game+0x203cdc0
	void UpDateDataManager(struct TArray<struct FSCMReplicateHostData> InReplicateData, bool bInit); // Function Solarland.SCMPlayerState.UpDateDataManager // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x203cc90
	void ServerBeginSpectate(struct ASCMPlayerState* TargetPlayer); // Function Solarland.SCMPlayerState.ServerBeginSpectate // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203c4d0
	void RequestStartGame(); // Function Solarland.SCMPlayerState.RequestStartGame // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1555960
	void RequestSetWeaponTypeAvailableLuaCall(enum class EWeaponUIType WeaponUIType, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetWeaponTypeAvailableLuaCall // (Final|Native|Public) // @ game+0x203c3e0
	void RequestSetWeaponTypeAvailable(enum class EWeaponUIType WeaponUIType, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetWeaponTypeAvailable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203c300
	void RequestSetWeaponAvailableLuaCall(int32_t weaponid, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetWeaponAvailableLuaCall // (Final|Native|Public) // @ game+0x203c230
	void RequestSetWeaponAvailable(int32_t weaponid, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetWeaponAvailable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203c160
	void RequestSetVehicleTypeAvailableLuaCall(int32_t VehicleTypeID, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetVehicleTypeAvailableLuaCall // (Final|Native|Public) // @ game+0x203c090
	void RequestSetVehicleTypeAvailable(int32_t VehicleTypeID, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetVehicleTypeAvailable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203bfc0
	void RequestSetVehicleClassAvailableLuaCall(enum class EVehicleClass VehicleClass, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetVehicleClassAvailableLuaCall // (Final|Native|Public) // @ game+0x203bef0
	void RequestSetVehicleClassAvailable(enum class EVehicleClass VehicleClass, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetVehicleClassAvailable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203be10
	void RequestSetUserSettingLuaCall(struct FString Name, struct FString Value); // Function Solarland.SCMPlayerState.RequestSetUserSettingLuaCall // (Final|Native|Public) // @ game+0x203bd10
	void RequestSetUserSetting(struct FString Name, struct FString Value); // Function Solarland.SCMPlayerState.RequestSetUserSetting // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203bc10
	void RequestSetRoomPoolPrizeTypeLuaCall(int32_t TypeID); // Function Solarland.SCMPlayerState.RequestSetRoomPoolPrizeTypeLuaCall // (Final|Native|Public) // @ game+0x203bb80
	void RequestSetRoomPoolPrizeType(int32_t TypeID); // Function Solarland.SCMPlayerState.RequestSetRoomPoolPrizeType // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203baf0
	void RequestSetRoomPasswdLuaCall(struct FString Passwd); // Function Solarland.SCMPlayerState.RequestSetRoomPasswdLuaCall // (Final|Native|Public) // @ game+0x203ba50
	void RequestSetRoomPasswd(struct FString Passwd); // Function Solarland.SCMPlayerState.RequestSetRoomPasswd // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203b9b0
	void RequestSetRoomNameLuaCall(struct FString Name); // Function Solarland.SCMPlayerState.RequestSetRoomNameLuaCall // (Final|Native|Public) // @ game+0x203b910
	void RequestSetRoomName(struct FString Name); // Function Solarland.SCMPlayerState.RequestSetRoomName // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203b870
	void RequestSetRoomLevelLimitLuaCall(int32_t Level); // Function Solarland.SCMPlayerState.RequestSetRoomLevelLimitLuaCall // (Final|Native|Public) // @ game+0x203b7e0
	void RequestSetRoomLevelLimit(int32_t Level); // Function Solarland.SCMPlayerState.RequestSetRoomLevelLimit // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203b750
	void RequestSetInviteEnableLuaCall(bool bEnable); // Function Solarland.SCMPlayerState.RequestSetInviteEnableLuaCall // (Final|Native|Public) // @ game+0x203b6c0
	void RequestSetInviteEnable(bool bEnable); // Function Solarland.SCMPlayerState.RequestSetInviteEnable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203b630
	void RequestSetExchangeEnableLuaCall(bool bEnable); // Function Solarland.SCMPlayerState.RequestSetExchangeEnableLuaCall // (Final|Native|Public) // @ game+0x203b5a0
	void RequestSetExchangeEnable(bool bEnable); // Function Solarland.SCMPlayerState.RequestSetExchangeEnable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203b510
	void RequestKickPlayerOut(struct ASCMPlayerState* Player); // Function Solarland.SCMPlayerState.RequestKickPlayerOut // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203b480
	void RequestExchangeSidesAndPos(struct ASCMPlayerState* PlayerA, struct ASCMPlayerState* PlayerB); // Function Solarland.SCMPlayerState.RequestExchangeSidesAndPos // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203b3b0
	void RequestChangeSide(struct ASCMPlayerState* Player, struct FString NewSide, int32_t NewPosInTeam); // Function Solarland.SCMPlayerState.RequestChangeSide // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203b280
	void RequesJoinOB(struct ASCMPlayerState* Player); // Function Solarland.SCMPlayerState.RequesJoinOB // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x203b1f0
	void OnUpdateLifeTime(); // Function Solarland.SCMPlayerState.OnUpdateLifeTime // (Final|Native|Public) // @ game+0x203b060
	void OnRep_RevivingTeammatePS(struct ASolarPlayerState* LastRevivingTeammatePS); // Function Solarland.SCMPlayerState.OnRep_RevivingTeammatePS // (Final|Native|Public) // @ game+0x203afd0
	void OnRep_BattleState(); // Function Solarland.SCMPlayerState.OnRep_BattleState // (Final|Native|Private) // @ game+0x203af70
	void OnPlayerKilled(struct ASCMPlayerState* KillerPlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.SCMPlayerState.OnPlayerKilled // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerKill(struct ASCMPlayerState* KilledPlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.SCMPlayerState.OnPlayerKill // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void NotifyUpdateCGMData(struct FString InDataName); // Function Solarland.SCMPlayerState.NotifyUpdateCGMData // (Final|Native|Private) // @ game+0x203ae40
	void NotifyClientUpdateDataManager(bool bInit); // Function Solarland.SCMPlayerState.NotifyClientUpdateDataManager // (Final|Native|Private) // @ game+0x203adb0
	bool NeedConsiderRepData(); // Function Solarland.SCMPlayerState.NeedConsiderRepData // (Final|Native|Public|Const) // @ game+0x203ad70
	bool IsPreJoinPlayer(); // Function Solarland.SCMPlayerState.IsPreJoinPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x203aac0
	void InitTaskInfo(struct FBattlePassInfo& InTaskInfo); // Function Solarland.SCMPlayerState.InitTaskInfo // (Final|Native|Public|HasOutParms) // @ game+0x203a910
	struct TArray<struct FSCMReplicateHostData> GetReplicateDataArray(); // Function Solarland.SCMPlayerState.GetReplicateDataArray // (Final|Native|Private) // @ game+0x203a7b0
	struct TArray<struct ASCMPlayerState*> GetMySidePlayerList(); // Function Solarland.SCMPlayerState.GetMySidePlayerList // (Final|Native|Public|BlueprintCallable) // @ game+0x203a730
	struct TArray<struct ASCMPlayerState*> GetMySideJobPlayerList(); // Function Solarland.SCMPlayerState.GetMySideJobPlayerList // (Final|Native|Public|BlueprintCallable) // @ game+0x203a6b0
	void CanPlayerBattle(); // Function Solarland.SCMPlayerState.CanPlayerBattle // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SCMSettlementPlayerState
// Size: 0xb08 (Inherited: 0xb08)
struct ASCMSettlementPlayerState : ASCMPlayerState {
};

// Class Solarland.ScopeFullScreenWidget
// Size: 0x348 (Inherited: 0x348)
struct UScopeFullScreenWidget : USolarUserWidget {
};

// Class Solarland.ScoutEnemyConfig
// Size: 0xf0 (Inherited: 0x30)
struct UScoutEnemyConfig : UDataAsset {
	bool bShowDebug; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int32_t ScoutMaxNum; // 0x34(0x04)
	float TimeToScanEffect; // 0x38(0x04)
	float MaxDetectionDistance; // 0x3c(0x04)
	struct FVector2D BondingBoxExtent; // 0x40(0x08)
	bool bSupportHipFire; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct TMap<enum class EWeaponScopeType, float> BoxScaleRatioByScope; // 0x50(0x50)
	struct TArray<enum class EObjectTypeQuery> TargetOccBlockTypes; // 0xa0(0x10)
	struct FGameplayTagContainer BlockWithMyTags; // 0xb0(0x20)
	struct FGameplayTagContainer BlockWithEnemyTags; // 0xd0(0x20)
};

// Class Solarland.ScoutEnemyObject
// Size: 0x80 (Inherited: 0x28)
struct UScoutEnemyObject : UObject {
	char pad_28[0x48]; // 0x28(0x48)
	struct UScoutEnemyConfig* ScoutEnemyConfig; // 0x70(0x08)
	char pad_78[0x8]; // 0x78(0x08)
};

// Class Solarland.SCustomGameState
// Size: 0x578 (Inherited: 0x460)
struct ASCustomGameState : ASBattleGameState {
	char pad_460[0x8]; // 0x460(0x08)
	enum class ESCMInGameState InGameState; // 0x468(0x01)
	char pad_469[0x1f]; // 0x469(0x1f)
	struct FCustomRoomData CustomRoomData; // 0x488(0x78)
	bool bCustomRoomMode; // 0x500(0x01)
	char pad_501[0x7]; // 0x501(0x07)
	struct TArray<struct AGameManagerBase*> GameManagers; // 0x508(0x10)
	struct AGameDataManager* GameDataManager; // 0x518(0x08)
	struct AGameJobManager* GameJobManager; // 0x520(0x08)
	char pad_528[0x10]; // 0x528(0x10)
	struct UCGMManagerConfigComponent* ManagerConfigComponent; // 0x538(0x08)
	struct ACGFormula* InsFormula; // 0x540(0x08)
	struct TArray<struct ASolarPlayerState*> PlayersWithTrackingAbility; // 0x548(0x10)
	struct TArray<struct ASpatializeInfoTrack*> TrackInfos; // 0x558(0x10)
	char pad_568[0x10]; // 0x568(0x10)

	void SetRoomPoolPrizeType(int32_t TypeID); // Function Solarland.SCustomGameState.SetRoomPoolPrizeType // (Final|Native|Public) // @ game+0x2056b80
	void SetRoomPasssd(struct FString Passwd); // Function Solarland.SCustomGameState.SetRoomPasssd // (Final|Native|Public) // @ game+0x2056a90
	void SetRoomName(struct FString Name); // Function Solarland.SCustomGameState.SetRoomName // (Final|Native|Public) // @ game+0x20569a0
	void SetRoomLevelLimit(int32_t Level); // Function Solarland.SCustomGameState.SetRoomLevelLimit // (Final|Native|Public) // @ game+0x2056910
	void SetRoomEnableSwapPos(bool bIsEnabled); // Function Solarland.SCustomGameState.SetRoomEnableSwapPos // (Final|Native|Public|BlueprintCallable) // @ game+0x2056880
	void SetRoomEnableInvite(bool bIsEnabled); // Function Solarland.SCustomGameState.SetRoomEnableInvite // (Final|Native|Public|BlueprintCallable) // @ game+0x20567f0
	void OnTournamentBattleEnd(); // Function Solarland.SCustomGameState.OnTournamentBattleEnd // (Final|Native|Public) // @ game+0x2056320
	void OnSidePosInTeamChange(struct FString SideName); // Function Solarland.SCustomGameState.OnSidePosInTeamChange // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnSideListPostChanged(); // Function Solarland.SCustomGameState.OnSideListPostChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnSideListChange(struct TArray<struct FSCMSideData>& SideList); // Function Solarland.SCustomGameState.OnSideListChange // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnServerCustomRoomDataReady(); // Function Solarland.SCustomGameState.OnServerCustomRoomDataReady // (Final|Native|Public) // @ game+0x2056300
	void OnRep_InGameState(); // Function Solarland.SCustomGameState.OnRep_InGameState // (Final|Native|Public) // @ game+0x20562e0
	void OnRep_GameManagerList(); // Function Solarland.SCustomGameState.OnRep_GameManagerList // (Final|Native|Private) // @ game+0x8e9ae0
	void OnRep_GameJobManager(); // Function Solarland.SCustomGameState.OnRep_GameJobManager // (Final|Native|Public) // @ game+0x20562c0
	void OnRep_GameDataManager(); // Function Solarland.SCustomGameState.OnRep_GameDataManager // (Final|Native|Public) // @ game+0x20562a0
	void OnRep_CustomRoomData(); // Function Solarland.SCustomGameState.OnRep_CustomRoomData // (Final|Native|Public) // @ game+0x2056280
	void OnPlayerBattleStateChange(struct ASCMPlayerState* PlayerState); // Function Solarland.SCustomGameState.OnPlayerBattleStateChange // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnOBPlayerListChange(); // Function Solarland.SCustomGameState.OnOBPlayerListChange // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnDataManagerPrepare(); // Function Solarland.SCustomGameState.OnDataManagerPrepare // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnCustomRoomDataChange(struct FCustomRoomData& InCustomRoomData); // Function Solarland.SCustomGameState.OnCustomRoomDataChange // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void NotifyVipPlayerJoin(int32_t FlagID, char VipType, struct FString NickName, bool bCustomRoom, bool bInTournament); // Function Solarland.SCustomGameState.NotifyVipPlayerJoin // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x2055770
	void NotifyRoomDataChanged(); // Function Solarland.SCustomGameState.NotifyRoomDataChanged // (Final|Native|Public) // @ game+0x2055750
	void MultiClientAllManagersOnRepDelegate__DelegateSignature(); // DelegateFunction Solarland.SCustomGameState.MultiClientAllManagersOnRepDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	bool IsNeedCalculateTournamentPoints(); // Function Solarland.SCustomGameState.IsNeedCalculateTournamentPoints // (Final|Native|Public) // @ game+0x2055430
	bool IsInTournament(); // Function Solarland.SCustomGameState.IsInTournament // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20553f0
	bool IsCustomRoomMode(); // Function Solarland.SCustomGameState.IsCustomRoomMode // (Final|Native|Public|Const) // @ game+0x20553d0
	bool IsAtNonSettlementStage(); // Function Solarland.SCustomGameState.IsAtNonSettlementStage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x20553a0
	void InitKnockoutPointParams(struct FKnockoutParams& InParams); // Function Solarland.SCustomGameState.InitKnockoutPointParams // (Final|Native|Public|HasOutParms) // @ game+0x20552c0
	struct FTournamentData GetTournamentData(); // Function Solarland.SCustomGameState.GetTournamentData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20551c0
	struct UCGMManagerConfigComponent* GetManagerConfigComponent(); // Function Solarland.SCustomGameState.GetManagerConfigComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2055040
	struct ACGFormula* GetFormula(); // Function Solarland.SCustomGameState.GetFormula // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2054fe0
	struct FCustomRoomData GetCustomRoomData(); // Function Solarland.SCustomGameState.GetCustomRoomData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2054d30
	struct UCGMGameplayConfig* GetCGMGameplayConfig(); // Function Solarland.SCustomGameState.GetCGMGameplayConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2054d00
	void ClearCustomRoomData(); // Function Solarland.SCustomGameState.ClearCustomRoomData // (Final|Native|Public) // @ game+0x2054910
	int32_t CalculateKnockoutPoints(int32_t InTeamRank, int32_t InKillNum, float InTotalDamage, float InTotalDamageTaken); // Function Solarland.SCustomGameState.CalculateKnockoutPoints // (Final|Native|Public) // @ game+0x2054790
};

// Class Solarland.SCSettlementGameState
// Size: 0x578 (Inherited: 0x578)
struct ASCSettlementGameState : ASCustomGameState {
};

// Class Solarland.SolarGameModeWeaponAction
// Size: 0x108 (Inherited: 0x30)
struct USolarGameModeWeaponAction : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate OnCompleted; // 0x30(0x10)
	char pad_40[0xc8]; // 0x40(0xc8)

	struct USolarGameModeWeaponAction* SetCharacterWeaponBySeq(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, bool bDestroyPrevWeapon, enum class EWeaponSlotType Slot, int32_t ItemID); // Function Solarland.SolarGameModeWeaponAction.SetCharacterWeaponBySeq // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204ea20
	void OnWeaponCreated(enum class EWeaponSlotType SlotIndex, struct ASolarPlayerWeapon* WeaponPtr, struct USolarBackpackComponent* SolarBackpackComponent); // Function Solarland.SolarGameModeWeaponAction.OnWeaponCreated // (Final|Native|Public) // @ game+0x204cb10
	void CreateWeaponAsync(enum class EWeaponSlotType SlotIndex, bool bDestroyPrevWeapon, struct FSolarItemData& InItemData, struct USolarBackpackComponent* InSolarBackpackComponent); // Function Solarland.SolarGameModeWeaponAction.CreateWeaponAsync // (Final|Native|Public|HasOutParms) // @ game+0x2045af0
};

// Class Solarland.SCustomGameModeLibrary
// Size: 0x28 (Inherited: 0x28)
struct USCustomGameModeLibrary : UBlueprintFunctionLibrary {

	bool ValidateAirline(struct UObject* InWorldContext, struct FString& OutMsg, struct FVector InHalfBufferExtent, float DrawDebugTime); // Function Solarland.SCustomGameModeLibrary.ValidateAirline // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x2051320
	bool UnBindPlayerReconnectedGameEvent(struct UObject* WorldContextObject, struct FDelegate& Deletage); // Function Solarland.SCustomGameModeLibrary.UnBindPlayerReconnectedGameEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2051060
	bool UnbindDataChangeEventVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventVector3 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2051150
	bool UnbindDataChangeEventString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2051150
	bool UnbindDataChangeEventInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2051150
	bool UnbindDataChangeEventFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2051150
	bool UnbindDataChangeEventByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2051150
	bool UnbindDataChangeEventBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2051150
	void TryActivateAbilityByTag(struct USolarAbilitySystemComponent* SolarAbilitySystemComponent, struct FGameplayTag& AbilityTag, bool bAllowRemoteActivation); // Function Solarland.SCustomGameModeLibrary.TryActivateAbilityByTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2050f40
	bool SwitchPlayerSideJob(struct UObject* WorldContextObject, struct ASCMPlayerState* PlayerA, struct ASCMPlayerState* PlayerB); // Function Solarland.SCustomGameModeLibrary.SwitchPlayerSideJob // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2050e20
	bool SwitchPlayerPosInTeam(struct UObject* WorldContextObject, struct ASCMPlayerState* PlayerA, struct ASCMPlayerState* PlayerB); // Function Solarland.SCustomGameModeLibrary.SwitchPlayerPosInTeam // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2050d20
	bool SwitchOBPlayerWithPlayer(struct UObject* WorldContextObject, struct ASCMPlayerState* OBPlayer, struct ASCMPlayerState* Player); // Function Solarland.SCustomGameModeLibrary.SwitchOBPlayerWithPlayer // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2050c20
	void StopSpectateOtherPlayer(struct ASCMPlayerState* Player); // Function Solarland.SCustomGameModeLibrary.StopSpectateOtherPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2050ba0
	void SpawnVehicleByIDAtTheSpecified(struct UObject* WorldContextObject, int32_t ID, struct FTransform Transform); // Function Solarland.SCustomGameModeLibrary.SpawnVehicleByIDAtTheSpecified // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2050a00
	void SideLogGameStateStatistics(struct UObject* WorldContextObject, struct FString LogName, struct FString SideName, struct TMap<struct FString, struct FString>& LogValues); // Function Solarland.SCustomGameModeLibrary.SideLogGameStateStatistics // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2050820
	void SideEnterHeroPick(struct UObject* WorldContextObject, struct FString SideName); // Function Solarland.SCustomGameModeLibrary.SideEnterHeroPick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2050750
	bool ShowTargetSettlementPage(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.ShowTargetSettlementPage // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x20506c0
	struct UUserWidget* ShowSolarWidget(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass, enum class EUIRoot UILayer, bool bInShowPersistent); // Function Solarland.SCustomGameModeLibrary.ShowSolarWidget // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2050570
	bool ShowNextSettlementPage(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.ShowNextSettlementPage // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x20504e0
	void ShowGameNoticeCustom(struct UObject* WorldContextObject, struct FString NoticeText, enum class ECustomNoticeType NoticeType, struct UUINoticeBase* NoticeClass, float NoticeTime, enum class ECustomNoticeColor NoticeColor, struct UPaperSprite* NoticeIcon); // Function Solarland.SCustomGameModeLibrary.ShowGameNoticeCustom // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x20502b0
	void ShowGameNoticeByID(struct UObject* WorldContextObject, int32_t NoticeId); // Function Solarland.SCustomGameModeLibrary.ShowGameNoticeByID // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x20501f0
	bool SetWeaponParts(struct UObject* WorldContextObject, struct ASolarWeapon* TargetWeapon, struct FWeaponPartsData& Parts); // Function Solarland.SCustomGameModeLibrary.SetWeaponParts // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204ffe0
	void SetupBotDifficulty(struct TArray<struct ASolarBotAIController*>& BotPlayers, int32_t Difficulty); // Function Solarland.SCustomGameModeLibrary.SetupBotDifficulty // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2050100
	void SetSpectateConditions(struct ASolarPlayerState* Player, struct FSpectateConditions& Conditions); // Function Solarland.SCustomGameModeLibrary.SetSpectateConditions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204fe90
	bool SetPlayerDataVector3(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FVector& InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x204fd60
	bool SetPlayerDataString(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FString InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204fc20
	bool SetPlayerDataInt(struct ASCMPlayerState* PlayerState, struct FString DataName, int32_t InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataInt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204fb00
	bool SetPlayerDataFloat(struct ASCMPlayerState* PlayerState, struct FString DataName, float InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataFloat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204f9d0
	bool SetPlayerDataByte(struct ASCMPlayerState* PlayerState, struct FString DataName, char InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataByte // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204f8a0
	bool SetPlayerDataBool(struct ASCMPlayerState* PlayerState, struct FString DataName, bool InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataBool // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204f770
	void SetModifyColorGrading(bool InEnable, struct FLinearColor InGain, struct FLinearColor InSaturation, struct FLinearColor InContrast); // Function Solarland.SCustomGameModeLibrary.SetModifyColorGrading // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x204f5f0
	bool SetDataVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FVector& InValue); // Function Solarland.SCustomGameModeLibrary.SetDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x204f440
	bool SetDataString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InValue); // Function Solarland.SCustomGameModeLibrary.SetDataString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204f280
	bool SetDataInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, int32_t InValue); // Function Solarland.SCustomGameModeLibrary.SetDataInt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204f0d0
	bool SetDataFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, float InValue); // Function Solarland.SCustomGameModeLibrary.SetDataFloat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204ef20
	bool SetDataByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, char InValue); // Function Solarland.SCustomGameModeLibrary.SetDataByte // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204ed70
	bool SetDataBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, bool InValue); // Function Solarland.SCustomGameModeLibrary.SetDataBool // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204ebc0
	bool SetBattleUISubItemVisibilityBySabotageGameMode(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.SetBattleUISubItemVisibilityBySabotageGameMode // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x204e990
	void ServerSetCustomSpawnBlacklist(struct UObject* WorldContextObject, struct TArray<int32_t>& InWeaponBlacklist, struct TArray<int32_t>& InWeaponWhitelist, struct TArray<int32_t>& InVehicleBlacklist, struct TArray<int32_t>& InVehicleWhitelist); // Function Solarland.SCustomGameModeLibrary.ServerSetCustomSpawnBlacklist // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204e780
	void SaveGame(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.SaveGame // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x204e700
	bool ResurrectCharacter(struct UObject* WorldContextObject, struct ASolarCharacter* Character, struct FTransform& Transform, bool bClearAllItems, bool bEmptyEnergy, bool bReChargeJetToFull, bool bClearWeapons, enum class EPlayerResurrectType PlayerResurrectType); // Function Solarland.SCustomGameModeLibrary.ResurrectCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x204e430
	void RenumberAllPlayerPosInTeam(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.RenumberAllPlayerPosInTeam // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x204e310
	void RemoveSpecificRankChangeEvent(struct UObject* WorldContextObject, struct FString RankName, int32_t TargetRank, struct FDelegate& SpecificRankChangeEvent); // Function Solarland.SCustomGameModeLibrary.RemoveSpecificRankChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204e190
	void RemoveRankListChangeEvent(struct UObject* WorldContextObject, struct FString RankName, struct FSCMRankEventHandle& RankListEventHandle); // Function Solarland.SCustomGameModeLibrary.RemoveRankListChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204e060
	void RemovePlayerData(struct ASCMPlayerState* PlayerState, struct FString DataName); // Function Solarland.SCustomGameModeLibrary.RemovePlayerData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204df90
	void RemoveHostRankChangeEvent(struct UObject* WorldContextObject, struct FString RankName, struct FString HostID, enum class ESCMHostType HostType, struct FDelegate& HostRankChangeEvent); // Function Solarland.SCustomGameModeLibrary.RemoveHostRankChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204ddc0
	void RemoveGameplayCue(struct UAbilitySystemComponent* AbilitySystemComponen, struct FGameplayTag GameplayCueTag); // Function Solarland.SCustomGameModeLibrary.RemoveGameplayCue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204dd00
	void RemoveData(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName); // Function Solarland.SCustomGameModeLibrary.RemoveData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204db90
	struct UActorMarkBase* RegisterWorldMarkOnPos(struct UObject* WorldContextObject, struct UActorMarkBase* InActorMarkClass, struct FVector Pos); // Function Solarland.SCustomGameModeLibrary.RegisterWorldMarkOnPos // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x204da70
	bool PreAssignPlayerSideJob(struct UObject* WorldContextObject, struct ASCMPlayerState* Player, struct FString InSide, struct FString InJob, int32_t PosInTeam); // Function Solarland.SCustomGameModeLibrary.PreAssignPlayerSideJob // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x204d6a0
	bool PlusData(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, float InValue); // Function Solarland.SCustomGameModeLibrary.PlusData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204d4f0
	void PlayersSettlement(struct UObject* WorldContextObject, struct TArray<struct ASolarPlayerState*> TargetPlayers); // Function Solarland.SCustomGameModeLibrary.PlayersSettlement // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x204d3d0
	void PlayerReportServer(struct UObject* WorldContextObject, struct ASolarPlayerState* PS, enum class EStatisticsType StatisticsType, int32_t InValue, bool IsIncrease); // Function Solarland.SCustomGameModeLibrary.PlayerReportServer // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x204d240
	void PlayerOutBySelf(struct UObject* WorldContextObject, enum class ESCMPlayerOutPath InPath); // Function Solarland.SCustomGameModeLibrary.PlayerOutBySelf // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x204d180
	void PlayerLogGameStateStatistics(struct UObject* WorldContextObject, struct FString LogName, struct ASCMPlayerState* PlayerState, struct TMap<struct FString, struct FString>& LogValues, bool IncludeStatisticsData); // Function Solarland.SCustomGameModeLibrary.PlayerLogGameStateStatistics // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204cf60
	void PlayerEnterHeroPick(struct UObject* WorldContextObject, struct ASCMPlayerState* Player); // Function Solarland.SCustomGameModeLibrary.PlayerEnterHeroPick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204cea0
	void PlaceCharacter(struct UObject* WorldContextObject, struct ASolarCharacter* Character, struct FTransform& Transform, bool bClearAllItems, bool bEmptyEnergy, bool bReChargeJetToFull, bool bClearWeapons); // Function Solarland.SCustomGameModeLibrary.PlaceCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x204cc20
	void NotifyPlayerCheat(struct UObject* InWorldContext, struct ASCMPlayerState* InPlayer); // Function Solarland.SCustomGameModeLibrary.NotifyPlayerCheat // (Final|Native|Static|Public) // @ game+0x204c890
	void NotifyPlayerAbnormal(struct UObject* InWorldContext, struct ASCMPlayerState* InPlayer); // Function Solarland.SCustomGameModeLibrary.NotifyPlayerAbnormal // (Final|Native|Static|Public) // @ game+0x204c7d0
	void NotifyAIMgrSpawnFinished(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.NotifyAIMgrSpawnFinished // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x204c730
	void NotifyAIMgrBattleStarted(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.NotifyAIMgrBattleStarted // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x204c6b0
	void LetPlayerOut(struct UObject* WorldContextObject, struct TArray<struct ASCMPlayerState*> TargetPlayers, enum class ESCMPlayerOutType OutType, bool bReportSettleReward, bool bGoSpectator, bool bRemoveSide, struct FText OutReason); // Function Solarland.SCustomGameModeLibrary.LetPlayerOut // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x204c3d0
	void LetBattleEnd(struct UObject* WorldContextObject, enum class EBattleEndType BattleEndType); // Function Solarland.SCustomGameModeLibrary.LetBattleEnd // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x204c310
	void LetAllPlayersOut(struct UObject* WorldContextObject, enum class EBattleEndType BattleEndType); // Function Solarland.SCustomGameModeLibrary.LetAllPlayersOut // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x204c250
	bool IsSideCanJoinAI(struct UObject* WorldContextObject, struct FString SideName); // Function Solarland.SCustomGameModeLibrary.IsSideCanJoinAI // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x204c170
	bool IsPlayingReplay(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsPlayingReplay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204c0e0
	bool IsMatching(struct ASCMPlayerState* InPS); // Function Solarland.SCustomGameModeLibrary.IsMatching // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x204c050
	bool IsInPreparation(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsInPreparation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x204bfc0
	bool IsEnablePlayerUpgrade(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsEnablePlayerUpgrade // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204bf30
	bool IsEnableAITeamManager(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsEnableAITeamManager // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x204be80
	bool IsCustomRoomMode(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsCustomRoomMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x204bdf0
	bool InsertWidgetToMapUISlot(struct UObject* WorldContextObject, struct UPanelSlot*& OutResultSlot, struct UWidget* InChildWidget, struct FName PanelName, bool bReplaceOldWidget); // Function Solarland.SCustomGameModeLibrary.InsertWidgetToMapUISlot // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204bc40
	bool InsertWidgetToBattleUISlot(struct UObject* WorldContextObject, struct UPanelSlot*& OutResultSlot, struct UWidget* InChildWidget, struct FName PanelName, bool bReplaceOldWidget); // Function Solarland.SCustomGameModeLibrary.InsertWidgetToBattleUISlot // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204ba90
	bool InsertWidgetToBackpackUISlot(struct UObject* WorldContextObject, struct UPanelSlot*& OutResultSlot, struct UWidget* InChildWidget, struct FName PanelName, bool bReplaceOldWidget); // Function Solarland.SCustomGameModeLibrary.InsertWidgetToBackpackUISlot // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204b8e0
	void InitializeSkydivingRelatedAbilities(struct ASolarCharacter* SolarCharacter); // Function Solarland.SCustomGameModeLibrary.InitializeSkydivingRelatedAbilities // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204b860
	void InitBotCruiseAIComp(struct UAirlineCruiseComponent* AirlineCruiseComponent, struct USBattleRoyaleGameModeAIComp* SBattleRoyaleGameModeAIComp); // Function Solarland.SCustomGameModeLibrary.InitBotCruiseAIComp // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x204b7a0
	void InitAirLineAndCrusiseInfo(struct TArray<struct ASolarCharacter*> CharacterArr, struct FTransform StartTransform, struct UAirlineCruiseComponent* AirlineCruiseComponent, float Speed, struct FVector2D StartPoint, struct FVector2D EndPoint, struct FVector2D CanParachutePoint, struct FVector2D ForceParachutePoint, bool bCreateRootIfNull, struct ASolarCapsuleActor* DefaultCapsuleActorClass); // Function Solarland.SCustomGameModeLibrary.InitAirLineAndCrusiseInfo // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x204b3e0
	void InformBotVictory(struct TArray<struct ASolarPlayerState*>& VictoryTeamBots); // Function Solarland.SCustomGameModeLibrary.InformBotVictory // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204b340
	bool HasBlockBetweenUs(struct AActor* A, struct AActor* B, bool bIsVehicle); // Function Solarland.SCustomGameModeLibrary.HasBlockBetweenUs // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204b240
	bool GetWeaponParts(struct UObject* WorldContextObject, struct ASolarWeapon* TargetWeapon, struct FWeaponPartsData& Parts); // Function Solarland.SCustomGameModeLibrary.GetWeaponParts // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x204b120
	struct ASolarWeapon* GetWeaponBySlot(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, int32_t Slot); // Function Solarland.SCustomGameModeLibrary.GetWeaponBySlot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x204b020
	void GetStartBattleRequestInfo(struct UObject* WorldContextObject, struct FStartBattleRequestInfo& OutResult); // Function Solarland.SCustomGameModeLibrary.GetStartBattleRequestInfo // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204af50
	bool GetSpecificRankData(struct UObject* WorldContextObject, struct FString RankName, int32_t TargetRank, struct FSCMRankData& outData); // Function Solarland.SCustomGameModeLibrary.GetSpecificRankData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204ad80
	int32_t GetSolarItemManagerAirDropRelatedInfo(struct UObject* WorldContextObject, struct ASolarSafeArea* SafeArea, int32_t ChestID, struct TArray<struct FTransform>& TransformsArr); // Function Solarland.SCustomGameModeLibrary.GetSolarItemManagerAirDropRelatedInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204ac20
	struct UUserWidget* GetSolarDisplayWidget(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass); // Function Solarland.SCustomGameModeLibrary.GetSolarDisplayWidget // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x204ab50
	struct USolarSaveGame* GetSaveGame(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetSaveGame // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x204aac0
	struct ASolarSafeArea* GetSafeArea(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetSafeArea // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x204aa30
	bool GetRankListData(struct UObject* WorldContextObject, struct FString RankName, int32_t BeginRank, int32_t EndRank, struct TArray<struct FSCMRankData>& OutResult); // Function Solarland.SCustomGameModeLibrary.GetRankListData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x204a810
	void GetPlayerStatisticData(struct UObject* WorldContextObject, struct ASolarPlayerState* PS, enum class EStatisticsType StatisticsType, int32_t& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerStatisticData // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x204a6c0
	struct ASCMPlayerState* GetPlayerStateByCharacterOrController(struct ASolarCharacter* Player, struct ASCMPlayerController* Controller); // Function Solarland.SCustomGameModeLibrary.GetPlayerStateByCharacterOrController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x204a5f0
	struct APawn* GetPlayerPawn(struct ASCMPlayerState* Player, enum class EPlayerPawnType& OutType); // Function Solarland.SCustomGameModeLibrary.GetPlayerPawn // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x204a510
	bool GetPlayerDataVector3(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FVector& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x204a3e0
	bool GetPlayerDataString(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FString& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x204a2a0
	bool GetPlayerDataInt(struct ASCMPlayerState* PlayerState, struct FString DataName, int32_t& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x204a170
	bool GetPlayerDataFloat(struct ASCMPlayerState* PlayerState, struct FString DataName, float& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x204a040
	bool GetPlayerDataByte(struct ASCMPlayerState* PlayerState, struct FString DataName, char& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2049f10
	bool GetPlayerDataBool(struct ASCMPlayerState* PlayerState, struct FString DataName, bool& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2049de0
	void GetPlayerBattleRequestInfo(struct UObject* WorldContextObject, struct FString InSolarPlayerID, struct FPlayerBattleRequestInfo& OutResult); // Function Solarland.SCustomGameModeLibrary.GetPlayerBattleRequestInfo // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2049c90
	struct TArray<struct ASCMPlayerState*> GetOBPlayers(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetOBPlayers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2049bc0
	struct FString GetNoticeFormatText(struct UObject* WorldContextObject, int32_t InLocalizationID, struct TMap<struct FString, struct FString>& FormatContext); // Function Solarland.SCustomGameModeLibrary.GetNoticeFormatText // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2049a10
	int32_t GetMatchRuleID(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetMatchRuleID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20498b0
	struct TArray<int32_t> GetMatchingMapIds(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetMatchingMapIds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2049940
	bool GetMapDataVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, struct FVector& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x20496a0
	bool GetMapDataString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, struct FString& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2049480
	bool GetMapDataInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, int32_t& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2049270
	bool GetMapDataFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, float& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2049060
	bool GetMapDataByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, char& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2048e50
	bool GetMapDataBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, bool& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2048c40
	struct ASCMPlayerState* GetLocalPlayer(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetLocalPlayer // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2048bb0
	struct AGameJobManager* GetJobManager(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetJobManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2048b20
	void GetJobList(struct UObject* WorldContextObject, struct FString Side, struct TArray<struct FString>& OutResult); // Function Solarland.SCustomGameModeLibrary.GetJobList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20489c0
	enum class ESCMInGameState GetInGameState(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetInGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2048930
	int32_t GetHostRank(struct UObject* WorldContextObject, struct FString RankName, enum class ESCMHostType HostType, struct FString HostID); // Function Solarland.SCustomGameModeLibrary.GetHostRank // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2048740
	void GetHostKeyArray(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct TArray<struct FString>& OutResult); // Function Solarland.SCustomGameModeLibrary.GetHostKeyArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20485f0
	struct FString GetGameModeParam(struct UObject* WorldContextObject, struct FString InParamKey); // Function Solarland.SCustomGameModeLibrary.GetGameModeParam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20484d0
	int32_t GetGameModeID(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetGameModeID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2048440
	int32_t GetGameModeGroupId(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetGameModeGroupId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20483b0
	struct AGameManagerBase* GetGameManager(struct UObject* WorldContextObject, struct AGameManagerBase* ManagerClass); // Function Solarland.SCustomGameModeLibrary.GetGameManager // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20482e0
	struct ADefenderManager* GetDefenderManager(struct UObject* WorldContextObject, struct ADefenderManager* ManagerClass); // Function Solarland.SCustomGameModeLibrary.GetDefenderManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2048210
	bool GetDataVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FVector& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2048060
	bool GetDataString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2047e90
	bool GetDataInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, int32_t& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2047ce0
	bool GetDataFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, float& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2047b20
	bool GetDataByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, char& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2047970
	bool GetDataBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, bool& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20477c0
	struct ACustomRoomManager* GetCustomRoomManager(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetCustomRoomManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2047730
	struct FCustomRoomData GetCustomRoomData(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetCustomRoomData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2047550
	float GetCurBattleTime(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetCurBattleTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2047490
	struct UCGMGameplayConfig* GetCGMGameplayConfig(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetCGMGameplayConfig // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2047400
	void GetAvatarSkillInfoWithID(struct UObject* WorldContextObject, int32_t CharacterId, struct FClassInfo& OutSkillInfo); // Function Solarland.SCustomGameModeLibrary.GetAvatarSkillInfoWithID // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2047260
	void GetAvatarPortraitWithID(struct UObject* WorldContextObject, int32_t SkinId, struct UTexture2D*& OutAvatar); // Function Solarland.SCustomGameModeLibrary.GetAvatarPortraitWithID // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2047150
	void GetAvatarIconWithID(struct UObject* WorldContextObject, int32_t InAvatarID, struct UTexture2D*& OutAvatar); // Function Solarland.SCustomGameModeLibrary.GetAvatarIconWithID // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2047040
	void GetAvatarIcon(struct ASolarPlayerState* InPS, struct UTexture2D*& OutAvatar); // Function Solarland.SCustomGameModeLibrary.GetAvatarIcon // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2046f70
	bool GetAILevelConfigCurrentMatch(struct UObject* WorldContextObject, struct TMap<int32_t, int32_t>& AILevelConfig); // Function Solarland.SCustomGameModeLibrary.GetAILevelConfigCurrentMatch // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2046db0
	int32_t GetAIAccompanyTimelineID(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetAIAccompanyTimelineID // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2046d20
	void FindPlayerSideJob(struct UObject* WorldContextObject, struct FString InSide, struct FString InJob, int32_t& OutCountCurrent, int32_t& OutCountMax, int32_t& OutMatchCountCurrent, int32_t& OutMatchCountMax); // Function Solarland.SCustomGameModeLibrary.FindPlayerSideJob // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20468a0
	struct TArray<struct ASCMPlayerState*> FindPlayers(struct UObject* WorldContextObject, struct TArray<char>& TeamIds, struct TArray<struct FString>& TeamNames, struct TArray<enum class ESCMPlayerState>& States); // Function Solarland.SCustomGameModeLibrary.FindPlayers // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2046b00
	struct ASCMPlayerState* FindPlayerByPlayerID(struct UObject* WorldContextObject, struct FString PlayerId); // Function Solarland.SCustomGameModeLibrary.FindPlayerByPlayerID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20467c0
	struct ASCMPlayerState* FindOBPlayerByPlayerID(struct UObject* WorldContextObject, struct FString PlayerId); // Function Solarland.SCustomGameModeLibrary.FindOBPlayerByPlayerID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20466e0
	struct TArray<struct ASCMPlayerState*> FindBotAI(struct UObject* WorldContextObject, struct TArray<char>& TeamIds, struct TArray<struct FString>& TeamNames, struct TArray<enum class ESCMPlayerState>& States); // Function Solarland.SCustomGameModeLibrary.FindBotAI // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20464c0
	void ExecuteGameplayCue(struct UAbilitySystemComponent* AbilitySystemComponen, struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SCustomGameModeLibrary.ExecuteGameplayCue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20462d0
	void EnableSpeedUpEffect(struct ASolarCharacter* Player, bool bEnable); // Function Solarland.SCustomGameModeLibrary.EnableSpeedUpEffect // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2046210
	void EnablePoisonEffect(struct UObject* WorldContextObject, bool bEnable); // Function Solarland.SCustomGameModeLibrary.EnablePoisonEffect // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2046150
	struct UTexture2D* DrawDebugPointInMapImg(struct UObject* WorldContextObject, struct UTexture2D* Tex, struct FString Path, struct TArray<struct FVector> PointArrA, struct FColor PointAColor, float PointASize, struct TArray<struct FVector> PointArrB, struct FColor PointBColor, float PointBSize); // Function Solarland.SCustomGameModeLibrary.DrawDebugPointInMapImg // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2045dd0
	int32_t DeleteAIFromBattleForPlayer(struct UObject* WorldContextObject, struct TArray<struct ASCMPlayerState*>& AIPlayers); // Function Solarland.SCustomGameModeLibrary.DeleteAIFromBattleForPlayer // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2045ce0
	struct UUserWidget* CreateSolarWidget(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass, enum class EUIRoot UILayer, bool bInShowPersistent); // Function Solarland.SCustomGameModeLibrary.CreateSolarWidget // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x20459a0
	struct UWidgetComponent* CreateOverheadHUD(struct ASolarCharacter* SolarCharacter, struct UUserWidget* Widget); // Function Solarland.SCustomGameModeLibrary.CreateOverheadHUD // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20458d0
	struct ASCMPlayerState* CreateBotAISingle(struct UObject* WorldContextObject, int32_t CharacterId, struct FVector& SpawnLocation, struct ASolarBotAIController* ControllerClass, int32_t Difficulty, bool bAllowMix, struct FString Side, struct FString Job); // Function Solarland.SCustomGameModeLibrary.CreateBotAISingle // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2045640
	struct TArray<struct ASCMPlayerState*> CreateBotAI(struct UObject* WorldContextObject, struct TMap<int32_t, int32_t>& TempleteMap, int32_t SpawnNum, struct FVector& SpawnLocation, struct ASolarBotAIController* ControllerClass, int32_t Difficulty, bool bAllowMix, struct FString Side, struct FString Job); // Function Solarland.SCustomGameModeLibrary.CreateBotAI // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2045200
	void CreateAirdropByOutcomeIDWithCharacter(struct UObject* WorldContextObject, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, int32_t OutcomeID, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, struct ASolarCharacter* InCharacter, float InStartHeight); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByOutcomeIDWithCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2044f00
	void CreateAirdropByOutcomeIDWithAirship(struct UObject* WorldContextObject, struct TSoftClassPtr<UObject> SolarAirshipClass, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, int32_t OutcomeID, int32_t ChestID, int32_t ChestSpawnID); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByOutcomeIDWithAirship // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2044c20
	void CreateAirdropByOutcomeID(struct UObject* WorldContextObject, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, int32_t OutcomeID, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, float InStartHeight); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByOutcomeID // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2044970
	void CreateAirdropByItemID(struct UObject* WorldContextObject, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, struct TArray<struct FSolarItemData> ItemDataArr, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, struct ASolarCharacter* InCharacter, float InStartHeight); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByItemID // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20445e0
	void CreateAirdropByCharacter(struct UObject* WorldContextObject, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, struct TArray<struct FSolarItemData> ItemDataArr, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, struct ASolarCharacter* InCharacter, float InStartHeight); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2044250
	void CloseSupplement(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.CloseSupplement // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x20441d0
	void CloseSolarWidget(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass); // Function Solarland.SCustomGameModeLibrary.CloseSolarWidget // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2044110
	void ClearPlayerDataChangeEvent(struct ASCMPlayerState* PlayerState, struct FString DataName); // Function Solarland.SCustomGameModeLibrary.ClearPlayerDataChangeEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2044040
	bool ClearMapUISlot(struct UObject* WorldContextObject, struct FName PanelName); // Function Solarland.SCustomGameModeLibrary.ClearMapUISlot // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2043f70
	void ClearDataChangeEvent(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName); // Function Solarland.SCustomGameModeLibrary.ClearDataChangeEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2043e00
	void ClearCharacterAllItems(struct ASolarCharacter* Player, bool bEmptyWeaponsOnly); // Function Solarland.SCustomGameModeLibrary.ClearCharacterAllItems // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2043d40
	bool ClearBattleUISlot(struct UObject* WorldContextObject, struct FName PanelName); // Function Solarland.SCustomGameModeLibrary.ClearBattleUISlot // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2043c70
	bool ClearBackpackUISlot(struct UObject* WorldContextObject, struct FName PanelName); // Function Solarland.SCustomGameModeLibrary.ClearBackpackUISlot // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2043ba0
	bool ClearBackpackItem(struct ASolarCharacter* InCharacter, int32_t InItemID); // Function Solarland.SCustomGameModeLibrary.ClearBackpackItem // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2043ad0
	bool ChangePlayerSideJob(struct UObject* WorldContextObject, struct ASCMPlayerState* Player, struct FString InSide, struct FString InJob, int32_t PosInTeam); // Function Solarland.SCustomGameModeLibrary.ChangePlayerSideJob // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2043810
	bool ChangePlayerOB(struct UObject* WorldContextObject, struct ASCMPlayerState* Player); // Function Solarland.SCustomGameModeLibrary.ChangePlayerOB // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2043740
	bool ChangePlayerCharacter(struct ASCMPlayerState* TargetPlayer, int32_t CharacterId, int32_t SkinId); // Function Solarland.SCustomGameModeLibrary.ChangePlayerCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2043640
	void CancelAbilityByTag(struct USolarAbilitySystemComponent* SolarAbilitySystemComponent, struct FGameplayTag& AbilityTag); // Function Solarland.SCustomGameModeLibrary.CancelAbilityByTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2043350
	bool BindSpecificRankChangeEvent(struct UObject* WorldContextObject, struct FString RankName, int32_t TargetRank, struct FDelegate& SpecificRankChangeEvent); // Function Solarland.SCustomGameModeLibrary.BindSpecificRankChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20431c0
	bool BindRankListChangeEvent(struct UObject* WorldContextObject, struct FString RankName, struct FSCMRankEventHandle& RankListEventHandle); // Function Solarland.SCustomGameModeLibrary.BindRankListChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2043080
	bool BindPlayerReconnectedGameEvent(struct UObject* WorldContextObject, struct FDelegate& Deletage); // Function Solarland.SCustomGameModeLibrary.BindPlayerReconnectedGameEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2042f90
	bool BindPlayerDataChangeEventVector3(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventVector3 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2042e40
	bool BindPlayerDataChangeEventString(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2042cf0
	bool BindPlayerDataChangeEventInt(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2042ba0
	bool BindPlayerDataChangeEventFloat(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2042a50
	bool BindPlayerDataChangeEventByte(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2042900
	bool BindPlayerDataChangeEventBool(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20427b0
	bool BindHostRankChangeEvent(struct UObject* WorldContextObject, struct FString RankName, struct FString HostID, enum class ESCMHostType HostType, struct FDelegate& HostRankChangeEvent); // Function Solarland.SCustomGameModeLibrary.BindHostRankChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20425e0
	bool BindDataChangeEventVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventVector3 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2042410
	bool BindDataChangeEventString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2042240
	bool BindDataChangeEventInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2042070
	bool BindDataChangeEventFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2041ea0
	bool BindDataChangeEventByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2041cd0
	bool BindDataChangeEventBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2041b00
	bool BeginSpectateOtherPlayer(struct UObject* WorldContextObject, struct ASolarPlayerState* Player, struct ASolarPlayerState* TargetPlayerState); // Function Solarland.SCustomGameModeLibrary.BeginSpectateOtherPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2041a00
	void BeginCruise(struct TArray<struct ASolarCharacter*> CharacterArr, struct UAirlineCruiseComponent* AirlineCruiseComponent, float& IntoParachuteZoneTime, float& ForceParachuteTime, float& CruiseEndTime); // Function Solarland.SCustomGameModeLibrary.BeginCruise // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20417f0
	void AddGameplayCue(struct UAbilitySystemComponent* AbilitySystemComponen, struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SCustomGameModeLibrary.AddGameplayCue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2041600
	enum class EItemModifyResult AddBackpackItem(struct ASolarCharacter* InCharacter, int32_t InItemID, int32_t InItemNum, bool InDropItem); // Function Solarland.SCustomGameModeLibrary.AddBackpackItem // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x20414c0
};

// Class Solarland.SCustomizedGameModeManager
// Size: 0x40 (Inherited: 0x28)
struct USCustomizedGameModeManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USolarGameMode_ElementManager* ElementManager; // 0x30(0x08)
	char pad_38[0x8]; // 0x38(0x08)
};

// Class Solarland.SCustomizedModeManagerInterface
// Size: 0x28 (Inherited: 0x28)
struct USCustomizedModeManagerInterface : UInterface {
};

// Class Solarland.SCustomMode_ElementInterface
// Size: 0x28 (Inherited: 0x28)
struct USCustomMode_ElementInterface : UInterface {

	void ResetElement(); // Function Solarland.SCustomMode_ElementInterface.ResetElement // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xba0000
	void FollowTarget(struct AActor* Target); // Function Solarland.SCustomMode_ElementInterface.FollowTarget // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2054bd0
};

// Class Solarland.SelfHealingCueNotify_Static
// Size: 0xb0 (Inherited: 0x50)
struct USelfHealingCueNotify_Static : UGameplayCueNotify_Static {
	struct FVector RepairUIOffset; // 0x50(0x0c)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct TSoftObjectPtr<UMaterialInstance> RepairMaterial; // 0x60(0x28)
	struct TSoftObjectPtr<UStaticMesh> RepairMesh; // 0x88(0x28)
};

// Class Solarland.SeparatedPackagesSettings
// Size: 0x68 (Inherited: 0x38)
struct USeparatedPackagesSettings : UDeveloperSettings {
	struct FString PackageSavedSubDirctory; // 0x38(0x10)
	struct FString PackageServerSubURL; // 0x48(0x10)
	struct TArray<struct FSeparatedPackageInfo> SeparatedPackagesInfo; // 0x58(0x10)

	bool FindSeparatedPackageInfoByID(int32_t InPkgID, struct FSeparatedPackageInfo& OutInfo); // Function Solarland.SeparatedPackagesSettings.FindSeparatedPackageInfoByID // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2054ac0
};

// Class Solarland.SeparatedPkgDownloader
// Size: 0xf8 (Inherited: 0x28)
struct USeparatedPkgDownloader : UObject {
	struct FMulticastInlineDelegate OnDownloadInfoDetected; // 0x28(0x10)
	struct FMulticastInlineDelegate OnSepPkgDownloading; // 0x38(0x10)
	struct FMulticastInlineDelegate OnSepPkgReady; // 0x48(0x10)
	struct FMulticastInlineDelegate OnSepPkgDownloadFailed; // 0x58(0x10)
	struct FMulticastInlineDelegate OnHashCheckFailedPkgDownloader; // 0x68(0x10)
	enum class EDownloadState DownloadState; // 0x78(0x01)
	char pad_79[0x27]; // 0x79(0x27)
	int64_t StartTimestamp; // 0xa0(0x08)
	char pad_A8[0x50]; // 0xa8(0x50)

	void StartGettingSeparatedPackage(); // Function Solarland.SeparatedPkgDownloader.StartGettingSeparatedPackage // (Final|Native|Public|BlueprintCallable) // @ game+0x2056cb0
	bool ResumeDownloadSeparatedPaks(); // Function Solarland.SeparatedPkgDownloader.ResumeDownloadSeparatedPaks // (Final|Native|Protected) // @ game+0x2056600
	void ResumeDownloading(); // Function Solarland.SeparatedPkgDownloader.ResumeDownloading // (Final|Native|Public|BlueprintCallable) // @ game+0x2056630
	bool PauseDownloadSeparatedPaks(); // Function Solarland.SeparatedPkgDownloader.PauseDownloadSeparatedPaks // (Final|Native|Protected) // @ game+0x2056340
	void OnPaksMountFailed(); // Function Solarland.SeparatedPkgDownloader.OnPaksMountFailed // (Final|Native|Protected) // @ game+0x2056260
	void OnPaksMountCompleted(int32_t InLastMountOrder); // Function Solarland.SeparatedPkgDownloader.OnPaksMountCompleted // (Final|Native|Protected) // @ game+0x20561d0
	void OnPaksFailed(enum class EFileDownloadError InErrorType, int32_t InErrorCode, struct TArray<struct FString>& Headers); // Function Solarland.SeparatedPkgDownloader.OnPaksFailed // (Final|Native|Protected|HasOutParms) // @ game+0x2056070
	void OnPackageListFailed(enum class EFileDownloadError InErrorType, int32_t InErrorCode, struct TArray<struct FString>& Headers); // Function Solarland.SeparatedPkgDownloader.OnPackageListFailed // (Final|Native|Protected|HasOutParms) // @ game+0x2055f10
	void OnHashCheckFailed(); // Function Solarland.SeparatedPkgDownloader.OnHashCheckFailed // (Final|Native|Protected) // @ game+0x2055cb0
	void OnEacPakCompleted(struct FString LocalFilePath, int64_t CDNServerTimeStamp); // Function Solarland.SeparatedPkgDownloader.OnEacPakCompleted // (Final|Native|Protected) // @ game+0x2055a60
	void OnEachPakDownloading(struct FString Filename, int32_t DownloadSize, int32_t TotalSize, int32_t CachedSize); // Function Solarland.SeparatedPkgDownloader.OnEachPakDownloading // (Final|Native|Protected) // @ game+0x2055b40
	void OnAllPaksCompleted(struct TArray<struct FString>& LocalFilePaths, int64_t CDNServerTimeStamp); // Function Solarland.SeparatedPkgDownloader.OnAllPaksCompleted // (Final|Native|Protected|HasOutParms) // @ game+0x2055940
	int64_t GetLocalTime(); // Function Solarland.SeparatedPkgDownloader.GetLocalTime // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2055010
	void CollectPaksFromList(struct FString LocalFilePath, int64_t CDNServerTimeStamp); // Function Solarland.SeparatedPkgDownloader.CollectPaksFromList // (Final|Native|Protected) // @ game+0x20549e0
	void ClearEvents(); // Function Solarland.SeparatedPkgDownloader.ClearEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x2054930
};

// Class Solarland.SeparatedPkgListDownloader
// Size: 0x128 (Inherited: 0x28)
struct USeparatedPkgListDownloader : UObject {
	struct FMulticastInlineDelegate OnSepPkgListDownloading; // 0x28(0x10)
	struct FMulticastInlineDelegate OnSepPkgListReady; // 0x38(0x10)
	char pad_48[0xe0]; // 0x48(0xe0)

	void SepPkgListReady(int32_t PkgID); // Function Solarland.SeparatedPkgListDownloader.SepPkgListReady // (Final|Native|Public) // @ game+0x2056760
	void SepPkgDownloading(int32_t PkgID, int32_t ChunkDownloadedSize, int32_t ChunkTotalSize); // Function Solarland.SeparatedPkgListDownloader.SepPkgDownloading // (Final|Native|Public) // @ game+0x2056650
};

// Class Solarland.SeparatedPkgManager
// Size: 0x158 (Inherited: 0x30)
struct USeparatedPkgManager : UGameInstanceSubsystem {
	struct FMulticastInlineDelegate OnFileListDownloaded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFileListFailed; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSepPkgDataInitFinish; // 0x50(0x10)
	char pad_60[0x90]; // 0x60(0x90)
	struct TMap<int32_t, struct USeparatedPkgDownloader*> ActiveDownloaders; // 0xf0(0x50)
	struct USolarlandFileDownloader* FileListDownloader; // 0x140(0x08)
	char pad_148[0x10]; // 0x148(0x10)

	bool TryStartDownloadHighResResources(struct USeparatedPkgListDownloader*& OutDownloder); // Function Solarland.SeparatedPkgManager.TryStartDownloadHighResResources // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2056cd0
	void StartDownloadFileList(struct FString InCurrentCDNURL); // Function Solarland.SeparatedPkgManager.StartDownloadFileList // (Final|Native|Public) // @ game+0x2056c10
	bool RequireSeparatedPackageListDownload(struct TArray<int32_t>& PkgIDList, struct USeparatedPkgListDownloader*& OutDownloader); // Function Solarland.SeparatedPkgManager.RequireSeparatedPackageListDownload // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2056500
	bool RequireSeparatedPackageDownload(int32_t InPkgID, struct USeparatedPkgDownloader*& OutDownloader, bool bIncludeMain, bool bIncludeOptional); // Function Solarland.SeparatedPkgManager.RequireSeparatedPackageDownload // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2056370
	void OnPackageFileListFailed(enum class EFileDownloadError InErrorType, int32_t InErrorCode, struct TArray<struct FString>& Headers); // Function Solarland.SeparatedPkgManager.OnPackageFileListFailed // (Final|Native|Protected|HasOutParms) // @ game+0x2055db0
	void OnPackageFileListDownload(struct FString LocalFilePath, int64_t CDNServerTimeStamp); // Function Solarland.SeparatedPkgManager.OnPackageFileListDownload // (Final|Native|Protected) // @ game+0x2055cd0
	bool IsSepareatedPkgListDownloading(struct TArray<int32_t>& PkgIDList); // Function Solarland.SeparatedPkgManager.IsSepareatedPkgListDownloading // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2055690
	bool IsSepareatedPkgDownloading(int32_t& PkgID); // Function Solarland.SeparatedPkgManager.IsSepareatedPkgDownloading // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20555f0
	bool IsSeparatedPackageListAvailable(struct TArray<int32_t>& PkgIDList); // Function Solarland.SeparatedPkgManager.IsSeparatedPackageListAvailable // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2055530
	bool IsSeparatedPackageFileListExist(); // Function Solarland.SeparatedPkgManager.IsSeparatedPackageFileListExist // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2055500
	bool IsSeparatedPackageAvailable(int32_t InPkgID); // Function Solarland.SeparatedPkgManager.IsSeparatedPackageAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2055460
	void InitPakIDToFileNameMap(); // Function Solarland.SeparatedPkgManager.InitPakIDToFileNameMap // (Final|Native|Public|BlueprintCallable) // @ game+0x2055380
	bool IfSeparatedPakDownloaded(int32_t PakID, bool bIsOptional); // Function Solarland.SeparatedPkgManager.IfSeparatedPakDownloaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20551f0
	bool GetTotalSizeOfPak(int32_t InPackageID, int32_t& OutTotalSize); // Function Solarland.SeparatedPkgManager.GetTotalSizeOfPak // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20550f0
	struct USeparatedPkgManager* GetSeparatedPackageManager(struct UObject* WorldContextObject); // Function Solarland.SeparatedPkgManager.GetSeparatedPackageManager // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2055060
	int32_t GetDownloadedSizeOfPak(int32_t ChunkID); // Function Solarland.SeparatedPkgManager.GetDownloadedSizeOfPak // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2054f40
	struct USeparatedPkgDownloader* GetActiveDownloader(int32_t InPkgID); // Function Solarland.SeparatedPkgManager.GetActiveDownloader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2054c60
	void ClearSepPkgDownloader(int32_t InPkgID); // Function Solarland.SeparatedPkgManager.ClearSepPkgDownloader // (Final|Native|Public|BlueprintCallable) // @ game+0x2054950
	void ClearAllDownloaders(); // Function Solarland.SeparatedPkgManager.ClearAllDownloaders // (Final|Native|Public|BlueprintCallable) // @ game+0x20548f0
	void AllOptionalPaksDownloaded(bool bAllDownloaded); // Function Solarland.SeparatedPkgManager.AllOptionalPaksDownloaded // (Final|Native|Public) // @ game+0x2054700
};

// Class Solarland.SequenceNode
// Size: 0x90 (Inherited: 0x70)
struct USequenceNode : UActionNode {
	struct TArray<struct UActionNode*> Nodes; // 0x70(0x10)
	struct TArray<struct UActionNode*> ExecutingNodes; // 0x80(0x10)

	int32_t TotalCount(); // Function Solarland.SequenceNode.TotalCount // (Final|Native|Public) // @ game+0x205b120
	struct UActionNode* GetCurrentExecutingNode(); // Function Solarland.SequenceNode.GetCurrentExecutingNode // (Final|Native|Public) // @ game+0x205a900
	struct USequenceNode* Append(struct UActionNode* Node); // Function Solarland.SequenceNode.Append // (Final|Native|Public) // @ game+0x205a620
};

// Class Solarland.SettlementFormula
// Size: 0x228 (Inherited: 0x228)
struct ASettlementFormula : AActor {

	struct TArray<struct FString> MakeStringForLuaByAnyStruct(struct UObject* AnyStruct); // Function Solarland.SettlementFormula.MakeStringForLuaByAnyStruct // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x205af50
	int32_t GetZomborg(struct FSettlementParam_Zomborg& InParam); // Function Solarland.SettlementFormula.GetZomborg // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x205ae90
	void GetWeeklyChallenge(struct FString InSolarPlayerID, struct TArray<struct FString>& OutChallengeName, struct TArray<int32_t>& OutChallengeValue); // Function Solarland.SettlementFormula.GetWeeklyChallenge // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetWeaponExp(struct FSettlementParam_WeaponExp& InParam); // Function Solarland.SettlementFormula.GetWeaponExp // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x205adf0
	void GetStrategyGuideConditions(struct ASolarPlayerState* InPS, struct TArray<int32_t>& OutResult); // Function Solarland.SettlementFormula.GetStrategyGuideConditions // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<int32_t> GetShowPageIndexs(struct FSettlementParam_PageParam& InParam); // Function Solarland.SettlementFormula.GetShowPageIndexs // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<struct FString> GetSettlementItems(struct FSettlementParam_CommonExp& InParam); // Function Solarland.SettlementFormula.GetSettlementItems // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<struct FString> GetPersonalResultPlayerExData(struct FString SolarPlayerID, struct FString& PBName); // Function Solarland.SettlementFormula.GetPersonalResultPlayerExData // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x205aac0
	float GetKDA(struct FSettlementParam_KDA& InParam); // Function Solarland.SettlementFormula.GetKDA // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<struct FString> GetGroupResultPlayerExData(struct FString SolarPlayerID, struct FString& PBName); // Function Solarland.SettlementFormula.GetGroupResultPlayerExData // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x205a960
	struct TArray<struct FSettlementParam_ExtraRewardInfo> GetExtraRewards(struct FSettlementParam_CommonExp& InParam); // Function Solarland.SettlementFormula.GetExtraRewards // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetCharaterExp(struct FSettlementParam_CommonExp& InParam, struct FSolarGameModeInfo& InGameInfo); // Function Solarland.SettlementFormula.GetCharaterExp // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x205a7e0
	int32_t GetAccountExp(struct FSettlementParam_CommonExp& InParam, struct FSolarGameModeInfo& InGameInfo); // Function Solarland.SettlementFormula.GetAccountExp // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x205a6c0
	float CalculateMVPScore(struct FSolarGameModeInfo& GameInfo, struct FSettlementParam_MVP& Param); // Function Solarland.SettlementFormula.CalculateMVPScore // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SettlementGameMode
// Size: 0x568 (Inherited: 0x558)
struct ASettlementGameMode : ASolarGameMode {
	char pad_558[0x10]; // 0x558(0x10)

	void PostLevelLoad(); // Function Solarland.SettlementGameMode.PostLevelLoad // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SettlementPageConfig
// Size: 0x80 (Inherited: 0x30)
struct USettlementPageConfig : UDataAsset {
	int32_t PageSkipIndex; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct TSoftClassPtr<UObject>> SettlementPage; // 0x38(0x10)
	struct FString EnterSettleSoundEvent; // 0x48(0x10)
	struct FString ExitSettleSoundEvent; // 0x58(0x10)
	struct TArray<int32_t> PageIndexs; // 0x68(0x10)
	bool IsCustomRoom; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Solarland.SettlementStageManager
// Size: 0x50 (Inherited: 0x28)
struct USettlementStageManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USolarGameInstanceBase* SolarGameInstance; // 0x30(0x08)
	int32_t CurStageIndex; // 0x38(0x04)
	int32_t SettlementStageConfigID; // 0x3c(0x04)
	struct UDataTable* SettlementConfig; // 0x40(0x08)
	struct ASettlementFormula* Formula; // 0x48(0x08)

	void UpdateModeConfig(int32_t InConfigID); // Function Solarland.SettlementStageManager.UpdateModeConfig // (Final|Native|Public) // @ game+0x205b150
	void SkipToTarget(); // Function Solarland.SettlementStageManager.SkipToTarget // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void ShowNextStage(); // Function Solarland.SettlementStageManager.ShowNextStage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void ShowDiePage(); // Function Solarland.SettlementStageManager.ShowDiePage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void Init(); // Function Solarland.SettlementStageManager.Init // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct USolarUWSettlementBase* GetSettlementUIClass(); // Function Solarland.SettlementStageManager.GetSettlementUIClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x205adb0
	int32_t GetSettlementStageID(); // Function Solarland.SettlementStageManager.GetSettlementStageID // (Final|Native|Public|Const) // @ game+0x205ad80
	struct FSettlementConfig GetSettlementConfigRow(); // Function Solarland.SettlementStageManager.GetSettlementConfigRow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x205ac20
	struct ASettlementFormula* GetFormula(); // Function Solarland.SettlementStageManager.GetFormula // (Final|Native|Public) // @ game+0x205a930
	struct FString GetClassRelativePathName(struct UObject* InClass); // Function Solarland.SettlementStageManager.GetClassRelativePathName // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void CloseDiePage(); // Function Solarland.SettlementStageManager.CloseDiePage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.ShieldUpgradeItemShopAnimInst
// Size: 0x270 (Inherited: 0x270)
struct UShieldUpgradeItemShopAnimInst : UAnimInstance {
	enum class EShieldUpgradeItemShopOpenState OpenState; // 0x268(0x01)
};

// Class Solarland.SNonCombatGameMode
// Size: 0x558 (Inherited: 0x558)
struct ASNonCombatGameMode : ASolarGameMode {
};

// Class Solarland.SHomeGameMode
// Size: 0x560 (Inherited: 0x558)
struct ASHomeGameMode : ASNonCombatGameMode {
	char pad_558[0x8]; // 0x558(0x08)

	struct APawn* SpawnHomePawnAtTransformAndPossess(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Solarland.SHomeGameMode.SpawnHomePawnAtTransformAndPossess // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x205b000
	void OnSelfPawnSpawned(); // Function Solarland.SHomeGameMode.OnSelfPawnSpawned // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnReceiveRoomData(); // Function Solarland.SHomeGameMode.OnReceiveRoomData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void InitFavoriteWeapons(); // Function Solarland.SHomeGameMode.InitFavoriteWeapons // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SNonCombatGameState
// Size: 0x440 (Inherited: 0x440)
struct ASNonCombatGameState : ASolarGameState {
};

// Class Solarland.SHomeGameState
// Size: 0x440 (Inherited: 0x440)
struct ASHomeGameState : ASNonCombatGameState {
};

// Class Solarland.ShootingTargetSettings
// Size: 0x60 (Inherited: 0x38)
struct UShootingTargetSettings : UDeveloperSettings {
	float ShootingTargetCleanupTime; // 0x38(0x04)
	int32_t RingSegments; // 0x3c(0x04)
	float RingSize; // 0x40(0x04)
	float HitPointSize; // 0x44(0x04)
	bool bIgnoreDPIScale; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float HUDRingRadius; // 0x4c(0x04)
	struct FVector2D HUDRingOffset; // 0x50(0x08)
	struct FVector2D HUDTextOffsetOnRing; // 0x58(0x08)
};

// Class Solarland.ShootingTargetComponent
// Size: 0x380 (Inherited: 0x320)
struct UShootingTargetComponent : USceneComponent {
	struct TArray<struct FShootingTargetRing> Rings; // 0x318(0x10)
	bool bAutoShowDebug; // 0x328(0x01)
	bool bAutoCleanup; // 0x329(0x01)
	char pad_332[0x4e]; // 0x332(0x4e)

	void K2_OnScoreUpdated(float TotalScore, struct TArray<float>& RingScores); // Function Solarland.ShootingTargetComponent.K2_OnScoreUpdated // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void K2_OnCleanup(); // Function Solarland.ShootingTargetComponent.K2_OnCleanup // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SimpleEffectController
// Size: 0x40 (Inherited: 0x28)
struct USimpleEffectController : UActorEffectController {
	float SmoothSpeed; // 0x28(0x04)
	float TargetValue; // 0x2c(0x04)
	bool bFinishOnReached; // 0x30(0x01)
	bool bSmoothToValueOnStop; // 0x31(0x01)
	char pad_32[0x2]; // 0x32(0x02)
	float TargetValueOnStop; // 0x34(0x04)
	char pad_38[0x8]; // 0x38(0x08)
};

// Class Solarland.SingleWeaponConfig
// Size: 0x8a8 (Inherited: 0x30)
struct USingleWeaponConfig : UDataAsset {
	struct FWeaponDebugFlag DebugFlag; // 0x30(0x04)
	enum class ESolarWeaponBrand WeaponBrand; // 0x34(0x01)
	enum class EWeaponType WeaponType; // 0x35(0x01)
	bool bSupportSecondaryFire; // 0x36(0x01)
	char pad_37[0x1]; // 0x37(0x01)
	struct TMap<struct FString, float> CharacterStateWeightMap; // 0x38(0x50)
	struct TArray<struct FMoveSpeedReduceCurveConfig> MoveSpeedReduceCurveConfigs; // 0x88(0x10)
	float MoveSpeedReduceBonusInHipFire; // 0x98(0x04)
	float MoveSpeedReduceBonusInAdsHipFire; // 0x9c(0x04)
	struct TArray<struct FSolarWeaponFireSocketData> FireSockets; // 0xa0(0x10)
	struct TArray<struct FName> MultiMuzzleSocketNames; // 0xb0(0x10)
	struct TArray<struct FName> MultiBulletSocketNames; // 0xc0(0x10)
	struct TArray<struct FName> MultiCastShellSocketNames; // 0xd0(0x10)
	struct TArray<struct FName> MultiCastShellOnScopeSocketNames; // 0xe0(0x10)
	bool bIsSingleWeapon; // 0xf0(0x01)
	bool bCanSuspendBolt; // 0xf1(0x01)
	bool bIsHeavyFireWeapon; // 0xf2(0x01)
	bool bIsFlamethrowerWeapon; // 0xf3(0x01)
	bool bUseSpecialFireInputRespondConfig; // 0xf4(0x01)
	struct FSolarWeaponFireInputRespondConfig FireInputRespondConfig; // 0xf5(0x0a)
	bool bSupportSingleShootMode; // 0xff(0x01)
	bool bSupportAutoShootMode; // 0x100(0x01)
	bool bSupportBurstShootMode; // 0x101(0x01)
	char pad_102[0x2]; // 0x102(0x02)
	float AimOffsetReferenceAimDistance; // 0x104(0x04)
	float MaxSpread; // 0x108(0x04)
	float MinSpread; // 0x10c(0x04)
	float HipFireBaseSpread; // 0x110(0x04)
	float ShoulderFireBaseSpread; // 0x114(0x04)
	float ADSBaseSpread; // 0x118(0x04)
	float VhADSBaseSpread; // 0x11c(0x04)
	struct UWeaponShootConfig* WeaponShootConfig; // 0x120(0x08)
	bool bCalcSpreadByStandardDistance; // 0x128(0x01)
	char pad_129[0x3]; // 0x129(0x03)
	float SpreadStandardDistance; // 0x12c(0x04)
	float SpreadStandardOriginMaxRange; // 0x130(0x04)
	bool bCalcSpreadByDistributionCurve; // 0x134(0x01)
	char pad_135[0x3]; // 0x135(0x03)
	struct FRuntimeFloatCurve SpreadDistributionCurve; // 0x138(0x88)
	struct TMap<struct FString, float> SpreadCOPMap; // 0x1c0(0x50)
	float SpreadStatuSpeed; // 0x210(0x04)
	char pad_214[0x4]; // 0x214(0x04)
	struct TMap<struct FString, float> SpreadStatuIncreaseCoefficient; // 0x218(0x50)
	struct TMap<struct FString, float> SpreadStatuReduceCoefficient; // 0x268(0x50)
	struct TArray<struct FVector2D> CustomSpreadArray; // 0x2b8(0x10)
	struct USolarWeaponAT_CtrlFireBase* CtrlFireTaskClass; // 0x2c8(0x08)
	struct USolarWeaponAT_FireBase* FireTaskClass; // 0x2d0(0x08)
	struct UAmmoConfig* PrimaryAmmo; // 0x2d8(0x08)
	int32_t PrimaryAmmoIndex; // 0x2e0(0x04)
	int32_t PrimaryAmmoCap; // 0x2e4(0x04)
	struct UAmmoConfig* SecondaryAmmo; // 0x2e8(0x08)
	int32_t SecondaryAmmoIndex; // 0x2f0(0x04)
	int32_t SecondaryAmmoCap; // 0x2f4(0x04)
	struct UAmmoConfig* UpgradedSecAmmo; // 0x2f8(0x08)
	struct FLinearColor UpgradedSecAmmoColor; // 0x300(0x10)
	bool bNeedOverload; // 0x310(0x01)
	char pad_311[0x3]; // 0x311(0x03)
	float OverloadMaxValue; // 0x314(0x04)
	float NormalOverloadCoolingRate; // 0x318(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)
	struct UCurveFloat* NormalOverloadCoolingCurve; // 0x320(0x08)
	float OverloadCoolingPeriod; // 0x328(0x04)
	char pad_32C[0x4]; // 0x32c(0x04)
	struct UCurveFloat* OverloadReduceRateCurve; // 0x330(0x08)
	float OverloadWarningRate; // 0x338(0x04)
	float WeaponSwitchTime; // 0x33c(0x04)
	bool bCanAutoFire; // 0x340(0x01)
	char pad_341[0x3]; // 0x341(0x03)
	float AutoFireDelayMs; // 0x344(0x04)
	float AutoFireEndDelayMs; // 0x348(0x04)
	float AutoFireCompensationRate; // 0x34c(0x04)
	bool bCanAimAssist; // 0x350(0x01)
	char pad_351[0x7]; // 0x351(0x07)
	struct FWeaponAssistAimWeaponConfigAll AssistAimWeaponConfigAll; // 0x358(0x60)
	struct FWeaponAssistAimWeaponConfigAll AssistAimWeaponConfigAllGamepad; // 0x3b8(0x60)
	struct FSolarWeaponFPPData DefaultFPPData; // 0x418(0x68)
	struct TArray<struct FSolarWeaponFPPConfig> FPPConfigByAspectRatioArray; // 0x480(0x10)
	bool bOneKeyScope; // 0x490(0x01)
	char pad_491[0x3]; // 0x491(0x03)
	float ScopeOpenTime; // 0x494(0x04)
	float ScopeOpenFOVTimeScale; // 0x498(0x04)
	char pad_49C[0x4]; // 0x49c(0x04)
	struct TArray<enum class EWeaponPartType> SupportChangeTypeArray; // 0x4a0(0x10)
	struct TArray<int32_t> DefaultPartsArray; // 0x4b0(0x10)
	float RecoilFireTimeWithScope; // 0x4c0(0x04)
	float RecoilRecoverTimeWithScope; // 0x4c4(0x04)
	float RecoilMagnitudeWithScope; // 0x4c8(0x04)
	char pad_4CC[0x4]; // 0x4cc(0x04)
	struct UCurveFloat* RecoilCurveWithScope; // 0x4d0(0x08)
	int32_t RecoilSkipSequenceSumWithScope; // 0x4d8(0x04)
	char pad_4DC[0x4]; // 0x4dc(0x04)
	struct TArray<struct FVector2D> RecoilCurveSequenceWithScope; // 0x4e0(0x10)
	float RecoilFireTimeNoScope; // 0x4f0(0x04)
	float RecoilRecoverTimeNoScope; // 0x4f4(0x04)
	float RecoilMagnitudeNoScope; // 0x4f8(0x04)
	char pad_4FC[0x4]; // 0x4fc(0x04)
	struct UCurveFloat* RecoilCurveNoScope; // 0x500(0x08)
	int32_t RecoilSkipSequenceSumNoScope; // 0x508(0x04)
	char pad_50C[0x4]; // 0x50c(0x04)
	struct TArray<struct FVector2D> RecoilCurveSequenceNoScope; // 0x510(0x10)
	bool bIsGatling; // 0x520(0x01)
	char pad_521[0x3]; // 0x521(0x03)
	float GatlingRotaryAcceleration; // 0x524(0x04)
	float GatlingFireRotarySpeed; // 0x528(0x04)
	float GatlingMaxRotarySpeed; // 0x52c(0x04)
	float GatlingHoldTime; // 0x530(0x04)
	float GatlingRotaryAttenuation; // 0x534(0x04)
	float GatlingScatteringMagnification; // 0x538(0x04)
	char pad_53C[0x4]; // 0x53c(0x04)
	struct UParticleSystem* GatlingOverHeatSmokeEffect; // 0x540(0x08)
	struct TArray<struct UGameplayAbility*> GasAbilities; // 0x548(0x10)
	float HeadshotDamageFactor; // 0x558(0x04)
	struct FName Socket; // 0x55c(0x08)
	struct FName LeftHandIKTargetSocket; // 0x564(0x08)
	struct FName LeftHandIKTargetFemaleSocket; // 0x56c(0x08)
	struct FVector LeftHandIkEffectLocation; // 0x574(0x0c)
	struct FVector LeftHandIkJointLocation; // 0x580(0x0c)
	struct FVector LeftHandIkJointLocationForGunIdle; // 0x58c(0x0c)
	struct FVector LeftHandIkJointLocationForGunIdleWhenCrouch; // 0x598(0x0c)
	struct FVector RightHandIkEffectLocation; // 0x5a4(0x0c)
	struct FVector RightHandIkJointLocation; // 0x5b0(0x0c)
	struct FLeftHandGripConfig LeftHandGripRotationConfig; // 0x5bc(0x84)
	struct FLeftHandGripConfig LeftHandGripRotationConfigForGunIdle; // 0x640(0x84)
	bool bShowCoolDownWidget; // 0x6c4(0x01)
	char pad_6C5[0x3]; // 0x6c5(0x03)
	struct UCrossHairWidget* Crosshair; // 0x6c8(0x08)
	struct UFeedbackWidget* FeedbackWidget; // 0x6d0(0x08)
	struct FSolarWeaponCrosshairData CrosshairWidgetData; // 0x6d8(0x38)
	struct FSoftObjectPath WeaponIcon; // 0x710(0x18)
	struct FSlateBrush PrimaryFireBrush; // 0x728(0x98)
	int32_t PrimaryFireTxt; // 0x7c0(0x04)
	char pad_7C4[0x4]; // 0x7c4(0x04)
	struct FSlateBrush SecondaryFireBrush; // 0x7c8(0x98)
	int32_t SecondaryFireTxt; // 0x860(0x04)
	char pad_864[0x4]; // 0x864(0x04)
	struct FString WeaponTextType; // 0x868(0x10)
	struct FSoftObjectPath ItemIcon; // 0x878(0x18)
	struct FSoftObjectPath UpgradeParticleSystem; // 0x890(0x18)

	void InitSupportChangeTypeArray(struct TArray<int32_t> Data); // Function Solarland.SingleWeaponConfig.InitSupportChangeTypeArray // (Final|Native|Public) // @ game+0x205d480
	void InitStatuSpreadCoefficient(struct TArray<struct FString>& Increasekeys, struct TArray<float>& Increasevalues, struct TArray<struct FString>& Reducekeys, struct TArray<float>& Reducevalues); // Function Solarland.SingleWeaponConfig.InitStatuSpreadCoefficient // (Final|Native|Public|HasOutParms) // @ game+0x205d250
	void InitSpreadData(float Max, float Min, float hipbase, float adsbase, float vhadsbase, float statuspeed); // Function Solarland.SingleWeaponConfig.InitSpreadData // (Final|Native|Public) // @ game+0x205d050
	void InitSpreadCOPMap(struct TArray<struct FString>& Keys, struct TArray<float>& Values); // Function Solarland.SingleWeaponConfig.InitSpreadCOPMap // (Final|Native|Public|HasOutParms) // @ game+0x205cf10
	void InitScopeData(bool onekey, float scopetime); // Function Solarland.SingleWeaponConfig.InitScopeData // (Final|Native|Public) // @ game+0x205ce40
	void InitOverload(bool InAllow, float InMax, float InNormalCoolingRate, float InCoolingPeriod, float InOverloadWarningRate); // Function Solarland.SingleWeaponConfig.InitOverload // (Final|Native|Public) // @ game+0x205cc90
	void InitBase(int32_t WPType); // Function Solarland.SingleWeaponConfig.InitBase // (Final|Native|Public) // @ game+0x205cc00
	bool GetIsSupportPart(enum class EWeaponPartType Type); // Function Solarland.SingleWeaponConfig.GetIsSupportPart // (Final|Native|Public) // @ game+0x205cb70
};

// Class Solarland.SkeletalMeshComponentConfig
// Size: 0x60 (Inherited: 0x30)
struct USkeletalMeshComponentConfig : UDataAsset {
	struct FSoftObjectPath AnimClass; // 0x30(0x18)
	struct FSoftObjectPath SkeletalMesh; // 0x48(0x18)
};

// Class Solarland.SkillBPAndExtraConfig
// Size: 0x98 (Inherited: 0x30)
struct USkillBPAndExtraConfig : UDataAsset {
	struct FSoftObjectPath SkillBlueprint; // 0x30(0x18)
	int32_t SkillLevel; // 0x48(0x04)
	int32_t SkillItemQuality; // 0x4c(0x04)
	int32_t InnerSkillDescription; // 0x50(0x04)
	int32_t ShortSkillDescription; // 0x54(0x04)
	int32_t SkillCD; // 0x58(0x04)
	int32_t BuffUIPriority; // 0x5c(0x04)
	float DynamicBuffRemainTime; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct FSoftObjectPath SkillIcon; // 0x68(0x18)
	struct FSoftObjectPath GrowIcon; // 0x80(0x18)
};

// Class Solarland.SkillConfig
// Size: 0xd0 (Inherited: 0x30)
struct USkillConfig : UDataAsset {
	int32_t SkillName; // 0x30(0x04)
	int32_t SkillType; // 0x34(0x04)
	int32_t SkillDescription; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FSoftObjectPath SkillIcon; // 0x40(0x18)
	struct FString KillIcon; // 0x58(0x10)
	float SkillVoiceDelay; // 0x68(0x04)
	char CanCancelPhaseFlag; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)
	float CanCancelContinuousBegin; // 0x70(0x04)
	float CanCancelContinuousEnd; // 0x74(0x04)
	char VoiceTriggerTiming; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct TMap<int32_t, struct USkillBPAndExtraConfig*> SkillExtraConfigByPlayerLevel; // 0x80(0x50)
};

// Class Solarland.SkillScanWidget
// Size: 0x348 (Inherited: 0x348)
struct USkillScanWidget : USolarUserWidget {

	void OnCameraRight(float Value); // Function Solarland.SkillScanWidget.OnCameraRight // (Final|Native|Public) // @ game+0x20628c0
	void OnCameraForward(float Value); // Function Solarland.SkillScanWidget.OnCameraForward // (Final|Native|Public) // @ game+0x2062840
};

// Class Solarland.SkydiveConfig
// Size: 0x1b8 (Inherited: 0x30)
struct USkydiveConfig : UDataAsset {
	float DefaultFallingSpeed; // 0x30(0x04)
	float MinFallingSpeed; // 0x34(0x04)
	float FallingBrakingDeceleration; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRuntimeFloatCurve FlyingForwardPitchMappingCurve; // 0x40(0x88)
	struct FRuntimeFloatCurve MaxFlyingForwardSpeedCurve; // 0xc8(0x88)
	float MaxFlyingSidewardSpeed; // 0x150(0x04)
	float MaxFlyingAcceleration; // 0x154(0x04)
	float MinFlyingBrakingDeceleration; // 0x158(0x04)
	float MaxFlyingBrakingDeceleration; // 0x15c(0x04)
	float FlyingRotationSmoothSpeedYaw; // 0x160(0x04)
	float FlyingRotationSmoothSpeedPitch; // 0x164(0x04)
	float FlyingRotationSmoothSpeedYawOnFollowing; // 0x168(0x04)
	float FlyingRotationSmoothSpeedPitchOnFollowing; // 0x16c(0x04)
	float LandingHeight; // 0x170(0x04)
	float LandingFallingSpeed; // 0x174(0x04)
	float LandingFallingBrakingDeceleration; // 0x178(0x04)
	float LandingMaxFlyingSpeed; // 0x17c(0x04)
	float LandingFlyingAcceleration; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
	struct TArray<struct FName> LandingIgnoredActorTags; // 0x188(0x10)
	struct TArray<struct FVector> FollowFormation; // 0x198(0x10)
	float SmoothTimeToCatchUpWithLeaderOnBeginning; // 0x1a8(0x04)
	struct FCharacterMovementNetworkOptions NetworkOptions; // 0x1ac(0x0c)
};

// Class Solarland.SkydivingFollowWidget
// Size: 0x368 (Inherited: 0x348)
struct USkydivingFollowWidget : USolarUserWidget {
	char pad_348[0x20]; // 0x348(0x20)

	void UpdateRouletteOpenState(bool bIsOpen); // Function Solarland.SkydivingFollowWidget.UpdateRouletteOpenState // (Final|Native|Protected|BlueprintCallable) // @ game+0x2063db0
	void UpdateRouletteForbidStateForPosInTeam(int32_t PosInTeam, bool bForbid); // Function Solarland.SkydivingFollowWidget.UpdateRouletteForbidStateForPosInTeam // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void ToggleRoulette(); // Function Solarland.SkydivingFollowWidget.ToggleRoulette // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SwitchToUnfollow(); // Function Solarland.SkydivingFollowWidget.SwitchToUnfollow // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SwitchToTransfer(float CooldownStartTime, float CooldownEndTime); // Function Solarland.SkydivingFollowWidget.SwitchToTransfer // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SwitchToFollow(); // Function Solarland.SkydivingFollowWidget.SwitchToFollow // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetRouletteVisibility(bool bVisible); // Function Solarland.SkydivingFollowWidget.SetRouletteVisibility // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetRelationButtonGroupVisibility(bool bVisible); // Function Solarland.SkydivingFollowWidget.SetRelationButtonGroupVisibility // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetParachuteButtonVisibility(bool bVisible); // Function Solarland.SkydivingFollowWidget.SetParachuteButtonVisibility // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetCruisePlayerNumVisibility(bool bVisible); // Function Solarland.SkydivingFollowWidget.SetCruisePlayerNumVisibility // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnSkydivingRouletteSelect(int32_t PosInTeam); // Function Solarland.SkydivingFollowWidget.OnSkydivingRouletteSelect // (Final|Native|Protected|BlueprintCallable) // @ game+0x2062d40
	void OnCruiseCharacterCountUpdated(int32_t TotalCount, int32_t CruiseCount); // Function Solarland.SkydivingFollowWidget.OnCruiseCharacterCountUpdated // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void NotifyCannotFollowTeammateAt(int32_t PosInTeam, bool bSelfHasFollower); // Function Solarland.SkydivingFollowWidget.NotifyCannotFollowTeammateAt // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void InitRouletteMemberPosition(struct TArray<int32_t>& PositionArray); // Function Solarland.SkydivingFollowWidget.InitRouletteMemberPosition // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void ExpandRoulette(); // Function Solarland.SkydivingFollowWidget.ExpandRoulette // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void CollapseRoulette(); // Function Solarland.SkydivingFollowWidget.CollapseRoulette // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SummonItemBase
// Size: 0x3e0 (Inherited: 0x288)
struct ASummonItemBase : APawn {
	char pad_288[0x20]; // 0x288(0x20)
	struct UAkComponent* AkAudioComponent; // 0x2a8(0x08)
	struct UStaticMeshComponent* HPBar; // 0x2b0(0x08)
	struct FSpawnedActorHandle CachedActorHandle; // 0x2b8(0x04)
	struct TWeakObjectPtr<struct ASolarCharacter> SourceSummoner; // 0x2bc(0x08)
	enum class ESolarSummonDeathReason DeathReason; // 0x2c4(0x01)
	char pad_2C5[0x3]; // 0x2c5(0x03)
	float CurrentHealth; // 0x2c8(0x04)
	bool bDead; // 0x2cc(0x01)
	char pad_2CD[0x3]; // 0x2cd(0x03)
	float FunctionalTimerMax; // 0x2d0(0x04)
	float FunctionalTimerDelta; // 0x2d4(0x04)
	char pad_2D8[0x14]; // 0x2d8(0x14)
	struct FVector CenterOffset; // 0x2ec(0x0c)
	struct FGameplayEffectSpecHandle GEToSelfHandle; // 0x2f8(0x10)
	struct FGameplayEffectSpecHandle GEToTargetHandle; // 0x308(0x10)
	float MaxHealth; // 0x318(0x04)
	float ReducedHealth; // 0x31c(0x04)
	float DelayDestroyTime; // 0x320(0x04)
	bool bTeammateDamage; // 0x324(0x01)
	bool bSuicideWithSummonerChange; // 0x325(0x01)
	char pad_326[0x2]; // 0x326(0x02)
	float TimeDuration; // 0x328(0x04)
	bool bOnlyOne; // 0x32c(0x01)
	bool bEnableHPBar; // 0x32d(0x01)
	bool bHPDefaultVisible; // 0x32e(0x01)
	char pad_32F[0x1]; // 0x32f(0x01)
	struct FName HPBarTagName; // 0x330(0x08)
	struct FName HPBarPercentName; // 0x338(0x08)
	struct FName HPBarColorName; // 0x340(0x08)
	struct FLinearColor HPBarColorTeammate; // 0x348(0x10)
	struct FLinearColor HPBarColorEnemy; // 0x358(0x10)
	int32_t HPBarMaterialIndex; // 0x368(0x04)
	struct FVector CenterLocationOffset; // 0x36c(0x0c)
	float DestroyDeathWithinSeconds; // 0x378(0x04)
	bool bSupportAssistAim; // 0x37c(0x01)
	char pad_37D[0x3]; // 0x37d(0x03)
	struct FWeaponAssistAimTargetConfig AssistAimTargetConfig; // 0x380(0x48)
	bool bCanAffectedByEMP; // 0x3c8(0x01)
	bool bShowDamageText; // 0x3c9(0x01)
	char pad_3CA[0x6]; // 0x3ca(0x06)
	struct USolarSpawnAdjustConfig* SpawnAdjustConfig; // 0x3d0(0x08)
	bool bDebug; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)

	void SwitchFunctionalTimer(bool InbEnable, float InMaxTime); // Function Solarland.SummonItemBase.SwitchFunctionalTimer // (Final|Native|Protected|BlueprintCallable) // @ game+0x228d180
	void Suicide(); // Function Solarland.SummonItemBase.Suicide // (Final|Native|Public|BlueprintCallable) // @ game+0x228d160
	bool RequestPlaySoundByTeam(struct TMap<enum class ESolarSummonSoundType, struct FSolarSummonSoundData>& InSoundData); // Function Solarland.SummonItemBase.RequestPlaySoundByTeam // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x228d000
	bool RequestPlaySound(struct TArray<struct FString>& InSoundData); // Function Solarland.SummonItemBase.RequestPlaySound // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x228cf20
	void ReceiveUpdateHealthEvent(float InCurrentHealthRate); // Function Solarland.SummonItemBase.ReceiveUpdateHealthEvent // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveUpdateFunctionalTimerEvent(float InTimerRate); // Function Solarland.SummonItemBase.ReceiveUpdateFunctionalTimerEvent // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveDeathEvent(enum class ESolarSummonDeathReason InDeathReason); // Function Solarland.SummonItemBase.ReceiveDeathEvent // (Native|Event|Protected|BlueprintEvent) // @ game+0x228cca0
	void OnSourceCharacterChange(); // Function Solarland.SummonItemBase.OnSourceCharacterChange // (Native|Protected) // @ game+0x1554540
	void OnRep_Dead(); // Function Solarland.SummonItemBase.OnRep_Dead // (Final|Native|Protected) // @ game+0x228cc80
	void OnRep_CurrentHealth(); // Function Solarland.SummonItemBase.OnRep_CurrentHealth // (Final|Native|Protected) // @ game+0x228cc60
	bool IsDead(); // Function Solarland.SummonItemBase.IsDead // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x228bff0
	struct TWeakObjectPtr<struct ASolarCharacter> GetSourceSummoner(); // Function Solarland.SummonItemBase.GetSourceSummoner // (Final|Native|Public|Const) // @ game+0x228bf80
	float GetMaxHealth(); // Function Solarland.SummonItemBase.GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x228bf50
	float GetCurrentHealth(); // Function Solarland.SummonItemBase.GetCurrentHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x228bf20
	struct UObject* GetClassType(); // Function Solarland.SummonItemBase.GetClassType // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x228bef0
};

// Class Solarland.SkywardDiveLauncher
// Size: 0x498 (Inherited: 0x3e0)
struct ASkywardDiveLauncher : ASummonItemBase {
	struct USkeletalMeshComponent* GroundMesh; // 0x3e0(0x08)
	struct UBoxComponent* TriggerVolume; // 0x3e8(0x08)
	float SpawnTimeConfig; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct UParticleSystem* AvailableDeviceParticle; // 0x3f8(0x08)
	struct UParticleSystem* SpawnBeamParticle; // 0x400(0x08)
	struct FString SpawnSoundName; // 0x408(0x10)
	struct UAnimSequence* SpawnAnim; // 0x418(0x08)
	struct TArray<struct FLaunchDeviceInfo> LauncherDeviceArray; // 0x420(0x10)
	float CharacterLaunchPadHeightOffset; // 0x430(0x04)
	float LowHealthPercentage; // 0x434(0x04)
	struct UParticleSystem* LowHealthParticle; // 0x438(0x08)
	struct UParticleSystem* DeathExplodeParticle; // 0x440(0x08)
	struct FString DeathExplodeSoundName; // 0x448(0x10)
	struct UParticleSystemComponent* SpawnBeamEffect; // 0x458(0x08)
	struct UParticleSystemComponent* LowHealthEffect; // 0x460(0x08)
	bool bNewlySpawned; // 0x468(0x01)
	char pad_469[0x2f]; // 0x469(0x2f)

	void OnTriggerVolumeOverlapedEnd(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SkywardDiveLauncher.OnTriggerVolumeOverlapedEnd // (Final|Native|Protected) // @ game+0x2062ff0
	void OnTriggerVolumeOverlapedBegin(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SkywardDiveLauncher.OnTriggerVolumeOverlapedBegin // (Final|Native|Protected|HasOutParms) // @ game+0x2062dd0
};

// Class Solarland.SolarAbility
// Size: 0x310 (Inherited: 0x228)
struct ASolarAbility : AActor {
	struct ASolarAbility* MyAbilityClass; // 0x228(0x08)
	struct TArray<struct USolarAbilityEffect*> AbilityEffectClasses; // 0x230(0x10)
	struct TWeakObjectPtr<struct ASolarCharacter> AbilitySourceCharacter; // 0x240(0x08)
	char pad_248[0x8]; // 0x248(0x08)
	struct FTransform SpawnTransform; // 0x250(0x30)
	bool InstancedAbility; // 0x280(0x01)
	bool DoNotAutoApply; // 0x281(0x01)
	bool ApplyToSource; // 0x282(0x01)
	bool RadialAbility; // 0x283(0x01)
	float RadialAbilityRadius; // 0x284(0x04)
	bool bRadialIgnoreCollision; // 0x288(0x01)
	bool bRadialIgnoreVehicle; // 0x289(0x01)
	bool CheckSourceToTargetCollision; // 0x28a(0x01)
	bool EnableAbilityDebug; // 0x28b(0x01)
	bool bActivated; // 0x28c(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	struct FString ExtraInfo; // 0x290(0x10)
	struct AActor* InitiatorActor; // 0x2a0(0x08)
	struct UAkComponent* AkAudioComponent; // 0x2a8(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x2b0(0x08)
	struct TMap<struct FString, float> EffectParams; // 0x2b8(0x50)
	char pad_308[0x8]; // 0x308(0x08)

	void WeaponApplyAbility(struct UObject* WorldContextObject, struct ASolarAbility* SolarAbilityClass, struct AActor* SourceActor, struct AActor* TargetActor, struct FVector& HitLocation, struct FName& HitBoneName, float Scale, struct FRotator& ProjRotator, struct FString InExtarInfo, struct UPrimitiveComponent* HitComponent); // Function Solarland.SolarAbility.WeaponApplyAbility // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20641f0
	void StopSound(); // Function Solarland.SolarAbility.StopSound // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void StaticRemoveSolarAbilityFrom(struct ASolarAbility* AbilityClass, struct AActor* AffectingActor); // Function Solarland.SolarAbility.StaticRemoveSolarAbilityFrom // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2063cf0
	void StaticApplySolarAbilityToWithHitResult(struct ASolarAbility* AbilityClass, struct AActor* AffectingActor, struct FHitResult& HitResult, float Scale, struct FString InExtarInfo, struct AActor* SourceAcotr, struct AActor* Initiator, bool ValidSourceLocation, struct FVector& SourceLocation); // Function Solarland.SolarAbility.StaticApplySolarAbilityToWithHitResult // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20639d0
	void StaticApplySolarAbilityTo(struct ASolarAbility* AbilityClass, struct AActor* AffectingActor, struct AActor* SourceAcotr, struct AActor* Initiator, bool ValidSourceLocation, struct FVector& SourceLocation, struct FVector& HitLocation, struct FName& HitBoneName, float Scale, struct FString InExtraInfo, struct UPrimitiveComponent* HitComponent); // Function Solarland.SolarAbility.StaticApplySolarAbilityTo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2063660
	void ServerSetActivated(); // Function Solarland.SolarAbility.ServerSetActivated // (Net|Native|Event|Public|NetServer) // @ game+0x80df50
	void RestoreSound(); // Function Solarland.SolarAbility.RestoreSound // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RemoveSolarAbilityFrom(struct AActor* ApplyToActor); // Function Solarland.SolarAbility.RemoveSolarAbilityFrom // (Final|Native|Public|BlueprintCallable) // @ game+0x2063150
	void PlaySound(); // Function Solarland.SolarAbility.PlaySound // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void PauseSound(); // Function Solarland.SolarAbility.PauseSound // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	bool IsLocalControl(); // Function Solarland.SolarAbility.IsLocalControl // (Final|Native|Public|BlueprintCallable) // @ game+0x20616e0
	bool InSameTeam(); // Function Solarland.SolarAbility.InSameTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x20615e0
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarAbility.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x2061610
	bool CheckActor(struct AActor* SourceActor, struct AActor* TargetActor); // Function Solarland.SolarAbility.CheckActor // (Native|Event|Public|BlueprintEvent) // @ game+0x2061450
	void ApplySolarAbilityTo(struct AActor* ApplyToActor, struct AActor* SourceActor); // Function Solarland.SolarAbility.ApplySolarAbilityTo // (Final|Native|Public|BlueprintCallable) // @ game+0x2061140
};

// Class Solarland.SolarAbilityComponent
// Size: 0x1a0 (Inherited: 0xb0)
struct USolarAbilityComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct TMap<struct USolarAbilityEffect*, struct USolarAbilityEffect*> AppliedEffectMap; // 0xb8(0x50)
	struct TMap<struct USolarAbilityEffect*, struct USolarAbilityEffect*> AppliedEffectsThisTick; // 0x108(0x50)
	struct TArray<struct FReplicateEffectData> ReplicateEffectDatas; // 0x158(0x10)
	char pad_168[0x8]; // 0x168(0x08)
	bool CharacterWeaponDisable; // 0x170(0x01)
	bool CharacterMarked; // 0x171(0x01)
	char pad_172[0x2]; // 0x172(0x02)
	float MoveSpeedCoeffient; // 0x174(0x04)
	struct UMaterialInterface* OriginalMaterial; // 0x178(0x08)
	float ShieldRechargeCostCoefficient; // 0x180(0x04)
	char pad_184[0x1c]; // 0x184(0x1c)

	void OnRep_SpeedCoeffient(); // Function Solarland.SolarAbilityComponent.OnRep_SpeedCoeffient // (Final|Native|Public) // @ game+0x2062d20
	void OnRep_ReplicateEffectData(); // Function Solarland.SolarAbilityComponent.OnRep_ReplicateEffectData // (Final|Native|Public) // @ game+0x2062d00
	int32_t GetCharacterLevel(); // Function Solarland.SolarAbilityComponent.GetCharacterLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2061520
};

// Class Solarland.SolarAbilityEffect
// Size: 0x198 (Inherited: 0x28)
struct USolarAbilityEffect : UObject {
	struct FSoftObjectPath EffectIconPath; // 0x28(0x18)
	struct TArray<struct FSolarAttributeModifier> AttributeModifiers; // 0x40(0x10)
	bool bAllowMultiple; // 0x50(0x01)
	char pad_51[0xbf]; // 0x51(0xbf)
	struct ASolarCharacterBase* AbilityEffectAffectingCharacter; // 0x110(0x08)
	struct USolarAbilityComponent* AbilityEffectAffectingAbilityComponent; // 0x118(0x08)
	struct ASolarAbility* AffectingAbility; // 0x120(0x08)
	struct FString ExtraInfo; // 0x128(0x10)
	struct TMap<struct FString, float> AttributeParamMap; // 0x138(0x50)
	char pad_188[0x10]; // 0x188(0x10)
};

// Class Solarland.SolarAbilitySystemComponent
// Size: 0x13f0 (Inherited: 0x12f8)
struct USolarAbilitySystemComponent : UAbilitySystemComponent {
	char pad_12F8[0x8]; // 0x12f8(0x08)
	struct USolarGameplayAbilitySet* DefaultAbilitySet; // 0x1300(0x08)
	char pad_1308[0xb0]; // 0x1308(0xb0)
	struct USkeletalMeshComponent* OptionMeshForRepMontage; // 0x13b8(0x08)
	bool bPendingMontageRepForMesh; // 0x13c0(0x01)
	char pad_13C1[0x7]; // 0x13c1(0x07)
	struct TArray<struct FGameplayAbilityLocalAnimMontageForMesh> LocalAnimMontageInfoForMeshes; // 0x13c8(0x10)
	struct TArray<struct FGameplayAbilityRepAnimMontageForMesh> RepAnimMontageInfoForMeshes; // 0x13d8(0x10)
	char pad_13E8[0x8]; // 0x13e8(0x08)

	struct FGameplayAbilitySpecHandle UpgradeAbilityLevelBySpec(struct FGameplayAbilitySpecHandle AbilitySpecHandle, bool bForNextActivate, int32_t LevelUp); // Function Solarland.SolarAbilitySystemComponent.UpgradeAbilityLevelBySpec // (Final|Native|Public|BlueprintCallable) // @ game+0x20640b0
	void UpgradeAbilityLevelByClass(struct UGameplayAbility* AbilityClass, bool bForNextActivate, int32_t LevelUp); // Function Solarland.SolarAbilitySystemComponent.UpgradeAbilityLevelByClass // (Final|Native|Public|BlueprintCallable) // @ game+0x2063fa0
	void UpgradeAbilityLevel(struct FGameplayTagContainer AbilityTags, bool bForNextActivate, int32_t LevelUp); // Function Solarland.SolarAbilitySystemComponent.UpgradeAbilityLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x2063e40
	void ServerCurrentMontageSetPlayRateForMesh(struct USkeletalMeshComponent* InMesh, struct UAnimMontage* ClientAnimMontage, float InPlayRate); // Function Solarland.SolarAbilitySystemComponent.ServerCurrentMontageSetPlayRateForMesh // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x2063510
	void ServerCurrentMontageSetNextSectionNameForMesh(struct USkeletalMeshComponent* InMesh, struct UAnimMontage* ClientAnimMontage, float ClientPosition, struct FName SectionName, struct FName NextSectionName); // Function Solarland.SolarAbilitySystemComponent.ServerCurrentMontageSetNextSectionNameForMesh // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x2063330
	void ServerCurrentMontageJumpToSectionNameForMesh(struct USkeletalMeshComponent* InMesh, struct UAnimMontage* ClientAnimMontage, struct FName SectionName); // Function Solarland.SolarAbilitySystemComponent.ServerCurrentMontageJumpToSectionNameForMesh // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x20631e0
	void PostDefaultAbilitiesGranted(); // Function Solarland.SolarAbilitySystemComponent.PostDefaultAbilitiesGranted // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnRep_ReplicatedAnimMontageForMesh(); // Function Solarland.SolarAbilitySystemComponent.OnRep_ReplicatedAnimMontageForMesh // (Native|Protected) // @ game+0x1555880
	void OnNotifiedTagChanged(struct FGameplayTag& Tag, bool bAdded); // Function Solarland.SolarAbilitySystemComponent.OnNotifiedTagChanged // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2062c20
	void OnInternalMetaAttributeUpdate(struct USolarMetaAttributeSet* MetaAttributeSet, struct FGameplayModifierEvaluatedData& EvaluatedData, struct FGameplayEffectSpec& EffectSpec, struct FMetaAttributeUpdateEvent& UpdateEvent); // Function Solarland.SolarAbilitySystemComponent.OnInternalMetaAttributeUpdate // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2062940
	void NotifySourceMetaAttributeExecution(struct FMetaAttributeUpdateEvent& UpdateEvent); // Function Solarland.SolarAbilitySystemComponent.NotifySourceMetaAttributeExecution // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x20626e0
	void K2_RemoveGameplayCueLocalShared(struct UObject* Instigator, struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_RemoveGameplayCueLocalShared // (Final|Native|Public|BlueprintCallable) // @ game+0x20624b0
	void K2_RemoveGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_RemoveGameplayCueLocal // (Final|Native|Public|BlueprintCallable) // @ game+0x20622d0
	int32_t K2_RemoveActiveEffectsWithTag(struct FGameplayTag GameplayTag); // Function Solarland.SolarAbilitySystemComponent.K2_RemoveActiveEffectsWithTag // (Final|Native|Public|BlueprintCallable) // @ game+0x2062230
	struct FGameplayAbilitySpecHandle K2_GiveAbilityAndActivateOnce(struct UGameplayAbility* AbilityClass, int32_t Level); // Function Solarland.SolarAbilitySystemComponent.K2_GiveAbilityAndActivateOnce // (Final|Native|Public|BlueprintCallable) // @ game+0x2062160
	struct FGameplayAbilitySpecHandle K2_GiveAbility(struct UGameplayAbility* AbilityClass, int32_t Level); // Function Solarland.SolarAbilitySystemComponent.K2_GiveAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x2062090
	void K2_GetEffectMaxTimeRemainingAndDuration(struct FGameplayTag EffectTag, float& TimeRemaining, float& Duration); // Function Solarland.SolarAbilitySystemComponent.K2_GetEffectMaxTimeRemainingAndDuration // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2061f70
	struct UAttributeSet* K2_FindOwnedAttributeSetByClass(struct UAttributeSet* Class); // Function Solarland.SolarAbilitySystemComponent.K2_FindOwnedAttributeSetByClass // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2061ed0
	void K2_ExecuteGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_ExecuteGameplayCueLocal // (Final|Native|Public|BlueprintCallable) // @ game+0x2061cf0
	void K2_ClearAbility(struct FGameplayAbilitySpecHandle& Handle); // Function Solarland.SolarAbilitySystemComponent.K2_ClearAbility // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2061c50
	void K2_CancelAbilityByTag(struct FGameplayTag AbilityTag); // Function Solarland.SolarAbilitySystemComponent.K2_CancelAbilityByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x2061bc0
	void K2_AddGameplayCueLocalShared(struct UObject* Instigator, struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_AddGameplayCueLocalShared // (Final|Native|Public|BlueprintCallable) // @ game+0x2061990
	void K2_AddGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_AddGameplayCueLocal // (Final|Native|Public|BlueprintCallable) // @ game+0x20617b0
	bool IsNotifiedTagAvailable(struct FGameplayTag& Tag); // Function Solarland.SolarAbilitySystemComponent.IsNotifiedTagAvailable // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2061710
	struct FGameplayAbilitySpecHandle GiveDefaultAbility(struct UGameplayAbility* AbilityClass); // Function Solarland.SolarAbilitySystemComponent.GiveDefaultAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x2061550
	struct FActiveGameplayEffectHandle ChangeActiveEffectRemainTime(struct FActiveGameplayEffectHandle InEffect, float InValue, enum class EGameplayModOp InOption); // Function Solarland.SolarAbilitySystemComponent.ChangeActiveEffectRemainTime // (Final|Native|Public|BlueprintCallable) // @ game+0x2061330
	struct FActiveGameplayEffectHandle ChangeActiveEffectDuration(struct FActiveGameplayEffectHandle InEffect, float InDuration, enum class EActiveEffectDurationChangeProxy InChangeProxy); // Function Solarland.SolarAbilitySystemComponent.ChangeActiveEffectDuration // (Final|Native|Public|BlueprintCallable) // @ game+0x2061210
};

// Class Solarland.SolarAbilitySystemInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarAbilitySystemInterface : UAbilitySystemInterface {

	struct USolarAbilitySystemComponent* GetSolarAbilitySystemComponent(); // Function Solarland.SolarAbilitySystemInterface.GetSolarAbilitySystemComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2069450
};

// Class Solarland.SolarAbilitySystemLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarAbilitySystemLibrary : UBlueprintFunctionLibrary {

	bool MMC_GetCapturedAttributeMagnitude(struct FGameplayEffectAttributeCaptureDefinition& Def, struct FGameplayEffectSpec& Spec, struct FGameplayTagContainer SourceTags, struct FGameplayTagContainer TargetTags, float& Magnitude); // Function Solarland.SolarAbilitySystemLibrary.MMC_GetCapturedAttributeMagnitude // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2069610
	void MarkStackCountHandledManually(struct FGameplayEffectCustomExecutionOutput& Output); // Function Solarland.SolarAbilitySystemLibrary.MarkStackCountHandledManually // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x206a300
	void MarkGameplayCuesHandledManually(struct FGameplayEffectCustomExecutionOutput& Output); // Function Solarland.SolarAbilitySystemLibrary.MarkGameplayCuesHandledManually // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x206a230
	void MarkConditionalGameplayEffectsToTrigger(struct FGameplayEffectCustomExecutionOutput& Output); // Function Solarland.SolarAbilitySystemLibrary.MarkConditionalGameplayEffectsToTrigger // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x206a160
	struct FGameplayModifierInfo MakeSimpleGameplayModifierInfo(struct FGameplayAttribute InAttribute); // Function Solarland.SolarAbilitySystemLibrary.MakeSimpleGameplayModifierInfo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2069f50
	struct FGameplayModifierEvaluatedData MakeSimpleGameplayModifierEvaluatedData(struct FGameplayAttribute InAttribute, enum class EGameplayModOp InModOp, float InMagnitude); // Function Solarland.SolarAbilitySystemLibrary.MakeSimpleGameplayModifierEvaluatedData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2069cc0
	struct FGameplayModifierEvaluatedData MakeGameplayModifierEvaluatedData(struct FGameplayAttribute InAttribute, enum class EGameplayModOp InModOp, float InMagnitude, struct FActiveGameplayEffectHandle& InHandle); // Function Solarland.SolarAbilitySystemLibrary.MakeGameplayModifierEvaluatedData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20699e0
	struct FAttributeSubSetting MakeAttributeSubSetting(int32_t InAttributeSubID, float InValue); // Function Solarland.SolarAbilitySystemLibrary.MakeAttributeSubSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2069900
	struct FGameplayEffectContextHandle GetEffectContext(struct FGameplayEffectSpec& Spec); // Function Solarland.SolarAbilitySystemLibrary.GetEffectContext // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20692e0
	float GetCurrentValueFromAttribute(struct FGameplayAttributeData& Attribute); // Function Solarland.SolarAbilitySystemLibrary.GetCurrentValueFromAttribute // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2069240
	struct FGameplayTagContainer GetCapturedTargetTags(struct FGameplayEffectSpec& Spec); // Function Solarland.SolarAbilitySystemLibrary.GetCapturedTargetTags // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2069100
	struct FGameplayTagContainer GetCapturedSourceTags(struct FGameplayEffectSpec& Spec); // Function Solarland.SolarAbilitySystemLibrary.GetCapturedSourceTags // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2069000
	float GetBaseValueFromAttribute(struct FGameplayAttributeData& Attribute); // Function Solarland.SolarAbilitySystemLibrary.GetBaseValueFromAttribute // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2068f60
	bool FindAttribute(struct FString CombinedName, struct FGameplayAttribute& OutAttribute); // Function Solarland.SolarAbilitySystemLibrary.FindAttribute // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2068ac0
	struct UGameplayAbility* EffectContextHandle_GetAbility(struct FGameplayEffectContextHandle& Handle); // Function Solarland.SolarAbilitySystemLibrary.EffectContextHandle_GetAbility // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20689e0
	struct UAbilitySystemComponent* CustomExecParams_GetTargetAbilitySystemComponent(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetTargetAbilitySystemComponent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20688a0
	struct UAbilitySystemComponent* CustomExecParams_GetSourceAbilitySystemComponent(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetSourceAbilitySystemComponent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2068760
	struct FGameplayTagContainer CustomExecParams_GetPassedInTags(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetPassedInTags // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20685f0
	struct FGameplayEffectSpec CustomExecParams_GetOwningSpec(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetOwningSpec // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2068490
	struct TArray<struct FActiveGameplayEffectHandle> CustomExecParams_GetIgnoreHandles(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetIgnoreHandles // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2068310
	struct FAttributeSubSetting CancelAttributeSubSetting(int32_t InAttributeSubID); // Function Solarland.SolarAbilitySystemLibrary.CancelAttributeSubSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2068170
	void BreakGameplayModifierInfo(struct FGameplayModifierInfo& InModifier, struct FGameplayAttribute& OutAttribute, enum class EGameplayModOp& OutModType, struct FGameplayTagRequirements& OutSourceTags, struct FGameplayTagRequirements& OutTargetTags); // Function Solarland.SolarAbilitySystemLibrary.BreakGameplayModifierInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2067cd0
	void AddOutputModifier(struct FGameplayEffectCustomExecutionOutput& Output, struct FGameplayModifierEvaluatedData& InOutputMod); // Function Solarland.SolarAbilitySystemLibrary.AddOutputModifier // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2067b40
};

// Class Solarland.SolarAbilityTask_WaitInputCommand
// Size: 0xa0 (Inherited: 0x80)
struct USolarAbilityTask_WaitInputCommand : USolarAbilityTask {
	struct FMulticastInlineDelegate OnCommand; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)

	struct USolarAbilityTask_WaitInputCommand* CreateTask(struct UGameplayAbility* OwningAbility, struct FName ActionName, enum class EInputEvent InputEvent); // Function Solarland.SolarAbilityTask_WaitInputCommand.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2068210
};

// Class Solarland.SolarGameManager
// Size: 0x30 (Inherited: 0x28)
struct USolarGameManager : USolarAbstractManager {
	struct USolarGameInstanceBase* OwnerGameInstance; // 0x28(0x08)

	void ReceiveManagerIntialized(); // Function Solarland.SolarGameManager.ReceiveManagerIntialized // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarABTestManager
// Size: 0x38 (Inherited: 0x30)
struct USolarABTestManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarAccessLuaDataUtils
// Size: 0x38 (Inherited: 0x28)
struct USolarAccessLuaDataUtils : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USolarGameInstanceBase* SolarGameInstance; // 0x30(0x08)

	void GetMatchResult(struct FMatchResult& MatchResult); // Function Solarland.SolarAccessLuaDataUtils.GetMatchResult // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.AchievementFormula
// Size: 0x228 (Inherited: 0x228)
struct AAchievementFormula : AActor {

	struct USolarAchievementComponent* GetAchievementComponent(); // Function Solarland.AchievementFormula.GetAchievementComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2068e60
	int32_t GetAchievedTargetValue(int32_t InAchievementID); // Function Solarland.AchievementFormula.GetAchievedTargetValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2068dc0
	struct TArray<int32_t> GetAchievedConditionValue(int32_t InAchievementID); // Function Solarland.AchievementFormula.GetAchievedConditionValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2068ce0
};

// Class Solarland.SolarAchievementComponent
// Size: 0x1c0 (Inherited: 0xb0)
struct USolarAchievementComponent : UActorComponent {
	struct UDataTable* AchievementHandleConfig; // 0xb0(0x08)
	struct AAchievementFormula* AchievementFormulaClass; // 0xb8(0x08)
	struct AAchievementFormula* AchievementFormula; // 0xc0(0x08)
	char pad_C8[0xa8]; // 0xc8(0xa8)
	struct TMap<int32_t, struct FAchievementResult> AllStatisticAchievement; // 0x170(0x50)

	void UnlockAchievement(int32_t InAchievementID); // Function Solarland.SolarAchievementComponent.UnlockAchievement // (Final|Native|Public|BlueprintCallable) // @ game+0x206a830
	void SetAchievementValue(int32_t InAchievementID, int32_t InUpdateValue); // Function Solarland.SolarAchievementComponent.SetAchievementValue // (Final|Native|Public|BlueprintCallable) // @ game+0x206a760
	bool IsAchievementCompleted(int32_t InAchievementID); // Function Solarland.SolarAchievementComponent.IsAchievementCompleted // (Final|Native|Public|BlueprintCallable) // @ game+0x2069550
	void IncreaseAchievementValue(int32_t InAchievementID, int32_t InUpdateValue); // Function Solarland.SolarAchievementComponent.IncreaseAchievementValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2069480
	int32_t GetAchievementPorgressValue(int32_t InAchievementID); // Function Solarland.SolarAchievementComponent.GetAchievementPorgressValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2068e90
};

// Class Solarland.SolarActivityManager
// Size: 0x38 (Inherited: 0x30)
struct USolarActivityManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarActorCollisionIgnoreSystem
// Size: 0xe0 (Inherited: 0x30)
struct USolarActorCollisionIgnoreSystem : UWorldSubsystem {
	char pad_30[0x10]; // 0x30(0x10)
	struct TMap<struct AActor*, char> TeamIgnoreCollisionActorMap; // 0x40(0x50)
	struct TMap<struct AActor*, enum class ESolarIgnoreCollisionType> TypeIgnoreCollisionActorMap; // 0x90(0x50)
};

// Class Solarland.SolarActorInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarActorInterface : UInterface {

	struct FVector GetCenterLocation(); // Function Solarland.SolarActorInterface.GetCenterLocation // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2069200
};

// Class Solarland.SolarActorPoolManager
// Size: 0xd0 (Inherited: 0x30)
struct USolarActorPoolManager : UGameInstanceSubsystem {
	char pad_30[0xa0]; // 0x30(0xa0)

	bool PushActor(struct AActor* Actor); // Function Solarland.SolarActorPoolManager.PushActor // (Final|Native|Public|BlueprintCallable) // @ game+0x206a590
	void OnActorDestroyed(struct AActor* Actor); // Function Solarland.SolarActorPoolManager.OnActorDestroyed // (Final|Native|Protected) // @ game+0x206a3d0
	struct USolarActorPoolManager* Get(struct UObject* WorldContextObject); // Function Solarland.SolarActorPoolManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2068c50
};

// Class Solarland.SolarAdapterSlotInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarAdapterSlotInterface : UInterface {

	void OnLoadAdapterSlotWidgetFinished(); // Function Solarland.SolarAdapterSlotInterface.OnLoadAdapterSlotWidgetFinished // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xba0000
	void OnChangeAdapterSlotWidgetParameters(struct TArray<struct FWidgetOverrideParam>& Params); // Function Solarland.SolarAdapterSlotInterface.OnChangeAdapterSlotWidgetParameters // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x206a460
};

// Class Solarland.SolarAdapterWidget
// Size: 0x1c8 (Inherited: 0x150)
struct USolarAdapterWidget : UContentWidget {
	enum class EWidgetLoadType WidgetLoadType; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)
	struct FSoftClassPath MobileWidgetPath; // 0x158(0x18)
	struct FSoftClassPath DesktopWidgetPath; // 0x170(0x18)
	struct TArray<struct FWidgetOverrideParam> OverrideParamList; // 0x188(0x10)
	struct FSoftClassPath CurWidgetPath; // 0x198(0x18)
	struct UUserWidget* AdapteeWidget; // 0x1b0(0x08)
	char pad_1B8[0x10]; // 0x1b8(0x10)

	void RefreshUIByOverrideParams(struct TArray<struct FWidgetOverrideParam>& WidgetOverrideParams); // Function Solarland.SolarAdapterWidget.RefreshUIByOverrideParams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x206a630
	void LoadUserWidgetResource(); // Function Solarland.SolarAdapterWidget.LoadUserWidgetResource // (Final|Native|Public|BlueprintCallable) // @ game+0x20695f0
	struct UUserWidget* GetAdapteeWidget(); // Function Solarland.SolarAdapterWidget.GetAdapteeWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2068f30
};

// Class Solarland.SolarAdvProgressBoard
// Size: 0x2b8 (Inherited: 0x260)
struct USolarAdvProgressBoard : UUserWidget {
	struct UImage* ProgressBoard; // 0x260(0x08)
	struct UMaterialInstance* ProgressShader; // 0x268(0x08)
	struct FLinearColor IncreaseColor; // 0x270(0x10)
	struct FLinearColor DecreaseColor; // 0x280(0x10)
	char pad_290[0x28]; // 0x290(0x28)
};

// Class Solarland.SolarAICondition
// Size: 0x28 (Inherited: 0x28)
struct USolarAICondition : UObject {
};

// Class Solarland.SolarAICondition_BlueprintBase
// Size: 0x28 (Inherited: 0x28)
struct USolarAICondition_BlueprintBase : USolarAICondition {

	bool ReceiveExecute(struct UObject* OwnerExecutor); // Function Solarland.SolarAICondition_BlueprintBase.ReceiveExecute // (Event|Public|BlueprintEvent|Const) // @ game+0x25d85b0
};

// Class Solarland.SolarAICondition_TagState
// Size: 0x28 (Inherited: 0x28)
struct USolarAICondition_TagState : USolarAICondition {
};

// Class Solarland.SolarAICondition_TagStateTime
// Size: 0x38 (Inherited: 0x28)
struct USolarAICondition_TagStateTime : USolarAICondition_TagState {
	enum class ESolarAITagStateTimeType TimeType; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	struct FSolarAIValueCompare CompareIns; // 0x2c(0x0c)
};

// Class Solarland.SolarAICondition_ScoreBase
// Size: 0x48 (Inherited: 0x28)
struct USolarAICondition_ScoreBase : USolarAICondition_TagState {
	struct TArray<struct USolarAIConditionScoreItem*> ScoreItems; // 0x28(0x10)
	struct FSolarAIValueCompare CompareIns; // 0x38(0x0c)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Solarland.SolarAIConditionScoreItem
// Size: 0x30 (Inherited: 0x28)
struct USolarAIConditionScoreItem : UObject {
	float ItemWeight; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Solarland.SolarAICondScoreItem_BoolBase
// Size: 0x30 (Inherited: 0x30)
struct USolarAICondScoreItem_BoolBase : USolarAIConditionScoreItem {
};

// Class Solarland.SolarAICondScoreItem_BoolBaseBP
// Size: 0x30 (Inherited: 0x30)
struct USolarAICondScoreItem_BoolBaseBP : USolarAICondScoreItem_BoolBase {

	bool ReceiveProvideItemBaseBoolBot(struct ASolarBotAIController* BotController, struct ASolarCharacter* SolarChar); // Function Solarland.SolarAICondScoreItem_BoolBaseBP.ReceiveProvideItemBaseBoolBot // (Event|Public|BlueprintEvent|Const) // @ game+0x25d85b0
	bool ReceiveProvideItemBaseBool(struct UObject* OwnerExecutor); // Function Solarland.SolarAICondScoreItem_BoolBaseBP.ReceiveProvideItemBaseBool // (Event|Public|BlueprintEvent|Const) // @ game+0x25d85b0
};

// Class Solarland.SolarAICondScoreItem_FloatBase
// Size: 0x30 (Inherited: 0x30)
struct USolarAICondScoreItem_FloatBase : USolarAIConditionScoreItem {
};

// Class Solarland.SolarAICondScoreItem_FloatLinearClamp
// Size: 0x38 (Inherited: 0x30)
struct USolarAICondScoreItem_FloatLinearClamp : USolarAICondScoreItem_FloatBase {
	float ClampFloatValueMin; // 0x30(0x04)
	float ClampFloatValueMax; // 0x34(0x04)
};

// Class Solarland.SolarAICondScoreItem_FloatBaseBP
// Size: 0x38 (Inherited: 0x38)
struct USolarAICondScoreItem_FloatBaseBP : USolarAICondScoreItem_FloatLinearClamp {

	float ReceiveProvideItemBaseFloatBot(struct ASolarBotAIController* BotController, struct ASolarCharacter* SolarChar); // Function Solarland.SolarAICondScoreItem_FloatBaseBP.ReceiveProvideItemBaseFloatBot // (Event|Public|BlueprintEvent|Const) // @ game+0x25d85b0
	float ReceiveProvideItemBaseFloat(struct UObject* OwnerExecutor); // Function Solarland.SolarAICondScoreItem_FloatBaseBP.ReceiveProvideItemBaseFloat // (Event|Public|BlueprintEvent|Const) // @ game+0x25d85b0
};

// Class Solarland.SolarAICondScoreItem_CharHP
// Size: 0x40 (Inherited: 0x38)
struct USolarAICondScoreItem_CharHP : USolarAICondScoreItem_FloatLinearClamp {
	bool bPercent; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Solarland.SolarAICondScoreItem_BotTagStateTime
// Size: 0x50 (Inherited: 0x38)
struct USolarAICondScoreItem_BotTagStateTime : USolarAICondScoreItem_FloatLinearClamp {
	enum class ESolarAITagStateTimeType TimeType; // 0x38(0x01)
	char pad_39[0x17]; // 0x39(0x17)
};

// Class Solarland.SolarAIControllerBase
// Size: 0x370 (Inherited: 0x348)
struct ASolarAIControllerBase : AAIController {
	char pad_348[0x8]; // 0x348(0x08)
	struct UBehaviorTree* BehaviorTree; // 0x350(0x08)
	struct UAISenseConfig_Sight* SightConfig; // 0x358(0x08)
	struct UAISenseConfig_Damage* DamageSenseConfig; // 0x360(0x08)
	int32_t AICharacterID; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)

	void DestroyCharacterCorpse(); // Function Solarland.SolarAIControllerBase.DestroyCharacterCorpse // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1555200
};

// Class Solarland.SolarAILibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarAILibrary : UObject {

	struct ASolarBotAIController* SpawnBotAtLocation(struct UObject* WorldContextObject, struct FVector SpawnLocation, struct ASolarBotAIController* ControllerClass, int32_t CharacterId, int32_t SkinId, int32_t TeamID); // Function Solarland.SolarAILibrary.SpawnBotAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x206ea10
	bool IsLocationOnPlayerSight(struct UObject* WorldContextObject, struct FVector& TestLocation, float TraceStartOffsetZ, float MaxRange, bool bIgnoreSpectatePlayer); // Function Solarland.SolarAILibrary.IsLocationOnPlayerSight // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x206e6a0
	bool HasPlayersInRange(struct UObject* WorldContextObject, struct FVector& TestLocation, int32_t& count, float RangeRadius, bool bIncludeBot, bool bOnlyDrivers); // Function Solarland.SolarAILibrary.HasPlayersInRange // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x206e470
	struct FVector GetPoisonCircleCenter(struct UObject* WorldContextObject, bool bDoProject, bool bUseNavmesh, struct FVector Extent); // Function Solarland.SolarAILibrary.GetPoisonCircleCenter // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x206e2d0
	void ApplyDamageEventBetweenPreservedBot(struct ASolarBotAIController* Target, float DamageValue, struct FSolarPointDamageEvent DamageEvent, struct ASolarBotAIController* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarAILibrary.ApplyDamageEventBetweenPreservedBot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1894d70
};

// Class Solarland.SolarItemSpawner
// Size: 0x390 (Inherited: 0x298)
struct ASolarItemSpawner : ASolarMapElementBase {
	int32_t SpawnerID; // 0x298(0x04)
	char pad_29C[0x2c]; // 0x29c(0x2c)
	enum class ESpawnStage SpawnStage; // 0x2c8(0x01)
	enum class ESpawnerType SpawnerType; // 0x2c9(0x01)
	enum class ESpawnerLevel SpawnerLevel; // 0x2ca(0x01)
	char pad_2CB[0x1]; // 0x2cb(0x01)
	int32_t OutcomeID; // 0x2cc(0x04)
	struct FVector OriginPos; // 0x2d0(0x0c)
	struct FVector BoxExtent; // 0x2dc(0x0c)
	struct FBox SpawnerBox; // 0x2e8(0x1c)
	float RotateAngleRange; // 0x304(0x04)
	bool HasSpawnedItem; // 0x308(0x01)
	bool bActiveSpawner; // 0x309(0x01)
	char pad_30A[0x6]; // 0x30a(0x06)
	struct FString SyncItemId; // 0x310(0x10)
	bool BOpenLog; // 0x320(0x01)
	bool bRefresh; // 0x321(0x01)
	char pad_322[0x2]; // 0x322(0x02)
	float RefreshTime; // 0x324(0x04)
	bool bUseSpawnerTransform; // 0x328(0x01)
	bool bToTheGround; // 0x329(0x01)
	char pad_32A[0x2]; // 0x32a(0x02)
	int32_t NumberOfPoints; // 0x32c(0x04)
	float fScalarParams; // 0x330(0x04)
	enum class EItemAppearanceType AppearanceType; // 0x334(0x01)
	bool bUpdateOverlap; // 0x335(0x01)
	char pad_336[0x22]; // 0x336(0x22)
	struct FTimerHandle ItemLoadHandle; // 0x358(0x08)
	struct FTimerHandle ItemSpawnHandle; // 0x360(0x08)
	struct FTimerHandle ItemRefreshHandle; // 0x368(0x08)
	char pad_370[0x20]; // 0x370(0x20)

	void SpawnSingleItem(); // Function Solarland.SolarItemSpawner.SpawnSingleItem // (Final|Native|Private) // @ game+0x213d400
	void SpawnInNextTick(); // Function Solarland.SolarItemSpawner.SpawnInNextTick // (Final|Native|Private) // @ game+0x213d3e0
	void SaveSpawnerRange(); // Function Solarland.SolarItemSpawner.SaveSpawnerRange // (Native|Public|BlueprintCallable) // @ game+0x80e1d0
	void RandomRotatorForItem(enum class EItemType ItemType, struct FQuat& TargetRotator); // Function Solarland.SolarItemSpawner.RandomRotatorForItem // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x213d2f0
	void RandomPosInBoundingBox(struct FVector& TargetPos); // Function Solarland.SolarItemSpawner.RandomPosInBoundingBox // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x213d260
	void PlaceItemToTheGround(struct FVector& InOutLocation); // Function Solarland.SolarItemSpawner.PlaceItemToTheGround // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x213d1d0
	void OnItemSpawned(struct AActor* Item); // Function Solarland.SolarItemSpawner.OnItemSpawned // (Final|Native|Public) // @ game+0x912e20
	void OnAsyncLoadComplete(struct FSoftClassPath SClassPath, struct FSolarItemData ItemData); // Function Solarland.SolarItemSpawner.OnAsyncLoadComplete // (Final|Native|Private|HasDefaults) // @ game+0x213cf10
	void NetStartSpawnItems(struct ASolarItemRootActor* OwnerActor); // Function Solarland.SolarItemSpawner.NetStartSpawnItems // (Native|Public|BlueprintCallable) // @ game+0x157d4c0
	void LoadSingleWeaponAsset(struct FSolarItemData& ItemData); // Function Solarland.SolarItemSpawner.LoadSingleWeaponAsset // (Final|Native|Private|HasOutParms) // @ game+0x213ce20
	void LoadSingleItemAsset(); // Function Solarland.SolarItemSpawner.LoadSingleItemAsset // (Final|Native|Private) // @ game+0x213ce00
	void LoadInNextTick(); // Function Solarland.SolarItemSpawner.LoadInNextTick // (Final|Native|Private) // @ game+0x213cde0
	void InitSpawnerBound(); // Function Solarland.SolarItemSpawner.InitSpawnerBound // (Final|Native|Public) // @ game+0x213cdc0
	void GetSuitableDropPos(struct FVector& TargetPos); // Function Solarland.SolarItemSpawner.GetSuitableDropPos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x213cd30
	void GenerateDropPosition(); // Function Solarland.SolarItemSpawner.GenerateDropPosition // (Final|Native|Private) // @ game+0x213cd10
	void ClearUnpickedItems(); // Function Solarland.SolarItemSpawner.ClearUnpickedItems // (Final|Native|Public) // @ game+0x213ccf0
	void ClearLoopTimer(); // Function Solarland.SolarItemSpawner.ClearLoopTimer // (Final|Native|Private) // @ game+0x213ccd0
};

// Class Solarland.SolarAirDropSpawner
// Size: 0x3d0 (Inherited: 0x390)
struct ASolarAirDropSpawner : ASolarItemSpawner {
	bool IsActive; // 0x390(0x01)
	char pad_391[0x3]; // 0x391(0x03)
	float SpawnDelay; // 0x394(0x04)
	float AudioActorHeightOffset; // 0x398(0x04)
	float AudioActorFallSpeed; // 0x39c(0x04)
	struct FSoftClassPath PillarMeshBPClassPathName; // 0x3a0(0x18)
	char pad_3B8[0x8]; // 0x3b8(0x08)
	int32_t ChestID; // 0x3c0(0x04)
	char pad_3C4[0xc]; // 0x3c4(0x0c)
};

// Class Solarland.SolarVehiclePawn
// Size: 0x1380 (Inherited: 0x288)
struct ASolarVehiclePawn : APawn {
	char pad_288[0x30]; // 0x288(0x30)
	struct UPrimitiveComponent* VehicleRoot; // 0x2b8(0x08)
	struct USkeletalMeshComponentBudgeted* VehicleMesh; // 0x2c0(0x08)
	uint32_t VehicleID; // 0x2c8(0x04)
	bool bVehicleMeshAggregationTick; // 0x2cc(0x01)
	char pad_2CD[0x3]; // 0x2cd(0x03)
	struct TSoftClassPtr<UObject> VehicleStencilClass; // 0x2d0(0x28)
	struct USkeletalMeshComponentBudgeted* VehicleStencilNew; // 0x2f8(0x08)
	struct USolarNetMovementComponent* NetMovementComponent; // 0x300(0x08)
	struct UAkComponent* AkComponent; // 0x308(0x08)
	struct USolarVehicleAbilitySystemComponent* VehicleAbilitySystem; // 0x310(0x08)
	struct USolarVehicleSpringArmComponent* SpringArmComponent; // 0x318(0x08)
	struct USolarVehicleCameraComponent* CameraComponent; // 0x320(0x08)
	struct USolarVehicleAttributeSet* VehicleAttributeSet; // 0x328(0x08)
	struct FBasedMovement BasedMovement; // 0x330(0x28)
	struct TArray<struct FVehicleSeatSlot> SeatSlots; // 0x358(0x10)
	int32_t HealthUIID; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)
	struct TSoftObjectPtr<UTexture2D> VehicleBrandIcon; // 0x370(0x28)
	float OverlapWaterRadius; // 0x398(0x04)
	struct FVector OutVehicleOffset; // 0x39c(0x0c)
	float WaterDraftDepth; // 0x3a8(0x04)
	float CarpadProtectTime; // 0x3ac(0x04)
	float CarPadAccelerationMultiplier; // 0x3b0(0x04)
	char pad_3B4[0x4]; // 0x3b4(0x04)
	struct TArray<struct FVector> DropPassengerLocations; // 0x3b8(0x10)
	struct FVector DropPassengerAtTop; // 0x3c8(0x0c)
	struct FName BodySocketName; // 0x3d4(0x08)
	struct FVector DamageBoxLocation; // 0x3dc(0x0c)
	struct FVector DamageBoxExtent; // 0x3e8(0x0c)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct TArray<struct FName> PenetrationDamageBones; // 0x3f8(0x10)
	float VehicleMaxSpeedOnUI; // 0x408(0x04)
	enum class EVehicleControlUIType VehicleControlUIType; // 0x40c(0x01)
	enum class EVehicleAnimationType VehicleAnimationType; // 0x40d(0x01)
	char pad_40E[0x2]; // 0x40e(0x02)
	struct FName VehicleDirectionBoneForPassenger; // 0x410(0x08)
	char pad_418[0x8]; // 0x418(0x08)
	struct FVehicleVFX NosCameraVFX; // 0x420(0x90)
	float NOSCameraEffectAngle; // 0x4b0(0x04)
	char pad_4B4[0xc]; // 0x4b4(0x0c)
	struct FVehicleVFX GCCameraVFX; // 0x4c0(0x90)
	float GCCameraEffectAngle; // 0x550(0x04)
	char pad_554[0x4]; // 0x554(0x04)
	struct TArray<struct FVehicleVFX> NosVFXes; // 0x558(0x10)
	struct TMap<enum class EPhysicalSurface, struct TSoftObjectPtr<UParticleSystem>> RaiseDustEffects; // 0x568(0x50)
	float SpeedThresholdForCollidingDamage; // 0x5b8(0x04)
	float SpeedThresholdForStandingOn; // 0x5bc(0x04)
	float SpeedThresholdForGetOnVehicle; // 0x5c0(0x04)
	char pad_5C4[0x4]; // 0x5c4(0x04)
	struct TSoftObjectPtr<UParticleSystem> EnterWaterVFX[0x4]; // 0x5c8(0xa0)
	float SprayVelocity; // 0x668(0x04)
	float HeavyInSpeed; // 0x66c(0x04)
	float CriticalAngle; // 0x670(0x04)
	struct FVector OffsetBasedVechileLoction; // 0x674(0x0c)
	float CollisionSparkThreshold; // 0x680(0x04)
	char pad_684[0x4]; // 0x684(0x04)
	struct TSoftObjectPtr<UParticleSystem> CollisionSparkParticle; // 0x688(0x28)
	struct FName CollisionSparkParamNowel; // 0x6b0(0x08)
	struct FName CollisionSparkParamQuantity; // 0x6b8(0x08)
	float VehicleSpeedThresholdToPlayVFX; // 0x6c0(0x04)
	char pad_6C4[0x4]; // 0x6c4(0x04)
	struct FRuntimeFloatCurve CollisionSparkCurveFromImpulseToNowel; // 0x6c8(0x88)
	struct FRuntimeFloatCurve CollisionSparkCurveFromImpulseToQuantity; // 0x750(0x88)
	char pad_7D8[0x8]; // 0x7d8(0x08)
	struct FVehicleVFX SpeedParticle; // 0x7e0(0x90)
	struct TArray<struct FVehicleVFXMesh> DriverOnVFXMeshes; // 0x870(0x10)
	struct TArray<struct FVehicleVFX> DriverOnVFXs; // 0x880(0x10)
	struct FVector SpawnOffset; // 0x890(0x0c)
	char pad_89C[0x4]; // 0x89c(0x04)
	struct UVehicleCameraDataAsset* CameraDataAsset; // 0x8a0(0x08)
	struct FString SpeedVibrationHeString; // 0x8a8(0x10)
	struct FRuntimeFloatCurve SpeedVibrationCurve; // 0x8b8(0x88)
	float MinSpeedDifferenceForCollisionVibration; // 0x940(0x04)
	char pad_944[0x4]; // 0x944(0x04)
	struct FString CollisionVibrationHeString; // 0x948(0x10)
	struct FString LandingVibrationHeString; // 0x958(0x10)
	struct FRuntimeFloatCurve LandingVibrationCurve; // 0x968(0x88)
	float MaxSpeedDecelerationRate; // 0x9f0(0x04)
	char pad_9F4[0x4]; // 0x9f4(0x04)
	struct FSolarVehicleMaterialData BackLampData; // 0x9f8(0x28)
	struct TArray<struct FSolarVehicleMaterialData> VehicleMaterialDataArray; // 0xa20(0x10)
	struct USolarVehicleSoundDataAsset* VehicleSoundDataAsset; // 0xa30(0x08)
	struct UGameplayEffect* DefaultAttributes; // 0xa38(0x08)
	struct UGameplayEffect* CanDriveEffect; // 0xa40(0x08)
	struct UGameplayEffect* CanGetOnEffect; // 0xa48(0x08)
	struct UGameplayEffect* UnderWaterEffect; // 0xa50(0x08)
	struct ASolarAbility* ExplosionAbilityClass; // 0xa58(0x08)
	struct FSolarDamageInfo ExplosionDamageInfo; // 0xa60(0x40)
	struct FVehicleVFX ExplosionVFX; // 0xaa0(0x90)
	struct FVehicleVFXMesh VehicleBrokenMesh; // 0xb30(0x80)
	struct FVehicleVFX VehicleDamagedVFXs[0x5]; // 0xbb0(0x2d0)
	struct UGameplayEffect* VehicleDamageStatusEffects[0x5]; // 0xe80(0x28)
	int32_t MaxLodLevelForUpdateVisual; // 0xea8(0x04)
	char pad_EAC[0x4]; // 0xeac(0x04)
	struct TArray<struct FVehicleWeakPointSpec> VehicleWeakPointContainer; // 0xeb0(0x10)
	struct UPrimitiveComponent* PlatformComponent; // 0xec0(0x08)
	bool bCanStandOnPlatform; // 0xec8(0x01)
	char pad_EC9[0x3]; // 0xec9(0x03)
	float DistanceThresholdForAttachPlatform; // 0xecc(0x04)
	float DegreeThresholdForAttachPlatform; // 0xed0(0x04)
	float SpeedThresholdForAttachPlatform; // 0xed4(0x04)
	float TimerForPenetration; // 0xed8(0x04)
	float PenetrationThreshold; // 0xedc(0x04)
	float CollideDamage; // 0xee0(0x04)
	float CrashDamageWeight; // 0xee4(0x04)
	float SelfCrashDamageRate; // 0xee8(0x04)
	float PassengerDamageRatio; // 0xeec(0x04)
	float MinPlayerDamageVelocity; // 0xef0(0x04)
	float CollidedCharacterDmgRatio; // 0xef4(0x04)
	float CollideUpBoundingRatio; // 0xef8(0x04)
	char pad_EFC[0x4]; // 0xefc(0x04)
	struct UCurveFloat* CollidePushSpeedCurve; // 0xf00(0x08)
	float CollidePushUpAngle; // 0xf08(0x04)
	float CharacterProtectTime; // 0xf0c(0x04)
	float CollisionLinearVelocityDampingForSimulatedProxy; // 0xf10(0x04)
	float CollisionLinearVelocityDampingSetDelay; // 0xf14(0x04)
	float CollisionCompensationImpulseForSimulatedProxy; // 0xf18(0x04)
	char pad_F1C[0x4]; // 0xf1c(0x04)
	struct TArray<int32_t> StealthHideMats; // 0xf20(0x10)
	char pad_F30[0x8]; // 0xf30(0x08)
	bool bRemoveStencil; // 0xf38(0x01)
	char pad_F39[0x17]; // 0xf39(0x17)
	bool IsLaunch; // 0xf50(0x01)
	char pad_F51[0x1f]; // 0xf51(0x1f)
	struct FMulticastSparseDelegate OnPlayerGetOnVehicle; // 0xf70(0x01)
	struct FMulticastSparseDelegate OnPlayerGetOffVehicle; // 0xf71(0x01)
	char pad_F72[0x116]; // 0xf72(0x116)
	struct TArray<int32_t> OccupiedSeats; // 0x1088(0x10)
	struct USolarInputActionContext* InputActionContext; // 0x1098(0x08)
	char pad_10A0[0x4]; // 0x10a0(0x04)
	struct FVector_NetQuantizeNormal ReplicatedPlayerInputVector; // 0x10a4(0x0c)
	char pad_10B0[0xc]; // 0x10b0(0x0c)
	struct FVector_NetQuantize RepLocation; // 0x10bc(0x0c)
	char pad_10C8[0x40]; // 0x10c8(0x40)
	struct TArray<struct AActor*> ActorsOnPlatform; // 0x1108(0x10)
	char pad_1118[0x24]; // 0x1118(0x24)
	struct FSpawnedActorHandle CachedActorHandle; // 0x113c(0x04)
	char CurPlayerInputMask; // 0x1140(0x01)
	char ReplicatedPlayerInputMask; // 0x1141(0x01)
	char pad_1142[0x6e]; // 0x1142(0x6e)
	struct USolarNavModifierComponent* SolarNavModifierComp; // 0x11b0(0x08)
	bool bDynamicAffectNavigation; // 0x11b8(0x01)
	char pad_11B9[0x4f]; // 0x11b9(0x4f)
	int32_t SkinId; // 0x1208(0x04)
	char pad_120C[0x14]; // 0x120c(0x14)
	struct TArray<struct FAbilityCooldownTimer> ActivedAbilityCooldownArray; // 0x1220(0x10)
	char pad_1230[0x1]; // 0x1230(0x01)
	bool bVehicleBurningStart; // 0x1231(0x01)
	char pad_1232[0xc6]; // 0x1232(0xc6)
	float EnterWaterDuration; // 0x12f8(0x04)
	char pad_12FC[0x4]; // 0x12fc(0x04)
	float WaterLineHeight; // 0x1300(0x04)
	char pad_1304[0x4]; // 0x1304(0x04)
	struct ASolarWaterActorNew* WaterActor; // 0x1308(0x08)
	char pad_1310[0x20]; // 0x1310(0x20)
	struct UCurveFloat* SpeedCameraShakeCurve; // 0x1330(0x08)
	struct UCurveFloat* SpeedScreenEffectOpacityCurve; // 0x1338(0x08)
	struct UCurveFloat* SpeedScreenEffectPlayRateCurve; // 0x1340(0x08)
	float MinCameraShakeSpeed; // 0x1348(0x04)
	float MinScreenEffectSpeed; // 0x134c(0x04)
	struct UCameraShake* VehicleSpeedCameraShake; // 0x1350(0x08)
	struct FName VehicleSpeedScreenEffectRowId; // 0x1358(0x08)
	char pad_1360[0x20]; // 0x1360(0x20)

	void UpdateRequiredAbilityInfo(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarVehiclePawn.UpdateRequiredAbilityInfo // (Final|Native|Private) // @ game+0x225da60
	void UpdateBlockedAbilityInfo(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarVehiclePawn.UpdateBlockedAbilityInfo // (Final|Native|Private) // @ game+0x225d990
	void StatVehicleAutoMove(int32_t MoveTime); // Function Solarland.SolarVehiclePawn.StatVehicleAutoMove // (Final|Native|Protected) // @ game+0x225d7e0
	void SetWeakPointHealth(char WeakPointID, float InHealth); // Function Solarland.SolarVehiclePawn.SetWeakPointHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x225d710
	void SetTakeMoveInput(bool bInTakeDirection, bool bInTakeRotation); // Function Solarland.SolarVehiclePawn.SetTakeMoveInput // (Final|Native|Public|BlueprintCallable) // @ game+0x225d640
	void SetPlayerInputVector(struct FVector2D& InputVector, float CameraYaw); // Function Solarland.SolarVehiclePawn.SetPlayerInputVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x225d4e0
	void SetCurrentHealth(float InHealth); // Function Solarland.SolarVehiclePawn.SetCurrentHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x225d460
	void SetCrossCarpad(struct ASolarCarPad* InCarpad); // Function Solarland.SolarVehiclePawn.SetCrossCarpad // (Final|Native|Public|BlueprintCallable) // @ game+0x225d3d0
	void ServerSetPlayerInput(struct FVector_NetQuantizeNormal InputVector, char InputMask); // Function Solarland.SolarVehiclePawn.ServerSetPlayerInput // (Net|Native|Event|Protected|NetServer) // @ game+0x225d310
	void ServerSetCrossCarpad(struct ASolarCarPad* InCarpad); // Function Solarland.SolarVehiclePawn.ServerSetCrossCarpad // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x225d280
	void ServerSendsTransformToEveryoneWithMovementBase(struct TArray<char> Value, struct ASolarVehiclePawn* InMovementBase); // Function Solarland.SolarVehiclePawn.ServerSendsTransformToEveryoneWithMovementBase // (Net|Native|Event|NetMulticast|Public) // @ game+0x225d190
	void ServerSendsTransformToEveryone(struct TArray<char> Value); // Function Solarland.SolarVehiclePawn.ServerSendsTransformToEveryone // (Net|Native|Event|NetMulticast|Public) // @ game+0x225d0f0
	void ServerSendsTeleportStateToEveryone(struct FVector_NetQuantize InLocation, struct FVector_NetQuantizeNormal InNormalizeEuler, float InServerTimeStamp); // Function Solarland.SolarVehiclePawn.ServerSendsTeleportStateToEveryone // (Net|Native|Event|NetMulticast|Public) // @ game+0x225cfe0
	void ServerSendCorrectionToClient(float ServerTimeStamp, struct FVector_NetQuantize WorldLocation, struct FVector_NetQuantizeNormal WorldRotationCompressed); // Function Solarland.SolarVehiclePawn.ServerSendCorrectionToClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x225ceb0
	void ServerHandleVehicleCollision(struct FVehicleCollisionInfo InVehicleCollisionInfo); // Function Solarland.SolarVehiclePawn.ServerHandleVehicleCollision // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x225cdd0
	void ServerDrawActorLocationAndRotationOnClient(struct FVector InLocation, struct FRotator InRotator); // Function Solarland.SolarVehiclePawn.ServerDrawActorLocationAndRotationOnClient // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x225cd10
	void ServerApplyVehicleSkin(int32_t InSkinID); // Function Solarland.SolarVehiclePawn.ServerApplyVehicleSkin // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x225cc80
	void ServerApplyDamageToVehilceAndPassenger(struct ASolarVehiclePawn* OtherVehicle, float DamageToSelf, float DamageToOther, struct FVector_NetQuantize HitLocation); // Function Solarland.SolarVehiclePawn.ServerApplyDamageToVehilceAndPassenger // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x225cb30
	void ServerApplyAbilityDamageToTargets(struct TArray<struct APawn*> Targets, struct FGameplayAbilitySpecHandle AbilityHandle); // Function Solarland.SolarVehiclePawn.ServerApplyAbilityDamageToTargets // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x225ca40
	void RemoveSeatSlot(char SeatIndex); // Function Solarland.SolarVehiclePawn.RemoveSeatSlot // (Final|Native|Public|BlueprintCallable) // @ game+0x225c9c0
	void ReleaseDamagedStatusVFX(enum class EVehicleDamageStatus InDamagedStatus); // Function Solarland.SolarVehiclePawn.ReleaseDamagedStatusVFX // (Final|Native|Public|BlueprintCallable) // @ game+0x225c940
	void PlayVehicleEjectSound(struct ASolarCharacter* ejectedCharacter); // Function Solarland.SolarVehiclePawn.PlayVehicleEjectSound // (Final|Native|Public|BlueprintCallable) // @ game+0x225c6f0
	void PlaySpeedboardSound(); // Function Solarland.SolarVehiclePawn.PlaySpeedboardSound // (Final|Native|Public|BlueprintCallable) // @ game+0x225c6d0
	void PlayDamagedStatusVFX(enum class EVehicleDamageStatus InDamagedStatus); // Function Solarland.SolarVehiclePawn.PlayDamagedStatusVFX // (Final|Native|Public|BlueprintCallable) // @ game+0x225c630
	void OverlapWater(); // Function Solarland.SolarVehiclePawn.OverlapWater // (Final|Native|Protected) // @ game+0x225c610
	void OnVehicleHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarVehiclePawn.OnVehicleHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x225c430
	void OnStencilLoaded(); // Function Solarland.SolarVehiclePawn.OnStencilLoaded // (Final|Native|Public) // @ game+0x225c410
	void OnSkinDataAssetLoadedNext(struct FSoftClassPath SkinVehiclePath); // Function Solarland.SolarVehiclePawn.OnSkinDataAssetLoadedNext // (Final|Native|Protected|HasDefaults) // @ game+0x225c310
	void OnRep_WeakPointHealthOrStateChanged(struct TArray<struct FVehicleWeakPointSpec> OldVehicleWeakPointDatas); // Function Solarland.SolarVehiclePawn.OnRep_WeakPointHealthOrStateChanged // (Final|Native|Protected) // @ game+0x225c1e0
	void OnRep_VehicleBurning(); // Function Solarland.SolarVehiclePawn.OnRep_VehicleBurning // (Final|Native|Protected) // @ game+0x225c1c0
	void OnRep_SkinId(); // Function Solarland.SolarVehiclePawn.OnRep_SkinId // (Final|Native|Protected) // @ game+0x225c1a0
	void OnRep_ReplicatedPlayerInputMask(char OldReplicatedPlayerInputMask); // Function Solarland.SolarVehiclePawn.OnRep_ReplicatedPlayerInputMask // (Final|Native|Protected) // @ game+0x225c120
	void OnRep_RemoveStencil(); // Function Solarland.SolarVehiclePawn.OnRep_RemoveStencil // (Final|Native|Public) // @ game+0x225c100
	void OnRep_CachedActorHandle(); // Function Solarland.SolarVehiclePawn.OnRep_CachedActorHandle // (Final|Native|Protected) // @ game+0x225c0e0
	bool IsVehicleFullHealth(); // Function Solarland.SolarVehiclePawn.IsVehicleFullHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x225be90
	bool IsVehicleDangerous(); // Function Solarland.SolarVehiclePawn.IsVehicleDangerous // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x225be60
	bool IsVehicleBroken(); // Function Solarland.SolarVehiclePawn.IsVehicleBroken // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x225be30
	bool IsTeammateWith(struct APawn* Pawn); // Function Solarland.SolarVehiclePawn.IsTeammateWith // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x225bd90
	bool IsManuallyCancelAbilityActive(char SeatIndex); // Function Solarland.SolarVehiclePawn.IsManuallyCancelAbilityActive // (Final|Native|Public|BlueprintCallable) // @ game+0x225bd00
	bool IsExistEnemy(struct ASolarCharacter* Character); // Function Solarland.SolarVehiclePawn.IsExistEnemy // (Final|Native|Public|BlueprintCallable) // @ game+0x225bc60
	bool IsAbilityActive(char SeatIndex, char AbilityIndex); // Function Solarland.SolarVehiclePawn.IsAbilityActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x225bb90
	bool InSameTeam(); // Function Solarland.SolarVehiclePawn.InSameTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x225bb60
	struct TArray<struct FVehicleWeakPointSpec> GetVehicleWeakPoints(); // Function Solarland.SolarVehiclePawn.GetVehicleWeakPoints // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x225ba80
	int32_t GetVehicleTypeID(); // Function Solarland.SolarVehiclePawn.GetVehicleTypeID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x225ba50
	char GetVehicleTeamId(); // Function Solarland.SolarVehiclePawn.GetVehicleTeamId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x225ba20
	struct UPhysicalMaterial* GetVehicleRootPhysMaterial(); // Function Solarland.SolarVehiclePawn.GetVehicleRootPhysMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x225b9f0
	int32_t GetVehicleGroupID(); // Function Solarland.SolarVehiclePawn.GetVehicleGroupID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x225b990
	float GetSpeedInKmh(); // Function Solarland.SolarVehiclePawn.GetSpeedInKmh // (Native|Public|BlueprintCallable) // @ game+0x225b950
	float GetSpeed(); // Function Solarland.SolarVehiclePawn.GetSpeed // (Native|Public|BlueprintCallable) // @ game+0x225b910
	struct FVector GetSpawnOffset(); // Function Solarland.SolarVehiclePawn.GetSpawnOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x225b8e0
	struct FVector2D GetPlayerInputVector(); // Function Solarland.SolarVehiclePawn.GetPlayerInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x225b8a0
	int32_t GetPassengerCount(); // Function Solarland.SolarVehiclePawn.GetPassengerCount // (Final|Native|Public|BlueprintCallable) // @ game+0x225b750
	int32_t GetNextVacantSeat(int32_t InCurrentSeatIndex); // Function Solarland.SolarVehiclePawn.GetNextVacantSeat // (Final|Native|Public|BlueprintCallable) // @ game+0x225b6b0
	float GetMaxHealth(); // Function Solarland.SolarVehiclePawn.GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x225b680
	int32_t GetManuallyCancelAbilityIndex(char SeatIndex); // Function Solarland.SolarVehiclePawn.GetManuallyCancelAbilityIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x225b5f0
	int32_t GetHealthPercentInt(); // Function Solarland.SolarVehiclePawn.GetHealthPercentInt // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x225b5c0
	struct ASolarCharacter* GetDriverCharacter(); // Function Solarland.SolarVehiclePawn.GetDriverCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x225b3d0
	float GetDangerHealthPrecent(); // Function Solarland.SolarVehiclePawn.GetDangerHealthPrecent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x225b3a0
	float GetCurrentHealth(); // Function Solarland.SolarVehiclePawn.GetCurrentHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x225b370
	bool DoesAbilityRequiredTagMissing(int32_t CurSeatIndex, char AbilityIndex); // Function Solarland.SolarVehiclePawn.DoesAbilityRequiredTagMissing // (Final|Native|Public|Const) // @ game+0x225b0d0
	bool DoesAbilityActivationTagBlocked(int32_t CurSeatIndex, char AbilityIndex); // Function Solarland.SolarVehiclePawn.DoesAbilityActivationTagBlocked // (Final|Native|Public|Const) // @ game+0x225b000
	void DeleteStencilMesh(); // Function Solarland.SolarVehiclePawn.DeleteStencilMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x225afe0
	void ClientVehicleExplosion(); // Function Solarland.SolarVehiclePawn.ClientVehicleExplosion // (Final|Native|Public|BlueprintCallable) // @ game+0x225afc0
	void ClientVehicleBroken(); // Function Solarland.SolarVehiclePawn.ClientVehicleBroken // (Native|Public|BlueprintCallable) // @ game+0x15559c0
	void ClientSendsTransformToServerWithMovementBaseAfterCorrection(float DriverLocalTime, float ServerTimeStamp, struct TArray<char> Value, struct ASolarVehiclePawn* InMovementBase); // Function Solarland.SolarVehiclePawn.ClientSendsTransformToServerWithMovementBaseAfterCorrection // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x225ae50
	void ClientSendsTransformToServerWithMovementBase(float DriverLocalTime, struct TArray<char> Value, struct ASolarVehiclePawn* InMovementBase); // Function Solarland.SolarVehiclePawn.ClientSendsTransformToServerWithMovementBase // (Net|Native|Event|Public|NetServer) // @ game+0x225ad20
	void ClientSendsTransformToServerAfterCorrection(float DriverLocalTime, float ServerTimeStamp, struct TArray<char> Value); // Function Solarland.SolarVehiclePawn.ClientSendsTransformToServerAfterCorrection // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x225abf0
	void ClientSendsTransformToServer(float DriverLocalTime, struct TArray<char> Value); // Function Solarland.SolarVehiclePawn.ClientSendsTransformToServer // (Net|Native|Event|Public|NetServer) // @ game+0x225ab00
	bool CheckUpdateVisual(); // Function Solarland.SolarVehiclePawn.CheckUpdateVisual // (Final|Native|Public|BlueprintCallable) // @ game+0x225aaa0
	bool CheckOpenParticleOptimization(int32_t Bias); // Function Solarland.SolarVehiclePawn.CheckOpenParticleOptimization // (Final|Native|Public|BlueprintCallable) // @ game+0x225aa00
	bool CanActivateAbility(char SeatIndex, char AbilityIndex); // Function Solarland.SolarVehiclePawn.CanActivateAbility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x225a930
	void ApplySkinFromCDO(struct ASolarVehiclePawn* SkinVehiclePawnCDO); // Function Solarland.SolarVehiclePawn.ApplySkinFromCDO // (Final|Native|Protected) // @ game+0x225a8a0
	char AddSeatSlot(struct FVehicleSeatSlot& SeatSlot); // Function Solarland.SolarVehiclePawn.AddSeatSlot // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x225a770
};

// Class Solarland.SolarHoverVehicle
// Size: 0x13b0 (Inherited: 0x1380)
struct ASolarHoverVehicle : ASolarVehiclePawn {
	struct USolarHoverVehicleMovement* VehicleMovement; // 0x1380(0x08)
	struct FVehicleBasedMovementInfo ReplicatedBasedMovement; // 0x1388(0x20)
	char pad_13A8[0x8]; // 0x13a8(0x08)

	void OnVehicleRootHitForAttachPlatform(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarHoverVehicle.OnVehicleRootHitForAttachPlatform // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2119cd0
	void OnRep_ReplicatedBasedMovement(struct FVehicleBasedMovementInfo PreviousBasedMovement); // Function Solarland.SolarHoverVehicle.OnRep_ReplicatedBasedMovement // (Final|Native|Protected) // @ game+0x2119a60
	void OnPlatformActorEndplay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarHoverVehicle.OnPlatformActorEndplay // (Final|Native|Protected) // @ game+0x2119990
};

// Class Solarland.SolarAirPlaneVehicle
// Size: 0x1400 (Inherited: 0x13b0)
struct ASolarAirPlaneVehicle : ASolarHoverVehicle {
	float CruisingGravityScale; // 0x13a8(0x04)
	struct UGameplayEffect* CruisingEffect; // 0x13b0(0x08)
	struct UVehicleCameraDataAsset* RollBackCamera; // 0x13b8(0x08)
	enum class EAirPlaneAnimState ReplicatedAnimState; // 0x13c0(0x01)
	char pad_13C5[0x3b]; // 0x13c5(0x3b)

	void ServerSetReplicatedAnimState(enum class EAirPlaneAnimState InState, struct FPredictionKey InPredictionKey); // Function Solarland.SolarAirPlaneVehicle.ServerSetReplicatedAnimState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x206e920
	void OnRep_ReplicatedAnimState(); // Function Solarland.SolarAirPlaneVehicle.OnRep_ReplicatedAnimState // (Final|Native|Protected) // @ game+0x206e8e0
	void NetMulticastPlayRollRightAnim(); // Function Solarland.SolarAirPlaneVehicle.NetMulticastPlayRollRightAnim // (Net|Native|Event|NetMulticast|Public) // @ game+0x1555700
	void NetMulticastPlayRollLeftAnim(); // Function Solarland.SolarAirPlaneVehicle.NetMulticastPlayRollLeftAnim // (Net|Native|Event|NetMulticast|Public) // @ game+0x1556000
};

// Class Solarland.SolarVehicleAnimInstance
// Size: 0x330 (Inherited: 0x270)
struct USolarVehicleAnimInstance : UAnimInstance {
	struct FRotator VehicleRudderRotator; // 0x270(0x0c)
	float VehicleRotationValue; // 0x27c(0x04)
	float VehicleRotationPercent; // 0x280(0x04)
	float VehicleCameraYaw; // 0x284(0x04)
	float VehicleCameraPitch; // 0x288(0x04)
	bool bWithDriver; // 0x28c(0x01)
	bool bAbilityActivated; // 0x28d(0x01)
	char pad_28E[0x2]; // 0x28e(0x02)
	float Speed; // 0x290(0x04)
	float VelocityDegree; // 0x294(0x04)
	struct FVector2D PlayerInputVector; // 0x298(0x08)
	bool bVehicleInAir; // 0x2a0(0x01)
	bool bEquipWeapon; // 0x2a1(0x01)
	char pad_2A2[0x6]; // 0x2a2(0x06)
	struct UAnimMontage* VehicleWeaponFireMontage; // 0x2a8(0x08)
	struct UAnimMontage* VehicleWeaponRechamberMontage; // 0x2b0(0x08)
	struct FRotator VehicleWeaponPitchRot; // 0x2b8(0x0c)
	struct FRotator VehicleWeaponYawRot; // 0x2c4(0x0c)
	struct FVector LeftBoneIKOffset; // 0x2d0(0x0c)
	struct FVector RightBoneIKOffset; // 0x2dc(0x0c)
	bool bUpdateVisual; // 0x2e8(0x01)
	char pad_2E9[0x3]; // 0x2e9(0x03)
	struct FVector ExternalForceScale; // 0x2ec(0x0c)
	float MinAddForceDistance; // 0x2f8(0x04)
	struct FName MoveReferenceBone; // 0x2fc(0x08)
	struct FVector AnimExternalForce; // 0x304(0x0c)
	char pad_310[0x20]; // 0x310(0x20)

	void OnFireMontageStart(float InMontageLength); // Function Solarland.SolarVehicleAnimInstance.OnFireMontageStart // (Native|Event|Public|BlueprintEvent) // @ game+0x1547c70
	void OnFireMontageEnd(struct UAnimMontage* InMontage, bool bInterrupted); // Function Solarland.SolarVehicleAnimInstance.OnFireMontageEnd // (Native|Event|Public|BlueprintEvent) // @ game+0x225c010
	struct ASolarVehiclePawn* GetVehiclePawnOwner(); // Function Solarland.SolarVehicleAnimInstance.GetVehiclePawnOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x225b9c0
	float GetPlayTimeAgainstFootLocationCurve(struct UAnimSequence* InAnimSequence, struct FName& InCurveName, float InFootLocationValue); // Function Solarland.SolarVehicleAnimInstance.GetPlayTimeAgainstFootLocationCurve // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x225b780
};

// Class Solarland.SolarHoverVehicleAnimInstance
// Size: 0x360 (Inherited: 0x330)
struct USolarHoverVehicleAnimInstance : USolarVehicleAnimInstance {
	float VehicleLeftOrRightPercent; // 0x328(0x04)
	float VehicleSpoilerRotateFactor; // 0x32c(0x04)
	struct FVector FLThrusterBoneScale; // 0x330(0x0c)
	struct FVector FRThrusterBoneScale; // 0x33c(0x0c)
	struct FVector BLThrusterBoneScale; // 0x348(0x0c)
	struct FVector BRThrusterBoneScale; // 0x354(0x0c)
};

// Class Solarland.SolarAirPlanVehicleAnimInstance
// Size: 0x7f0 (Inherited: 0x360)
struct USolarAirPlanVehicleAnimInstance : USolarHoverVehicleAnimInstance {
	struct UAnimSequence* RollBackAnim; // 0x360(0x08)
	float RollBackDuration; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)
	struct UAnimMontage* RollLeftAnim; // 0x370(0x08)
	struct UAnimMontage* RollRightAnim; // 0x378(0x08)
	enum class EAirPlaneAnimState AnimState; // 0x380(0x01)
	char pad_381[0x7]; // 0x381(0x07)
	struct FFloatCurve RootLocationXCurve; // 0x388(0x98)
	struct FFloatCurve RootLocationYCurve; // 0x420(0x98)
	struct FFloatCurve RootLocationZCurve; // 0x4b8(0x98)
	struct FFloatCurve RootRotationXCurve; // 0x550(0x98)
	struct FFloatCurve RootRotationYCurve; // 0x5e8(0x98)
	struct FFloatCurve RootRotationZCurve; // 0x680(0x98)
	struct FFloatCurve RootRotationWCurve; // 0x718(0x98)
	char pad_7B0[0x40]; // 0x7b0(0x40)
};

// Class Solarland.SolarAirship
// Size: 0x530 (Inherited: 0x228)
struct ASolarAirship : AActor {
	bool bShowDebug; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)
	struct UAkComponent* AkAudioComponent; // 0x230(0x08)
	struct USkeletalMeshComponentBudgeted* SKMesh; // 0x238(0x08)
	struct FAirdropParas AirdropParas; // 0x240(0x20)
	float SpawnAirdropDelay; // 0x260(0x04)
	float DestroyDelay; // 0x264(0x04)
	int32_t AppearNoticeID; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct UCurveFloat* AppearMatCurve; // 0x270(0x08)
	struct UCurveFloat* DisappearMatCurve; // 0x278(0x08)
	struct UParticleSystem* FlyEffect; // 0x280(0x08)
	char pad_288[0x8]; // 0x288(0x08)
	struct FTransform FlyEffectTransform; // 0x290(0x30)
	struct UParticleSystem* AirScreenEffectBeforeAirdrop; // 0x2c0(0x08)
	struct UParticleSystem* AirScreenEffectAfterAirdrop; // 0x2c8(0x08)
	struct FTransform AirScreenEffectTransform_2; // 0x2d0(0x30)
	struct FTransform AirScreenEffectTransform_3; // 0x300(0x30)
	struct TArray<struct FPlaygroundEffect> PlaygroundEffects; // 0x330(0x10)
	struct FName FogComponentTag; // 0x340(0x08)
	struct FName FogDensityParam; // 0x348(0x08)
	struct FString AppearVoice; // 0x350(0x10)
	struct FString FlyLPSoundStartBeforeAirdrop; // 0x360(0x10)
	struct FString FlyLPSoundStopBeforeAirdrop; // 0x370(0x10)
	struct FString FlyLPSoundStartAfterAirdrop; // 0x380(0x10)
	struct FString FlyLPSoundStopAfterAirdrop; // 0x390(0x10)
	float VoicePlayInterval; // 0x3a0(0x04)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	struct TArray<struct FString> VoiceListBeforeAirdrop; // 0x3a8(0x10)
	struct TArray<struct FString> VoiceListAfterAirdrop; // 0x3b8(0x10)
	struct FString HatchOpenSound; // 0x3c8(0x10)
	bool bAirdropDelivered; // 0x3d8(0x01)
	bool bDisappear; // 0x3d9(0x01)
	char pad_3DA[0x16]; // 0x3da(0x16)
	struct UParticleSystemComponent* FlyEffectHandle; // 0x3f0(0x08)
	struct UParticleSystemComponent* AirScreenEffectBeforeAirdropHandle_2; // 0x3f8(0x08)
	struct UParticleSystemComponent* AirScreenEffectBeforeAirdropHandle_3; // 0x400(0x08)
	struct UParticleSystemComponent* AirScreenEffectAfterAirdropHandle_2; // 0x408(0x08)
	struct UParticleSystemComponent* AirScreenEffectAfterAirdropHandle_3; // 0x410(0x08)
	char pad_418[0x10]; // 0x418(0x10)
	struct USceneComponent* FogComponent; // 0x428(0x08)
	struct TMap<int32_t, struct FAirshipConfig> AirshipConfigMap; // 0x430(0x50)
	struct FRotator RotationOffset; // 0x480(0x0c)
	float HatchOffset; // 0x48c(0x04)
	float AirdropStartZOffset; // 0x490(0x04)
	float PointInSegmentTolerance; // 0x494(0x04)
	struct UAnimMontage* HatchOpenAnim; // 0x498(0x08)
	char pad_4A0[0x8]; // 0x4a0(0x08)
	struct FRouteInfo RouteInfo; // 0x4a8(0x34)
	char pad_4DC[0xc]; // 0x4dc(0x0c)
	struct FMiniMapAirlineData AirlineData; // 0x4e8(0x30)
	char pad_518[0x18]; // 0x518(0x18)

	void OnRep_RouteInfo(); // Function Solarland.SolarAirship.OnRep_RouteInfo // (Final|Native|Private) // @ game+0x206e900
	void OnRep_Disappear(); // Function Solarland.SolarAirship.OnRep_Disappear // (Final|Native|Private) // @ game+0x206e8c0
	void OnRep_AirdropDelivered(); // Function Solarland.SolarAirship.OnRep_AirdropDelivered // (Final|Native|Private) // @ game+0x206e8a0
	struct FMiniMapAirlineData K2_GetAirlineData(); // Function Solarland.SolarAirship.K2_GetAirlineData // (Final|Native|Public|BlueprintCallable) // @ game+0x206e860
	void DestroySelf(); // Function Solarland.SolarAirship.DestroySelf // (Final|Native|Private) // @ game+0x206e2b0
};

// Class Solarland.SolarAISense_QueryTeammate
// Size: 0x90 (Inherited: 0x80)
struct USolarAISense_QueryTeammate : UAISense {
	struct TArray<struct FAIQueryTeammateEvent> RegisteredEvents; // 0x80(0x10)
};

// Class Solarland.SolarAISenseConfig_QueryTeammate
// Size: 0x50 (Inherited: 0x48)
struct USolarAISenseConfig_QueryTeammate : UAISenseConfig {
	struct USolarAISense_QueryTeammate* Implementation; // 0x48(0x08)
};

// Class Solarland.SolarAISense_Radar
// Size: 0xd8 (Inherited: 0x80)
struct USolarAISense_Radar : UAISense {
	char pad_80[0x58]; // 0x80(0x58)
};

// Class Solarland.SolarAISenseConfig_Radar
// Size: 0x60 (Inherited: 0x48)
struct USolarAISenseConfig_Radar : UAISenseConfig {
	struct USolarAISense_Radar* Implementation; // 0x48(0x08)
	struct TArray<struct FRadarDetectConfig> RadarConfigs; // 0x50(0x10)
};

// Class Solarland.SolarAITargetComponent
// Size: 0xe0 (Inherited: 0xb0)
struct USolarAITargetComponent : UActorComponent {
	int32_t AIActorCapacity; // 0xb0(0x04)
	char pad_B4[0x2c]; // 0xb4(0x2c)
};

// Class Solarland.SolarAkAudioSettings
// Size: 0xd8 (Inherited: 0x38)
struct USolarAkAudioSettings : UDeveloperSettings {
	bool EnableBankLoadStrategy; // 0x38(0x01)
	bool EnableDebugMode; // 0x39(0x01)
	char pad_3A[0x2]; // 0x3a(0x02)
	float DelayReleaseBankTime; // 0x3c(0x04)
	struct TSoftObjectPtr<UDataTable> SoundBankEventTable; // 0x40(0x28)
	struct TArray<struct FName> InGameSceneName; // 0x68(0x10)
	struct TArray<struct FName> InLobbySceneName; // 0x78(0x10)
	struct TArray<struct FName> TutorialSceneName; // 0x88(0x10)
	struct TArray<struct FName> HomeSceneName; // 0x98(0x10)
	struct TArray<struct FName> WaitingLandSceneName; // 0xa8(0x10)
	struct TArray<struct FSolarAudioDetail> BankDetailsArray; // 0xb8(0x10)
	char pad_C8[0x10]; // 0xc8(0x10)
};

// Class Solarland.SolarAkGameObject
// Size: 0xd0 (Inherited: 0x28)
struct USolarAkGameObject : UObject {
	char pad_28[0xa0]; // 0x28(0xa0)
	bool bEnableTick; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)

	void Wakeup(); // Function Solarland.SolarAkGameObject.Wakeup // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20724b0
	void UnloadBank(struct FString InBankName); // Function Solarland.SolarAkGameObject.UnloadBank // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2070e60
	void UnLoadAllBanks(); // Function Solarland.SolarAkGameObject.UnLoadAllBanks // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x997950
	void Suspend(bool in_bRenderAnyway); // Function Solarland.SolarAkGameObject.Suspend // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20723a0
	int32_t StopSoundByEvent(struct FString in_EventName); // Function Solarland.SolarAkGameObject.StopSoundByEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x20722f0
	int32_t StaticStopSoundByEvent(struct FString in_EventName); // Function Solarland.SolarAkGameObject.StaticStopSoundByEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2072250
	void StaticSetRTPCValue(struct FString RTPC, float Value, int32_t InterpolationTimeMs); // Function Solarland.SolarAkGameObject.StaticSetRTPCValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2072130
	int32_t StaticPostAkEventByNameAndWaitForEnd(struct UObject* WorldContextObject, struct FString in_EventName, struct FLatentActionInfo LatentInfo); // Function Solarland.SolarAkGameObject.StaticPostAkEventByNameAndWaitForEnd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2071fd0
	int32_t StaticPostAkEventByName(struct FString in_EventName); // Function Solarland.SolarAkGameObject.StaticPostAkEventByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2071f30
	int32_t StaticPlaySoundByEvent(struct FString in_EventName); // Function Solarland.SolarAkGameObject.StaticPlaySoundByEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2071e90
	int32_t StaticPlaySoundAtLocationByName(struct FString AkName, struct FVector Location, struct FRotator Orientation, struct UObject* WorldContextObject); // Function Solarland.SolarAkGameObject.StaticPlaySoundAtLocationByName // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2071cd0
	int32_t StaticPlaySoundAtLocation(struct UAkAudioEvent* AkEvent, struct FVector Location, struct FRotator Orientation, struct UObject* WorldContextObject); // Function Solarland.SolarAkGameObject.StaticPlaySoundAtLocation // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2071b50
	int32_t StaticComponentPostAkEventByName(struct UAkComponent* AkComponent, struct FString in_EventName); // Function Solarland.SolarAkGameObject.StaticComponentPostAkEventByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2071a70
	void SolarLoadAllBanks(); // Function Solarland.SolarAkGameObject.SolarLoadAllBanks // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void SetSwitch(struct FString SwitchGroup, struct FString SwitchState); // Function Solarland.SolarAkGameObject.SetSwitch // (Final|Native|Public|BlueprintCallable) // @ game+0x2071950
	void SetRTPCValue(struct FString RTPC, float Value, int32_t InterpolationTimeMs); // Function Solarland.SolarAkGameObject.SetRTPCValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2071820
	void SetMasterRTPCValue(float Value, int32_t InterpolationTimeMs); // Function Solarland.SolarAkGameObject.SetMasterRTPCValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2071760
	void SetMasterRTPCMute(bool Mute); // Function Solarland.SolarAkGameObject.SetMasterRTPCMute // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20716e0
	void SetGlobalRTPCValue(struct FString RTPC, float Value, int32_t InterpolationTimeMs); // Function Solarland.SolarAkGameObject.SetGlobalRTPCValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20715c0
	void ReceiveTick(float DeltaTime); // Function Solarland.SolarAkGameObject.ReceiveTick // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarAkGameObject.ReceiveEndPlay // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveBeginPlay(); // Function Solarland.SolarAkGameObject.ReceiveBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t PostAkEventByNameAndWaitForEnd(struct FString in_EventName, struct FLatentActionInfo LatentInfo); // Function Solarland.SolarAkGameObject.PostAkEventByNameAndWaitForEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x20714a0
	int32_t PostAkEventByName(struct FString InEventName1, struct FString InEventName2); // Function Solarland.SolarAkGameObject.PostAkEventByName // (Final|Native|Public|BlueprintCallable) // @ game+0x20713a0
	int32_t PlaySoundByEvent(struct FString in_EventName); // Function Solarland.SolarAkGameObject.PlaySoundByEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x20712f0
	void LoadBank(struct FString InBankName); // Function Solarland.SolarAkGameObject.LoadBank // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2070e60
	void LoadAllBanks(); // Function Solarland.SolarAkGameObject.LoadAllBanks // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x997950
};

// Class Solarland.SolarAkSoundManager
// Size: 0x2a0 (Inherited: 0x30)
struct USolarAkSoundManager : USolarGameManager {
	char pad_30[0x270]; // 0x30(0x270)

	void UnloadBankIgnoreStrategy(struct FName& BankName); // Function Solarland.SolarAkSoundManager.UnloadBankIgnoreStrategy // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2072420
	void SetVoiceLanguage(); // Function Solarland.SolarAkSoundManager.SetVoiceLanguage // (Final|Native|Private) // @ game+0x2071a50
	void OnBankLoadedForEventAtLocationCallbackFunc(enum class EAkResult in_loadResult, uint32_t in_bankID); // Function Solarland.SolarAkSoundManager.OnBankLoadedForEventAtLocationCallbackFunc // (Final|Native|Private) // @ game+0x2071150
	void OnAkBankUnloadedCallbackFunc(enum class EAkResult in_loadResult, uint32_t in_bankID); // Function Solarland.SolarAkSoundManager.OnAkBankUnloadedCallbackFunc // (Final|Native|Private) // @ game+0x2071080
	void OnAkBankLoadedCallbackFunc(enum class EAkResult in_loadResult, uint32_t in_bankID); // Function Solarland.SolarAkSoundManager.OnAkBankLoadedCallbackFunc // (Final|Native|Private) // @ game+0x2070fb0
	void LoadBankIgnoreStrategy(struct FName& BankName); // Function Solarland.SolarAkSoundManager.LoadBankIgnoreStrategy // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2070ef0
};

// Class Solarland.SolarAngleViewWidget
// Size: 0x368 (Inherited: 0x138)
struct USolarAngleViewWidget : UWidget {
	struct FSlateBrush JoyStickThumb; // 0x138(0x98)
	struct FSlateBrush JoyStickThumbPress; // 0x1d0(0x98)
	struct FSlateBrush JoyStickBG; // 0x268(0x98)
	struct FVector2D VisualSize; // 0x300(0x08)
	struct FVector2D ThumbSize; // 0x308(0x08)
	struct FVector2D InputScale; // 0x310(0x08)
	float ActiveOpacity; // 0x318(0x04)
	float InactiveOpacity; // 0x31c(0x04)
	float TimeUntilDeactive; // 0x320(0x04)
	bool bPreventReCenter; // 0x324(0x01)
	char pad_325[0x13]; // 0x325(0x13)
	struct FMulticastInlineDelegate OnJoystickPressed; // 0x338(0x10)
	struct FMulticastInlineDelegate OnJoystickRelease; // 0x348(0x10)
	struct FMulticastInlineDelegate OnInputYawAndPitch; // 0x358(0x10)
};

// Class Solarland.SolarAnimInstance
// Size: 0x7c0 (Inherited: 0x270)
struct USolarAnimInstance : UAnimInstance {
	struct ASolarCharacter* SolarCharacterOwner; // 0x268(0x08)
	enum class ENetRole OwnerRole; // 0x270(0x01)
	char pad_279[0x3]; // 0x279(0x03)
	struct FName LeftHandIKSocketName; // 0x27c(0x08)
	struct FName RightHandWeaponSocketName; // 0x284(0x08)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct FTransform LeftHandIKSocket2BoneTrans; // 0x290(0x30)
	struct FVector LeftHandEffectorLocation; // 0x2c0(0x0c)
	struct FRotator LeftHandEffectorRotation; // 0x2cc(0x0c)
	char pad_2D8[0x24]; // 0x2d8(0x24)
	struct FVector CurrentLeftHandJointLocation; // 0x2fc(0x0c)
	struct FVector RightHandEffectorLocation; // 0x308(0x0c)
	struct FVector RightHandJointLocation; // 0x314(0x0c)
	float LeftIKHandWeight; // 0x320(0x04)
	float CurrentReloadTimeRate; // 0x324(0x04)
	float CurrentSwitchWeaponTimeRate; // 0x328(0x04)
	float CurrentBoltTimeRate; // 0x32c(0x04)
	bool IsJog; // 0x330(0x01)
	bool bInWater; // 0x331(0x01)
	char pad_332[0x2]; // 0x332(0x02)
	float ViewPitch; // 0x334(0x04)
	float ViewYaw; // 0x338(0x04)
	float SimulatedProxyViewSmoothSpeed; // 0x33c(0x04)
	char pad_340[0x8]; // 0x340(0x08)
	struct UBlendSpace* FireTPPBlendSpace; // 0x348(0x08)
	float FireTPPBlendSpaceX; // 0x350(0x04)
	float FIreTPPBlendSpaceY; // 0x354(0x04)
	float MinSwimSpeed; // 0x358(0x04)
	float Direction; // 0x35c(0x04)
	float Speed; // 0x360(0x04)
	float InputDirection; // 0x364(0x04)
	enum class EIdleTurnType IdleTurnType; // 0x368(0x01)
	char pad_369[0x3]; // 0x369(0x03)
	float TurnExplicitTime; // 0x36c(0x04)
	float DamageDirection; // 0x370(0x04)
	float DamageReactionAlpha; // 0x374(0x04)
	float DamageNomalizeTime; // 0x378(0x04)
	char pad_37C[0x108]; // 0x37c(0x108)
	struct FLeftHandGripConfig CurrentGripData; // 0x484(0x84)
	char pad_508[0x84]; // 0x508(0x84)
	float Fire2PlayRateStand; // 0x58c(0x04)
	float Fire2PlayRateCrouch; // 0x590(0x04)
	bool bHoldingShield; // 0x594(0x01)
	bool ShieldRechargeIK; // 0x595(0x01)
	char pad_596[0x4e]; // 0x596(0x4e)
	float FallingInputScale; // 0x5e4(0x04)
	struct FVector IKOffsetLeftFootVector; // 0x5e8(0x0c)
	struct FVector IKOffsetRightFootVector; // 0x5f4(0x0c)
	struct FVector JointTargetLeftFootVector; // 0x600(0x0c)
	struct FVector JointTargetRightFootVector; // 0x60c(0x0c)
	struct FRotator LeftFootRotation; // 0x618(0x0c)
	struct FRotator RightFootRotation; // 0x624(0x0c)
	struct FVector HipOffsetVector; // 0x630(0x0c)
	float FootIKTraceDistanceRate; // 0x63c(0x04)
	float CrouchFootIKTraceDistanceRate; // 0x640(0x04)
	float FootIKInterpSpeed; // 0x644(0x04)
	struct FName LeftFootSocket; // 0x648(0x08)
	struct FName RightFootSocket; // 0x650(0x08)
	bool AnimParam_LeftOrRight; // 0x658(0x01)
	char pad_659[0x3]; // 0x659(0x03)
	float LandingBlendWeight; // 0x65c(0x04)
	float DefaultLeftHandWeaponAttachingBlendTime; // 0x660(0x04)
	float DefaultLeftHandWeaponDetachingBlendTime; // 0x664(0x04)
	float CurrentLeftHandWeaponAttachingBlendTime; // 0x668(0x04)
	float CurrentLeftHandWeaponDetachingBlendTime; // 0x66c(0x04)
	char pad_670[0x28]; // 0x670(0x28)
	float FootIKEnableDelayTime; // 0x698(0x04)
	bool bActiveFootIK; // 0x69c(0x01)
	char pad_69D[0x33]; // 0x69d(0x33)
	float FlailRate; // 0x6d0(0x04)
	float ConfigPitchToZeroTime; // 0x6d4(0x04)
	struct FJetPackPoseSpeedRange JetPack2PoseSpeedRangeX; // 0x6d8(0x08)
	struct FJetPackPoseSpeedRange JetPack2PoseSpeedRangeY; // 0x6e0(0x08)
	struct FJetPackPoseSpeedRange JetPack2PoseSpeedRangeZ; // 0x6e8(0x08)
	float JetPack2PoseRestoreSmoothSpeed; // 0x6f0(0x04)
	struct FJetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeX; // 0x6f4(0x08)
	struct FJetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeY; // 0x6fc(0x08)
	char pad_704[0xe]; // 0x704(0x0e)
	bool bNewJet; // 0x712(0x01)
	bool bIsJetFlying; // 0x713(0x01)
	char bEnableDamageReact : 1; // 0x714(0x01)
	char bEnableWeaponAdditiveA : 1; // 0x714(0x01)
	char bEnableHandIK : 1; // 0x714(0x01)
	char bEnableFootIK : 1; // 0x714(0x01)
	char bEnableWeaponAdditiveB : 1; // 0x714(0x01)
	char bEnableWeaponJitter : 1; // 0x714(0x01)
	char pad_714_6 : 2; // 0x714(0x01)
	char MaxLODDamageReact; // 0x715(0x01)
	char MaxLODWeaponAdditiveA; // 0x716(0x01)
	char MaxLODHandIK; // 0x717(0x01)
	char MaxLODFootIK; // 0x718(0x01)
	char MaxLODWeaponAdditiveB; // 0x719(0x01)
	char MaxLODWeaponJitter; // 0x71a(0x01)
	char bIsDead : 1; // 0x71b(0x01)
	char pad_71B_1 : 7; // 0x71b(0x01)
	float DeathAnimStartPosition; // 0x71c(0x04)
	struct TMap<enum class ESpecAnimInstType, struct UAnimInstance*> SpecAnimBPs; // 0x720(0x50)
	char bIsWalking : 1; // 0x770(0x01)
	char bIsCrouching : 1; // 0x770(0x01)
	char bIsFalling : 1; // 0x770(0x01)
	char bIsFlying : 1; // 0x770(0x01)
	char bIsSwimming : 1; // 0x770(0x01)
	char bIsSprinting : 1; // 0x770(0x01)
	char bIsInhibitSprinting : 1; // 0x770(0x01)
	char bIsSixDirRunForward : 1; // 0x770(0x01)
	char bIsVaulting : 1; // 0x771(0x01)
	char pad_771_1 : 7; // 0x771(0x01)
	char pad_772[0x2]; // 0x772(0x02)
	enum class EWalkMode CurrentWalkMode; // 0x774(0x01)
	enum class EWalkMode LastWalkMode; // 0x775(0x01)
	enum class EAirMoveMode CurrentAirMoveMode; // 0x776(0x01)
	enum class EAirMoveMode LastAirMoveMode; // 0x777(0x01)
	enum class ECruiseAnimState CurrentCruiseState; // 0x778(0x01)
	char pad_779[0x7]; // 0x779(0x07)
	struct UAnimSequence* CruiseStartSequence; // 0x780(0x08)
	struct UAnimSequence* CruiseLoopSequence; // 0x788(0x08)
	struct UAnimSequence* CruiseEndSequence; // 0x790(0x08)
	float MinSpeedForSkydiveFlyingInputBonus; // 0x798(0x04)
	float MaxSpeedForSkydiveFlyingInputBonus; // 0x79c(0x04)
	float InputYThresholdToCalcInputYByCamera; // 0x7a0(0x04)
	float MinDeltaYawFromCameraToGetMaxInputY; // 0x7a4(0x04)
	enum class ESkydiveStage CurrentSkydiveStage; // 0x7a8(0x01)
	char pad_7A9[0x3]; // 0x7a9(0x03)
	float MinWallRunSurfaceAngle; // 0x7ac(0x04)
	float MaxWallRunSurfaceAngle; // 0x7b0(0x04)
	char pad_7B4[0x4]; // 0x7b4(0x04)
	enum class EWeaponStatus WeaponStatus; // 0x7b8(0x01)
	char bIsBolting : 1; // 0x7b9(0x01)
	char bIsReloading : 1; // 0x7b9(0x01)
	char bIsLeftHandDetaching : 1; // 0x7b9(0x01)
	char pad_7B9_3 : 1; // 0x7b9(0x01)
	char bIsInVehicle : 1; // 0x7b9(0x01)
	char pad_7B9_5 : 3; // 0x7b9(0x01)
	enum class ESkillAnimType CurrentSkillAnimType; // 0x7ba(0x01)
	char pad_7BB[0x5]; // 0x7bb(0x05)

	void OnMontagePlayEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Solarland.SolarAnimInstance.OnMontagePlayEnded // (Final|Native|Public) // @ game+0x2071220
	bool NeedResolveWeaponJitter(); // Function Solarland.SolarAnimInstance.NeedResolveWeaponJitter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2070f80
	bool JetPack2IsDashingCompletelyOver(); // Function Solarland.SolarAnimInstance.JetPack2IsDashingCompletelyOver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2070e30
	bool IsHoldingWeapon(); // Function Solarland.SolarAnimInstance.IsHoldingWeapon // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2070e00
	bool IsAiming(); // Function Solarland.SolarAnimInstance.IsAiming // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2070dd0
	float GetWallRunSurfaceAngle(); // Function Solarland.SolarAnimInstance.GetWallRunSurfaceAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2070da0
	enum class EWallRunState GetWallRunState(); // Function Solarland.SolarAnimInstance.GetWallRunState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2070d70
	struct FVector2D GetSkydiveFlyingInput(); // Function Solarland.SolarAnimInstance.GetSkydiveFlyingInput // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2070d30
	int32_t GetOwnerGroupID(); // Function Solarland.SolarAnimInstance.GetOwnerGroupID // (Final|Native|Protected|BlueprintCallable) // @ game+0x2070d00
	struct FVector GetJetPackDashAnimationBlend(); // Function Solarland.SolarAnimInstance.GetJetPackDashAnimationBlend // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2070cc0
	struct FVector GetInputVector(); // Function Solarland.SolarAnimInstance.GetInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2070c80
	struct FVector GetFallingInputVector(); // Function Solarland.SolarAnimInstance.GetFallingInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2070c40
	float GenJumpDirection(float InInputDirection); // Function Solarland.SolarAnimInstance.GenJumpDirection // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2070ba0
	float GenBackwardDirection(float InInputDirection); // Function Solarland.SolarAnimInstance.GenBackwardDirection // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2070b00
	bool CheckNewJetAndReset(); // Function Solarland.SolarAnimInstance.CheckNewJetAndReset // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2070ad0
};

// Class Solarland.SolarAnimNotify_Damage
// Size: 0x38 (Inherited: 0x38)
struct USolarAnimNotify_Damage : UAnimNotify {
};

// Class Solarland.SolarAnoHelper
// Size: 0x38 (Inherited: 0x28)
struct USolarAnoHelper : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	bool bOpenAnoSDK; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)

	void SendAntiDataToSsmOnDs(struct FString AntiDataLog, struct ASolarPlayerController* PC); // Function Solarland.SolarAnoHelper.SendAntiDataToSsmOnDs // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SendAntiDataToSsmOnClientNative(struct FString ExtraParam, enum class EAnoAntiDataType AntiType); // Function Solarland.SolarAnoHelper.SendAntiDataToSsmOnClientNative // (Final|Native|Public|BlueprintCallable) // @ game+0x2076830
	void SendAntiDataToSsmOnClient(struct FString Param, enum class EAnoAntiDataType AntiType); // Function Solarland.SolarAnoHelper.SendAntiDataToSsmOnClient // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void InitializeBind(); // Function Solarland.SolarAnoHelper.InitializeBind // (Final|Native|Public|BlueprintCallable) // @ game+0x2075fa0
	struct FString GetAntiLogOnClient(enum class EAnoAntiDataType Type); // Function Solarland.SolarAnoHelper.GetAntiLogOnClient // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void AnoUnRegisterCallBack(); // Function Solarland.SolarAnoHelper.AnoUnRegisterCallBack // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void AnoSentDataToSvr(struct FAnoSDKAntiData Data); // Function Solarland.SolarAnoHelper.AnoSentDataToSvr // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void AnoSentCoreTimeData(struct FAnoSDKAntiData AntiData); // Function Solarland.SolarAnoHelper.AnoSentCoreTimeData // (Final|Native|Public|BlueprintCallable) // @ game+0x2075b00
	void AnoSDKSendData(struct FAnoSDKAntiData AntiData); // Function Solarland.SolarAnoHelper.AnoSDKSendData // (Final|Native|Public|BlueprintCallable) // @ game+0x2075a10
	void AnoSDKResume(); // Function Solarland.SolarAnoHelper.AnoSDKResume // (Final|Native|Public|BlueprintCallable) // @ game+0x20759f0
	void AnoSDKPause(); // Function Solarland.SolarAnoHelper.AnoSDKPause // (Final|Native|Public|BlueprintCallable) // @ game+0x20759f0
	void AnoChangeAntiDataFlow(struct FAnoSDKAntiData Data); // Function Solarland.SolarAnoHelper.AnoChangeAntiDataFlow // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarApplicationLifetimeManager
// Size: 0x60 (Inherited: 0x30)
struct USolarApplicationLifetimeManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	int64_t AppWillDeactivateTimestamp; // 0x38(0x08)
	int64_t AppHasReactivatedTimestamp; // 0x40(0x08)
	char pad_48[0x18]; // 0x48(0x18)

	void ReceiveOnWindowMinimized(bool bIsMinimized); // Function Solarland.SolarApplicationLifetimeManager.ReceiveOnWindowMinimized // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveOnAppWillDeactivate(int64_t InTimestamp); // Function Solarland.SolarApplicationLifetimeManager.ReceiveOnAppWillDeactivate // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveOnAppHasReactivated(int64_t InTimestamp); // Function Solarland.SolarApplicationLifetimeManager.ReceiveOnAppHasReactivated // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarAssetManager
// Size: 0x578 (Inherited: 0x438)
struct USolarAssetManager : UAssetManager {
	char pad_438[0x18]; // 0x438(0x18)
	struct FMulticastInlineDelegate OnAssetManagerPreloadCompleted; // 0x450(0x10)
	struct USolarChunkAssignData* ChunkAssignDataCache; // 0x460(0x08)
	struct TMap<struct FString, struct UObject*> CachedObjMap; // 0x468(0x50)
	char pad_4B8[0xc0]; // 0x4b8(0xc0)

	void UnLoadPrimaryAssetByLabelPathForLua(struct FString PrimaryAssetPath); // Function Solarland.SolarAssetManager.UnLoadPrimaryAssetByLabelPathForLua // (Final|Native|Protected) // @ game+0x2076a70
	void PreloadGameNormalAssets(struct USolarGameInstanceBase* GameInstancePtr); // Function Solarland.SolarAssetManager.PreloadGameNormalAssets // (Final|Native|Public|BlueprintCallable) // @ game+0x20766a0
	void OnBindingActorDestory(struct AActor* Actor); // Function Solarland.SolarAssetManager.OnBindingActorDestory // (Final|Native|Protected) // @ game+0x20764b0
	float GetPreloadAssetsProgress(); // Function Solarland.SolarAssetManager.GetPreloadAssetsProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x2075ea0
};

// Class Solarland.SolarAssetManagerSettings
// Size: 0x260 (Inherited: 0x38)
struct USolarAssetManagerSettings : UDeveloperSettings {
	struct TArray<struct FPrimaryAssetTypeInfo> PrimaryAssetTypesToScan; // 0x38(0x10)
	struct TArray<struct FDirectoryPath> DirectoriesToExclude; // 0x48(0x10)
	struct TArray<struct FPrimaryAssetRulesOverride> PrimaryAssetRules; // 0x58(0x10)
	struct TArray<struct FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules; // 0x68(0x10)
	struct TMap<struct TSoftObjectPtr<UWorld>, enum class ESolarPlayStage> WorldPlayStageConfig; // 0x78(0x50)
	struct TMap<struct FString, enum class ESolarPlayStage> FolderDefaultPlayStageConfig; // 0xc8(0x50)
	bool bOnlyCookProductionAssets; // 0x118(0x01)
	bool bShouldManagerDetermineTypeAndName; // 0x119(0x01)
	bool bShouldGuessTypeAndNameInEditor; // 0x11a(0x01)
	bool bShouldAcquireMissingChunksOnLoad; // 0x11b(0x01)
	char pad_11C[0x4]; // 0x11c(0x04)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetIdRedirects; // 0x120(0x10)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetTypeRedirects; // 0x130(0x10)
	struct TArray<struct FAssetManagerRedirect> AssetPathRedirects; // 0x140(0x10)
	struct TSet<struct FName> MetaDataTagsForAssetRegistry; // 0x150(0x50)
	struct FSoftObjectPath ChunkAssignConfigPath; // 0x1a0(0x18)
	struct TArray<struct FPreloadBundle> PreloadBundles; // 0x1b8(0x10)
	struct TArray<struct FSoftObjectPath> PreloadAssets; // 0x1c8(0x10)
	struct TArray<struct FSoftClassPath> PreloadClassAssets; // 0x1d8(0x10)
	struct FSoftObjectPath ItemActorDataTable; // 0x1e8(0x18)
	struct FSoftObjectPath BackpackTrailAssemblingDataTable; // 0x200(0x18)
	struct FSoftObjectPath ItemResourceDataTable; // 0x218(0x18)
	struct FSoftObjectPath BuffEffectDataTable; // 0x230(0x18)
	struct FSoftObjectPath ScreenEffectDataTable; // 0x248(0x18)
};

// Class Solarland.SolarAssistAimInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarAssistAimInterface : UInterface {
};

// Class Solarland.SolarAssistAimSimpleActor
// Size: 0x2a8 (Inherited: 0x238)
struct ASolarAssistAimSimpleActor : AStaticMeshActor {
	char pad_238[0x8]; // 0x238(0x08)
	bool bSupportAssistAim; // 0x240(0x01)
	char pad_241[0x3]; // 0x241(0x03)
	struct FVector CenterOffset; // 0x244(0x0c)
	struct FWeaponAssistAimTargetConfig AssistAimTargetConfig; // 0x250(0x48)
	char pad_298[0x10]; // 0x298(0x10)

	void SetCurrentVelocity(struct FVector Velocity); // Function Solarland.SolarAssistAimSimpleActor.SetCurrentVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x20769e0
	struct FVector GetCenterLocation(); // Function Solarland.SolarAssistAimSimpleActor.GetCenterLocation // (Native|Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x2075e60
};

// Class Solarland.SolarAttributeSubComponent
// Size: 0x168 (Inherited: 0xb0)
struct USolarAttributeSubComponent : UActorComponent {
	struct TMap<int32_t, struct USolarAttributeSubData*> AttributeSubs; // 0xb0(0x50)
	struct TArray<struct FSolarAttributeSubReplicateData> AttributeSubRepData; // 0x100(0x10)
	struct TMap<int32_t, float> ClientAttributeSubValues; // 0x110(0x50)
	char pad_160[0x8]; // 0x160(0x08)

	void RemoveModifier(int32_t AttributeSubID, struct FName& Name); // Function Solarland.SolarAttributeSubComponent.RemoveModifier // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2076750
	void OnRep_AttributeSubRepDatas(); // Function Solarland.SolarAttributeSubComponent.OnRep_AttributeSubRepDatas // (Final|Native|Public) // @ game+0x2076680
	void OnAttributeSubChanged(); // Function Solarland.SolarAttributeSubComponent.OnAttributeSubChanged // (Final|Native|Public) // @ game+0x2076490
	float GetValue(int32_t AttributeSubID); // Function Solarland.SolarAttributeSubComponent.GetValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2075ed0
	struct USolarAttributeSubSystem* GetAttributeSubSystem(); // Function Solarland.SolarAttributeSubComponent.GetAttributeSubSystem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2075e10
	struct USolarAttributeSubComponent* GetAttributeSubComponentFromActor(struct AActor* InActor); // Function Solarland.SolarAttributeSubComponent.GetAttributeSubComponentFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2075d80
	int32_t AddModifier(int32_t AttributeSubID, enum class EGameplayModOp InOpType, float Magnitude, struct FName& Name); // Function Solarland.SolarAttributeSubComponent.AddModifier // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2075880
};

// Class Solarland.SolarAttributeSubData
// Size: 0x68 (Inherited: 0x28)
struct USolarAttributeSubData : UObject {
	struct USolarAttributeSubModifierGroup* LocalModifier; // 0x28(0x08)
	struct USolarAttributeSubModifierGroup* GlobalModifier; // 0x30(0x08)
	char pad_38[0x18]; // 0x38(0x18)
	int32_t AttributeID; // 0x50(0x04)
	float CurrentValue; // 0x54(0x04)
	float MaxValue; // 0x58(0x04)
	float MinValue; // 0x5c(0x04)
	float BaseValue; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)

	void OnModifierChanged(); // Function Solarland.SolarAttributeSubData.OnModifierChanged // (Final|Native|Protected) // @ game+0x2076660
};

// Class Solarland.SolarAttributeSubModifierGroup
// Size: 0x58 (Inherited: 0x28)
struct USolarAttributeSubModifierGroup : UObject {
	char pad_28[0x30]; // 0x28(0x30)
};

// Class Solarland.SolarAttributeSubSystem
// Size: 0xd8 (Inherited: 0x30)
struct USolarAttributeSubSystem : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct TMap<int32_t, struct FSolarAttributeConfig> AttributeDefaultData; // 0x38(0x50)
	struct TMap<int32_t, struct USolarAttributeSubModifierGroup*> GlobalModifiers; // 0x88(0x50)

	float CharacterTakeDamage(struct USolarAttributeSubComponent* AttributeSubComp, float Damage); // Function Solarland.SolarAttributeSubSystem.CharacterTakeDamage // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	float CalcWeaponFireDamage(struct USolarAttributeSubComponent* AttributeSet, int32_t& ModeIdx); // Function Solarland.SolarAttributeSubSystem.CalcWeaponFireDamage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarAutoFireInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarAutoFireInterface : UInterface {

	bool CanTriggerWeaponAutoFire(struct ASolarCharacter* InSourceCharacter, struct FVector& InStartLocation, struct FHitResult& InAutoFireHitResult); // Function Solarland.SolarAutoFireInterface.CanTriggerWeaponAutoFire // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x2075bf0
};

// Class Solarland.SolarAutoNavLinkVolume
// Size: 0x2a0 (Inherited: 0x260)
struct ASolarAutoNavLinkVolume : AVolume {
	bool bOverrideGlobalSetting; // 0x260(0x01)
	char pad_261[0x3]; // 0x261(0x03)
	struct FAutoNavLinkSetting AutoNavLinkSetting; // 0x264(0x3c)
};

// Class Solarland.SolarAutoSaveDataTable
// Size: 0xc8 (Inherited: 0xc8)
struct USolarAutoSaveDataTable : UDataTable {
};

// Class Solarland.SolarBackpackActor
// Size: 0x310 (Inherited: 0x228)
struct ASolarBackpackActor : AActor {
	struct USceneComponent* BackpackRoot; // 0x228(0x08)
	struct UBackpackVertAnimMeshComponent* BackpackMesh; // 0x230(0x08)
	struct ASolarCharacter* BackPackActorOwner; // 0x238(0x08)
	struct TArray<struct ASolarBackpackSFX*> BackpackSFX; // 0x240(0x10)
	struct ASolarBackpackSFX* BackpackOffgasSFX; // 0x250(0x08)
	char pad_258[0xc]; // 0x258(0x0c)
	float OriginScale; // 0x264(0x04)
	char pad_268[0x3]; // 0x268(0x03)
	bool bEnableMeshEffect; // 0x26b(0x01)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct ASolarBackpackSFX* TrailClass; // 0x270(0x08)
	struct ASolarBackpackSFX* OffgasClass; // 0x278(0x08)
	struct TSet<struct UParticleSystemComponent*> ListenSet; // 0x280(0x50)
	char pad_2D0[0x8]; // 0x2d0(0x08)
	struct FString AssemblingId; // 0x2d8(0x10)
	struct FName KnapsackFlySoundName; // 0x2e8(0x08)
	struct FName StartKnapsackLandingSoundName; // 0x2f0(0x08)
	struct FName StopKnapsackLandingSoundName; // 0x2f8(0x08)
	struct FName StartWallRunSoundName; // 0x300(0x08)
	struct FName StopWallRunSoundName; // 0x308(0x08)

	void SetBackpackVisibilityByFlag(bool bNewVisibility, int32_t Flag); // Function Solarland.SolarBackpackActor.SetBackpackVisibilityByFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x2076910
	void RefreshActorEffect(); // Function Solarland.SolarBackpackActor.RefreshActorEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x2076730
	void OnMeshEffectFactorChange(); // Function Solarland.SolarBackpackActor.OnMeshEffectFactorChange // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnChildPSCompPreActive(struct UParticleSystemComponent* PSComponent); // Function Solarland.SolarBackpackActor.OnChildPSCompPreActive // (Final|Native|Protected) // @ game+0x20765d0
	void OnChildPSCompFinish(struct UParticleSystemComponent* PSComponent); // Function Solarland.SolarBackpackActor.OnChildPSCompFinish // (Final|Native|Protected) // @ game+0x2076540
	bool IsFly(); // Function Solarland.SolarBackpackActor.IsFly // (Final|Native|Public|BlueprintCallable) // @ game+0x2075ff0
	bool IsCharging(); // Function Solarland.SolarBackpackActor.IsCharging // (Final|Native|Public|BlueprintCallable) // @ game+0x2075fc0
	bool HasEnergy(); // Function Solarland.SolarBackpackActor.HasEnergy // (Final|Native|Public|BlueprintCallable) // @ game+0x2075f70
	float GetBackpackOrginScale(); // Function Solarland.SolarBackpackActor.GetBackpackOrginScale // (Final|Native|Public|BlueprintCallable) // @ game+0x2075e40
};

// Class Solarland.SolarBackpackAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct USolarBackpackAnimInstance : UAnimInstance {
	char bIsInRoom : 1; // 0x268(0x01)
	char bIsFlying : 1; // 0x268(0x01)
};

// Class Solarland.SolarBackpackCompInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarBackpackCompInterface : UInterface {

	struct USolarBackpackComponent* GetSolarBackpackComponent(); // Function Solarland.SolarBackpackCompInterface.GetSolarBackpackComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1fa4280
};

// Class Solarland.SolarBackpackComponent
// Size: 0x3f8 (Inherited: 0xb0)
struct USolarBackpackComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	float DeathBoxEnergyRate; // 0xb8(0x04)
	float RebirthEnergyRate; // 0xbc(0x04)
	char pad_C0[0x8]; // 0xc0(0x08)
	struct FMulticastInlineDelegate OnWeaponCreateCompleteDelegate; // 0xc8(0x10)
	char pad_D8[0x78]; // 0xd8(0x78)
	float InitialSolarCharge; // 0x150(0x04)
	float SolarChargeInterval; // 0x154(0x04)
	float InitialEnergyLimit; // 0x158(0x04)
	float InitialExtraEnergyLimit; // 0x15c(0x04)
	float InitialExtraEnergyCharge; // 0x160(0x04)
	float InitialChargeCD; // 0x164(0x04)
	char pad_168[0x10]; // 0x168(0x10)
	float RechargeFrequencyFromSky; // 0x178(0x04)
	float RechargeFrequencyFromDeathBox; // 0x17c(0x04)
	float RechargeFrequencyFromPile; // 0x180(0x04)
	float RechargeQuantityFromSky; // 0x184(0x04)
	float RechargeQuantityFromDeathBox; // 0x188(0x04)
	float RechargeQuantityFromPile; // 0x18c(0x04)
	char pad_190[0x90]; // 0x190(0x90)
	float JetPackVerticalDashSpeedScale; // 0x220(0x04)
	float JetPackHorizontalDashSpeedScale; // 0x224(0x04)
	struct TMap<int32_t, struct UGameplayAbility*> ItemAbilities; // 0x228(0x50)
	struct TMap<int32_t, struct FGameplayAbilitySpecHandle> GivenAbilityHandles; // 0x278(0x50)
	char pad_2C8[0x54]; // 0x2c8(0x54)
	bool bWeaponPartPickable; // 0x31c(0x01)
	char pad_31D[0x3]; // 0x31d(0x03)
	struct TMap<int32_t, int32_t> defaultDeathBoxEnergyConfig; // 0x320(0x50)
	struct TMap<int32_t, struct FDateTime> DroppedItemIDMap; // 0x370(0x50)
	float DiscardItemDelayNoticeTime; // 0x3c0(0x04)
	char pad_3C4[0x4]; // 0x3c4(0x04)
	struct TArray<float> GradeRankProportion; // 0x3c8(0x10)
	struct TArray<int32_t> InitialGridNum; // 0x3d8(0x10)
	struct TArray<int32_t> CustomMode_Hunt_InitialGridNum; // 0x3e8(0x10)

	void WeaponCreateCompleteDelegate__DelegateSignature(enum class EWeaponSlotType SlotType, struct ASolarPlayerWeapon* WeaponPtr, struct USolarBackpackComponent* SolarBackpackComponent); // DelegateFunction Solarland.SolarBackpackComponent.WeaponCreateCompleteDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void UpdateCurrentExtraEnergy(float UpdateValue, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.UpdateCurrentExtraEnergy // (Final|Native|Public) // @ game+0x207d490
	void UpdateCurrentEnergy(float UpdateValue, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.UpdateCurrentEnergy // (Final|Native|Public) // @ game+0x207d3c0
	void UpdateConsumeSlotUI(); // Function Solarland.SolarBackpackComponent.UpdateConsumeSlotUI // (Final|Native|Public) // @ game+0x207d3a0
	bool TryTriggerAbility(int32_t InItemID); // Function Solarland.SolarBackpackComponent.TryTriggerAbility // (Final|Native|Protected) // @ game+0x207d300
	void TrySendDropItemTips(int32_t InDroppedItemID); // Function Solarland.SolarBackpackComponent.TrySendDropItemTips // (Final|Native|Public) // @ game+0x207d270
	float TakeDeathBoxEnergy(); // Function Solarland.SolarBackpackComponent.TakeDeathBoxEnergy // (Final|Native|Public) // @ game+0x207d240
	void SmoothEnergy(float Amount); // Function Solarland.SolarBackpackComponent.SmoothEnergy // (Final|Native|Public) // @ game+0x207d1c0
	void SetMaxPileMap(int32_t ItemID, int32_t MaxNum); // Function Solarland.SolarBackpackComponent.SetMaxPileMap // (Final|Native|Public) // @ game+0x207d0f0
	void SetBoxCharging(bool bSet); // Function Solarland.SolarBackpackComponent.SetBoxCharging // (Final|Native|Public) // @ game+0x207d060
	void SetBackPackGM(enum class EGmType gmtypy, int32_t ID, int32_t Num, int32_t Slot); // Function Solarland.SolarBackpackComponent.SetBackPackGM // (Final|Native|Public) // @ game+0x207c590
	bool ServerUseItem(int32_t ItemID, int32_t Num); // Function Solarland.SolarBackpackComponent.ServerUseItem // (Final|Native|Public) // @ game+0x207cf90
	void ServerSetJetPackModule(int32_t NewJetPackModuleID, bool bForVertical); // Function Solarland.SolarBackpackComponent.ServerSetJetPackModule // (Final|Native|Public) // @ game+0x207cec0
	void ServerSetEnergyState(enum class EEnergyState State); // Function Solarland.SolarBackpackComponent.ServerSetEnergyState // (Final|Native|Public) // @ game+0x207ce40
	void ServerRPCUpgradeWeapon(struct ASolarElectricShop* InTargetShop, struct ASolarPlayerWeapon* InTargetWeapon); // Function Solarland.SolarBackpackComponent.ServerRPCUpgradeWeapon // (Final|Native|Public) // @ game+0x207bae0
	void ServerRPCUpgradeShield(); // Function Solarland.SolarBackpackComponent.ServerRPCUpgradeShield // (Final|Native|Public) // @ game+0x207bac0
	void ServerRPCTakeWeaponPartToBag(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.ServerRPCTakeWeaponPartToBag // (Final|Native|Public) // @ game+0x207b3f0
	void ServerRPCTakeBagPartToWeapon(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.ServerRPCTakeBagPartToWeapon // (Final|Native|Public) // @ game+0x207b320
	void ServerRPCSwitchWeaponPart(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.ServerRPCSwitchWeaponPart // (Final|Native|Public) // @ game+0x207b250
	void ServerRPCPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarBackpackComponent.ServerRPCPurchaseEShopItems // (Final|Native|Public) // @ game+0x207cd30
	void ServerRPCDisCardWeaponUICall(int32_t Slot); // Function Solarland.SolarBackpackComponent.ServerRPCDisCardWeaponUICall // (Final|Native|Public) // @ game+0x207cca0
	void ServerRPCDiscardWeaponPart(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.ServerRPCDiscardWeaponPart // (Final|Native|Public) // @ game+0x207b180
	void ServerRPCDiscardWeapon(int32_t InSlot); // Function Solarland.SolarBackpackComponent.ServerRPCDiscardWeapon // (Final|Native|Public) // @ game+0x207cca0
	void ServerRPCDisCardItemUICall(int32_t ID, int32_t Num); // Function Solarland.SolarBackpackComponent.ServerRPCDisCardItemUICall // (Final|Native|Public) // @ game+0x207cbd0
	void ServerRPCDiscardItem(int32_t InItemID, int32_t InItemNum); // Function Solarland.SolarBackpackComponent.ServerRPCDiscardItem // (Final|Native|Public) // @ game+0x207cbd0
	bool ServerDiscardWeapon(int32_t Slot, int32_t InTriggerType); // Function Solarland.SolarBackpackComponent.ServerDiscardWeapon // (Final|Native|Public) // @ game+0x207cb00
	bool ServerDiscardFromBackpackByType(enum class EItemType ItemType, bool InDropItem, int32_t InTriggerType); // Function Solarland.SolarBackpackComponent.ServerDiscardFromBackpackByType // (Final|Native|Public) // @ game+0x207c9f0
	bool ServerDiscardFromBackpack(int32_t ItemID, int32_t Num, bool InDropItem, int32_t InTriggerType); // Function Solarland.SolarBackpackComponent.ServerDiscardFromBackpack // (Final|Native|Public) // @ game+0x207c880
	void ServerConsumeExtraEnergy(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ServerConsumeExtraEnergy // (Final|Native|Public) // @ game+0x207c7b0
	void ServerConsumeEnergy(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ServerConsumeEnergy // (Final|Native|Public) // @ game+0x207b8e0
	void ServerClearJetModule(); // Function Solarland.SolarBackpackComponent.ServerClearJetModule // (Final|Native|Public) // @ game+0x207c790
	void ServerClearEnergyState(enum class EEnergyState State); // Function Solarland.SolarBackpackComponent.ServerClearEnergyState // (Final|Native|Public) // @ game+0x207c710
	void ServerClearAllItems(); // Function Solarland.SolarBackpackComponent.ServerClearAllItems // (Final|Native|Public) // @ game+0x207c6f0
	void ServerBackpackGM(enum class EGmType InGmType, int32_t InItemID, int32_t InItemNum, int32_t InSlot); // Function Solarland.SolarBackpackComponent.ServerBackpackGM // (Final|Native|Public) // @ game+0x207c590
	bool ServerAddWeaponToWeaponSysByDataCache(enum class EWeaponSlotType SlotType, struct FSolarItemData& WeaponData, bool bDestroyPrev, bool IsAutoPickup, int32_t InTriggerType, struct ASolarPlayerWeapon* WeaponActorExists); // Function Solarland.SolarBackpackComponent.ServerAddWeaponToWeaponSysByDataCache // (Final|Native|Public|HasOutParms) // @ game+0x207c330
	int32_t ServerAddToItemMapByIdAndNumForced(int32_t ItemID, int32_t Num); // Function Solarland.SolarBackpackComponent.ServerAddToItemMapByIdAndNumForced // (Final|Native|Public) // @ game+0x207c260
	int32_t ServerAddToItemMap(struct FSolarItemData ItemData); // Function Solarland.SolarBackpackComponent.ServerAddToItemMap // (Final|Native|Public) // @ game+0x207c160
	void ServerAddToEquipMap(struct FSolarItemData& ItemData, bool Bydefault, bool InDropItem); // Function Solarland.SolarBackpackComponent.ServerAddToEquipMap // (Final|Native|Public|HasOutParms) // @ game+0x207bfc0
	int32_t ServerAddToBackpackByIdAndNum(int32_t ItemID, int32_t Num, bool Bydefault, float CurValue, bool NeedReset, int32_t UserId, int32_t TriggerType, int32_t SourceType); // Function Solarland.SolarBackpackComponent.ServerAddToBackpackByIdAndNum // (Final|Native|Public) // @ game+0x207bd50
	int32_t ServerAddToBackpack(struct FSolarItemData& ItemData, bool Bydefault, int32_t TriggerType); // Function Solarland.SolarBackpackComponent.ServerAddToBackpack // (Final|Native|Public|HasOutParms) // @ game+0x207bbb0
	void ReqUseEnergy(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ReqUseEnergy // (Final|Native|Public) // @ game+0x207b8e0
	void RequestUpgradeWeapon(struct ASolarElectricShop* InTargetShop, struct ASolarPlayerWeapon* InTargetWeapon); // Function Solarland.SolarBackpackComponent.RequestUpgradeWeapon // (Final|Native|Public) // @ game+0x207bae0
	void RequestUpgradeShield(); // Function Solarland.SolarBackpackComponent.RequestUpgradeShield // (Final|Native|Public) // @ game+0x207bac0
	void ReqesutPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarBackpackComponent.ReqesutPurchaseEShopItems // (Final|Native|Public) // @ game+0x207b9b0
	void RefreshWeaponPartsInBackPackUI(); // Function Solarland.SolarBackpackComponent.RefreshWeaponPartsInBackPackUI // (Final|Native|Public) // @ game+0x207b8c0
	void RefreshWeaponInBackPackUIInternal(); // Function Solarland.SolarBackpackComponent.RefreshWeaponInBackPackUIInternal // (Final|Native|Protected) // @ game+0x207b8a0
	void RefreshWeaponInBackPackUI(); // Function Solarland.SolarBackpackComponent.RefreshWeaponInBackPackUI // (Final|Native|Public) // @ game+0x207b880
	void RefreshItemInBackPackUI(); // Function Solarland.SolarBackpackComponent.RefreshItemInBackPackUI // (Final|Native|Public) // @ game+0x207b860
	void RefreshEquipInBackPackUI(); // Function Solarland.SolarBackpackComponent.RefreshEquipInBackPackUI // (Final|Native|Public) // @ game+0x207b840
	void RefreshBackPackUIState(); // Function Solarland.SolarBackpackComponent.RefreshBackPackUIState // (Final|Native|Public) // @ game+0x207b820
	void PurchaseEShopItemsResponse_Implementation(int32_t InProductID, bool bSuccess, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarBackpackComponent.PurchaseEShopItemsResponse_Implementation // (Final|Native|Public) // @ game+0x207b710
	int32_t PredictEnergy(float Amount); // Function Solarland.SolarBackpackComponent.PredictEnergy // (Final|Native|Public) // @ game+0x207b680
	void OnReceiveItemAbilityCoolDown(struct FGameplayTag& Tags, bool bAdd); // Function Solarland.SolarBackpackComponent.OnReceiveItemAbilityCoolDown // (Final|Native|Public|HasOutParms) // @ game+0x207b5a0
	bool NetUseEnergy(float InCostEnergy, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.NetUseEnergy // (Final|Native|Public) // @ game+0x207b4c0
	void NetTakeWeaponPartToBagLuaCall(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.NetTakeWeaponPartToBagLuaCall // (Final|Native|Public) // @ game+0x207b3f0
	void NetTakeBagPartToWeaponLuaCall(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.NetTakeBagPartToWeaponLuaCall // (Final|Native|Public) // @ game+0x207b320
	void NetSwitchWeaponPartLuaCall(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.NetSwitchWeaponPartLuaCall // (Final|Native|Public) // @ game+0x207b250
	void NetDiscardWeaponPartLuaCall(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.NetDiscardWeaponPartLuaCall // (Final|Native|Public) // @ game+0x207b180
	bool ModuleOverflow2(int32_t ModuleMax); // Function Solarland.SolarBackpackComponent.ModuleOverflow2 // (Final|Native|Public|Const) // @ game+0x207b040
	bool ModuleOverflow(int32_t ModuleMax); // Function Solarland.SolarBackpackComponent.ModuleOverflow // (Final|Native|Public|Const) // @ game+0x207b0e0
	void LogBackPackItem(); // Function Solarland.SolarBackpackComponent.LogBackPackItem // (Final|Native|Public) // @ game+0x207b020
	bool IsReviveItemRecommend(); // Function Solarland.SolarBackpackComponent.IsReviveItemRecommend // (Final|Native|Public) // @ game+0x207aff0
	bool IsReviveItemPickable(); // Function Solarland.SolarBackpackComponent.IsReviveItemPickable // (Final|Native|Public) // @ game+0x207afc0
	bool IsReviveItem(int32_t InItemID); // Function Solarland.SolarBackpackComponent.IsReviveItem // (Final|Native|Public) // @ game+0x207af20
	bool IsExtraEnergyID(int32_t ID); // Function Solarland.SolarBackpackComponent.IsExtraEnergyID // (Final|Native|Public) // @ game+0x207ae80
	bool IsEquippedWeapon(int32_t InThisID); // Function Solarland.SolarBackpackComponent.IsEquippedWeapon // (Final|Native|Public) // @ game+0x207ade0
	bool IsEquippedOrHasBetterPart(int32_t PartType, int32_t Level); // Function Solarland.SolarBackpackComponent.IsEquippedOrHasBetterPart // (Final|Native|Public) // @ game+0x207ad10
	bool IsEnergyID(int32_t ID); // Function Solarland.SolarBackpackComponent.IsEnergyID // (Final|Native|Public) // @ game+0x207ac70
	int32_t IsBetterWeaponThanEquiped(struct FSolarItemData& InItemData, int32_t InWeaponLevel, int32_t InWeaponExp); // Function Solarland.SolarBackpackComponent.IsBetterWeaponThanEquiped // (Final|Native|Public|HasOutParms) // @ game+0x207aad0
	bool IsBetterWeaponForBag(struct FSolarItemData& InItemData, int32_t InWeaponLevel, int32_t InWeaponExp); // Function Solarland.SolarBackpackComponent.IsBetterWeaponForBag // (Final|Native|Public|HasOutParms) // @ game+0x207a930
	bool IsBetterScopeForBag(int32_t PartType, int32_t Level); // Function Solarland.SolarBackpackComponent.IsBetterScopeForBag // (Final|Native|Public) // @ game+0x207a860
	bool IsBetterPartForBag(int32_t PartType, int32_t Level); // Function Solarland.SolarBackpackComponent.IsBetterPartForBag // (Final|Native|Public) // @ game+0x207a790
	void InitDefaultItem(int32_t ItemID, int32_t Num); // Function Solarland.SolarBackpackComponent.InitDefaultItem // (Final|Native|Public) // @ game+0x207a6c0
	void InitDeathBoxEnergyRate(); // Function Solarland.SolarBackpackComponent.InitDeathBoxEnergyRate // (Final|Native|Public) // @ game+0x207a6a0
	bool HasEmptyWeaponSlot(); // Function Solarland.SolarBackpackComponent.HasEmptyWeaponSlot // (Final|Native|Public) // @ game+0x207a670
	bool GetWeaponSlotEmpty(int32_t Slot); // Function Solarland.SolarBackpackComponent.GetWeaponSlotEmpty // (Final|Native|Public) // @ game+0x207a5d0
	bool GetWeaponPartInBagClient(int32_t TargetPartType, int32_t& OutPartLevel, int32_t& OutItemID); // Function Solarland.SolarBackpackComponent.GetWeaponPartInBagClient // (Final|Native|Public|HasOutParms) // @ game+0x207a4b0
	struct FSolarItemData GetWeaponItemDataBySlot(int32_t Slot); // Function Solarland.SolarBackpackComponent.GetWeaponItemDataBySlot // (Final|Native|Public) // @ game+0x207a3a0
	bool GetWeaponDataBySolt(int32_t Slot, struct FSolarItemData& ItemData); // Function Solarland.SolarBackpackComponent.GetWeaponDataBySolt // (Final|Native|Public|HasOutParms) // @ game+0x207a250
	float GetTotalEnergy(); // Function Solarland.SolarBackpackComponent.GetTotalEnergy // (Final|Native|Protected) // @ game+0x2079850
	float GetQuantityFrom(enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.GetQuantityFrom // (Final|Native|Public) // @ game+0x207a1c0
	struct FSolarItemData GetNewItemData(int32_t ItemID, int32_t Num); // Function Solarland.SolarBackpackComponent.GetNewItemData // (Final|Native|Public) // @ game+0x207a070
	float GetMaxExtraEnergy(); // Function Solarland.SolarBackpackComponent.GetMaxExtraEnergy // (Final|Native|Public|Const) // @ game+0x207a040
	float GetMaxEnergy(); // Function Solarland.SolarBackpackComponent.GetMaxEnergy // (Final|Native|Public|Const) // @ game+0x207a040
	float GetMaxDeathBoxEnergyFromConfig(); // Function Solarland.SolarBackpackComponent.GetMaxDeathBoxEnergyFromConfig // (Final|Native|Public) // @ game+0x207a010
	int32_t GetItemNumById(int32_t ItemID); // Function Solarland.SolarBackpackComponent.GetItemNumById // (Final|Native|Public) // @ game+0x2079f70
	int32_t GetItemMaxPile(int32_t ItemID); // Function Solarland.SolarBackpackComponent.GetItemMaxPile // (Final|Native|Public) // @ game+0x2079ed0
	bool GetItemDataByType(enum class EItemType ItemType, struct FSolarItemData& ItemData); // Function Solarland.SolarBackpackComponent.GetItemDataByType // (Final|Native|Public|HasOutParms) // @ game+0x2079d80
	bool GetItemDataById(int32_t ItemID, struct FSolarItemData& ItemData); // Function Solarland.SolarBackpackComponent.GetItemDataById // (Final|Native|Public|HasOutParms) // @ game+0x2079c30
	float GetFrequencyFrom(enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.GetFrequencyFrom // (Final|Native|Public) // @ game+0x2079ba0
	struct FSolarItemData GetEquipItemDataByType(enum class EItemType ItemType); // Function Solarland.SolarBackpackComponent.GetEquipItemDataByType // (Final|Native|Public) // @ game+0x2079a90
	int32_t GetEquipIdByType(enum class EItemType ItemType); // Function Solarland.SolarBackpackComponent.GetEquipIdByType // (Final|Native|Public) // @ game+0x20799f0
	float GetCurrExtraEnergy(); // Function Solarland.SolarBackpackComponent.GetCurrExtraEnergy // (Final|Native|Public|Const) // @ game+0x2079850
	struct FSolarItemData GetCurrentWeaponItemData(); // Function Solarland.SolarBackpackComponent.GetCurrentWeaponItemData // (Final|Native|Public) // @ game+0x2079960
	bool GetCurrentWeaponIsOverloading(); // Function Solarland.SolarBackpackComponent.GetCurrentWeaponIsOverloading // (Final|Native|Public) // @ game+0x2079930
	void GetCurrentEquipItems(struct TArray<int32_t>& OutArray); // Function Solarland.SolarBackpackComponent.GetCurrentEquipItems // (Final|Native|Public|HasOutParms) // @ game+0x2079880
	float GetCurrEnergy(); // Function Solarland.SolarBackpackComponent.GetCurrEnergy // (Final|Native|Public|Const) // @ game+0x2079850
	struct ASolarCharacter* GetCharacterOwner(); // Function Solarland.SolarBackpackComponent.GetCharacterOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fed1a0
	enum class EWeaponSlotType GetBestSuitSlotForCandidateWeapon(struct FSolarItemData& WeaponData, bool IsAutoPickup); // Function Solarland.SolarBackpackComponent.GetBestSuitSlotForCandidateWeapon // (Final|Native|Public|HasOutParms) // @ game+0x2079700
	bool GetAnyScopeInBagClient(int32_t& OutPartType, int32_t& OutPartLevel, int32_t& OutItemID); // Function Solarland.SolarBackpackComponent.GetAnyScopeInBagClient // (Final|Native|Public|HasOutParms) // @ game+0x20795c0
	float GetAbilityRemainingCD(int32_t InItemID); // Function Solarland.SolarBackpackComponent.GetAbilityRemainingCD // (Final|Native|Public) // @ game+0x2079520
	float GetAbilityDuration(int32_t InItemID); // Function Solarland.SolarBackpackComponent.GetAbilityDuration // (Final|Native|Public) // @ game+0x2079480
	void GameStatistics_ItemUseCount(struct FSolarItemData& InItemData); // Function Solarland.SolarBackpackComponent.GameStatistics_ItemUseCount // (Final|Native|Protected|HasOutParms) // @ game+0x2079390
	void ExecuteGM(struct FString InStrGM); // Function Solarland.SolarBackpackComponent.ExecuteGM // (Final|Native|Public) // @ game+0x20792f0
	void EquipModuleByID(int32_t ModuleID); // Function Solarland.SolarBackpackComponent.EquipModuleByID // (Final|Native|Public) // @ game+0x2079260
	int32_t EquipModule(int32_t ID, float ModuleMax); // Function Solarland.SolarBackpackComponent.EquipModule // (Final|Native|Public) // @ game+0x2079190
	void EquipBatteryByID(int32_t BatteryID); // Function Solarland.SolarBackpackComponent.EquipBatteryByID // (Final|Native|Public) // @ game+0x2079100
	int32_t EquipBattery(int32_t ID, float BatteryMax, float Charge, float CD); // Function Solarland.SolarBackpackComponent.EquipBattery // (Final|Native|Public) // @ game+0x2078fa0
	void DiscardItemAndResetCharacterData(struct FSolarItemData& DiscardItem, bool DiscardDataOnly); // Function Solarland.SolarBackpackComponent.DiscardItemAndResetCharacterData // (Final|Native|Public|HasOutParms) // @ game+0x2078e50
	void DiscardItem(struct FSolarItemData DiscardItem); // Function Solarland.SolarBackpackComponent.DiscardItem // (Final|Native|Public) // @ game+0x2078d60
	void DelayCheckClearAbility(int32_t InItemID); // Function Solarland.SolarBackpackComponent.DelayCheckClearAbility // (Final|Native|Protected) // @ game+0x2078cd0
	void CommitEnergy(int32_t ID); // Function Solarland.SolarBackpackComponent.CommitEnergy // (Final|Native|Public) // @ game+0x20787c0
	bool ClearBackpackItemByID(int32_t InItemID); // Function Solarland.SolarBackpackComponent.ClearBackpackItemByID // (Final|Native|Public) // @ game+0x2078c30
	void CheckToGiveAbility(int32_t InItemID); // Function Solarland.SolarBackpackComponent.CheckToGiveAbility // (Final|Native|Protected) // @ game+0x2078ba0
	void CheckToClearAbility(int32_t InItemID); // Function Solarland.SolarBackpackComponent.CheckToClearAbility // (Final|Native|Protected) // @ game+0x2078b10
	bool CheckIsRecWeaponParts(int32_t ItemID); // Function Solarland.SolarBackpackComponent.CheckIsRecWeaponParts // (Final|Native|Public) // @ game+0x2078a70
	bool CheckIsEquippedDifferentScope(int32_t PartID); // Function Solarland.SolarBackpackComponent.CheckIsEquippedDifferentScope // (Final|Native|Public) // @ game+0x20789d0
	bool CheckCanAutoPickupWeaponPart(int32_t ItemID); // Function Solarland.SolarBackpackComponent.CheckCanAutoPickupWeaponPart // (Final|Native|Public) // @ game+0x2078930
	float ChargeMain(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ChargeMain // (Final|Native|Public) // @ game+0x2078850
	float ChargeExtra(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ChargeExtra // (Final|Native|Public) // @ game+0x2078850
	void CancelEnergy(int32_t ID); // Function Solarland.SolarBackpackComponent.CancelEnergy // (Final|Native|Public) // @ game+0x20787c0
	bool BatteryOverflow(int32_t BatteryMax); // Function Solarland.SolarBackpackComponent.BatteryOverflow // (Final|Native|Public|Const) // @ game+0x2078720
	enum class EItemModifyResult AddBackpackItemByID(int32_t InItemID, int32_t InItemNum, bool InDropItem); // Function Solarland.SolarBackpackComponent.AddBackpackItemByID // (Final|Native|Public) // @ game+0x2078610
};

// Class Solarland.BackpackTrailAssemblingInterface
// Size: 0x28 (Inherited: 0x28)
struct UBackpackTrailAssemblingInterface : UInterface {

	void OnBackpackTrailAssembling(struct FBackpackTrailAssemblingParams& Params, enum class EBackpackPropellingMode PropellingMode); // Function Solarland.BackpackTrailAssemblingInterface.OnBackpackTrailAssembling // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarLeggedVehicle
// Size: 0x13d0 (Inherited: 0x1380)
struct ASolarLeggedVehicle : ASolarVehiclePawn {
	struct USolarLeggedVehicleMovement* LeggedVehicleMovement; // 0x1380(0x08)
	struct UCapsuleComponent* VehicleCapsule; // 0x1388(0x08)
	struct UPrimitiveComponent* BlockForVehicleComp; // 0x1390(0x08)
	float BlockForVehicleCollisionDelay; // 0x1398(0x04)
	char pad_139C[0xc]; // 0x139c(0x0c)
	enum class EVehicleAnimationState ReplicatedAnimState; // 0x13a8(0x01)
	char pad_13A9[0x7]; // 0x13a9(0x07)
	struct TArray<struct FVector_NetQuantize> InitialFootIkLocations; // 0x13b0(0x10)
	float StandOnVehicleRadiusMultiplier; // 0x13c0(0x04)
	char pad_13C4[0xc]; // 0x13c4(0x0c)

	void OnStandOnVehicle(bool bOnVehicle); // Function Solarland.SolarLeggedVehicle.OnStandOnVehicle // (Final|Native|Protected) // @ game+0x2140dd0
	void OnRep_ReplicatedAnimState(enum class EVehicleAnimationState PreviousState); // Function Solarland.SolarLeggedVehicle.OnRep_ReplicatedAnimState // (Final|Native|Protected) // @ game+0x2140d50
	void OnRep_InitialFootIkLocations(); // Function Solarland.SolarLeggedVehicle.OnRep_InitialFootIkLocations // (Final|Native|Protected) // @ game+0x2140d30
};

// Class Solarland.SolarBackpackerVehicle
// Size: 0x1420 (Inherited: 0x13d0)
struct ASolarBackpackerVehicle : ASolarLeggedVehicle {
	struct UStaticMeshComponent* VehicleHitBox; // 0x13c8(0x08)
	struct TSoftObjectPtr<UStaticMesh> BackpackMesh; // 0x13d0(0x28)
	struct UStaticMesh* OriginalBackpackMesh; // 0x13f8(0x08)
	int32_t BackpackerItemID; // 0x1400(0x04)
	struct UGameplayEffect* SheildRecoverEffect; // 0x1408(0x08)
	struct ASolarCharacter* AttachedPlayer; // 0x1410(0x08)
	bool bShieldOpened; // 0x1418(0x01)
	bool bVehicleDroped; // 0x1419(0x01)
	char pad_141E[0x2]; // 0x141e(0x02)

	void OnRep_VehicleDropped(); // Function Solarland.SolarBackpackerVehicle.OnRep_VehicleDropped // (Final|Native|Protected) // @ game+0x2081720
	void OnRep_ShieldChanged(); // Function Solarland.SolarBackpackerVehicle.OnRep_ShieldChanged // (Final|Native|Protected) // @ game+0x2081700
	void OnRep_AttachedToPlayer(); // Function Solarland.SolarBackpackerVehicle.OnRep_AttachedToPlayer // (Final|Native|Protected) // @ game+0x20816e0
};

// Class Solarland.SolarBackpackSFX
// Size: 0x280 (Inherited: 0x228)
struct ASolarBackpackSFX : AActor {
	char pad_228[0x58]; // 0x228(0x58)

	void OnPropellingModeChanged(enum class EBackpackPropellingMode PropellingMode); // Function Solarland.SolarBackpackSFX.OnPropellingModeChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct UParticleSystemComponent* GetTrailEffectComponent(); // Function Solarland.SolarBackpackSFX.GetTrailEffectComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2080ef0
	void BackpackSFXLaunch(bool GroundDetected, struct FVector& GroundLocation, struct FVector& GroundNormal); // Function Solarland.SolarBackpackSFX.BackpackSFXLaunch // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x207ffd0
	void BackpackSFXEnd(); // Function Solarland.SolarBackpackSFX.BackpackSFXEnd // (Native|Event|Public|BlueprintEvent) // @ game+0x1554600
	void BackpackSFXBegin(enum class EFXJetType InJetType, bool GroundDetected); // Function Solarland.SolarBackpackSFX.BackpackSFXBegin // (Native|Event|Public|BlueprintEvent) // @ game+0x207fef0
};

// Class Solarland.SolarBattleModel
// Size: 0x30 (Inherited: 0x28)
struct USolarBattleModel : USolarAbstractModel {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Solarland.BattleSpectatorItemData
// Size: 0x80 (Inherited: 0x28)
struct UBattleSpectatorItemData : UObject {
	struct USolarBattleSpectatorWidget* SpectatorWidget; // 0x28(0x08)
	char pad_30[0x50]; // 0x30(0x50)

	void Init(struct TMap<struct FString, struct FString> BattleData); // Function Solarland.BattleSpectatorItemData.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x2081020
	void GetBattleData(struct FString InDataName, struct FText& OutText); // Function Solarland.BattleSpectatorItemData.GetBattleData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2080940
};

// Class Solarland.SolarBattleSpectatorWidget
// Size: 0x348 (Inherited: 0x348)
struct USolarBattleSpectatorWidget : USolarUserWidget {

	void UpdatePageInfo(int32_t& CurrentPage, int32_t& TotalPage); // Function Solarland.SolarBattleSpectatorWidget.UpdatePageInfo // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetPageSize(int32_t PageSize); // Function Solarland.SolarBattleSpectatorWidget.SetPageSize // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetBattleDatas(struct TArray<struct UBattleSpectatorItemData*>& BattleDatas); // Function Solarland.SolarBattleSpectatorWidget.SetBattleDatas // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RequestStartPlayReplay(struct FString BattleID); // Function Solarland.SolarBattleSpectatorWidget.RequestStartPlayReplay // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RequestBattleData(int32_t PageIndex); // Function Solarland.SolarBattleSpectatorWidget.RequestBattleData // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshBattleList(); // Function Solarland.SolarBattleSpectatorWidget.RefreshBattleList // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnStartPlayReplayFailed(struct FString BattleID); // Function Solarland.SolarBattleSpectatorWidget.OnStartPlayReplayFailed // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void AddBattleDatas(struct TArray<struct UBattleSpectatorItemData*>& BattleDatas); // Function Solarland.SolarBattleSpectatorWidget.AddBattleDatas // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarBlueprintFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	bool WorldPosToWidgetPosForWorldMark(struct APlayerController* Controller, struct FVector& Pos, struct FVector2D& ScreenPos, float& AngleForArrow); // Function Solarland.SolarBlueprintFunctionLibrary.WorldPosToWidgetPosForWorldMark // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2082140
	bool WorldPosToWidgetPosForEmoji(struct APlayerController* Controller, struct FVector& Pos, struct FVector2D& ScreenPos); // Function Solarland.SolarBlueprintFunctionLibrary.WorldPosToWidgetPosForEmoji // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2082020
	bool WorldPosToWidgetPos(struct APlayerController* Controller, struct FVector& Pos, struct FVector2D& ScreenPos); // Function Solarland.SolarBlueprintFunctionLibrary.WorldPosToWidgetPos // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2081f00
	void UnlockCursor(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.UnlockCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2081e80
	void TryGetLocalText(int32_t LocalTextId, bool& bSuccess, struct FString& LocalText); // Function Solarland.SolarBlueprintFunctionLibrary.TryGetLocalText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2081d50
	void TryGetHUDColorForPlayerLevel(struct UObject* WorldContext, int32_t PlayerLevel, bool& bFoundConfig, struct FLinearColor& BaseColor, struct FLinearColor& DecorateColor); // Function Solarland.SolarBlueprintFunctionLibrary.TryGetHUDColorForPlayerLevel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2081b80
	void Test_SolarBlueprintFunctionLibrary(); // Function Solarland.SolarBlueprintFunctionLibrary.Test_SolarBlueprintFunctionLibrary // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x997950
	void SortObjectArrayByName(struct TArray<struct UObject*>& inArray); // Function Solarland.SolarBlueprintFunctionLibrary.SortObjectArrayByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2081ae0
	struct AActor* SolarSpawnActor(struct UObject* WorldContextObject, struct TSoftClassPtr<UObject> SoftClass, struct FTransform& SpawnTransform, struct AActor* Owner, struct APawn* Instigator, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride); // Function Solarland.SolarBlueprintFunctionLibrary.SolarSpawnActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2081840
	void ReleaseFocus(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.ReleaseFocus // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20817c0
	void RebuildCursorWidgets(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.RebuildCursorWidgets // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2081740
	void LockCursor(struct APlayerController* PlayerController, struct UWidget* TargetWidget); // Function Solarland.SolarBlueprintFunctionLibrary.LockCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2081620
	struct UPassiveSkillDataAsset* LoadPassiveSkillDataAssetForCharacter(struct UObject* WorldContext, int32_t CharacterId); // Function Solarland.SolarBlueprintFunctionLibrary.LoadPassiveSkillDataAssetForCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2081550
	float K2_GetAsyncLoadPercentage(struct FName& PackageName); // Function Solarland.SolarBlueprintFunctionLibrary.K2_GetAsyncLoadPercentage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20814c0
	bool IsUsedSteamSDKLogin(); // Function Solarland.SolarBlueprintFunctionLibrary.IsUsedSteamSDKLogin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9cf110
	bool IsRenderingMobilePlatform(); // Function Solarland.SolarBlueprintFunctionLibrary.IsRenderingMobilePlatform // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2081490
	bool IsPlatformSupportLimChat(); // Function Solarland.SolarBlueprintFunctionLibrary.IsPlatformSupportLimChat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9cf110
	bool IsPlatformSteam(); // Function Solarland.SolarBlueprintFunctionLibrary.IsPlatformSteam // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9cf110
	bool IsPlatformOffcialWin(); // Function Solarland.SolarBlueprintFunctionLibrary.IsPlatformOffcialWin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93ed10
	bool IsPlatformEpic(); // Function Solarland.SolarBlueprintFunctionLibrary.IsPlatformEpic // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x93ed10
	bool IsPlatformDesktop(); // Function Solarland.SolarBlueprintFunctionLibrary.IsPlatformDesktop // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9cf110
	bool IsMobilePlatform(); // Function Solarland.SolarBlueprintFunctionLibrary.IsMobilePlatform // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2081460
	bool IsLowMemoryDeivce(); // Function Solarland.SolarBlueprintFunctionLibrary.IsLowMemoryDeivce // (Final|Native|Static|Public) // @ game+0x2081360
	bool IsLowLevelGraphicsQuality(struct UObject* InObject); // Function Solarland.SolarBlueprintFunctionLibrary.IsLowLevelGraphicsQuality // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20812d0
	bool IsLowLevelDevice(struct UObject* InObject); // Function Solarland.SolarBlueprintFunctionLibrary.IsLowLevelDevice // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2081240
	bool IsLowerLevelDevice(struct UObject* InObject, enum class ESolarGraphicsQualityLevel InLowerThanThis); // Function Solarland.SolarBlueprintFunctionLibrary.IsLowerLevelDevice // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2081390
	bool HasPassiveSkillDataAssetConfig(struct UObject* WorldContext, int32_t CharacterId); // Function Solarland.SolarBlueprintFunctionLibrary.HasPassiveSkillDataAssetConfig // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2080f50
	float GetViewportScale(); // Function Solarland.SolarBlueprintFunctionLibrary.GetViewportScale // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2080f20
	void GetTipsPosition(struct UObject* WorldContextObject, struct UWidget* FocusWidget, float Offset, struct FVector2D& FixedPos, int32_t& Dimsion); // Function Solarland.SolarBlueprintFunctionLibrary.GetTipsPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2080d40
	struct ASolarGameState* GetSolarGameState(struct UObject* WorldContextObject); // Function Solarland.SolarBlueprintFunctionLibrary.GetSolarGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2080cb0
	struct ASolarGameMode* GetSolarGameMode(struct UObject* WorldContextObject); // Function Solarland.SolarBlueprintFunctionLibrary.GetSolarGameMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2080c20
	struct FVector2D GetScreenSize(); // Function Solarland.SolarBlueprintFunctionLibrary.GetScreenSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2080be0
	enum class ESolarDeviceLevel GetDeviceLevel(struct UObject* InObject); // Function Solarland.SolarBlueprintFunctionLibrary.GetDeviceLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2080b50
	enum class ESolarGraphicsQualityLevel GetCurQualityLevel(struct UObject* InObject); // Function Solarland.SolarBlueprintFunctionLibrary.GetCurQualityLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2080ac0
	struct TArray<struct FString> GetAssetDependencies(struct FName& Path); // Function Solarland.SolarBlueprintFunctionLibrary.GetAssetDependencies // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2080820
	void GetActorsWithTagInSubLevelByName(struct UObject* WorldContextObject, struct FName& LevelName, struct FName& Tag, struct TArray<struct AActor*>& OutActors); // Function Solarland.SolarBlueprintFunctionLibrary.GetActorsWithTagInSubLevelByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20806a0
	void ExitGame(bool bForce); // Function Solarland.SolarBlueprintFunctionLibrary.ExitGame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2080620
	struct FString EnumToString(struct FString Enum, int32_t EnumValue); // Function Solarland.SolarBlueprintFunctionLibrary.EnumToString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2080500
	void EnableInputAndHideCursor(struct ASolarPlayerController* Controller); // Function Solarland.SolarBlueprintFunctionLibrary.EnableInputAndHideCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2080480
	void EnableAnalogCursor(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.EnableAnalogCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2080400
	void DisableInputAndShowCursor(struct ASolarPlayerController* Controller); // Function Solarland.SolarBlueprintFunctionLibrary.DisableInputAndShowCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2080380
	void DisableAnalogCursor(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.DisableAnalogCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2080300
	void ChangeSessionMode(bool& IfChangeToPCSession); // Function Solarland.SolarBlueprintFunctionLibrary.ChangeSessionMode // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2080100
	void AbsoluteToViewport(struct UObject* WorldContextObject, struct FVector2D& AbsolutePosition, struct FVector2D& ViewPortPos); // Function Solarland.SolarBlueprintFunctionLibrary.AbsoluteToViewport // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x207fdd0
};

// Class Solarland.SolarBombActor
// Size: 0x280 (Inherited: 0x228)
struct ASolarBombActor : AActor {
	bool bFireWater; // 0x228(0x01)
	char pad_229[0x3]; // 0x229(0x03)
	struct FBombingZoneBomb BombConfig; // 0x22c(0x1c)
	bool bAutoDestroyAfterFire; // 0x248(0x01)
	char pad_249[0xb]; // 0x249(0x0b)
	float TargetLandingTime; // 0x254(0x04)
	struct UParticleSystem* WaterBombEffect; // 0x258(0x08)
	struct UParticleSystem* BombEffect; // 0x260(0x08)
	struct UMaterialInstanceDynamic* GuideLine; // 0x268(0x08)
	struct UAkComponent* AkAudioComponent; // 0x270(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x278(0x08)

	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarBombActor.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x2081170
};

// Class Solarland.SolarBombingZoneManager
// Size: 0x260 (Inherited: 0x228)
struct ASolarBombingZoneManager : AActor {
	struct ASolarBombActor* BPClass; // 0x228(0x08)
	struct TArray<struct FBombingZone> ZoneArray; // 0x230(0x10)
	char pad_240[0x4]; // 0x240(0x04)
	int32_t WeightInCar; // 0x244(0x04)
	int32_t WeightInPoision; // 0x248(0x04)
	int32_t WeightInRoom; // 0x24c(0x04)
	struct FVector2D LocationLimit; // 0x250(0x08)
	float NotifyTime; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)

	void OnCreateBombingZone(int32_t ID, bool bSpecificLocation, struct FVector TargetLocation); // Function Solarland.SolarBombingZoneManager.OnCreateBombingZone // (Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	struct FBombingZoneBomb GetBombData(int32_t ZoneId); // Function Solarland.SolarBombingZoneManager.GetBombData // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	bool CreateBombingZone(struct FBombingZone& Zone, bool bSpecificLocation, struct FVector TargetLocation); // Function Solarland.SolarBombingZoneManager.CreateBombingZone // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2080180
};

// Class Solarland.SolarBotAIConfig
// Size: 0x78 (Inherited: 0x30)
struct USolarBotAIConfig : UDataAsset {
	struct FGameplayTagContainer IdentifierTags; // 0x30(0x20)
	struct USolarBotConfigSection_Battle* BattleSection; // 0x50(0x08)
	struct USolarBotConfigSection_Loot* LootSection; // 0x58(0x08)
	struct USolarBotConfigSection_Perception* PerceptionSection; // 0x60(0x08)
	struct TArray<struct USolarBotConfigSection*> CustomSections; // 0x68(0x10)
};

// Class Solarland.SolarBotAIController
// Size: 0x7f0 (Inherited: 0x370)
struct ASolarBotAIController : ASolarAIControllerBase {
	char pad_370[0x10]; // 0x370(0x10)
	struct USolarBotLootComponent* BotLootComponent; // 0x380(0x08)
	struct USolarPerceptionComponent* BotPerceptionComponent; // 0x388(0x08)
	struct USolarBotAIConfig* BotConfigPreset; // 0x390(0x08)
	struct FSolarBotBattleConfig DefaultBattleConfig; // 0x398(0x158)
	struct FNavAgentProperties VehicleAgentProperties; // 0x4f0(0x30)
	int32_t UniqueSpawnerID; // 0x520(0x04)
	struct FGameplayTag BattleSubTreeTag; // 0x524(0x08)
	int32_t DefaultDifficultyLevel; // 0x52c(0x04)
	int32_t CurrentDifficultyLevel; // 0x530(0x04)
	float CharacterLookAtInterpSpeed; // 0x534(0x04)
	float MinSpecVehicleDeltaPitch; // 0x538(0x04)
	bool bInitDefaultWeapon; // 0x53c(0x01)
	char pad_53D[0x3]; // 0x53d(0x03)
	int32_t BotDefaultWeaponId; // 0x540(0x04)
	bool bAimBoneWhenFire; // 0x544(0x01)
	char pad_545[0x3]; // 0x545(0x03)
	struct FName FireTargetBoneName; // 0x548(0x08)
	bool bSpawnDeathBox; // 0x550(0x01)
	char pad_551[0x3]; // 0x551(0x03)
	struct FBotBonusDropConfig BonusDropConfig; // 0x554(0x18)
	float MinimumDistanceForRepeatedBoarding; // 0x56c(0x04)
	enum class EBotAIType BotAIType; // 0x570(0x01)
	char pad_571[0x3]; // 0x571(0x03)
	int32_t BotFeature; // 0x574(0x04)
	struct FVector2D MovementVector; // 0x578(0x08)
	struct UNavigationQueryFilter* BPDefaultNavigationFilterClass; // 0x580(0x08)
	char pad_588[0x30]; // 0x588(0x30)
	struct TMap<struct FGameplayTag, struct UBehaviorTree*> SubTreeMap; // 0x5b8(0x50)
	char pad_608[0x38]; // 0x608(0x38)
	struct TWeakObjectPtr<struct AActor> AITarget; // 0x640(0x08)
	struct USolarBotShootSimulater* ShootSimulater; // 0x648(0x08)
	char pad_650[0x68]; // 0x650(0x68)
	struct FMulticastInlineDelegate OnBotAIDeath; // 0x6b8(0x10)
	char pad_6C8[0xc]; // 0x6c8(0x0c)
	struct TWeakObjectPtr<struct ASolarCharacter> PossessedCharacer; // 0x6d4(0x08)
	char pad_6DC[0x4]; // 0x6dc(0x04)
	struct USolarFollowingComponent* PathFollowingComp; // 0x6e0(0x08)
	char pad_6E8[0x8]; // 0x6e8(0x08)
	struct UNgaiAIControllerComponent* NgaiComponent; // 0x6f0(0x08)
	char pad_6F8[0x10]; // 0x6f8(0x10)
	float ValidEmojiUseDistance; // 0x708(0x04)
	char pad_70C[0xcc]; // 0x70c(0xcc)
	float WorldMarkMessageDelayTime; // 0x7d8(0x04)
	char pad_7DC[0x14]; // 0x7dc(0x14)

	void UpdateDynamicSubtree(); // Function Solarland.SolarBotAIController.UpdateDynamicSubtree // (Final|Native|Public|BlueprintCallable) // @ game+0x20875d0
	void UpdateCharacterRotate(float DeltaTime); // Function Solarland.SolarBotAIController.UpdateCharacterRotate // (Final|Native|Protected) // @ game+0x2087550
	void StopBehaviorTree(); // Function Solarland.SolarBotAIController.StopBehaviorTree // (Final|Native|Public|BlueprintCallable) // @ game+0x2087370
	void SetViewTargetWithBlend(struct AActor* NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function Solarland.SolarBotAIController.SetViewTargetWithBlend // (Native|Public|BlueprintCallable) // @ game+0x20870a0
	bool SetupBotAITargetSelectConfig(); // Function Solarland.SolarBotAIController.SetupBotAITargetSelectConfig // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool SetupBotAIDifficulty(int32_t DifficultyLevel, bool bAsDefault); // Function Solarland.SolarBotAIController.SetupBotAIDifficulty // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool SetupBotAICanUseCharacterData(int32_t CharacterId, int32_t SkinId); // Function Solarland.SolarBotAIController.SetupBotAICanUseCharacterData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetDynamicSubtree(struct FGameplayTag InjectTag, struct UBehaviorTree* BehaviorAsset); // Function Solarland.SolarBotAIController.SetDynamicSubtree // (Final|Native|Public|BlueprintCallable) // @ game+0x2085d70
	bool SetBotConfigPresetByID(int32_t BotConfigPresetID); // Function Solarland.SolarBotAIController.SetBotConfigPresetByID // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetBotConfigPreset(struct USolarBotAIConfig* InConfig); // Function Solarland.SolarBotAIController.SetBotConfigPreset // (Final|Native|Public|BlueprintCallable) // @ game+0x2085c10
	void OnReset(); // Function Solarland.SolarBotAIController.OnReset // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarBotAIController.OnPlayerGetOffVehicle // (Final|Native|Public) // @ game+0x2085a70
	void OnEnterLanding(); // Function Solarland.SolarBotAIController.OnEnterLanding // (Native|Public) // @ game+0x2085a40
	bool IsTeamLeader(); // Function Solarland.SolarBotAIController.IsTeamLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20858d0
	bool IsInPlayerTeam(); // Function Solarland.SolarBotAIController.IsInPlayerTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20857d0
	bool IsIndependent(); // Function Solarland.SolarBotAIController.IsIndependent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2085800
	bool IsAccompanyingPlayer(); // Function Solarland.SolarBotAIController.IsAccompanyingPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20857a0
	struct ASolarCharacter* GetSolarCharacter(); // Function Solarland.SolarBotAIController.GetSolarCharacter // (Native|Public|Const) // @ game+0x2085660
	struct TArray<enum class ESolarTablesEnum_CharacterType> GetPreferPickHeroTypes(); // Function Solarland.SolarBotAIController.GetPreferPickHeroTypes // (Final|Native|Public|BlueprintCallable) // @ game+0x20853b0
	char GetMyTeamID(); // Function Solarland.SolarBotAIController.GetMyTeamID // (Native|Public|Const) // @ game+0x2085370
	bool CanActivateVehicleAbility(int32_t SeatIndex, int32_t AbilityIndex); // Function Solarland.SolarBotAIController.CanActivateVehicleAbility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2084cf0
	float CalculateScoreForAITarget(struct AActor* AITargetActor); // Function Solarland.SolarBotAIController.CalculateScoreForAITarget // (Final|Native|Protected) // @ game+0x2084b10
};

// Class Solarland.SolarBotAIControllerInGuide
// Size: 0x810 (Inherited: 0x7f0)
struct ASolarBotAIControllerInGuide : ASolarBotAIController {
	struct TArray<struct FDeathBoxItemData> DeathBoxItems; // 0x7f0(0x10)
	char pad_800[0x10]; // 0x800(0x10)
};

// Class Solarland.SolarBotAIControllerOnVehicle
// Size: 0x830 (Inherited: 0x7f0)
struct ASolarBotAIControllerOnVehicle : ASolarBotAIController {
	char pad_7F0[0x40]; // 0x7f0(0x40)

	void SetMoveStop(bool NeedStop); // Function Solarland.SolarBotAIControllerOnVehicle.SetMoveStop // (Final|Native|Public|BlueprintCallable) // @ game+0x2085ed0
	void SetFireStop(bool NeedStop); // Function Solarland.SolarBotAIControllerOnVehicle.SetFireStop // (Final|Native|Public|BlueprintCallable) // @ game+0x2085e40
	void OnVehicleDriverGetOff(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarBotAIControllerOnVehicle.OnVehicleDriverGetOff // (Final|Native|Public) // @ game+0x2085b40
};

// Class Solarland.SolarBotAITeamManager
// Size: 0x248 (Inherited: 0x28)
struct USolarBotAITeamManager : UObject {
	float UpdateInterval; // 0x28(0x04)
	float DefaultSeparateDistance; // 0x2c(0x04)
	float DefaultReturnDistance; // 0x30(0x04)
	char pad_34[0x5c]; // 0x34(0x5c)
	struct ASolarBotTeamVisualizer* DebugVisualizerClass; // 0x90(0x08)
	struct ASolarBotTeamVisualizer* DebugVisualizer; // 0x98(0x08)
	struct UDataTable* GlobalGameTeamConfigs; // 0xa0(0x08)
	struct TMap<struct ASolarCharacter*, struct ASolarBotAIController*> AllocatedCharacters; // 0xa8(0x50)
	struct TArray<struct ASolarCharacter*> AbandonedCharacters; // 0xf8(0x10)
	struct TMap<enum class EBotInteractCondition, struct FBotEmojiSetting> EmojiTaskSettings; // 0x108(0x50)
	struct TMap<int32_t, enum class EBotInteractCondition> ResponseToVoiceType; // 0x158(0x50)
	struct TMap<enum class EWorldMarkType, enum class EBotInteractCondition> ResponseToMarkType; // 0x1a8(0x50)
	struct TMap<enum class EBotInteractCondition, struct FBotResponseSetting> ResponseTaskSettings; // 0x1f8(0x50)

	void UpdateAllocatedList(struct ASolarBotAIController* InController, struct TArray<struct ASolarCharacter*>& AliveCharacterArray); // Function Solarland.SolarBotAITeamManager.UpdateAllocatedList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2087460
	bool TryCancelCurrentRescueTarget(struct ASolarBotAIController* InController, struct ASolarCharacter* CancelledCharacter); // Function Solarland.SolarBotAITeamManager.TryCancelCurrentRescueTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2087390
	bool ShouldTeamActivate(struct FSolarBotTeamInfo& BotInfo); // Function Solarland.SolarBotAITeamManager.ShouldTeamActivate // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x2087240
	void SetTeamBlackboardValueAsVector(int32_t TeamID, struct FName& KeyName, struct FVector VectorValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2086ef0
	void SetTeamBlackboardValueAsString(int32_t TeamID, struct FName& KeyName, struct FString StringValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsString // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2086cf0
	void SetTeamBlackboardValueAsRotator(int32_t TeamID, struct FName& KeyName, struct FRotator VectorValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsRotator // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2086b40
	void SetTeamBlackboardValueAsObject(int32_t TeamID, struct FName& KeyName, struct UObject* ObjectValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsObject // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2086990
	void SetTeamBlackboardValueAsName(int32_t TeamID, struct FName& KeyName, struct FName NameValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20867e0
	void SetTeamBlackboardValueAsInt(int32_t TeamID, struct FName& KeyName, int32_t IntValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsInt // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2086630
	void SetTeamBlackboardValueAsFloat(int32_t TeamID, struct FName& KeyName, float FloatValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsFloat // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2086480
	void SetTeamBlackboardValueAsEnum(int32_t TeamID, struct FName& KeyName, char EnumValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsEnum // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20862d0
	void SetTeamBlackboardValueAsClass(int32_t TeamID, struct FName& KeyName, struct UObject* ClassValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2086120
	void SetTeamBlackboardValueAsBool(int32_t TeamID, struct FName& KeyName, bool BoolValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsBool // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2085f60
	void SetBotDropOut(struct ASolarBotAIController* InController, bool bDropOut); // Function Solarland.SolarBotAITeamManager.SetBotDropOut // (Final|Native|Public|BlueprintCallable) // @ game+0x2085ca0
	void OnTeamDeactive(struct FSolarBotTeamInfo& TeamInfo); // Function Solarland.SolarBotAITeamManager.OnTeamDeactive // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnTeamActivate(struct FSolarBotTeamInfo& TeamInfo); // Function Solarland.SolarBotAITeamManager.OnTeamActivate // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnBotUnRegister(struct FSolarBotMemberInfo& BotInfo); // Function Solarland.SolarBotAITeamManager.OnBotUnRegister // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnBotStateChanged(struct FSolarBotMemberInfo& BotInfo, enum class ESolarBotMemberState OldState); // Function Solarland.SolarBotAITeamManager.OnBotStateChanged // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnBotRegister(struct FSolarBotMemberInfo& BotInfo); // Function Solarland.SolarBotAITeamManager.OnBotRegister // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	bool IsValidTeamID(int32_t InTeamId); // Function Solarland.SolarBotAITeamManager.IsValidTeamID // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x20859a0
	bool IsTeamLeader(struct ASolarBotAIController* InController); // Function Solarland.SolarBotAITeamManager.IsTeamLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2085900
	bool IsIndependent(struct ASolarBotAIController* InController); // Function Solarland.SolarBotAITeamManager.IsIndependent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2085830
	bool GetTeamPlayerInfo(struct ASolarBotAIController* InController, struct TArray<struct ASolarCharacter*>& PlayerArray); // Function Solarland.SolarBotAITeamManager.GetTeamPlayerInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x20856a0
	bool GetRescueInfo(struct ASolarBotAIController* InController, struct TArray<struct ASolarCharacter*>& DyingPlayerArray, struct TArray<struct ASolarCharacter*>& DeadPlayerArray, struct TArray<struct ASolarCharacter*>& DyingBotArray, struct TArray<struct ASolarCharacter*>& DeadBotArray); // Function Solarland.SolarBotAITeamManager.GetRescueInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2085430
	bool GetBotTeamInfo(struct ASolarBotAIController* InController, struct FSolarBotTeamInfo& OutTeamInfo); // Function Solarland.SolarBotAITeamManager.GetBotTeamInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2085200
	bool GetBotMemberInfo(struct ASolarBotAIController* InController, struct FSolarBotMemberInfo& OutMemberInfo); // Function Solarland.SolarBotAITeamManager.GetBotMemberInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2084f20
	struct USolarBotAITeamManager* Get(struct UObject* Context); // Function Solarland.SolarBotAITeamManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2084e90
	bool CheckBotTeamState(struct ASolarBotAIController* InController, enum class ESolarBotMemberState MemberState); // Function Solarland.SolarBotAITeamManager.CheckBotTeamState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2084dc0
	struct FVector CalculateTeamPosition(struct FSolarBotTeamInfo& TeamInfo); // Function Solarland.SolarBotAITeamManager.CalculateTeamPosition // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent|Const) // @ game+0x2084bb0
	bool AllocatedRescueTarget(struct ASolarBotAIController* InController, struct ASolarCharacter* RescuedCharacter); // Function Solarland.SolarBotAITeamManager.AllocatedRescueTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2084a40
	void AbandonedCurrentRescueTarget(struct ASolarBotAIController* InController, struct ASolarCharacter* AbandonedCharacter); // Function Solarland.SolarBotAITeamManager.AbandonedCurrentRescueTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2084970
};

// Class Solarland.SolarBotAIWarmServiceSystem
// Size: 0x150 (Inherited: 0x28)
struct USolarBotAIWarmServiceSystem : UObject {
	struct TMap<struct ASolarPlayerState*, struct FWarmTargetState> WarmTargets; // 0x28(0x50)
	struct TArray<struct FTimeItemsSetting> ItemsByTime; // 0x78(0x10)
	char pad_88[0x4]; // 0x88(0x04)
	float TriggerWarmServiceValue; // 0x8c(0x04)
	float MaxGroupDistance; // 0x90(0x04)
	char MaxServiceBot; // 0x94(0x01)
	char pad_95[0x3]; // 0x95(0x03)
	int32_t TraceRecordLength; // 0x98(0x04)
	char pad_9C[0xc]; // 0x9c(0x0c)
	float TraceRecordInterval; // 0xa8(0x04)
	char pad_AC[0xc]; // 0xac(0x0c)
	float UpdateInterval; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct UEnvQuery* TeleportLocEQS; // 0xc0(0x08)
	enum class EEnvQueryRunMode TeleportLocEQSRunMode; // 0xc8(0x01)
	char pad_C9[0x3]; // 0xc9(0x03)
	int32_t PopAllTriggerPlayerNum; // 0xcc(0x04)
	int32_t PopAllTriggerTime; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)
	struct UEnvQuery* PopAllBotEQS; // 0xd8(0x08)
	enum class EEnvQueryRunMode PopAllBotEQSRunMode; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	float RewardScore; // 0xe4(0x04)
	char MaxNumFishingBot; // 0xe8(0x01)
	char NumPlayerKillThreshold; // 0xe9(0x01)
	char NumRealPlayerKillThreshold; // 0xea(0x01)
	char pad_EB[0x5]; // 0xeb(0x05)
	struct UEnvQuery* FishingTeleportEQS; // 0xf0(0x08)
	enum class EEnvQueryRunMode FishingTeleportEQSRunMode; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)
	struct UGameplayEffect* FishingInvisibleEffectClass; // 0x100(0x08)
	int32_t FishingBotCharacterID; // 0x108(0x04)
	int32_t FishingBotSkinID; // 0x10c(0x04)
	struct TArray<int32_t> FilterDamageWeaponIDs; // 0x110(0x10)
	struct TArray<int32_t> FilterDamageVehicleIDs; // 0x120(0x10)
	struct TArray<struct ASolarPlayerState*> SuspiciousPlayers; // 0x130(0x10)
	struct TArray<struct ASolarPlayerState*> FishingBots; // 0x140(0x10)

	void UpdateWarmTargetStateByEvent(struct ASolarPlayerState* InPS, enum class EUpdateWarmServiceEventType InEventType); // Function Solarland.SolarBotAIWarmServiceSystem.UpdateWarmTargetStateByEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x208be70
	void StartPlayerWarmService(struct ASolarPlayerState* InPS); // Function Solarland.SolarBotAIWarmServiceSystem.StartPlayerWarmService // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x208bdf0
	void RecordWarmTargetKDAState(struct ASolarPlayerState* InPS, struct ASolarPlayerState* KilledPC); // Function Solarland.SolarBotAIWarmServiceSystem.RecordWarmTargetKDAState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x208bd30
	void OnRequestWarmServiceSuccess(struct TArray<struct ASolarPlayerState*>& PlayerArray); // Function Solarland.SolarBotAIWarmServiceSystem.OnRequestWarmServiceSuccess // (Final|Native|Protected|HasOutParms) // @ game+0x208bc80
	void OnRequestWarmServiceFail(struct TArray<struct ASolarPlayerState*>& PlayerArray); // Function Solarland.SolarBotAIWarmServiceSystem.OnRequestWarmServiceFail // (Final|Native|Protected|HasOutParms) // @ game+0x208bbd0
	void OnPopBotForFishing(struct USolarPreservedBotPopTask* InTask, struct ASolarPlayerState* BotPS, struct FVector& TeleportLoc); // Function Solarland.SolarBotAIWarmServiceSystem.OnPopBotForFishing // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x208bab0
	float GetWarmScoreByEvent(struct ASolarPlayerState* InPS, enum class EUpdateWarmServiceEventType InEventType); // Function Solarland.SolarBotAIWarmServiceSystem.GetWarmScoreByEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x208b9e0
	float GetTimeOutBattle(struct ASolarPlayerState* InPS); // Function Solarland.SolarBotAIWarmServiceSystem.GetTimeOutBattle // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x208b940
	float GetTimeBeforeOutPoisonCirecle(struct ASolarPlayerState* InPS); // Function Solarland.SolarBotAIWarmServiceSystem.GetTimeBeforeOutPoisonCirecle // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x208b8a0
	float GetTargetTickValue(struct ASolarPlayerState* InPS, struct FWarmTargetState& InState); // Function Solarland.SolarBotAIWarmServiceSystem.GetTargetTickValue // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x208b790
	float GetLastBattleMVPScore(struct ASolarPlayerState* InPS); // Function Solarland.SolarBotAIWarmServiceSystem.GetLastBattleMVPScore // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x208b6f0
	char GetKilledPlayerNum(struct ASolarPlayerState* InPS); // Function Solarland.SolarBotAIWarmServiceSystem.GetKilledPlayerNum // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x208b650
	char GetKilledBotNum(struct ASolarPlayerState* InPS); // Function Solarland.SolarBotAIWarmServiceSystem.GetKilledBotNum // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x208b5b0
	float GetFrustrationValue(struct ASolarPlayerState* InPS); // Function Solarland.SolarBotAIWarmServiceSystem.GetFrustrationValue // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x208b510
	char GetEnemyNumInRange(struct ASolarPlayerState* InPS, float RangeRadius); // Function Solarland.SolarBotAIWarmServiceSystem.GetEnemyNumInRange // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x208b440
	int32_t GetActivePlayerNumBP(int32_t PlayerNum, int32_t PlayerTeamNum); // Function Solarland.SolarBotAIWarmServiceSystem.GetActivePlayerNumBP // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x208b370
	struct USolarBotAIWarmServiceSystem* Get(struct UObject* Context); // Function Solarland.SolarBotAIWarmServiceSystem.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x208b2e0
};

// Class Solarland.SolarBotConfigSection
// Size: 0x30 (Inherited: 0x28)
struct USolarBotConfigSection : UObject {
	struct FGameplayTag SectionTag; // 0x28(0x08)
};

// Class Solarland.SolarBotConfigSection_Battle
// Size: 0x1c0 (Inherited: 0x30)
struct USolarBotConfigSection_Battle : USolarBotConfigSection {
	struct FSolarBotBattleConfig BattleConfig; // 0x30(0x158)
	struct FSolarBotUseSniperPosConfig SniperPosConfig; // 0x188(0x1c)
	char pad_1A4[0x4]; // 0x1a4(0x04)
	struct TArray<enum class ESolarTablesEnum_CharacterType> PreferPickHeroTypes; // 0x1a8(0x10)
	struct UBehaviorTree* BattleSubTree; // 0x1b8(0x08)
};

// Class Solarland.SolarBotConfigSection_Loot
// Size: 0xe0 (Inherited: 0x30)
struct USolarBotConfigSection_Loot : USolarBotConfigSection {
	struct FSolarBotLootValuationConfig ValuationConfig; // 0x30(0x44)
	struct FSolarBotLootSearchConfig SearchConfig; // 0x74(0x44)
	struct FSolarBotLootWeaponFeedConfig WeaponFeedConfig; // 0xb8(0x20)
	struct UBehaviorTree* LootSubTree; // 0xd8(0x08)
};

// Class Solarland.SolarBotConfigSection_Perception
// Size: 0xf0 (Inherited: 0x30)
struct USolarBotConfigSection_Perception : USolarBotConfigSection {
	struct FSolarBotThreatConfig ThreatConfig; // 0x30(0x6c)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct TMap<enum class EWeaponType, struct FSolarBotThreatConfig> WPSpecificThreatConfig; // 0xa0(0x50)
};

// Class Solarland.SolarBotConfigSection_SafeArea
// Size: 0x38 (Inherited: 0x30)
struct USolarBotConfigSection_SafeArea : USolarBotConfigSection {
	struct FSolarBotSafeAreaConfig SafeAreaConfig; // 0x30(0x08)
};

// Class Solarland.SolarBotConfigSection_SkyDiving
// Size: 0x68 (Inherited: 0x30)
struct USolarBotConfigSection_SkyDiving : USolarBotConfigSection {
	struct FSolarBotSkyDivingConfig SkyDivingConfig; // 0x30(0x24)
	char pad_54[0x4]; // 0x54(0x04)
	struct TArray<struct FName> PreferLootZoneTags; // 0x58(0x10)
};

// Class Solarland.SolarBotLootComponent
// Size: 0x168 (Inherited: 0xb0)
struct USolarBotLootComponent : UActorComponent {
	struct FGameplayTag LootSubTreeTag; // 0xb0(0x08)
	struct FSolarBotLootValuationConfig DefaultValuationConfig; // 0xb8(0x44)
	char pad_FC[0x6c]; // 0xfc(0x6c)
};

// Class Solarland.SolarBotOnVehicleActionTrigger
// Size: 0x260 (Inherited: 0x230)
struct ASolarBotOnVehicleActionTrigger : ATriggerBox {
	int32_t VehicleStopAreaId; // 0x230(0x04)
	enum class EBotOnVehicleStopType StopType; // 0x234(0x01)
	char pad_235[0x3]; // 0x235(0x03)
	float MoveStopDelayTime; // 0x238(0x04)
	enum class EBotOnVehicleFireType FireType; // 0x23c(0x01)
	char pad_23D[0x3]; // 0x23d(0x03)
	float FireOffDelayTime; // 0x240(0x04)
	int32_t ActivateVehicleAbilitySeatIndex; // 0x244(0x04)
	char pad_248[0x18]; // 0x248(0x18)

	void OnUpdatedComponentOverlapEnd(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarBotOnVehicleActionTrigger.OnUpdatedComponentOverlapEnd // (Final|Native|Public) // @ game+0x208f350
	void OnUpdatedComponentOverlapBegin(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarBotOnVehicleActionTrigger.OnUpdatedComponentOverlapBegin // (Final|Native|Public|HasOutParms) // @ game+0x208f130
};

// Class Solarland.SolarBotOnVehicleOnLineCtrl
// Size: 0x830 (Inherited: 0x830)
struct ASolarBotOnVehicleOnLineCtrl : ASolarBotAIControllerOnVehicle {
};

// Class Solarland.SolarBotShootSimulater
// Size: 0xa8 (Inherited: 0x28)
struct USolarBotShootSimulater : UObject {
	struct ASolarBotAIController* OwnerController; // 0x28(0x08)
	struct AActor* LockedTargetActor; // 0x30(0x08)
	char pad_38[0x70]; // 0x38(0x70)
};

// Class Solarland.SolarBotSniperPosition
// Size: 0x248 (Inherited: 0x228)
struct ASolarBotSniperPosition : AActor {
	float ReachRadius; // 0x228(0x04)
	float ReachOffsetZ; // 0x22c(0x04)
	float AbandonRadius; // 0x230(0x04)
	float UsingCoolDown; // 0x234(0x04)
	char pad_238[0x10]; // 0x238(0x10)
};

// Class Solarland.SolarBotTeamConfig
// Size: 0x88 (Inherited: 0x30)
struct USolarBotTeamConfig : UDataAsset {
	bool bUseSpecificMemberPreset; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct USolarBotAIConfig*> SpecificMemberPresets; // 0x38(0x10)
	struct TArray<struct FSolarBotTeamBuildRule> BuildRules; // 0x48(0x10)
	struct FGameplayTagContainer ForbiddenTags; // 0x58(0x20)
	struct TArray<struct FSolarBotTeamHeroPickFormation> HeroPickFormations; // 0x78(0x10)
};

// Class Solarland.SolarBotTeamVisualizer
// Size: 0x250 (Inherited: 0x228)
struct ASolarBotTeamVisualizer : AInfo {
	struct TArray<struct FColor> DrawDebugColors; // 0x228(0x10)
	struct UFont* TextFont; // 0x238(0x08)
	struct TArray<struct FBotTeamDebugInfo> BotTeamDebugInfos; // 0x240(0x10)
};

// Class Solarland.SolarBotTimelineSystem
// Size: 0x180 (Inherited: 0x28)
struct USolarBotTimelineSystem : UObject {
	struct UDataTable* GlobalTimelineSettings; // 0x28(0x08)
	float UpdateInterval; // 0x30(0x04)
	bool bUsePlayerLandTime; // 0x34(0x01)
	bool bEnableFinalDownsize; // 0x35(0x01)
	char pad_36[0x2]; // 0x36(0x02)
	float FinalDownsizeDuration; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct UDataTable* CurrentActionTimelineTable; // 0x40(0x08)
	struct UDataTable* CurrentUpdateItemTimelineTable; // 0x48(0x08)
	struct UDataTable* CurrentDownsizeTimelineTable; // 0x50(0x08)
	char pad_58[0x110]; // 0x58(0x110)
	struct TArray<struct ASolarPlayerState*> DirtyBots; // 0x168(0x10)
	char pad_178[0x8]; // 0x178(0x08)

	void InitTimeline(); // Function Solarland.SolarBotTimelineSystem.InitTimeline // (Final|Native|Public|BlueprintCallable) // @ game+0x208f110
	struct USolarBotTimelineSystem* Get(struct UObject* Context); // Function Solarland.SolarBotTimelineSystem.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x208f080
};

// Class Solarland.SolarBT_RandomSelecter
// Size: 0x90 (Inherited: 0x90)
struct USolarBT_RandomSelecter : UBTCompositeNode {
};

// Class Solarland.SolarBTD_CheckSelectKeyType
// Size: 0x98 (Inherited: 0x90)
struct USolarBTD_CheckSelectKeyType : UBTDecorator_BlackboardBase {
	enum class ESolarCharacterType CheckType; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class Solarland.SolarBTS_BotActionState
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTS_BotActionState : UBTService_BlackboardBase {
	enum class EBotActionState ActionState; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.SolarBTS_BotChangeQueryFilter
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTS_BotChangeQueryFilter : UBTService_BlackboardBase {
	struct UNavigationQueryFilter* TargetFilter; // 0x98(0x08)
};

// Class Solarland.SolarBTS_BotFocusTo
// Size: 0xc8 (Inherited: 0x98)
struct USolarBTS_BotFocusTo : UBTService_BlackboardBase {
	float LookAtSpeed; // 0x98(0x04)
	bool bUseFocusDirection; // 0x9c(0x01)
	bool bLocalDirection; // 0x9d(0x01)
	char pad_9E[0x2]; // 0x9e(0x02)
	struct FVector FocusDirection; // 0xa0(0x0c)
	struct FRotator DeltaRotation; // 0xac(0x0c)
	bool bRandomFocusDirection; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	float RandomPitchDeviation; // 0xbc(0x04)
	float RandomYawDeviation; // 0xc0(0x04)
	bool bRestorePreviousFocusOnCeaseRelevant; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
};

// Class Solarland.SolarBTS_TagStateUpdate
// Size: 0xb0 (Inherited: 0x70)
struct USolarBTS_TagStateUpdate : UBTService {
	struct FBlackboardKeySelector StateTagNameKey; // 0x70(0x28)
	struct TArray<struct FSolarAITagStateTransition> Transitions; // 0x98(0x10)
	struct FGameplayTag EnterStateTag; // 0xa8(0x08)
};

// Class Solarland.SolarBTS_BotInBattle
// Size: 0x178 (Inherited: 0xb0)
struct USolarBTS_BotInBattle : USolarBTS_TagStateUpdate {
	struct FBlackboardKeySelector EnemyActorKey; // 0xb0(0x28)
	struct FBlackboardKeySelector CanSeeEnemyKey; // 0xd8(0x28)
	struct FBlackboardKeySelector TacticalLocation; // 0x100(0x28)
	struct TMap<enum class EWeaponType, struct FVector2D> WeaponSuitableRangeConfig; // 0x128(0x50)
};

// Class Solarland.SolarBTS_BotInputMove
// Size: 0x80 (Inherited: 0x70)
struct USolarBTS_BotInputMove : UBTService {
	struct FVector2D InputDir; // 0x70(0x08)
	float DeviationAngle; // 0x78(0x04)
	bool bRandomInput; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
};

// Class Solarland.SolarBTS_BotInteractionTrigger
// Size: 0xd8 (Inherited: 0x70)
struct USolarBTS_BotInteractionTrigger : UBTService {
	enum class EBotInteractCondition ConditionToTrigger; // 0x70(0x01)
	bool bLoop; // 0x71(0x01)
	char pad_72[0x2]; // 0x72(0x02)
	float LoopInterval; // 0x74(0x04)
	float LoopRandomDeviation; // 0x78(0x04)
	char pad_7C[0xc]; // 0x7c(0x0c)
	struct TSet<enum class EBotInteractCondition> AllowedConditions; // 0x88(0x50)
};

// Class Solarland.SolarBTS_BotPrepareMode
// Size: 0x78 (Inherited: 0x70)
struct USolarBTS_BotPrepareMode : UBTService {
	float RatioWantWeapon; // 0x70(0x04)
	float RatioWantInteract; // 0x74(0x04)
};

// Class Solarland.SolarBTS_BotSearchSupplies
// Size: 0xe8 (Inherited: 0x70)
struct USolarBTS_BotSearchSupplies : UBTService {
	bool bOverrideBotConfig; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	struct FSolarBotLootSearchConfig OverrideSearchConfig; // 0x74(0x44)
	bool bOverrideWeaponFeedConfig; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct FSolarBotLootWeaponFeedConfig OverrideWeaponFeedConfig; // 0xc0(0x20)
	float MaxDistanceToShieldUpgradeItemShop; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
};

// Class Solarland.SolarBTS_BotUpdateBunker
// Size: 0xb0 (Inherited: 0x70)
struct USolarBTS_BotUpdateBunker : UBTService {
	struct FBlackboardKeySelector BlackboardKeyEnemy; // 0x70(0x28)
	float FullBunkerHeight; // 0x98(0x04)
	float HalfBunkerHeight; // 0x9c(0x04)
	float MaxDistanceToBunker; // 0xa0(0x04)
	float MaxDistanceToTarget; // 0xa4(0x04)
	float MinDistanceToTarget; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Solarland.SolarBTS_BotUpdateOnVehicle
// Size: 0xa8 (Inherited: 0x98)
struct USolarBTS_BotUpdateOnVehicle : UBTService_BlackboardBase {
	bool bUsePathfindingDistance; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	float MinDistanceTakePassenger; // 0x9c(0x04)
	float MaxWaitTimeSeconds; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Solarland.SolarBTS_BotUpdateSafeArea
// Size: 0xa8 (Inherited: 0x70)
struct USolarBTS_BotUpdateSafeArea : UBTService {
	bool bOverrideBotConfig; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	struct FSolarBotSafeAreaConfig DefaultConfig; // 0x74(0x08)
	struct FVector SafeAreaSnapExtent; // 0x7c(0x0c)
	bool bAllowUseSpaceDistance; // 0x88(0x01)
	char pad_89[0x1f]; // 0x89(0x1f)
};

// Class Solarland.SolarBTS_BotUseSniperPos
// Size: 0x90 (Inherited: 0x70)
struct USolarBTS_BotUseSniperPos : UBTService {
	bool bOverrideBotConfig; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	struct FSolarBotUseSniperPosConfig DefaultConfig; // 0x74(0x1c)
};

// Class Solarland.SolarBTS_CheckCanAttack
// Size: 0xe8 (Inherited: 0x98)
struct USolarBTS_CheckCanAttack : UBTService_BlackboardBase {
	struct FBlackboardKeySelector BlackboardKeyInLineSight; // 0x98(0x28)
	struct FBlackboardKeySelector BlackboardKeyInLineSightEx; // 0xc0(0x28)
};

// Class Solarland.SolarBTS_CheckNeedFindVehicle
// Size: 0xf8 (Inherited: 0x98)
struct USolarBTS_CheckNeedFindVehicle : UBTService_BlackboardBase {
	bool bMarkOccupiedAfterVehicleSelected; // 0x98(0x01)
	bool bCleanTargetOnCeaseRelevant; // 0x99(0x01)
	char pad_9A[0x6]; // 0x9a(0x06)
	struct TArray<struct ASolarVehiclePawn*> SolarWheeledVehicleClass; // 0xa0(0x10)
	bool bIgnoreVehicleInPoision; // 0xb0(0x01)
	bool bIgnoreVehicleOffNavmesh; // 0xb1(0x01)
	char pad_B2[0x2]; // 0xb2(0x02)
	struct FVector CheckOnNavmeshExtent; // 0xb4(0x0c)
	struct UNavigationQueryFilter* FilterClass; // 0xc0(0x08)
	struct TArray<int32_t> ExceptVehicleId; // 0xc8(0x10)
	float AcceptableRadius; // 0xd8(0x04)
	float MoveToDistanceFindVehicle; // 0xdc(0x04)
	float RangeFindVehicle; // 0xe0(0x04)
	float HealthTakingVehicle; // 0xe4(0x04)
	float MaxDistanceFindTeamVehicle; // 0xe8(0x04)
	bool bCheckSameTarget; // 0xec(0x01)
	char pad_ED[0x3]; // 0xed(0x03)
	float SameTargetDistThreshold; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
};

// Class Solarland.SolarBTS_CheckNeedRunEQS
// Size: 0x98 (Inherited: 0x98)
struct USolarBTS_CheckNeedRunEQS : UBTService_BlackboardBase {
};

// Class Solarland.SolarBTS_NgaiNearbySupplies
// Size: 0x78 (Inherited: 0x70)
struct USolarBTS_NgaiNearbySupplies : UBTService {
	char pad_70[0x8]; // 0x70(0x08)
};

// Class Solarland.SolarBTS_TeamTaskAllocation
// Size: 0x168 (Inherited: 0x98)
struct USolarBTS_TeamTaskAllocation : UBTService_BlueprintBase {
	float RescueAllocateThresholdScore; // 0x98(0x04)
	float RescueAbandonThresholdScore; // 0x9c(0x04)
	float RescuePunishScore; // 0xa0(0x04)
	float RescueRewardScore; // 0xa4(0x04)
	bool bNeedToRebornBotInBotTeam; // 0xa8(0x01)
	bool bNeedToRebornBotInPlayerTeam; // 0xa9(0x01)
	bool bDebugTaskScore; // 0xaa(0x01)
	bool bDebugEachTaskScore; // 0xab(0x01)
	struct FVector PoisonSnapExtent; // 0xac(0x0c)
	struct FSolarTaskScoringItem CustomTaskScoringItemList; // 0xb8(0x50)
	char pad_108[0x50]; // 0x108(0x50)
	struct ASolarBotAIController* SelfController; // 0x158(0x08)
	struct ASolarCharacter* SelfCharacter; // 0x160(0x08)

	void PostGetCurrentTaskScore(struct FSolarScoringItemStruct& InScoringItemStruct); // Function Solarland.SolarBTS_TeamTaskAllocation.PostGetCurrentTaskScore // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2092c70
	float MoveToSafeAreaCostSec(struct ASolarBotAIController* InController); // Function Solarland.SolarBTS_TeamTaskAllocation.MoveToSafeAreaCostSec // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2092bd0
	float MoveToRescueTargetCostSec(struct ASolarBotAIController* InController, struct AActor* TeammateInDanger); // Function Solarland.SolarBTS_TeamTaskAllocation.MoveToRescueTargetCostSec // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2092b00
	float MoveToPointCostSec(struct ASolarBotAIController* InController, struct FVector& CenterPoint, float InRadius); // Function Solarland.SolarBTS_TeamTaskAllocation.MoveToPointCostSec // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x20929d0
	void DebugEachTaskScoreItem(struct FSolarScoringItemStruct& TaskScore, enum class ESolarTaskScoringItemType& ItemType, float Score, float Value); // Function Solarland.SolarBTS_TeamTaskAllocation.DebugEachTaskScoreItem // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2092830
	void DebugAllTaskScore(struct TArray<struct FSolarScoringItemStruct>& TaskScoresList); // Function Solarland.SolarBTS_TeamTaskAllocation.DebugAllTaskScore // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2092780
	bool CheckIfCharacterInSafeArea(struct AActor* InActor); // Function Solarland.SolarBTS_TeamTaskAllocation.CheckIfCharacterInSafeArea // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x20926e0
	bool CheckIfCharacterInPoisonCircle(struct AActor* InActor); // Function Solarland.SolarBTS_TeamTaskAllocation.CheckIfCharacterInPoisonCircle // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2092640
	bool CheakIsLeader(struct ASolarBotAIController* InController); // Function Solarland.SolarBTS_TeamTaskAllocation.CheakIsLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20925a0
	bool CanRescueCurrentTarget(struct ASolarCharacter* RescueTarget); // Function Solarland.SolarBTS_TeamTaskAllocation.CanRescueCurrentTarget // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2092500
	bool CanAllocateCurrentTarget(struct ASolarBotAIController* InController); // Function Solarland.SolarBTS_TeamTaskAllocation.CanAllocateCurrentTarget // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2092460
};

// Class Solarland.SolarBTT_BotCharging
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_BotCharging : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_BotFire
// Size: 0x108 (Inherited: 0x98)
struct USolarBTT_BotFire : UBTTask_BlackboardBase {
	bool bEnableOffset; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	float OffsetRadiusMax; // 0x9c(0x04)
	float OffsetRadiusMin; // 0xa0(0x04)
	float MaxFireDuration; // 0xa4(0x04)
	bool bEnableShootSimulator; // 0xa8(0x01)
	bool bForceReset; // 0xa9(0x01)
	bool bOverrideDefaultShootConfig; // 0xaa(0x01)
	char pad_AB[0x1]; // 0xab(0x01)
	struct FSolarBotShootConfig ShootConfig; // 0xac(0x58)
	char pad_104[0x4]; // 0x104(0x04)
};

// Class Solarland.SolarBTT_BotContinueFire
// Size: 0x110 (Inherited: 0x108)
struct USolarBTT_BotContinueFire : USolarBTT_BotFire {
	float FireDurationTime; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
};

// Class Solarland.SolarBTT_BotCruise
// Size: 0x78 (Inherited: 0x70)
struct USolarBTT_BotCruise : UBTTaskNode {
	float SecDelayFollowJump; // 0x70(0x04)
	float SecDelayRandomDeviation; // 0x74(0x04)
};

// Class Solarland.SolarBTT_BotCruiseBehindTarget
// Size: 0xa0 (Inherited: 0x70)
struct USolarBTT_BotCruiseBehindTarget : UBTTaskNode {
	struct FBlackboardKeySelector TargetToFollow; // 0x70(0x28)
	float SecDelayFollowJump; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.SolarBTT_BotCruiseWhenNearest
// Size: 0xa0 (Inherited: 0x70)
struct USolarBTT_BotCruiseWhenNearest : UBTTaskNode {
	struct FBlackboardKeySelector TargetToCheck; // 0x70(0x28)
	float SecDelayRandomDeviation; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.SolarBTT_BotInputMove
// Size: 0x80 (Inherited: 0x70)
struct USolarBTT_BotInputMove : UBTTaskNode {
	struct FVector2D InputDir; // 0x70(0x08)
	float DeviationAngle; // 0x78(0x04)
	bool bRandomInput; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
};

// Class Solarland.SolarBTT_BotInteractWithShieldUpgradeItemShop
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_BotInteractWithShieldUpgradeItemShop : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_BotJet
// Size: 0xb8 (Inherited: 0x98)
struct USolarBTT_BotJet : UBTTask_BlackboardBase {
	enum class EJetPackMode JetPackMode; // 0x98(0x01)
	enum class EJetTaskFinishMode FinishMode; // 0x99(0x01)
	bool bTestBlock; // 0x9a(0x01)
	char pad_9B[0x1]; // 0x9b(0x01)
	float DisplacementExpected; // 0x9c(0x04)
	float MinDisplacementExpected; // 0xa0(0x04)
	bool bUseLocalInput; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	struct FVector2D LocalInput; // 0xa8(0x08)
	bool bSelectorAsTarget; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
};

// Class Solarland.SolarBTT_BotJump
// Size: 0x78 (Inherited: 0x70)
struct USolarBTT_BotJump : UBTTaskNode {
	enum class EJumpTaskFinishMode FinishMode; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Solarland.SolarBTT_BotLookAt
// Size: 0xb8 (Inherited: 0x98)
struct USolarBTT_BotLookAt : UBTTask_BlackboardBase {
	struct FRotator DeltaRotator; // 0x98(0x0c)
	bool bRandomRot; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	float LookAtSpeed; // 0xa8(0x04)
	bool bFinishTaskAfterReachTarget; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
	float ReachAngleTolerance; // 0xb0(0x04)
	float ReachTimeOut; // 0xb4(0x04)
};

// Class Solarland.SolarBTT_BotModifyShootParam
// Size: 0x88 (Inherited: 0x70)
struct USolarBTT_BotModifyShootParam : UBTTaskNode {
	enum class EBotShootTargetType ShootTargetType; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	float ShootDisperse; // 0x74(0x04)
	float HitRate; // 0x78(0x04)
	float DamageRate; // 0x7c(0x04)
	float DamageFactor; // 0x80(0x04)
	bool bModifyShootDisperse; // 0x84(0x01)
	bool bModifyHitRate; // 0x85(0x01)
	bool bModifyDamageRate; // 0x86(0x01)
	bool bModifyDamageFactor; // 0x87(0x01)
};

// Class Solarland.SolarBTT_BotMoveTo
// Size: 0xe0 (Inherited: 0xb0)
struct USolarBTT_BotMoveTo : UBTTask_MoveTo {
	struct FBlackboardKeySelector BBK_AcceptanceRadius; // 0xb0(0x28)
	bool bMoveToGoalOnLastSegment; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
};

// Class Solarland.SolarBTT_BotOnceFire
// Size: 0x110 (Inherited: 0x108)
struct USolarBTT_BotOnceFire : USolarBTT_BotFire {
	int32_t OnceFireTimes; // 0x108(0x04)
	float OnceFireIntervalTime; // 0x10c(0x04)
};

// Class Solarland.SolarBTT_BotPickupItem
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTT_BotPickupItem : UBTTask_BlackboardBase {
	float MaxPickUpDistSq; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.SolarBTT_BotRechargeShield
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_BotRechargeShield : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_BotRescueTeammate
// Size: 0xc0 (Inherited: 0x70)
struct USolarBTT_BotRescueTeammate : UBTTaskNode {
	struct FBlackboardKeySelector CharacterToRescue; // 0x70(0x28)
	struct FBlackboardKeySelector TargetBox; // 0x98(0x28)
};

// Class Solarland.SolarBTT_BotRoleSkill
// Size: 0x140 (Inherited: 0x98)
struct USolarBTT_BotRoleSkill : UBTTask_BlackboardBase {
	struct FGameplayTag RoleAbilityTag; // 0x98(0x08)
	struct FBlackboardKeySelector LocationExpected; // 0xa0(0x28)
	float TimeOutSec; // 0xc8(0x04)
	float HoldSec; // 0xcc(0x04)
	float ProjectileAngleAllowableError; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)
	struct FBlackboardKeySelector SummonItemLocation; // 0xd8(0x28)
	struct FBlackboardKeySelector SummonItemRadius; // 0x100(0x28)
	struct FVector OffsetVec; // 0x128(0x0c)
	float SummonTestRadius; // 0x134(0x04)
	char pad_138[0x8]; // 0x138(0x08)
};

// Class Solarland.SolarBTT_BotSkyDiving
// Size: 0xc8 (Inherited: 0x70)
struct USolarBTT_BotSkyDiving : UBTTaskNode {
	struct FBlackboardKeySelector ActorFocused; // 0x70(0x28)
	bool bOverrideBotConfig; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	struct FSolarBotSkyDivingConfig DefaultConfig; // 0x9c(0x24)
	float DelaySecPreserved; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
};

// Class Solarland.SolarBTT_BotSprint
// Size: 0x78 (Inherited: 0x70)
struct USolarBTT_BotSprint : UBTTaskNode {
	bool bEnterSprint; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Solarland.SolarBTT_BotSwitchWeapon
// Size: 0x78 (Inherited: 0x70)
struct USolarBTT_BotSwitchWeapon : UBTTaskNode {
	enum class EWeaponType WeaponType; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Solarland.SolarBTT_BotTeleport
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTT_BotTeleport : UBTTask_BlackboardBase {
	bool bNoCheck; // 0x98(0x01)
	bool bTeleportVehicle; // 0x99(0x01)
	char pad_9A[0x6]; // 0x9a(0x06)
};

// Class Solarland.SolarBTT_BotTreatment
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_BotTreatment : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_BotUpgradeShield
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTT_BotUpgradeShield : UBTTask_BlackboardBase {
	struct FGameplayTag ShieldUpdateAbilityTag; // 0x98(0x08)
};

// Class Solarland.SolarBTT_BotVehicleFire
// Size: 0x118 (Inherited: 0x108)
struct USolarBTT_BotVehicleFire : USolarBTT_BotFire {
	float DurationTime; // 0x108(0x04)
	float ChargePercentMin; // 0x10c(0x04)
	float ChargePercentMax; // 0x110(0x04)
	float SecFireAfterAimLocked; // 0x114(0x04)
};

// Class Solarland.SolarBTT_BotVehicleSkill
// Size: 0xa8 (Inherited: 0x98)
struct USolarBTT_BotVehicleSkill : UBTTask_BlackboardBase {
	int32_t SeatIndex; // 0x98(0x04)
	int32_t AbilityIndex; // 0x9c(0x04)
	bool bCancel; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
};

// Class Solarland.SolarBTT_BotWaitCruiseEnd
// Size: 0x70 (Inherited: 0x70)
struct USolarBTT_BotWaitCruiseEnd : UBTTaskNode {
};

// Class Solarland.SolarBTT_BotWeaponFire
// Size: 0xf8 (Inherited: 0x98)
struct USolarBTT_BotWeaponFire : UBTTask_BlackboardBase {
	float MaxFireDuration; // 0x98(0x04)
	bool bOverrideDefaultShootConfig; // 0x9c(0x01)
	bool bForceReset; // 0x9d(0x01)
	char pad_9E[0x2]; // 0x9e(0x02)
	struct FSolarBotShootConfig ShootConfig; // 0xa0(0x58)
};

// Class Solarland.SolarBTT_FindRandomLocation
// Size: 0xc8 (Inherited: 0x98)
struct USolarBTT_FindRandomLocation : UBTTask_BlackboardBase {
	struct FBlackboardKeySelector CenterBlackboardSelector; // 0x98(0x28)
	float SearchRadius; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
};

// Class Solarland.SolarBTT_GetOnOrOffVehicle
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTT_GetOnOrOffVehicle : UBTTask_BlackboardBase {
	bool bGetOnVehicle; // 0x98(0x01)
	bool bMarkBlockAfterOffVehicle; // 0x99(0x01)
	bool bProhibitionOfGettingOnOtherCar; // 0x9a(0x01)
	char pad_9B[0x5]; // 0x9b(0x05)
};

// Class Solarland.SolarBTT_RunBehaviorDynamic
// Size: 0x88 (Inherited: 0x88)
struct USolarBTT_RunBehaviorDynamic : UBTTask_RunBehaviorDynamic {
};

// Class Solarland.SolarBTT_SetBotAIEnemyTarget
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_SetBotAIEnemyTarget : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_SpawnVehicle
// Size: 0x108 (Inherited: 0x98)
struct USolarBTT_SpawnVehicle : UBTTask_BlackboardBase {
	struct TArray<int32_t> SpawnIds; // 0x98(0x10)
	bool bUsingSelectedSpawnId; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
	struct FBlackboardKeySelector SelectedSpawnId; // 0xb0(0x28)
	struct FBlackboardKeySelector SpawnedVehicle; // 0xd8(0x28)
	float SpawnHeightOffset; // 0x100(0x04)
	float SpawnFailedSec; // 0x104(0x04)
};

// Class Solarland.SolarBullet
// Size: 0x378 (Inherited: 0x228)
struct ASolarBullet : AActor {
	float TotalEffectTime; // 0x228(0x04)
	bool bAttached; // 0x22c(0x01)
	bool bShowHitCharacter; // 0x22d(0x01)
	bool bShowHitToTeammate; // 0x22e(0x01)
	bool bShowHitWater; // 0x22f(0x01)
	struct UParticleSystem* BulletEffect; // 0x230(0x08)
	struct UParticleSystem* TrajectoryEffect; // 0x238(0x08)
	struct UParticleSystem* TrajectoryEffectOther; // 0x240(0x08)
	struct FSoftObjectPath SimpleCanisterShotEffectPath; // 0x248(0x18)
	struct UParticleSystem* TrajectoryBeamEffect; // 0x260(0x08)
	struct UParticleSystem* TrajectoryBeamEffectOther; // 0x268(0x08)
	struct UParticleSystem* HitEffect; // 0x270(0x08)
	struct UParticleSystem* MuzzleEffect; // 0x278(0x08)
	bool bKeepOneActivate; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
	struct UParticleSystem* MuzzleEffectScope; // 0x288(0x08)
	struct UParticleSystem* MuzzleEffectOther; // 0x290(0x08)
	struct UParticleSystem* FlameArresterMuzzleEffect; // 0x298(0x08)
	struct UParticleSystem* FlameArresterMuzzleEffectScope; // 0x2a0(0x08)
	struct UParticleSystem* FlameArresterMuzzleEffectOther; // 0x2a8(0x08)
	struct UParticleSystem* SpecialEffect; // 0x2b0(0x08)
	struct UParticleSystem* DecalEffect; // 0x2b8(0x08)
	struct UParticleSystem* DecalEffect2; // 0x2c0(0x08)
	struct FSoftObjectPath ShieldEffect; // 0x2c8(0x18)
	struct TMap<enum class EPhysicalSurface, struct FSoftObjectPath> PhysicsHitEffects; // 0x2e0(0x50)
	float DecalLifeSpan; // 0x330(0x04)
	char pad_334[0x4]; // 0x334(0x04)
	struct UParticleSystem* ShellCaseEffect; // 0x338(0x08)
	struct UParticleSystem* ShellCaseEffectOnScope; // 0x340(0x08)
	bool CanExplodeWhenOutRange; // 0x348(0x01)
	char pad_349[0x7]; // 0x349(0x07)
	struct FString HoldingPreViewSound_1P; // 0x350(0x10)
	struct FString HoldingPreViewSound_3P; // 0x360(0x10)
	char BulletCollisionType; // 0x370(0x01)
	char pad_371[0x7]; // 0x371(0x07)

	void OnPlayImpactEffect(struct UParticleSystemComponent* PSC); // Function Solarland.SolarBullet.OnPlayImpactEffect // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FSoftObjectPath GetHitPhysicEffectPath(enum class EPhysicalSurface& HitSurface); // Function Solarland.SolarBullet.GetHitPhysicEffectPath // (Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x20956a0
};

// Class Solarland.SolarBulletDecal
// Size: 0x238 (Inherited: 0x228)
struct ASolarBulletDecal : AActor {
	struct UParticleSystemComponent* DecalParticle; // 0x228(0x08)
	char pad_230[0x8]; // 0x230(0x08)
};

// Class Solarland.SolarBurstItemActor
// Size: 0x4e0 (Inherited: 0x3d8)
struct ASolarBurstItemActor : ASolarItemActor {
	struct FVector_NetQuantize StartLoc; // 0x3d8(0x0c)
	struct FVector_NetQuantize MediumLoc; // 0x3e4(0x0c)
	struct FVector_NetQuantize EndLoc; // 0x3f0(0x0c)
	bool bLandedOnServer; // 0x3fc(0x01)
	char pad_3FD[0x2b]; // 0x3fd(0x2b)
	struct ASolarTreasureBoxActor* OwnerBox; // 0x428(0x08)
	char pad_430[0x50]; // 0x430(0x50)
	float BurstLocalHeight; // 0x480(0x04)
	float BurstTimeTotal; // 0x484(0x04)
	char pad_488[0x58]; // 0x488(0x58)

	void OnRep_StartLoc(); // Function Solarland.SolarBurstItemActor.OnRep_StartLoc // (Final|Native|Public) // @ game+0x2095a00
	void OnRep_OwnerBox(); // Function Solarland.SolarBurstItemActor.OnRep_OwnerBox // (Final|Native|Public) // @ game+0x2095a00
	void OnRep_MediumLoc(); // Function Solarland.SolarBurstItemActor.OnRep_MediumLoc // (Final|Native|Public) // @ game+0x2095a00
	void OnRep_EndLoc(); // Function Solarland.SolarBurstItemActor.OnRep_EndLoc // (Final|Native|Public) // @ game+0x2095a00
	void OnRep_BurstLocalHeight(); // Function Solarland.SolarBurstItemActor.OnRep_BurstLocalHeight // (Final|Native|Public) // @ game+0x8e9ae0
};

// Class Solarland.SolarBurstRocketBullet
// Size: 0x388 (Inherited: 0x228)
struct ASolarBurstRocketBullet : AActor {
	int32_t BurstSum; // 0x228(0x04)
	float BurstInterval; // 0x22c(0x04)
	float DamageRadius; // 0x230(0x04)
	float DamagePerBullet; // 0x234(0x04)
	struct TArray<enum class EObjectTypeQuery> CanDamageObjectTypes; // 0x238(0x10)
	float SpawnerAnimTime; // 0x248(0x04)
	struct FName SpawnerMeshMaterialParamName; // 0x24c(0x08)
	char pad_254[0x4]; // 0x254(0x04)
	struct UAmmoConfig* Ammo; // 0x258(0x08)
	struct FVector RocketSpawnerMeshOffset; // 0x260(0x0c)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct TArray<struct FName> MuzzleSocketNames; // 0x270(0x10)
	float SpawnerMoveInterpSpeed; // 0x280(0x04)
	float SpawnerMoveInterpMinSpeed; // 0x284(0x04)
	struct USkeletalMesh* SpawnerTemplateMesh; // 0x288(0x08)
	bool bUseForwardAxisY; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)
	struct USkeletalMeshComponent* SpawnerMesh; // 0x298(0x08)
	struct UAnimationAsset* SpawnerIdleAnim; // 0x2a0(0x08)
	struct UAnimationAsset* SpawnerFireAnim; // 0x2a8(0x08)
	struct FString SpawnerStartSoundName1P; // 0x2b0(0x10)
	struct FString SpawnerStartSoundName3P; // 0x2c0(0x10)
	struct FString SpawnerEndSoundName1P; // 0x2d0(0x10)
	struct FString SpawnerEndSoundName3P; // 0x2e0(0x10)
	struct FString FireSoundName1P; // 0x2f0(0x10)
	struct FString FireSoundName3P; // 0x300(0x10)
	struct FString FireImpactSoundName; // 0x310(0x10)
	bool bTeammateDamage; // 0x320(0x01)
	bool bDrawDebugAimLine; // 0x321(0x01)
	bool bDrawDebugExplodeSphere; // 0x322(0x01)
	bool bDrawDebugHitActor; // 0x323(0x01)
	char pad_324[0x4]; // 0x324(0x04)
	struct ASolarCharacter* OwnerCharacter; // 0x328(0x08)
	struct USolarWeaponGA_Rocket* OwnerRocketGA; // 0x330(0x08)
	struct UAkComponent* HitAkObj; // 0x338(0x08)
	struct FRotator PlayerRotation; // 0x340(0x0c)
	char pad_34C[0x14]; // 0x34c(0x14)
	struct TArray<struct ASolarProjBullet*> FiredBullets; // 0x360(0x10)
	char pad_370[0x8]; // 0x370(0x08)
	struct TArray<struct USplineComponent*> RocketPathArray; // 0x378(0x10)

	void ServerUpdateCharacterRotation(struct FRotator InRotation); // Function Solarland.SolarBurstRocketBullet.ServerUpdateCharacterRotation // (Net|Native|Event|Protected|NetServer|HasDefaults) // @ game+0x201d420
	void OnSingleRocketFire(struct ASolarCharacter* InOwnerCharacter, bool bIsLocalPlayer); // Function Solarland.SolarBurstRocketBullet.OnSingleRocketFire // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnServerSpawnFireRocket(struct FSpawnProjParam& InParam); // Function Solarland.SolarBurstRocketBullet.OnServerSpawnFireRocket // (Final|Native|Protected|HasOutParms) // @ game+0x2095b00
	void OnRocketStop(struct FHitResult& InHitResult); // Function Solarland.SolarBurstRocketBullet.OnRocketStop // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2095a20
	void OnBurstRocketDeactive(struct ASolarCharacter* InOwnerCharacter, bool bIsLocalPlayer); // Function Solarland.SolarBurstRocketBullet.OnBurstRocketDeactive // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnBurstRocketActive(struct ASolarCharacter* InOwnerCharacter, bool bIsLocalPlayer); // Function Solarland.SolarBurstRocketBullet.OnBurstRocketActive // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnBulletStopMove(struct FHitResult& HitResult, bool bBlocking); // Function Solarland.SolarBurstRocketBullet.OnBulletStopMove // (Final|Native|Protected|HasOutParms) // @ game+0x20958d0
	struct USplineComponent* GetRocketPath(int32_t InIndex); // Function Solarland.SolarBurstRocketBullet.GetRocketPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2095790
	void ExplodeAndDamageDirectly(struct FHitResult& HitResult); // Function Solarland.SolarBurstRocketBullet.ExplodeAndDamageDirectly // (Final|Native|Protected|HasOutParms) // @ game+0x2095530
};

// Class Solarland.SolarBusinessCardCharacter
// Size: 0x228 (Inherited: 0x228)
struct ASolarBusinessCardCharacter : AActor {

	void SetSkin(struct USkeletalMesh* LoadedSkinRes, struct UMaterialInterface* LoadedCharaSkinRes); // Function Solarland.SolarBusinessCardCharacter.SetSkin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarButton
// Size: 0x4d8 (Inherited: 0x150)
struct USolarButton : UContentWidget {
	struct USlateWidgetStyleAsset* Style; // 0x150(0x08)
	struct FButtonStyle WidgetStyle; // 0x158(0x2b8)
	enum class ESolarImageFillType ImageFillType; // 0x410(0x01)
	char pad_411[0x3]; // 0x411(0x03)
	float ImageFillRatioHorizontal; // 0x414(0x04)
	float ImageFillRatioVertical; // 0x418(0x04)
	float ImageFillPixelLeft; // 0x41c(0x04)
	float ImageFillPixelTop; // 0x420(0x04)
	float ImageFillPixelRight; // 0x424(0x04)
	float ImageFillPixelBottom; // 0x428(0x04)
	struct FLinearColor ColorAndOpacity; // 0x42c(0x10)
	struct FLinearColor BackgroundColor; // 0x43c(0x10)
	bool bReleaseUnfocus; // 0x44c(0x01)
	bool bEnableClickSound; // 0x44d(0x01)
	char pad_44E[0x2]; // 0x44e(0x02)
	struct FString ClickSoundEventName; // 0x450(0x10)
	enum class EButtonClickMethod ClickMethod; // 0x460(0x01)
	enum class EButtonTouchMethod TouchMethod; // 0x461(0x01)
	enum class EButtonPressMethod PressMethod; // 0x462(0x01)
	bool IsFocusable; // 0x463(0x01)
	char pad_464[0x4]; // 0x464(0x04)
	struct FMulticastInlineDelegate OnClicked; // 0x468(0x10)
	struct FMulticastInlineDelegate OnPressed; // 0x478(0x10)
	struct FMulticastInlineDelegate OnReleased; // 0x488(0x10)
	struct FMulticastInlineDelegate OnHovered; // 0x498(0x10)
	struct FMulticastInlineDelegate OnUnhovered; // 0x4a8(0x10)
	struct FMulticastInlineDelegate OnFocusLosted; // 0x4b8(0x10)
	char pad_4C8[0x10]; // 0x4c8(0x10)

	void SetTouchMethod(enum class EButtonTouchMethod InTouchMethod); // Function Solarland.SolarButton.SetTouchMethod // (Final|Native|Public|BlueprintCallable) // @ game+0x20960b0
	void SetStyle(struct FButtonStyle& InStyle); // Function Solarland.SolarButton.SetStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2095fd0
	void SetPressMethod(enum class EButtonPressMethod InPressMethod); // Function Solarland.SolarButton.SetPressMethod // (Final|Native|Public|BlueprintCallable) // @ game+0x2095f50
	void SetImageFillType(enum class ESolarImageFillType InImageFillType); // Function Solarland.SolarButton.SetImageFillType // (Final|Native|Public|BlueprintCallable) // @ game+0x2095e40
	void SetColorAndOpacity(struct FLinearColor InColorAndOpacity); // Function Solarland.SolarButton.SetColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2095d30
	void SetClickMethod(enum class EButtonClickMethod InClickMethod); // Function Solarland.SolarButton.SetClickMethod // (Final|Native|Public|BlueprintCallable) // @ game+0x2095cb0
	void SetBackgroundColor(struct FLinearColor InBackgroundColor); // Function Solarland.SolarButton.SetBackgroundColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2095c20
	bool IsPressed(); // Function Solarland.SolarButton.IsPressed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20958a0
};

// Class Solarland.SolarButtonSlot
// Size: 0x60 (Inherited: 0x38)
struct USolarButtonSlot : UPanelSlot {
	struct FMargin Padding; // 0x38(0x10)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x48(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x49(0x01)
	char pad_4A[0x16]; // 0x4a(0x16)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function Solarland.SolarButtonSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2096130
	void SetPadding(struct FMargin InPadding); // Function Solarland.SolarButtonSlot.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x2095ec0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function Solarland.SolarButtonSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2095dc0
};

// Class Solarland.SolarCameraActor
// Size: 0x280 (Inherited: 0x228)
struct ASolarCameraActor : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct ASolarPlayerController* MasterPlayerController; // 0x230(0x08)
	char pad_238[0x48]; // 0x238(0x48)

	void SetViewTarget(struct AActor* InTarget); // Function Solarland.SolarCameraActor.SetViewTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x20961b0
	struct AActor* GetViewTarget(); // Function Solarland.SolarCameraActor.GetViewTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2095860
	struct USolarNoSpringCameraComponent* GetCameraComponent(); // Function Solarland.SolarCameraActor.GetCameraComponent // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarCameraComponent
// Size: 0x9c0 (Inherited: 0x930)
struct USolarCameraComponent : UCameraComponent {
	char pad_930[0x50]; // 0x930(0x50)
	float ConfigDistanceToTarget; // 0x980(0x04)
	struct FVector ConfigCameraOffset; // 0x984(0x0c)
	struct FVector ConfigTargetOffset; // 0x990(0x0c)
	float ConfigFOV; // 0x99c(0x04)
	float ViewPitchMax; // 0x9a0(0x04)
	float ViewPitchMin; // 0x9a4(0x04)
	float ViewYawMax; // 0x9a8(0x04)
	float ViewYawMin; // 0x9ac(0x04)
	float CameraOccupiedRoom; // 0x9b0(0x04)
	bool EnableDistanceSmooth; // 0x9b4(0x01)
	bool EnableFOVSmooth; // 0x9b5(0x01)
	char pad_9B6[0xa]; // 0x9b6(0x0a)

	struct USolarCameraComponent* GetCameraComponentFromActor(struct AActor* InActor); // Function Solarland.SolarCameraComponent.GetCameraComponentFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2095610
};

// Class Solarland.SolarCameraCompsInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarCameraCompsInterface : UInterface {

	struct USolarSpringArmComponent* GetSolarSpringArmComponent(); // Function Solarland.SolarCameraCompsInterface.GetSolarSpringArmComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1fa4280
	struct USolarCameraComponent* GetSolarCameraComponent(); // Function Solarland.SolarCameraCompsInterface.GetSolarCameraComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2095830
};

// Class Solarland.SolarCapsuleActor
// Size: 0x350 (Inherited: 0x228)
struct ASolarCapsuleActor : AActor {
	struct FSoftObjectPath StartCruisingPath; // 0x228(0x18)
	struct FSoftObjectPath StopCruisingPath; // 0x240(0x18)
	struct FName CruiseCharacterBindingName; // 0x258(0x08)
	struct FName CruiseCapsuleBindingName; // 0x260(0x08)
	struct FName CruiseCameraBindingName; // 0x268(0x08)
	float SequenceCameraBlendDuration; // 0x270(0x04)
	char pad_274[0x4]; // 0x274(0x04)
	struct UAnimationAsset* CapsuleCruisingLoopAnim; // 0x278(0x08)
	struct UAnimSequence* CharacterCruiseLoopAnim; // 0x280(0x08)
	struct FSoftObjectPath CapsuleCruisingStopAnimPath; // 0x288(0x18)
	struct UAnimSequence* CharacterCruiseEndAnim; // 0x2a0(0x08)
	struct USkeletalMeshComponent* CapsuleSkeletalMesh; // 0x2a8(0x08)
	struct TArray<struct UStaticMeshComponent*> AirflowMeshEffects; // 0x2b0(0x10)
	struct TArray<struct UParticleSystemComponent*> AirflowParticleEffects; // 0x2c0(0x10)
	struct ALevelSequenceActor* SequenceActor; // 0x2d0(0x08)
	struct ACineCameraActor* SequenceCamera; // 0x2d8(0x08)
	struct ULevelSequence* StartCruisingSequence; // 0x2e0(0x08)
	struct ULevelSequence* StopCruisingSequence; // 0x2e8(0x08)
	struct UAnimationAsset* CapsuleCruisingEndAnim; // 0x2f0(0x08)
	struct ASolarCharacter* BoardedCharacterPrivate; // 0x2f8(0x08)
	struct UParticleSystemComponent* CloudParticleComponent; // 0x300(0x08)
	struct FSoftObjectPath CloudParticlePath; // 0x308(0x18)
	char pad_320[0x20]; // 0x320(0x20)
	struct UParticleSystem* CloudParticleAsset; // 0x340(0x08)
	char pad_348[0x8]; // 0x348(0x08)

	void StopCruiseSequenceFinished(); // Function Solarland.SolarCapsuleActor.StopCruiseSequenceFinished // (Final|Native|Protected) // @ game+0x20b22d0
	void StartCruiseSequenceFinished(); // Function Solarland.SolarCapsuleActor.StartCruiseSequenceFinished // (Final|Native|Protected) // @ game+0x20b1e40
	void PlayStopCruiseSequence(); // Function Solarland.SolarCapsuleActor.PlayStopCruiseSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x20acc00
	void PlayStopCruiseAnimation(); // Function Solarland.SolarCapsuleActor.PlayStopCruiseAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x20acbe0
	void PlayStartCruiseSequence(); // Function Solarland.SolarCapsuleActor.PlayStartCruiseSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x20acbc0
	void PlayCruiseLoopAnimation(); // Function Solarland.SolarCapsuleActor.PlayCruiseLoopAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x20ac980
	void HideCapsuleAirflowVFX(); // Function Solarland.SolarCapsuleActor.HideCapsuleAirflowVFX // (Final|Native|Public|BlueprintCallable) // @ game+0x20a9150
	struct ASolarCapsuleActor* CreateCapsuleActorForBoarder(struct ASolarCharacter* InBoarder, struct ASolarCapsuleActor* CapsuleActorClass); // Function Solarland.SolarCapsuleActor.CreateCapsuleActorForBoarder // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20a59d0
};

// Class Solarland.SolarCapsuleRoot
// Size: 0x400 (Inherited: 0x228)
struct ASolarCapsuleRoot : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct USceneComponent* RootComp; // 0x230(0x08)
	struct UWidgetComponent* LocationSign; // 0x238(0x08)
	char pad_240[0x10]; // 0x240(0x10)
	float CatchupDuration; // 0x250(0x04)
	float CatchupBaseLerp; // 0x254(0x04)
	char pad_258[0x24]; // 0x258(0x24)
	struct FMiniMapAirlineData MiniMapData; // 0x27c(0x30)
	struct FUsingAirlineData CurrentAirline; // 0x2ac(0x44)
	float CruiseStartTime; // 0x2f0(0x04)
	struct FVector CruiseStartLoc; // 0x2f4(0x0c)
	struct FRotator CruiseStartRot; // 0x300(0x0c)
	int32_t ForceParachuteWarningTime; // 0x30c(0x04)
	float MaxAllowedSmoothDistance; // 0x310(0x04)
	float ClientSpeedScale; // 0x314(0x04)
	float ClientRotationSmoothSpeed; // 0x318(0x04)
	char pad_31C[0x1c]; // 0x31c(0x1c)
	struct UCapsuleFormationData* CapsuleFormationData; // 0x338(0x08)
	struct TMap<struct FVector, struct FTeamFormationUnit> CruiseFormation; // 0x340(0x50)
	struct TArray<struct FBoarderInfo> BoardingPlayerList; // 0x390(0x10)
	char pad_3A0[0x60]; // 0x3a0(0x60)

	void ServerUnBoardCharacter(struct ASolarCharacter* Character); // Function Solarland.SolarCapsuleRoot.ServerUnBoardCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x20b0dd0
	void OnRep_MiniMapAirline(); // Function Solarland.SolarCapsuleRoot.OnRep_MiniMapAirline // (Final|Native|Protected) // @ game+0x20abbe0
	void OnRep_CurrentAirline(); // Function Solarland.SolarCapsuleRoot.OnRep_CurrentAirline // (Final|Native|Protected) // @ game+0x20ab940
	struct FMiniMapAirlineData K2_GetAirlineData(); // Function Solarland.SolarCapsuleRoot.K2_GetAirlineData // (Final|Native|Public|BlueprintCallable) // @ game+0x20aa380
	struct ASolarCapsuleRoot* GetSolarCapsuleRoot(struct UObject* WorldContextObject); // Function Solarland.SolarCapsuleRoot.GetSolarCapsuleRoot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20a8560
	float GetCruiseProgress(); // Function Solarland.SolarCapsuleRoot.GetCruiseProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x20a71a0
	int32_t BoardingCharacter(struct FBoarderInfo& BoarderInfo); // Function Solarland.SolarCapsuleRoot.BoardingCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20a39d0
};

// Class Solarland.SolarInteractableActor
// Size: 0x238 (Inherited: 0x228)
struct ASolarInteractableActor : AActor {
	enum class EInteractableType InteractType; // 0x228(0x01)
	char pad_229[0xb]; // 0x229(0x0b)
	char bUseSceneActorOptimization; // 0x234(0x01)
	char pad_235[0x3]; // 0x235(0x03)

	void SetUserActor(struct AActor* InUser); // Function Solarland.SolarInteractableActor.SetUserActor // (Final|Native|Public|BlueprintCallable) // @ game+0x2124eb0
	void InteractWithActor(struct AActor* InActor); // Function Solarland.SolarInteractableActor.InteractWithActor // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct AActor* GetUserActor(); // Function Solarland.SolarInteractableActor.GetUserActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2124140
};

// Class Solarland.SolarCarPad
// Size: 0x248 (Inherited: 0x238)
struct ASolarCarPad : ASolarInteractableActor {
	float Duration; // 0x238(0x04)
	float SpeedMultiplier; // 0x23c(0x04)
	float DistanceThresholdForValidation; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)
};

// Class Solarland.SolarCharacterAIController
// Size: 0x378 (Inherited: 0x370)
struct ASolarCharacterAIController : ASolarAIControllerBase {
	char pad_370[0x8]; // 0x370(0x08)

	struct ASolarCharacter* GetSolarCharacter(); // Function Solarland.SolarCharacterAIController.GetSolarCharacter // (Native|Public|Const) // @ game+0x2085660
};

// Class Solarland.SolarCharacterCameraComponent
// Size: 0xad0 (Inherited: 0x9c0)
struct USolarCharacterCameraComponent : USolarCameraComponent {
	struct ASolarCharacter* Character; // 0x9b8(0x08)
	struct USolarCharacterCameraDataAsset* CharacterCameraConfig; // 0x9c8(0x08)
	char pad_9D0[0x100]; // 0x9d0(0x100)
};

// Class Solarland.SolarCharacterCameraDataAsset
// Size: 0x358 (Inherited: 0x30)
struct USolarCharacterCameraDataAsset : UDataAsset {
	float ThirdPersonVerticalOffset; // 0x30(0x04)
	float ThirdPersonVerticalOffsetWhenCrouched; // 0x34(0x04)
	float ThirdPersonVerticalOffsetWhenCrouchMoving; // 0x38(0x04)
	float ThirdPersonHorizontalOffset; // 0x3c(0x04)
	struct UCurveFloat* FollowForwardOffsetCurve; // 0x40(0x08)
	float FollowForwardOffsetMultiplier; // 0x48(0x04)
	float CrouchCameraLagTime; // 0x4c(0x04)
	float UnCrouchCameraLagTime; // 0x50(0x04)
	float ShoulderShotVerticalOffset; // 0x54(0x04)
	float ShoulderShotVerticalOffsetWhenCrouched; // 0x58(0x04)
	float ShoulderShotHorizontalOffset; // 0x5c(0x04)
	float ShoulderShotDistanceToTarget; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct UCurveFloat* ShoulderShotFollowDistanceCurve; // 0x68(0x08)
	float ShoulderShotCameraFOV; // 0x70(0x04)
	float ShoulderShotCameraZoomInOutTime; // 0x74(0x04)
	float ScopeShotVerticalOffsetWithStanding; // 0x78(0x04)
	float ScopeShotVerticalOffsetWhenCrouch; // 0x7c(0x04)
	float DistanceToScopePivot; // 0x80(0x04)
	float ArmDistanceToCamera; // 0x84(0x04)
	float ScopeHorizontalOffset; // 0x88(0x04)
	float SwimDistanceToTarget; // 0x8c(0x04)
	float SwimDistSwitchSpeed; // 0x90(0x04)
	float TakeOffCamPitchMin; // 0x94(0x04)
	float TakeOffCamPitchMax; // 0x98(0x04)
	float LandingSpeedThreshold; // 0x9c(0x04)
	struct FCamEffectSettings ParkourCamSettings; // 0xa0(0x38)
	struct FVector CruiseCameraOffset; // 0xd8(0x0c)
	struct FVector CruiseTargetOffset; // 0xe4(0x0c)
	float CruiseDistanceToTarget; // 0xf0(0x04)
	struct FVector SkydiveCameraOffset; // 0xf4(0x0c)
	struct FVector SkydiveTargetOffset; // 0x100(0x0c)
	float SkydiveDistanceToTarget; // 0x10c(0x04)
	float SkydiveDistanceToTargetOnBoosting; // 0x110(0x04)
	float SkydiveViewPitchMax; // 0x114(0x04)
	float SkydiveViewPitchMin; // 0x118(0x04)
	struct FCameraSettings JetFlySettingsVertical; // 0x11c(0x20)
	struct FCameraSettings JetFlySettingsFront; // 0x13c(0x20)
	struct FCameraSettings JetFlySettingsBack; // 0x15c(0x20)
	struct FCameraSettings JetFlySettingsLeft; // 0x17c(0x20)
	struct FCameraSettings JetFlySettingsRight; // 0x19c(0x20)
	char pad_1BC[0x4]; // 0x1bc(0x04)
	struct FRuntimeFloatCurve JetFlyFadeInCurve; // 0x1c0(0x88)
	struct FRuntimeFloatCurve JetFlyFadeOutCurve; // 0x248(0x88)
	struct UCameraShake* CameraShakeSkydiveFlying; // 0x2d0(0x08)
	float CameraShakeSkydiveFlyingSpeedMin; // 0x2d8(0x04)
	float CameraShakeSkydiveFlyingSpeedMax; // 0x2dc(0x04)
	struct UCameraShake* CameraShakeJetPackLaunch; // 0x2e0(0x08)
	struct UCameraShake* CameraShakeLand; // 0x2e8(0x08)
	struct UCameraShake* CameraShakeVehicleEjectLaunch; // 0x2f0(0x08)
	float CameraShakeLandDistanceMin; // 0x2f8(0x04)
	float CameraShakeLandDistanceMax; // 0x2fc(0x04)
	struct TMap<enum class ECamShakeType, struct UCameraShake*> CamShakeConfig; // 0x300(0x50)
	float TargetOffsetLerpSpeed; // 0x350(0x04)
	char pad_354[0x4]; // 0x354(0x04)
};

// Class Solarland.SolarCharacterController
// Size: 0x28 (Inherited: 0x28)
struct USolarCharacterController : UInterface {

	void OnEnterLanding(); // Function Solarland.SolarCharacterController.OnEnterLanding // (Native|Public) // @ game+0x20bb540
	struct FString GetPlayerID(); // Function Solarland.SolarCharacterController.GetPlayerID // (Native|Public|Const) // @ game+0x20babf0
};

// Class Solarland.SolarControllerCommon
// Size: 0x28 (Inherited: 0x28)
struct USolarControllerCommon : UInterface {
};

// Class Solarland.SolarDefaultCharacterController
// Size: 0x28 (Inherited: 0x28)
struct USolarDefaultCharacterController : USolarCharacterController {
};

// Class Solarland.SolarCharacterGameplayAbility_Blueprint
// Size: 0x460 (Inherited: 0x460)
struct USolarCharacterGameplayAbility_Blueprint : USolarCharacterGameplayAbility {

	bool K2_OnActivateCharacterAbilityFromEvent(struct ASolarCharacter* Character, struct FGameplayAbilityActorInfo& ActorInfo, struct FGameplayAbilityActivationInfo& ActivationInfo, struct FGameplayEventData& EventData); // Function Solarland.SolarCharacterGameplayAbility_Blueprint.K2_OnActivateCharacterAbilityFromEvent // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x20bb150
	bool K2_OnActivateCharacterAbility(struct ASolarCharacter* Character, struct FGameplayAbilityActorInfo& ActorInfo, struct FGameplayAbilityActivationInfo& ActivationInfo); // Function Solarland.SolarCharacterGameplayAbility_Blueprint.K2_OnActivateCharacterAbility // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x20bafd0
	bool K2_CanActivateCharacterAbility(struct ASolarCharacter* Character, struct FGameplayAbilityActorInfo& ActorInfo, struct FGameplayTagContainer& RelevantTags); // Function Solarland.SolarCharacterGameplayAbility_Blueprint.K2_CanActivateCharacterAbility // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x20bae30
};

// Class Solarland.SolarCharacterGASComponent
// Size: 0x1458 (Inherited: 0x13f0)
struct USolarCharacterGASComponent : USolarAbilitySystemComponent {
	char pad_13F0[0x68]; // 0x13f0(0x68)

	void NotifyTalentState(enum class EPlayerStateRepType InRepType, struct APlayerState* InPlayerState); // Function Solarland.SolarCharacterGASComponent.NotifyTalentState // (Final|Native|Protected) // @ game+0x20bb470
	void GrantTalentWithPlayerState(struct APlayerState* InPlayerState); // Function Solarland.SolarCharacterGASComponent.GrantTalentWithPlayerState // (Final|Native|Protected) // @ game+0x20bacb0
};

// Class Solarland.SingleCharacterModelBase
// Size: 0x30 (Inherited: 0x28)
struct USingleCharacterModelBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Solarland.SolarCharactersModelBase
// Size: 0x78 (Inherited: 0x28)
struct USolarCharactersModelBase : UObject {
	struct TMap<struct FString, struct USingleCharacterModelBase*> PlayersModel; // 0x28(0x50)
};

// Class Solarland.SolarCharacterSettings
// Size: 0x178 (Inherited: 0x38)
struct USolarCharacterSettings : UDeveloperSettings {
	struct TSoftObjectPtr<UCharacterGlobalConfig> CharacterGlobalConfig; // 0x38(0x28)
	struct TSoftObjectPtr<UCharacterGameplayTagsConfig> CharacterGameplayTagsConfig; // 0x60(0x28)
	struct TSoftObjectPtr<UMaterialChangePriorityTags> MaterialChangePriorityTags; // 0x88(0x28)
	struct TSoftObjectPtr<UVisibilityFlagTags> VisibilityFlagTags; // 0xb0(0x28)
	struct TSoftObjectPtr<UCharacterMontageTags> CharacterMontageTags; // 0xd8(0x28)
	struct TSoftObjectPtr<UDataTable> CharacterMontageMappingTable; // 0x100(0x28)
	struct TSoftObjectPtr<UDataTable> EmotionMontageMappingTable; // 0x128(0x28)
	struct TSoftObjectPtr<UCharacterBodyScaleConfigDataAsset> CharacterBodyScaleConfig; // 0x150(0x28)
};

// Class Solarland.SolarCharacterSettingsRuntime
// Size: 0x110 (Inherited: 0x30)
struct USolarCharacterSettingsRuntime : UWorldSubsystem {
	struct UCharacterGlobalConfig* CharacterGlobalConfigInstance; // 0x30(0x08)
	struct UCharacterGameplayTagsConfig* CharacterGameplayTagsConfigInstance; // 0x38(0x08)
	struct UMaterialChangePriorityTags* MaterialChangePriorityTagsInstance; // 0x40(0x08)
	struct UVisibilityFlagTags* VisibilityFlagTagsInstance; // 0x48(0x08)
	struct UCharacterMontageTags* CharacterMontageTagsInstance; // 0x50(0x08)
	struct UDataTable* CharacterMontageMappingDataTable; // 0x58(0x08)
	char pad_60[0x50]; // 0x60(0x50)
	struct UDataTable* EmotionMontageMappingDataTable; // 0xb0(0x08)
	char pad_B8[0x50]; // 0xb8(0x50)
	struct UCharacterBodyScaleConfigDataAsset* CharacterBodyScaleConfigInstance; // 0x108(0x08)
};

// Class Solarland.SolarSpringArmComponent
// Size: 0x400 (Inherited: 0x3a0)
struct USolarSpringArmComponent : USpringArmComponent {
	char pad_3A0[0x10]; // 0x3a0(0x10)
	float CameraLocationLagTime; // 0x3b0(0x04)
	bool HandleTargetOffsetAsRelativeValue; // 0x3b4(0x01)
	char pad_3B5[0x4b]; // 0x3b5(0x4b)

	struct USolarSpringArmComponent* GetSpringArmComponentFromActor(struct AActor* InActor); // Function Solarland.SolarSpringArmComponent.GetSpringArmComponentFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x21a7940
};

// Class Solarland.SolarCharacterSpringArmComponent
// Size: 0x420 (Inherited: 0x400)
struct USolarCharacterSpringArmComponent : USolarSpringArmComponent {
	struct USolarCharacterCameraComponent* Camera; // 0x3f8(0x08)
	struct ASolarCharacter* OwnerCharacter; // 0x400(0x08)
	char pad_410[0x10]; // 0x410(0x10)

	void UnregisterOverlappingObstacle(struct AActor* InObstacle); // Function Solarland.SolarCharacterSpringArmComponent.UnregisterOverlappingObstacle // (Final|Native|Public|BlueprintCallable) // @ game+0x20bffc0
	void RegisterOverlappingObstacle(struct AActor* InObstacle); // Function Solarland.SolarCharacterSpringArmComponent.RegisterOverlappingObstacle // (Final|Native|Public|BlueprintCallable) // @ game+0x20bff30
};

// Class Solarland.SolarCharacterUpgradeComponent
// Size: 0xd0 (Inherited: 0xb0)
struct USolarCharacterUpgradeComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct ASolarCharacter* Owner; // 0xb8(0x08)
	int32_t Experience; // 0xc0(0x04)
	int32_t Level; // 0xc4(0x04)
	int32_t CharacterId; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)

	void ServerExecuteGMLua(struct FString GMType, struct FString Param1, struct FString Param2); // Function Solarland.SolarCharacterUpgradeComponent.ServerExecuteGMLua // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ServerExecuteGM(struct FString GMType, struct FString Param1, struct FString Param2); // Function Solarland.SolarCharacterUpgradeComponent.ServerExecuteGM // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20c2030
	void PrepareConfigData(); // Function Solarland.SolarCharacterUpgradeComponent.PrepareConfigData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyLevelUp(int32_t OldLevel, int32_t NewLevel); // Function Solarland.SolarCharacterUpgradeComponent.NotifyLevelUp // (Final|Native|Public) // @ game+0x20c1f60
	void ClientOnLevelUpRpc(int32_t OldLevel, int32_t NewLevel); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnLevelUpRpc // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20c1d10
	void ClientOnLevelUpLua(int32_t OldLevel, int32_t NewLevel); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnLevelUpLua // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ClientOnAddNewExpLua(int32_t BehaviorType, int32_t AddExp); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnAddNewExpLua // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ClientOnAddNewExp_LuaCall(int32_t OldLevel, int32_t NewLevel); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnAddNewExp_LuaCall // (Final|Native|Public) // @ game+0x20c1c40
	void ClientOnAddNewExp(int32_t BehaviorType, int32_t AddExp); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnAddNewExp // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20c1b70
	void CalculateCharacterExp(int32_t EventType, float InValue); // Function Solarland.SolarCharacterUpgradeComponent.CalculateCharacterExp // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarPile
// Size: 0x550 (Inherited: 0x298)
struct ASolarPile : ASolarMapElementBase {
	char pad_298[0x18]; // 0x298(0x18)
	struct UStaticMeshComponent* NormalMesh; // 0x2b0(0x08)
	struct USphereComponent* CollisionComp; // 0x2b8(0x08)
	struct TArray<struct UActorComponent*> ExtraChargingVFXComps; // 0x2c0(0x10)
	struct FSpawnedActorHandle CachedActorHandle; // 0x2d0(0x04)
	char pad_2D4[0x18]; // 0x2d4(0x18)
	enum class EChargingChannel Channel; // 0x2ec(0x01)
	enum class ESolarPileType PileType; // 0x2ed(0x01)
	char pad_2EE[0x2]; // 0x2ee(0x02)
	int32_t Zone; // 0x2f0(0x04)
	float MaxEnergy; // 0x2f4(0x04)
	float PowerRecoveryCD; // 0x2f8(0x04)
	float PowerRecoveryFrequency; // 0x2fc(0x04)
	float PowerRecoveryQuantity; // 0x300(0x04)
	bool bEnable; // 0x304(0x01)
	bool bBroken; // 0x305(0x01)
	bool bCanRecover; // 0x306(0x01)
	bool bIsActivated; // 0x307(0x01)
	int32_t Level; // 0x308(0x04)
	bool bIsLosingEnergy; // 0x30c(0x01)
	char pad_30D[0x3]; // 0x30d(0x03)
	int32_t OwnerTeam; // 0x310(0x04)
	struct TWeakObjectPtr<struct ASolarCharacter> OwnerCharacter; // 0x314(0x08)
	char pad_31C[0x4]; // 0x31c(0x04)
	struct FChargingInfo defaultChargingInfo; // 0x320(0x30)
	struct TArray<struct FChargingInfo> ChargingInfoList; // 0x350(0x10)
	float CurrentEnergy; // 0x360(0x04)
	char pad_364[0x4]; // 0x364(0x04)
	float SphereRadius; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)
	struct FTimerHandle RecoveryHandle; // 0x370(0x08)
	char pad_378[0x8]; // 0x378(0x08)
	struct FTimerHandle ServerChargingTimerHandle; // 0x380(0x08)
	struct FTimerHandle ClientChargingTimerHandle; // 0x388(0x08)
	struct TArray<struct UParticleSystemComponent*> ChargeParticleEffects; // 0x390(0x10)
	struct UAkComponent* AkAudioComponent; // 0x3a0(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x3a8(0x08)
	char pad_3B0[0x2]; // 0x3b0(0x02)
	bool bEnableHealth; // 0x3b2(0x01)
	char pad_3B3[0x1]; // 0x3b3(0x01)
	float MaxHealth; // 0x3b4(0x04)
	float ReducedHealth; // 0x3b8(0x04)
	float CurrentHealth; // 0x3bc(0x04)
	float TweenTimeSpeed; // 0x3c0(0x04)
	float RestTweenTime; // 0x3c4(0x04)
	float TargetOpacity; // 0x3c8(0x04)
	float CurrentOpacity; // 0x3cc(0x04)
	float OpacityTweenTime; // 0x3d0(0x04)
	char pad_3D4[0x4]; // 0x3d4(0x04)
	struct UMaterialInstanceDynamic* DynamicMatChargingCircle; // 0x3d8(0x08)
	struct FChargingPilePreset ChargingPilePreset; // 0x3e0(0x150)
	struct UStaticMeshComponent* RangeRingMeshComp; // 0x530(0x08)
	struct UStaticMeshComponent* ChargeCircleMeshComp; // 0x538(0x08)
	bool bCharging; // 0x540(0x01)
	char pad_541[0xf]; // 0x541(0x0f)

	void ToggleExtraChargingVFX(bool Toggle); // Function Solarland.SolarPile.ToggleExtraChargingVFX // (Final|Native|Public|BlueprintCallable) // @ game+0x215d2f0
	void SetIsActivated(bool bActivated); // Function Solarland.SolarPile.SetIsActivated // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RemoveChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SolarPile.RemoveChargeParticle // (Final|Native|Protected|BlueprintCallable) // @ game+0x215d200
	void RemoveAllEffects(); // Function Solarland.SolarPile.RemoveAllEffects // (Final|Native|Protected|BlueprintCallable) // @ game+0x215d1e0
	void ReceivePileExpired(); // Function Solarland.SolarPile.ReceivePileExpired // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveEnergyChanged(); // Function Solarland.SolarPile.ReceiveEnergyChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveChargingPileInitialize(); // Function Solarland.SolarPile.ReceiveChargingPileInitialize // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveCharacterShowEffect(struct AActor* Other); // Function Solarland.SolarPile.ReceiveCharacterShowEffect // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveCharacterHideEffect(struct AActor* Other); // Function Solarland.SolarPile.ReceiveCharacterHideEffect // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void PlaySkillStartSound(); // Function Solarland.SolarPile.PlaySkillStartSound // (Native|Public|BlueprintCallable) // @ game+0x7dd5a0
	void PlaySkillEndSound(); // Function Solarland.SolarPile.PlaySkillEndSound // (Native|Public|BlueprintCallable) // @ game+0x1554aa0
	void PlayRecoveryAnim(bool bStart); // Function Solarland.SolarPile.PlayRecoveryAnim // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void PlayChargingAnimation(bool Reverse); // Function Solarland.SolarPile.PlayChargingAnimation // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnUntrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarPile.OnUntrigger // (Final|Native|Protected) // @ game+0x215d080
	void OnTrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarPile.OnTrigger // (Final|Native|Protected|HasOutParms) // @ game+0x215ce60
	void OnRep_IsLosingEnergyChanged(); // Function Solarland.SolarPile.OnRep_IsLosingEnergyChanged // (Final|Native|Public) // @ game+0x215ce40
	void OnRep_Energy(); // Function Solarland.SolarPile.OnRep_Energy // (Final|Native|Public) // @ game+0x215ce20
	void OnRep_Enable(); // Function Solarland.SolarPile.OnRep_Enable // (Final|Native|Public) // @ game+0x215ce00
	void OnRep_CurrentHealth(); // Function Solarland.SolarPile.OnRep_CurrentHealth // (Final|Native|Public) // @ game+0x215cde0
	void OnRep_ChargingInfoListChanged(); // Function Solarland.SolarPile.OnRep_ChargingInfoListChanged // (Final|Native|Public) // @ game+0x215cdc0
	void OnRep_CanRecover(); // Function Solarland.SolarPile.OnRep_CanRecover // (Final|Native|Public) // @ game+0x215cda0
	void OnRep_Broken(); // Function Solarland.SolarPile.OnRep_Broken // (Final|Native|Public) // @ game+0x215cd80
	void OnRefreshRangeRing(); // Function Solarland.SolarPile.OnRefreshRangeRing // (Final|Native|Public|BlueprintCallable) // @ game+0x215cd60
	void OnRefreshChargeCircle(bool InCharging); // Function Solarland.SolarPile.OnRefreshChargeCircle // (Final|Native|Public|BlueprintCallable) // @ game+0x215ccd0
	void OnCharacterBatteryIdChanged(struct ASolarCharacter* InCharacter, float Frequency, float Quantity); // Function Solarland.SolarPile.OnCharacterBatteryIdChanged // (Final|Native|Public) // @ game+0x215cbc0
	bool IsCharacterInRange(struct ASolarCharacter* InCharacter); // Function Solarland.SolarPile.IsCharacterInRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x215cac0
	bool IsAnyCharacterInRange(); // Function Solarland.SolarPile.IsAnyCharacterInRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x215ca90
	struct FChargingInfo GetChargingInfoByCharacter(struct ASolarCharacter* Character); // Function Solarland.SolarPile.GetChargingInfoByCharacter // (Final|Native|Public) // @ game+0x215c0a0
	void GameStatisticsChargingPile(struct FChargingInfo& ChargingInfo, int32_t pileLevel, struct FVector Location, float energyUse); // Function Solarland.SolarPile.GameStatisticsChargingPile // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x215bdf0
	void CreateChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SolarPile.CreateChargeParticle // (Final|Native|Protected|BlueprintCallable) // @ game+0x215bd40
	void ChangeColor(); // Function Solarland.SolarPile.ChangeColor // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool CanWork(); // Function Solarland.SolarPile.CanWork // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x215bce0
};

// Class Solarland.SolarChargingPile
// Size: 0x550 (Inherited: 0x550)
struct ASolarChargingPile : ASolarPile {
};

// Class Solarland.PSOGatherVolume
// Size: 0x230 (Inherited: 0x228)
struct APSOGatherVolume : AActor {
	struct UBoxComponent* BoxComponent; // 0x228(0x08)
};

// Class Solarland.SolarCheatManager
// Size: 0x4a0 (Inherited: 0x78)
struct USolarCheatManager : UCheatManager {
	char pad_78[0x360]; // 0x78(0x360)
	struct FSoftObjectPath VehicleSpawnerMarkWidgetPath; // 0x3d8(0x18)
	struct TArray<struct UMapMarkBase*> VehicleSpawnerMarks; // 0x3f0(0x10)
	struct FSoftObjectPath PSOGatherCubeBPAssetPath; // 0x400(0x18)
	float PSOGatherCubeDistanceToCamera; // 0x418(0x04)
	char pad_41C[0x4]; // 0x41c(0x04)
	struct FString PSOGatherBPHuntAssetPath; // 0x420(0x10)
	struct FString PSOGatherBPTutorialAssetPath; // 0x430(0x10)
	char pad_440[0x48]; // 0x440(0x48)
	struct FSoftObjectPath AirShipBPAssetPath; // 0x488(0x18)

	void StopEffectScreen(int32_t InHandle); // Function Solarland.SolarCheatManager.StopEffectScreen // (Final|Exec|Native|Public) // @ game+0x20c5500
	void StopEffectActor(int32_t InHandle); // Function Solarland.SolarCheatManager.StopEffectActor // (Final|Exec|Native|Public) // @ game+0x20c5470
	void StartPSOGatheringiOSTutorial(); // Function Solarland.SolarCheatManager.StartPSOGatheringiOSTutorial // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void StartPSOGatheringiOSHunt(); // Function Solarland.SolarCheatManager.StartPSOGatheringiOSHunt // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void StartPSOGathering(); // Function Solarland.SolarCheatManager.StartPSOGathering // (Final|Exec|Native|Public) // @ game+0x20c5450
	void StartEffectScreen(struct FString RowName); // Function Solarland.SolarCheatManager.StartEffectScreen // (Final|Exec|Native|Public) // @ game+0x20c53b0
	void StartEffectActor(struct FString RowName); // Function Solarland.SolarCheatManager.StartEffectActor // (Final|Exec|Native|Public) // @ game+0x20c5310
	void SpawnVehicleWithVehicleID(int32_t VehicleID); // Function Solarland.SolarCheatManager.SpawnVehicleWithVehicleID // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c5280
	void SpawnVehicle(int32_t SpawnID); // Function Solarland.SolarCheatManager.SpawnVehicle // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c51f0
	void SpawnTreasureBox(int32_t TreasureBoxID); // Function Solarland.SolarCheatManager.SpawnTreasureBox // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c5160
	void SpawnSolarRadar(struct FString BpPath); // Function Solarland.SolarCheatManager.SpawnSolarRadar // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c50c0
	void SpawnPSOGatherCube(); // Function Solarland.SolarCheatManager.SpawnPSOGatherCube // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c50a0
	void SpawnOutcomeContent(int32_t OutcomeID); // Function Solarland.SolarCheatManager.SpawnOutcomeContent // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c5010
	void SpawnChargingPile(struct FString BpPath); // Function Solarland.SolarCheatManager.SpawnChargingPile // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c4f70
	void SpawnAirdrop(int32_t AirdropID); // Function Solarland.SolarCheatManager.SpawnAirdrop // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c4ee0
	void SolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed); // Function Solarland.SolarCheatManager.SolarWeaponSpreadForWeapon // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c4ce0
	void SolarWeaponReload(int32_t PrimaryAmmoCap, int32_t SecondaryAmmoCap); // Function Solarland.SolarCheatManager.SolarWeaponReload // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c4c10
	void SolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod); // Function Solarland.SolarCheatManager.SolarWeaponOverload // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c4ab0
	void SolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead); // Function Solarland.SolarCheatManager.SolarWeaponFiringMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c48d0
	void SolarTestReportAbnormalPlayerWeapon(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue, struct FString InAttackLocation, struct FString InHitLocation, struct FString InHitBoneScale, struct FString InWeaponBlueprintName); // Function Solarland.SolarCheatManager.SolarTestReportAbnormalPlayerWeapon // (Final|Exec|Native|Public) // @ game+0x20c4620
	void SolarTestReportAbnormalPlayerVehicle(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue, struct FString InVehiclePreviousLocation, struct FString InVehiclePresentLocation, struct FString InVehicleBlueprintName); // Function Solarland.SolarCheatManager.SolarTestReportAbnormalPlayerVehicle // (Final|Exec|Native|Public) // @ game+0x20c43c0
	void SolarTestReportAbnormalPlayer(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue); // Function Solarland.SolarCheatManager.SolarTestReportAbnormalPlayer // (Final|Exec|Native|Public) // @ game+0x20c4270
	void SolarTeleport(float DestLocationX, float DestLocationY, float DestLocationZ); // Function Solarland.SolarCheatManager.SolarTeleport // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c4150
	void SolarServerCmd(struct FString Cmd); // Function Solarland.SolarCheatManager.SolarServerCmd // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c40b0
	void SolarGMSetPlayerValueInternal(struct FString InType, struct FString InValue); // Function Solarland.SolarCheatManager.SolarGMSetPlayerValueInternal // (Final|Native|Public) // @ game+0x20c2e10
	void SolarGM_WeaponShowCurrentInfo(); // Function Solarland.SolarCheatManager.SolarGM_WeaponShowCurrentInfo // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_ValidateAirline(float InBufferX, float InBufferY, float InBufferZ); // Function Solarland.SolarCheatManager.SolarGM_ValidateAirline // (Final|Exec|Native|Public) // @ game+0x20c3f90
	void SolarGM_UnforbidCharacterUniqueSkillCD(); // Function Solarland.SolarCheatManager.SolarGM_UnforbidCharacterUniqueSkillCD // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_TestEnsureMsgWithBP(); // Function Solarland.SolarCheatManager.SolarGM_TestEnsureMsgWithBP // (Final|Exec|Native|Public|Const) // @ game+0x8e9ae0
	void SolarGM_TestEnsureMsg(); // Function Solarland.SolarCheatManager.SolarGM_TestEnsureMsg // (Final|Exec|Native|Public|Const) // @ game+0x8e9ae0
	void SolarGM_TestCrashWithBP(); // Function Solarland.SolarCheatManager.SolarGM_TestCrashWithBP // (Final|Exec|Native|Public|Const) // @ game+0x8e9ae0
	void SolarGM_TestCrash(); // Function Solarland.SolarCheatManager.SolarGM_TestCrash // (Final|Exec|Native|Public|Const) // @ game+0x8e9ae0
	void SolarGM_TeleportToBotAI(uint32_t CtrlIndex); // Function Solarland.SolarCheatManager.SolarGM_TeleportToBotAI // (Final|Exec|Native|Public) // @ game+0x20c3f00
	void SolarGM_StopBotAIBehaviorTree(bool bStop); // Function Solarland.SolarCheatManager.SolarGM_StopBotAIBehaviorTree // (Final|Exec|Native|Public) // @ game+0x20c3e70
	void SolarGM_SpawnBotAIAtCrosshairByNum(int32_t Num); // Function Solarland.SolarCheatManager.SolarGM_SpawnBotAIAtCrosshairByNum // (Final|Exec|Native|Public) // @ game+0x20c3de0
	void SolarGM_ShowEmojiBubble(int32_t EmojiID); // Function Solarland.SolarCheatManager.SolarGM_ShowEmojiBubble // (Final|Exec|Native|Public) // @ game+0x20c3d50
	void SolarGM_ShowAspectRatio(float InDuration); // Function Solarland.SolarCheatManager.SolarGM_ShowAspectRatio // (Final|Exec|Native|Public) // @ game+0xb28b80
	void SolarGM_SetWeaponAdditionalBaseDamage(float AdditionalBaseDamage, bool bSelfOnly); // Function Solarland.SolarCheatManager.SolarGM_SetWeaponAdditionalBaseDamage // (Final|Exec|Native|Public) // @ game+0x20c3c70
	void SolarGM_SetPlayerValue(struct FString InType, struct FString InValue); // Function Solarland.SolarCheatManager.SolarGM_SetPlayerValue // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c3b70
	void SolarGM_SetPlayerLevel(int32_t InLv); // Function Solarland.SolarCheatManager.SolarGM_SetPlayerLevel // (Final|Exec|Native|Public) // @ game+0x20c3ae0
	void SolarGM_SetEMPForceFieldTestRange(float InRadius, float InHeight); // Function Solarland.SolarCheatManager.SolarGM_SetEMPForceFieldTestRange // (Final|Exec|Native|Public) // @ game+0x20c3a10
	void SolarGM_SetEMPForceFieldCoreSize(float InX, float InY, float InZ); // Function Solarland.SolarCheatManager.SolarGM_SetEMPForceFieldCoreSize // (Final|Exec|Native|Public) // @ game+0x20c35a0
	void SolarGM_SetCharacterRoleAbilitySkillCDDuration(float InCD); // Function Solarland.SolarCheatManager.SolarGM_SetCharacterRoleAbilitySkillCDDuration // (Final|Exec|Native|Public) // @ game+0xb28b80
	void SolarGM_SetAssistAimTargetVelocityFollowMaxSpeed(float MaxHorizontalSpeed, float MaxVerticalSpeed); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetVelocityFollowMaxSpeed // (Final|Exec|Native|Public) // @ game+0x20c3a10
	void SolarGM_SetAssistAimTargetConfig_TargetVelocityFollowTriggerExtent(struct FString BodyType, struct FString status, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_TargetVelocityFollowTriggerExtent // (Final|Exec|Native|Public) // @ game+0x20c3890
	void SolarGM_SetAssistAimTargetConfig_LockAimingExtent(struct FString BodyType, struct FString status, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_LockAimingExtent // (Final|Exec|Native|Public) // @ game+0x20c3890
	void SolarGM_SetAssistAimTargetConfig_GlobalSensitivityScaleTriggerExtent(struct FString BodyType, struct FString status, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_GlobalSensitivityScaleTriggerExtent // (Final|Exec|Native|Public) // @ game+0x20c3890
	void SolarGM_SetAssistAimTargetConfig_BaseFollowTriggerExtent(struct FString BodyType, struct FString status, struct FString CharacterTagStr, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_BaseFollowTriggerExtent // (Final|Exec|Native|Public) // @ game+0x20c36c0
	void SolarGM_SetAssistAimTargetConfig_BaseFollowStopExtent(struct FString BodyType, struct FString status, struct FString CharacterTagStr, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_BaseFollowStopExtent // (Final|Exec|Native|Public) // @ game+0x20c36c0
	void SolarGM_SetAssistAimCurveScales(float TargetVelocityFollowHorizontalRatioCurveScale, float TargetVelocityFollowVerticalRatioCurveScale, float GlobalSensitivityScaleCurveScale); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimCurveScales // (Final|Exec|Native|Public) // @ game+0x20c35a0
	void SolarGM_SetAssistAimBaseFollowSpeed(struct FString StatusTagStr, float HorizontalSpeed, float VerticalSpeed); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimBaseFollowSpeed // (Final|Exec|Native|Public) // @ game+0x20c3470
	void SolarGM_RestoreRecommend(); // Function Solarland.SolarCheatManager.SolarGM_RestoreRecommend // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_ResetCharacterUniqueSkillCD(); // Function Solarland.SolarCheatManager.SolarGM_ResetCharacterUniqueSkillCD // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_PlayerUpgrade(int32_t InLv); // Function Solarland.SolarCheatManager.SolarGM_PlayerUpgrade // (Final|Exec|Native|Public) // @ game+0x20c33e0
	void SolarGM_MarkVehicleSpawnLocationInMap(int32_t Index); // Function Solarland.SolarCheatManager.SolarGM_MarkVehicleSpawnLocationInMap // (Final|Exec|Native|Public) // @ game+0x20c3350
	void SolarGM_KillAllAI(bool KillBot); // Function Solarland.SolarCheatManager.SolarGM_KillAllAI // (Final|Exec|Native|Public) // @ game+0x20c32c0
	void SolarGM_GainExperience(int32_t InExp); // Function Solarland.SolarCheatManager.SolarGM_GainExperience // (Final|Exec|Native|Public) // @ game+0x20c3230
	void SolarGM_ClearCharacterUniqueSkillCD(); // Function Solarland.SolarCheatManager.SolarGM_ClearCharacterUniqueSkillCD // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_CleanUpShootingTarget(); // Function Solarland.SolarCheatManager.SolarGM_CleanUpShootingTarget // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_CharacterUpgradeBattleUpgradeEffectLevel(int32_t UpgradeTo); // Function Solarland.SolarCheatManager.SolarGM_CharacterUpgradeBattleUpgradeEffectLevel // (Final|Exec|Native|Public) // @ game+0x15936f0
	void SolarGM_CharacterSuicide(); // Function Solarland.SolarCheatManager.SolarGM_CharacterSuicide // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_CharacterSelectBattleUpgradeEffect(int32_t Level, int32_t SelectedIndex); // Function Solarland.SolarCheatManager.SolarGM_CharacterSelectBattleUpgradeEffect // (Final|Exec|Native|Public) // @ game+0x20c3160
	void SolarGM_CharacterEnableDebugAutoMove(bool bEnabled, float SwitchInterval); // Function Solarland.SolarCheatManager.SolarGM_CharacterEnableDebugAutoMove // (Final|Exec|Native|Public) // @ game+0x20c3090
	void SolarGM_CharacterDamageSelf(int32_t InDamage); // Function Solarland.SolarCheatManager.SolarGM_CharacterDamageSelf // (Final|Exec|Native|Public) // @ game+0x15936f0
	void SolarGM_CharacterChangeTailFlameId(int32_t InTailFlameId); // Function Solarland.SolarCheatManager.SolarGM_CharacterChangeTailFlameId // (Final|Exec|Native|Public) // @ game+0x15936f0
	void SolarGM_CharacterChangeBagId(int32_t InBagId); // Function Solarland.SolarCheatManager.SolarGM_CharacterChangeBagId // (Final|Exec|Native|Public) // @ game+0x15936f0
	void SolarGM_CallAirdropByAirShipHere(); // Function Solarland.SolarCheatManager.SolarGM_CallAirdropByAirShipHere // (Final|Exec|Native|Public) // @ game+0x20c3070
	void SolarGM_CallAirdropByAirShip(float Loc_X, float Loc_Y); // Function Solarland.SolarCheatManager.SolarGM_CallAirdropByAirShip // (Final|Exec|Native|Public) // @ game+0x20c2fa0
	void SolarGM_ApplyVehicleSkin(int32_t SkinId); // Function Solarland.SolarCheatManager.SolarGM_ApplyVehicleSkin // (Final|Exec|Native|Public) // @ game+0x20c2f10
	void SolarAsyncLoad(struct FString ResPath); // Function Solarland.SolarCheatManager.SolarAsyncLoad // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c2d70
	void SolarAmmoSpreadPerBullet(int32_t AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed); // Function Solarland.SolarCheatManager.SolarAmmoSpreadPerBullet // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c2b50
	void SolarAmmoRangeSpeedDamage(int32_t AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload); // Function Solarland.SolarCheatManager.SolarAmmoRangeSpeedDamage // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c28a0
	void SolarAmmoFiring(int32_t AmmoIndex, int32_t FireCostType, int32_t FireCostPerAttack, int32_t FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval); // Function Solarland.SolarCheatManager.SolarAmmoFiring // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c2640
	void SolarAmmoBoltAndMag(int32_t AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag); // Function Solarland.SolarCheatManager.SolarAmmoBoltAndMag // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c24a0
	void SolarAmmoBasicMovement(int32_t AmmoIndex, int32_t TimedExplode, int32_t BounceTimes, float LifeTime, float BaseReloadTime, int32_t TrajectoryType, float CustomValue); // Function Solarland.SolarCheatManager.SolarAmmoBasicMovement // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c2280
	void SetGameplayVibrateIntensity(struct FString Category, struct FString Intensity); // Function Solarland.SolarCheatManager.SetGameplayVibrateIntensity // (Final|Exec|Native|Public) // @ game+0x20c2180
	void ExecuteGMCommandsInCustomMode(struct FString CommandParameters, struct FString ArgsStr); // Function Solarland.SolarCheatManager.ExecuteGMCommandsInCustomMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20c1de0
	void BookmarkEnd(struct FString Message); // Function Solarland.SolarCheatManager.BookmarkEnd // (Final|Exec|Native|Public) // @ game+0x20c1ad0
	void BookmarkBegin(struct FString Message); // Function Solarland.SolarCheatManager.BookmarkBegin // (Final|Exec|Native|Public) // @ game+0x20c1a30
};

// Class Solarland.SolarCheckBox
// Size: 0x858 (Inherited: 0x830)
struct USolarCheckBox : UCheckBox {
	char pad_830[0x10]; // 0x830(0x10)
	struct UWidget* OnGroup; // 0x840(0x08)
	struct UWidget* OffGroup; // 0x848(0x08)
	enum class ESlateVisibility CheckedGroupVisibility; // 0x850(0x01)
	enum class ESlateVisibility UncheckedGroupVisibility; // 0x851(0x01)
	char pad_852[0x6]; // 0x852(0x06)

	void OnStateChanged(bool bIsChecked); // Function Solarland.SolarCheckBox.OnStateChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x20c9390
	void ManualSetIsChecked(bool InIsChecked); // Function Solarland.SolarCheckBox.ManualSetIsChecked // (Final|Native|Public|BlueprintCallable) // @ game+0x20c8fb0
};

// Class Solarland.SolarCheckButton
// Size: 0x4c8 (Inherited: 0x498)
struct USolarCheckButton : UButton {
	char pad_498[0x8]; // 0x498(0x08)
	struct FMulticastInlineDelegate OnClickedEvent; // 0x4a0(0x10)
	char pad_4B0[0x8]; // 0x4b0(0x08)
	struct UWidget* OnGroup; // 0x4b8(0x08)
	struct UWidget* OffGroup; // 0x4c0(0x08)

	void SetButtonIndex(int32_t InButtonIndex); // Function Solarland.SolarCheckButton.SetButtonIndex // (Native|Public) // @ game+0x20c9c20
	void OnStateChanged(bool bIsChecked); // Function Solarland.SolarCheckButton.OnStateChanged // (Native|Protected|BlueprintCallable) // @ game+0x20c9420
	struct FMulticastInlineDelegate GetOnClickedEvent(); // Function Solarland.SolarCheckButton.GetOnClickedEvent // (Native|Public) // @ game+0x20c8dc0
	int32_t GetButtonIndex(); // Function Solarland.SolarCheckButton.GetButtonIndex // (Native|Public|Const) // @ game+0x20c8a70
};

// Class Solarland.SolarCheckButtonGroup
// Size: 0x190 (Inherited: 0x160)
struct USolarCheckButtonGroup : UNamedSlot {
	struct FMulticastInlineDelegate OnStateChangedEvent; // 0x160(0x10)
	bool IsChildrenAutoSetState; // 0x170(0x01)
	bool bDelayStateChanged; // 0x171(0x01)
	char pad_172[0x6]; // 0x172(0x06)
	struct UPanelWidget* GroupRoot; // 0x178(0x08)
	char pad_180[0x10]; // 0x180(0x10)

	void SetSelectIndex(int32_t Index); // Function Solarland.SolarCheckButtonGroup.SetSelectIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x20ca0c0
	void SetChildrenAutoSetState(bool InEnable); // Function Solarland.SolarCheckButtonGroup.SetChildrenAutoSetState // (Final|Native|Public|BlueprintCallable) // @ game+0x20c9d40
	void RevertLastCheck(); // Function Solarland.SolarCheckButtonGroup.RevertLastCheck // (Final|Native|Public|BlueprintCallable) // @ game+0x20c9c00
	void OnStateChanged(int32_t ButtonIndex); // Function Solarland.SolarCheckButtonGroup.OnStateChanged // (Final|Native|Public) // @ game+0x20c94b0
	void OnCheckButtonGroupStateChangedEvent__DelegateSignature(int32_t InLastButtonIndex); // DelegateFunction Solarland.SolarCheckButtonGroup.OnCheckButtonGroupStateChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
};

// Class Solarland.SolarCheckButtonInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarCheckButtonInterface : UInterface {

	void OnStateChange(int32_t InIndex); // Function Solarland.SolarCheckButtonInterface.OnStateChange // (Native|Public) // @ game+0x20c9300
	void ManualChangeState(bool bIsChecked); // Function Solarland.SolarCheckButtonInterface.ManualChangeState // (Native|Public) // @ game+0x20c8f20
};

// Class Solarland.SolarCheckButtonWidget
// Size: 0x368 (Inherited: 0x348)
struct USolarCheckButtonWidget : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct FMulticastInlineDelegate OnClickedEvent; // 0x350(0x10)
	char pad_360[0x8]; // 0x360(0x08)

	void SetButtonIndex(int32_t InButtonIndex); // Function Solarland.SolarCheckButtonWidget.SetButtonIndex // (Native|Public) // @ game+0x20c9cb0
	void PostClickedEvent(); // Function Solarland.SolarCheckButtonWidget.PostClickedEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x20c9a40
	void OnStateChanged(bool bIsChecked); // Function Solarland.SolarCheckButtonWidget.OnStateChanged // (Native|Protected) // @ game+0x20c9540
	void OnSelected(bool bSelected); // Function Solarland.SolarCheckButtonWidget.OnSelected // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct FMulticastInlineDelegate GetOnClickedEvent(); // Function Solarland.SolarCheckButtonWidget.GetOnClickedEvent // (Native|Public) // @ game+0x20c8e00
	int32_t GetButtonIndex(); // Function Solarland.SolarCheckButtonWidget.GetButtonIndex // (Native|Public|Const) // @ game+0x20c8ab0
};

// Class Solarland.SolarChunkAssignData
// Size: 0x90 (Inherited: 0x30)
struct USolarChunkAssignData : UDataAsset {
	struct TArray<struct FDirectoryPath> DirectoriesToNeverClean; // 0x30(0x10)
	struct TMap<struct FString, struct FChunkAssignRule> Rules; // 0x40(0x50)
};

// Class Solarland.SolarSafeArea
// Size: 0x468 (Inherited: 0x280)
struct ASolarSafeArea : ASCMMapElementBase {
	char pad_280[0x4]; // 0x280(0x04)
	int32_t CurrentIndex; // 0x284(0x04)
	float TargetTime; // 0x288(0x04)
	float BeginShrinkTime; // 0x28c(0x04)
	float DamageValue; // 0x290(0x04)
	struct FVector BeginLocation; // 0x294(0x0c)
	float BeginScale; // 0x2a0(0x04)
	enum class ESafeAreaStatus AreaStatus; // 0x2a4(0x01)
	char pad_2A5[0x10]; // 0x2a5(0x10)
	enum class EActorInSafeAreaStatus LocalPlayerCameraInSafeAreaState; // 0x2b5(0x01)
	enum class EActorInSafeAreaStatus LocalViewFocusedCharacterInSafeAreaState; // 0x2b6(0x01)
	char pad_2B7[0x51]; // 0x2b7(0x51)
	bool bCanCausingDamage; // 0x308(0x01)
	char pad_309[0x3]; // 0x309(0x03)
	float FirstDamageDelay; // 0x30c(0x04)
	float DamageInterval; // 0x310(0x04)
	char pad_314[0x4]; // 0x314(0x04)
	struct FString LeaveSafeAreaSoundName; // 0x318(0x10)
	struct FString EnterSafeAreaSoundName; // 0x328(0x10)
	struct FString InPoisonPerSecSoundName; // 0x338(0x10)
	float InPoisonSoundSecond; // 0x348(0x04)
	int32_t WarningNotificationIndex; // 0x34c(0x04)
	struct TMap<int32_t, int32_t> NoticeDataMap; // 0x350(0x50)
	struct TMap<int32_t, struct FString> SoundEventNameDataMap; // 0x3a0(0x50)
	struct TMap<int32_t, int32_t> QuickVoiceDataMap; // 0x3f0(0x50)
	int32_t ShrinkEndNotificationIndex; // 0x440(0x04)
	int32_t ShrinkEndNoticeId; // 0x444(0x04)
	struct FString ShrinkEndSoundEventName; // 0x448(0x10)
	struct ASolarPlayerController* LocalController; // 0x458(0x08)
	char pad_460[0x8]; // 0x460(0x08)

	void StartShrink(); // Function Solarland.SolarSafeArea.StartShrink // (Native|Protected|BlueprintCallable) // @ game+0x1555c20
	void ShowPoisonPerSecond(); // Function Solarland.SolarSafeArea.ShowPoisonPerSecond // (BlueprintCosmetic|Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1555e80
	void ShowPoisonEffect(bool bShow); // Function Solarland.SolarSafeArea.ShowPoisonEffect // (BlueprintCosmetic|Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2194df0
	void ShowEffectInside(bool bInside); // Function Solarland.SolarSafeArea.ShowEffectInside // (BlueprintCosmetic|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void Resume(); // Function Solarland.SolarSafeArea.Resume // (Exec|Native|Public) // @ game+0x80e1d0
	void ReceiveShrinkEnd(); // Function Solarland.SolarSafeArea.ReceiveShrinkEnd // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveActorLeaveSafeAreaCircle(struct AActor* Actor); // Function Solarland.SolarSafeArea.ReceiveActorLeaveSafeAreaCircle // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveActorLeavePoisonCircle(struct AActor* Actor); // Function Solarland.SolarSafeArea.ReceiveActorLeavePoisonCircle // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveActorEnterSafeAreaCircle(struct AActor* Actor); // Function Solarland.SolarSafeArea.ReceiveActorEnterSafeAreaCircle // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveActorEnterPoisonCircle(struct AActor* Actor); // Function Solarland.SolarSafeArea.ReceiveActorEnterPoisonCircle // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void Pause(); // Function Solarland.SolarSafeArea.Pause // (Exec|Native|Public|BlueprintCallable) // @ game+0x80de90
	void OnRep_CurrentIndexChange(); // Function Solarland.SolarSafeArea.OnRep_CurrentIndexChange // (Final|Native|Protected) // @ game+0x2194130
	void LocalPlayerCameraLeavePoisonCircle(); // Function Solarland.SolarSafeArea.LocalPlayerCameraLeavePoisonCircle // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void LocalPlayerCameraEnterPoisonCircle(); // Function Solarland.SolarSafeArea.LocalPlayerCameraEnterPoisonCircle // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	bool IsPause(); // Function Solarland.SolarSafeArea.IsPause // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21940e0
	bool IsLocationInSafeArea(struct FVector& Pos); // Function Solarland.SolarSafeArea.IsLocationInSafeArea // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2194040
	bool IsLocationInPoisonCircle(struct FVector& InLocation); // Function Solarland.SolarSafeArea.IsLocationInPoisonCircle // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2193fa0
	bool IsInSafeArea(struct AActor* Actor); // Function Solarland.SolarSafeArea.IsInSafeArea // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2193f00
	void GMStartShrinkArea(); // Function Solarland.SolarSafeArea.GMStartShrinkArea // (Final|Exec|Native|Public) // @ game+0x2193460
	enum class ESafeAreaStatus GetSafeAreaStatus(); // Function Solarland.SolarSafeArea.GetSafeAreaStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2193d70
	struct FVector GetNextAreaLocation(); // Function Solarland.SolarSafeArea.GetNextAreaLocation // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x2193d30
	float GetCurrentDamage(); // Function Solarland.SolarSafeArea.GetCurrentDamage // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2193520
};

// Class Solarland.SolarCircleSafeArea
// Size: 0x4c8 (Inherited: 0x468)
struct ASolarCircleSafeArea : ASolarSafeArea {
	struct TMap<float, struct UCurveFloat*> MiniMapScaleMap; // 0x468(0x50)
	struct TArray<struct FCircleSafeAreaInfo> SafeAreaConfigArr; // 0x4b8(0x10)

	void SetNextSafeArea(struct FCircleSafeAreaInfo& AreaInfo); // Function Solarland.SolarCircleSafeArea.SetNextSafeArea // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20ca030
	void Init(struct FVector& InSafeAreaCenterPos, float InPoisonCircleRadius); // Function Solarland.SolarCircleSafeArea.Init // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20c8e40
	float GetNextSafeAreaRadius(); // Function Solarland.SolarCircleSafeArea.GetNextSafeAreaRadius // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x20c8d80
	struct UCurveFloat* GetMiniMapFOVCurveByRadius(float InRadius); // Function Solarland.SolarCircleSafeArea.GetMiniMapFOVCurveByRadius // (Final|Native|Public) // @ game+0x20c8cf0
	float GetCurrentSafeAreaRadius(); // Function Solarland.SolarCircleSafeArea.GetCurrentSafeAreaRadius // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20c8af0
};

// Class Solarland.SolarCityName
// Size: 0x300 (Inherited: 0x228)
struct ASolarCityName : AActor {
	struct USolarStrongholdNamesConfig* NameConfigCN; // 0x228(0x08)
	struct USolarStrongholdNamesConfig* NameConfigEN; // 0x230(0x08)
	struct UTexture* NameTextureCN; // 0x238(0x08)
	struct UTexture* NameTextureEN; // 0x240(0x08)
	struct UMaterialInterface* NameMaterial; // 0x248(0x08)
	struct FString PointName; // 0x250(0x10)
	struct UMaterialInterface* TextMaterial; // 0x260(0x08)
	struct FSoftObjectPath FontPath; // 0x268(0x18)
	float BaseScale; // 0x280(0x04)
	float HightLimit; // 0x284(0x04)
	float MinimumDistance; // 0x288(0x04)
	int32_t LocTextID; // 0x28c(0x04)
	bool bCapitalsLock; // 0x290(0x01)
	char pad_291[0x3]; // 0x291(0x03)
	float GradientFadeTime; // 0x294(0x04)
	enum class ESolarSupportLanguages PreviewLang; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct FSoftObjectPath PreviewFontPath; // 0x2a0(0x18)
	char pad_2B8[0x8]; // 0x2b8(0x08)
	struct UMaterialInstanceDynamic* MaterialDynamic; // 0x2c0(0x08)
	struct UMaterialInstanceDynamic* TextMaterialDynamic; // 0x2c8(0x08)
	char pad_2D0[0x30]; // 0x2d0(0x30)

	void SetSolarCityNameTickAndShow(enum class EReplayCameraMode OldMode, enum class EReplayCameraMode CurMode); // Function Solarland.SolarCityName.SetSolarCityNameTickAndShow // (Final|Native|Public|BlueprintCallable) // @ game+0x20ca1e0
	void SetSolarCityNameTick(bool bNeedTick); // Function Solarland.SolarCityName.SetSolarCityNameTick // (Final|Native|Public|BlueprintCallable) // @ game+0x20ca150
	void OnCharacterOnRep(); // Function Solarland.SolarCityName.OnCharacterOnRep // (Final|Native|Protected) // @ game+0x20c9110
	struct TArray<struct FString> GetLocalizationCityNamesWithAllLanguages(); // Function Solarland.SolarCityName.GetLocalizationCityNamesWithAllLanguages // (Final|Native|Protected|BlueprintCallable) // @ game+0x20c8c10
	struct FString GetLocalizationCityName(bool bGetNameWithLang); // Function Solarland.SolarCityName.GetLocalizationCityName // (Final|Native|Protected|BlueprintCallable) // @ game+0x20c8b30
};

// Class Solarland.SolarCombatRegenerationInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarCombatRegenerationInterface : UInterface {
};

// Class Solarland.SolarCommonTextBlock
// Size: 0x368 (Inherited: 0x320)
struct USolarCommonTextBlock : UCommonTextBlock {
	bool bEnableLocText; // 0x320(0x01)
	char pad_321[0x3]; // 0x321(0x03)
	int32_t LocTextID; // 0x324(0x04)
	enum class ESolarSupportLanguages PreviewLang; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)
	struct FSlateFontSizeForLang SpecialLangFont; // 0x330(0x18)
	char pad_348[0x20]; // 0x348(0x20)

	void SetLocTextID(int32_t InLocTextID); // Function Solarland.SolarCommonTextBlock.SetLocTextID // (Native|Public|BlueprintCallable) // @ game+0xba5d70
	void SetLocLangTextData(struct FText InText, bool InEnableLocText, int32_t InLocTextID, enum class ESolarSupportLanguages InPreviewLang, struct FSlateFontSizeForLang InSlateFontSizeForLang); // Function Solarland.SolarCommonTextBlock.SetLocLangTextData // (Native|Public|BlueprintCallable) // @ game+0x20c9dd0
};

// Class Solarland.SolarComponentKeyWidget
// Size: 0x2a0 (Inherited: 0x260)
struct USolarComponentKeyWidget : UUserWidget {
	struct FString ActionName; // 0x260(0x10)
	struct FString KeyBoardText; // 0x270(0x10)
	struct TArray<struct FString> KeyBoardTextArray; // 0x280(0x10)
	struct FMulticastInlineDelegate UpdateKeyboardMappingDelegate; // 0x290(0x10)

	void UpdateKeyboardMappingInternal(struct FString ModifyActionName); // Function Solarland.SolarComponentKeyWidget.UpdateKeyboardMappingInternal // (Final|Native|Public|BlueprintCallable) // @ game+0x20a3480
	void OnUpdateKeyboardMapping(struct TSet<struct FString>& ActionNames); // Function Solarland.SolarComponentKeyWidget.OnUpdateKeyboardMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20c9720
};

// Class Solarland.ControllerRelevancyInterface
// Size: 0x28 (Inherited: 0x28)
struct UControllerRelevancyInterface : UInterface {
};

// Class Solarland.SolarControllerRelevancySubsystem
// Size: 0x190 (Inherited: 0x30)
struct USolarControllerRelevancySubsystem : UWorldSubsystem {
	char pad_30[0x160]; // 0x30(0x160)

	void OnActorEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarControllerRelevancySubsystem.OnActorEndPlay // (Final|Native|Private) // @ game+0x20c9040
};

// Class Solarland.SolarCrosshairSubsystem
// Size: 0x128 (Inherited: 0x30)
struct USolarCrosshairSubsystem : UWorldSubsystem {
	char pad_30[0x7c]; // 0x30(0x7c)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> ActivedPlayerWeapon; // 0xac(0x08)
	char pad_B4[0x34]; // 0xb4(0x34)
	struct TArray<struct UVehicleWeaponScopeWidget*> CachedVehicleWeaponScopes; // 0xe8(0x10)
	char pad_F8[0x30]; // 0xf8(0x30)

	void VehicleWeaponForbid(bool InbEntry); // Function Solarland.SolarCrosshairSubsystem.VehicleWeaponForbid // (Final|Native|Protected) // @ game+0x20ca2b0
	void ClearVehicleScopeUI(); // Function Solarland.SolarCrosshairSubsystem.ClearVehicleScopeUI // (Final|Native|Public) // @ game+0x20c8a50
};

// Class Solarland.SolarCrosshairWidgetInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarCrosshairWidgetInterface : UInterface {

	void OnUpdateReload(float InReloadProgress, int32_t InReloadAmmo, int32_t InMaxAmmo); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateReload // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x20c9850
	void OnUpdateOverload(float InOverloadProgress, float InOverloadWarningRate, bool InbOverloadState); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateOverload // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnUpdateCoolDown(float InReloadProgress); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateCoolDown // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnUpdateCharge(bool InbCharging, int32_t InChargeMode, float InChargeProgress); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateCharge // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnUpdateAmmo(int32_t InReservedAmmo, int32_t InMaxAmmo, float InAmmoProgress, bool InbFirst); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateAmmo // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x20c95d0
	void OnReloadFinish(bool InbReloadSuccess, int32_t InReloadAmmo, int32_t InReservedAmmo, int32_t InMaxAmmo, float InAmmoProgress); // Function Solarland.SolarCrosshairWidgetInterface.OnReloadFinish // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x20c9150
	void OnInsufficientAmmo(); // Function Solarland.SolarCrosshairWidgetInterface.OnInsufficientAmmo // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x20c9130
	void OnChangeReloadState(bool InbQuitState, bool bReloadSpeedup); // Function Solarland.SolarCrosshairWidgetInterface.OnChangeReloadState // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnChangeOverloadState(bool InbQuitState); // Function Solarland.SolarCrosshairWidgetInterface.OnChangeOverloadState // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnActiveCrosshair(struct UUserWidget* InActiveCrosshair); // Function Solarland.SolarCrosshairWidgetInterface.OnActiveCrosshair // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarCustomModeBoxSafeArea
// Size: 0x468 (Inherited: 0x468)
struct ASolarCustomModeBoxSafeArea : ASolarSafeArea {

	bool PointInBox(struct FVector& Pos, struct UBoxComponent* Box); // Function Solarland.SolarCustomModeBoxSafeArea.PointInBox // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x20c9960
};

// Class Solarland.SolarDamageTextInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarDamageTextInterface : UInterface {

	void RequestPlayDamageTextByDatas(struct TArray<struct FSolarDamageText>& InSolarDamageTextDatas); // Function Solarland.SolarDamageTextInterface.RequestPlayDamageTextByDatas // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x20c9b50
	void RequestPlayDamageText(struct FSolarDamageText& InSolarDamageText); // Function Solarland.SolarDamageTextInterface.RequestPlayDamageText // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x20c9a60
};

// Class Solarland.SolarDamageTextSlotWidget
// Size: 0x418 (Inherited: 0x348)
struct USolarDamageTextSlotWidget : USolarUserWidget {
	char pad_348[0x10]; // 0x348(0x10)
	struct TMap<enum class ESolarDamageTextType, struct FSolarDamageTextData> TextDatas; // 0x358(0x50)
	struct TMap<enum class ESolarDamageTextType, struct FSolarDamageTextIconData> IconDatas; // 0x3a8(0x50)
	struct UImage* Img_Crit; // 0x3f8(0x08)
	struct UWidgetAnimation* Crit_Anim; // 0x400(0x08)
	uint32_t UniqueId; // 0x408(0x04)
	int32_t DamageForSpecialAnimation; // 0x40c(0x04)
	struct UWidgetAnimation* Text_Special_Anim; // 0x410(0x08)

	void OnCharacterDeath(struct ASolarCharacter* InCharacter); // Function Solarland.SolarDamageTextSlotWidget.OnCharacterDeath // (Final|Native|Protected) // @ game+0x20cd3a0
};

// Class Solarland.SolarDamageTextWidget
// Size: 0x628 (Inherited: 0x348)
struct USolarDamageTextWidget : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct TMap<enum class ESolarDamageTextType, struct FSolarDamageTextStyle> FloatDamageTextConfig; // 0x350(0x50)
	struct TMap<enum class ESolarDamageTextType, struct FSolarDamageTextStyle> StackDamageTextConfig; // 0x3a0(0x50)
	struct FVector2D HitCharacterPositionOffset; // 0x3f0(0x08)
	struct FVector2D CommonHitPositionOffset; // 0x3f8(0x08)
	struct FVector2D FloatDamageTextOffset; // 0x400(0x08)
	struct FVector2D DamageTextDisplayAreaRatio; // 0x408(0x08)
	int32_t FloatDamageTextMaxinum; // 0x410(0x04)
	float FloatDamageTextScaleMaximum; // 0x414(0x04)
	float FloatDamageTextScaleMinimum; // 0x418(0x04)
	float StackDamageTextScaleMaximum; // 0x41c(0x04)
	float StackDamageTextScaleMinimum; // 0x420(0x04)
	float StackDamageTextHitScaleRatio; // 0x424(0x04)
	float HeadShotDamageTextScaleRatio; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)
	struct TArray<struct USolarDamageTextSlotWidget*> AllDamageTextSlotWidget; // 0x430(0x10)
	struct TArray<struct UVerticalBox*> DamageTextGroups; // 0x440(0x10)
	struct TMap<uint32_t, struct FSolarDamageTextGroupData> DamageTextGroupDatas; // 0x450(0x50)
	struct TMap<uint32_t, struct FSolarDamageTextGroupData> PendingSlotWidgetDatas; // 0x4a0(0x50)
	struct FRuntimeFloatCurve OBSlotScaleCurve; // 0x4f0(0x88)
	struct TMap<enum class ESlateDetailMode, int32_t> FloatDamageTextMaxinumBasedOnDetailMode; // 0x578(0x50)
	struct TMap<enum class ESlateDetailMode, int32_t> FloatDamageTextWidgetPoolBasedOnDetailMode; // 0x5c8(0x50)
	struct USolarDamageTextSlotWidget* FloatDamageTextWidget; // 0x618(0x08)
	char pad_620[0x8]; // 0x620(0x08)

	void UpdatePendingSlotWidgetDatas(uint32_t UniqueId); // Function Solarland.SolarDamageTextWidget.UpdatePendingSlotWidgetDatas // (Final|Native|Protected) // @ game+0x20ce2d0
	void RequestDisplayDamageText(struct FSolarDamageText& InDamageTextData); // Function Solarland.SolarDamageTextWidget.RequestDisplayDamageText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20cd960
};

// Class Solarland.SolarDeathViewSkillWidget
// Size: 0x3b8 (Inherited: 0x348)
struct USolarDeathViewSkillWidget : USolarUserWidget {
	struct UOverlay* WeaponSkill; // 0x348(0x08)
	struct UImage* Img_Bg; // 0x350(0x08)
	struct UImage* Img_Light; // 0x358(0x08)
	struct UImage* ProgressCD; // 0x360(0x08)
	struct UImage* icon_WeaponSkill; // 0x368(0x08)
	struct FLinearColor CurrentProgressState; // 0x370(0x10)
	struct FName ProgressParameterName; // 0x380(0x08)
	struct FLinearColor OnCDColor; // 0x388(0x10)
	struct FLinearColor UnCDColor; // 0x398(0x10)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> CurrentPlayerWeapon; // 0x3a8(0x08)
	bool bCoolDown; // 0x3b0(0x01)
	char pad_3B1[0x7]; // 0x3b1(0x07)

	void UpdateSkillVisibility(); // Function Solarland.SolarDeathViewSkillWidget.UpdateSkillVisibility // (Final|Native|Protected) // @ game+0x20ce380
	void UpdateSkillIcon(); // Function Solarland.SolarDeathViewSkillWidget.UpdateSkillIcon // (Final|Native|Protected) // @ game+0x20ce360
	void UpdateCurrentPlayerWeapon(); // Function Solarland.SolarDeathViewSkillWidget.UpdateCurrentPlayerWeapon // (Final|Native|Protected) // @ game+0x20ce2b0
	void UpdateCDProgress(bool bForceUpdate); // Function Solarland.SolarDeathViewSkillWidget.UpdateCDProgress // (Final|Native|Protected) // @ game+0x20ce220
	void SwitchSkillState(bool InbCD); // Function Solarland.SolarDeathViewSkillWidget.SwitchSkillState // (Final|Native|Protected|BlueprintCallable) // @ game+0x20ce190
};

// Class Solarland.SolarDeathViewWeaponPanelWidget
// Size: 0x388 (Inherited: 0x348)
struct USolarDeathViewWeaponPanelWidget : USolarUserWidget {
	struct USolarDeathViewWeaponWidget* Weapon_2; // 0x348(0x08)
	struct USolarDeathViewWeaponWidget* Weapon_3; // 0x350(0x08)
	struct USolarDeathViewWeaponWidget* Weapon_4; // 0x358(0x08)
	char pad_360[0x18]; // 0x360(0x18)
	struct TArray<struct USolarDeathViewWeaponWidget*> WeaponWidgetArray; // 0x378(0x10)

	void OnUpdateAmmo(int32_t InWeaponSlotID); // Function Solarland.SolarDeathViewWeaponPanelWidget.OnUpdateAmmo // (Final|Native|Private) // @ game+0x20cd730
	void OnEquipWeapon(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InPlayerWeapon); // Function Solarland.SolarDeathViewWeaponPanelWidget.OnEquipWeapon // (Final|Native|Private) // @ game+0x20cd660
	void OnActiveWeapon(int32_t InWeaponSlotID, struct AActor* InActivedWeapon); // Function Solarland.SolarDeathViewWeaponPanelWidget.OnActiveWeapon // (Final|Native|Private) // @ game+0x20cd130
};

// Class Solarland.SolarDeathViewWeaponWidget
// Size: 0x3e0 (Inherited: 0x348)
struct USolarDeathViewWeaponWidget : USolarUserWidget {
	struct UCanvasPanel* Panel_Empty; // 0x348(0x08)
	struct UCanvasPanel* Panel_Weapon; // 0x350(0x08)
	struct UCanvasPanel* Panel_Hold; // 0x358(0x08)
	struct UImage* img_Mask; // 0x360(0x08)
	struct UImage* Img_Weapon; // 0x368(0x08)
	struct UImage* img_WeaponBg_2; // 0x370(0x08)
	struct UImage* img_WeaponBg; // 0x378(0x08)
	struct UImage* img_WeaponBg_3; // 0x380(0x08)
	struct UTextBlock* Txt_Bullets; // 0x388(0x08)
	struct UTextBlock* Txt_Bullets_1; // 0x390(0x08)
	struct USizeBox* SizeBox_1; // 0x398(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> OwnerPlayerWeapon; // 0x3a0(0x08)
	struct FTimerHandle LoadWeaponDataTimerHandle; // 0x3a8(0x08)
	char pad_3B0[0x10]; // 0x3b0(0x10)
	struct FLinearColor ExtraAmmoColor; // 0x3c0(0x10)
	struct FLinearColor AmmoDefaultColor; // 0x3d0(0x10)

	void OnWeaponUpgrade(int32_t InLevel, uint32_t InWeaponUniqueID); // Function Solarland.SolarDeathViewWeaponWidget.OnWeaponUpgrade // (Final|Native|Private) // @ game+0x20cd890
	void OnWeaponUpdateAmmoCount(int32_t InFireModeType, struct ASolarWeapon* InWeapon); // Function Solarland.SolarDeathViewWeaponWidget.OnWeaponUpdateAmmoCount // (Final|Native|Private) // @ game+0x20cd7c0
	void OnCharacterLevelChanged(int32_t InNewLevel); // Function Solarland.SolarDeathViewWeaponWidget.OnCharacterLevelChanged // (Final|Native|Private) // @ game+0x20cd430
	void AsyncLoadWeaponData(); // Function Solarland.SolarDeathViewWeaponWidget.AsyncLoadWeaponData // (Final|Native|Private) // @ game+0x20cce10
};

// Class Solarland.SolarDebugDrawer
// Size: 0x28 (Inherited: 0x28)
struct USolarDebugDrawer : UInterface {
};

// Class Solarland.SolarDebugDrawerManager
// Size: 0x2a0 (Inherited: 0x228)
struct ASolarDebugDrawerManager : AActor {
	char pad_228[0x78]; // 0x228(0x78)
};

// Class Solarland.SolarDecorationActor
// Size: 0x228 (Inherited: 0x228)
struct ASolarDecorationActor : AActor {
};

// Class Solarland.SolarDecorationComponent
// Size: 0x370 (Inherited: 0x320)
struct USolarDecorationComponent : USceneComponent {
	struct FSoftObjectPath ChildActorPath; // 0x318(0x18)
	bool bHideAllDecorationComponents; // 0x330(0x01)
	struct AActor* ChildActorClass; // 0x338(0x08)
	struct UChildActorComponent* ChildActorComponent; // 0x340(0x08)
	char pad_349[0x7]; // 0x349(0x07)
	struct FSoftClassPath ChildActorClassPath; // 0x350(0x18)
	char pad_368[0x8]; // 0x368(0x08)
};

// Class Solarland.SolarDemoNetDriver
// Size: 0x1608 (Inherited: 0x14c8)
struct USolarDemoNetDriver : UDemoNetDriver {
	struct TSet<struct UObject*> AlwaysRecordClasses; // 0x14c8(0x50)
	struct TSet<struct AActor*> RelevantActors; // 0x1518(0x50)
	struct TSet<struct AActor*> ReplicatedActors; // 0x1568(0x50)
	struct TMap<struct UNetConnection*, struct FString> CacheConnectionToPlayerID; // 0x15b8(0x50)
};

// Class Solarland.SolarDestructibleActor
// Size: 0x258 (Inherited: 0x238)
struct ASolarDestructibleActor : AStaticMeshActor {
	struct TArray<enum class ECollisionChannel> OnHitIgnoreChannels; // 0x238(0x10)
	float AddForceCoefficient; // 0x248(0x04)
	float BrokenDestroyTime; // 0x24c(0x04)
	bool bChildDetachOnBroken; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)

	void OnDestructibleActorHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FHitResult& Hit, float SpeedDifference); // Function Solarland.SolarDestructibleActor.OnDestructibleActorHit // (Final|Native|Public|HasOutParms) // @ game+0x20cd4c0
	void OnClientBrokenEffect(); // Function Solarland.SolarDestructibleActor.OnClientBrokenEffect // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnBroken(struct ASolarVehiclePawn* VehiclePawn, float SpeedDifference, struct FVector Impulse, struct FVector ImpactPoint); // Function Solarland.SolarDestructibleActor.OnBroken // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x20cd200
};

// Class Solarland.SolarDownloadManager
// Size: 0x160 (Inherited: 0x30)
struct USolarDownloadManager : UGameInstanceSubsystem {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnCDNURLSelectionChanged; // 0x38(0x10)
	char pad_48[0x18]; // 0x48(0x18)
	struct FString CDNResBaseURL; // 0x60(0x10)
	struct TMap<struct FName, struct USolarlandFileDownloader*> ActivedFileDownloaders; // 0x70(0x50)
	struct TMap<struct FName, struct USolarlandContentStringDownloader*> ActivedContentStringDownloaders; // 0xc0(0x50)
	struct TMap<struct FName, struct USolarlandPakMounter*> ActiveMounters; // 0x110(0x50)

	void SetNextCDNURL(); // Function Solarland.SolarDownloadManager.SetNextCDNURL // (Final|Native|Public|BlueprintCallable) // @ game+0x20ce170
	void SetCurrentCDNURL(struct FString CDNURL); // Function Solarland.SolarDownloadManager.SetCurrentCDNURL // (Final|Native|Public|BlueprintCallable) // @ game+0x20ce0d0
	void SetCDNURLList(struct TArray<struct FString>& InCDNURLList); // Function Solarland.SolarDownloadManager.SetCDNURLList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20ce000
	struct USolarlandPakMounter* RequirePaksMount(struct TArray<struct FLocalFileInfo>& InPakInfos, struct FName& InMountTag, int32_t InMountOrder, bool bInIncreasedOrder); // Function Solarland.SolarDownloadManager.RequirePaksMount // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20cde20
	struct USolarlandFileDownloader* RequireFilesDownload(struct TArray<struct FDownloadFileInfo>& InFileInfos, struct FString InLocalDir, struct FName& InDownloadTag, bool bInUseChunk, bool bInForceRedownload); // Function Solarland.SolarDownloadManager.RequireFilesDownload // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20cdbf0
	struct USolarlandContentStringDownloader* RequireContentStringDownload(struct FString InUrl, struct FName& InDownloadTag, bool bInUseChunk, bool bInForceRedownload); // Function Solarland.SolarDownloadManager.RequireContentStringDownload // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20cda50
	void OnCDNURLSelectionChanged__DelegateSignature(struct FString CurrentCDNURL); // DelegateFunction Solarland.SolarDownloadManager.OnCDNURLSelectionChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	bool IsLocalBuild(); // Function Solarland.SolarDownloadManager.IsLocalBuild // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20cd100
	bool IsCurrentCDNURLAvailable(); // Function Solarland.SolarDownloadManager.IsCurrentCDNURLAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20cd0d0
	struct USolarlandPakMounter* GetMounterByTag(struct FName& InMountTag); // Function Solarland.SolarDownloadManager.GetMounterByTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20cd030
	struct USolarlandFileDownloader* GetFileDownloaderByTag(struct FName& InDownloadTag); // Function Solarland.SolarDownloadManager.GetFileDownloaderByTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20ccf90
	struct USolarDownloadManager* GetDownloadManager(struct UObject* WorldContextObject); // Function Solarland.SolarDownloadManager.GetDownloadManager // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x20ccf00
	struct FString GetCurrentCDNURL(); // Function Solarland.SolarDownloadManager.GetCurrentCDNURL // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20cced0
	struct USolarlandContentStringDownloader* GetContentStringDownloaderByTag(struct FName& InDownloadTag); // Function Solarland.SolarDownloadManager.GetContentStringDownloaderByTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20cce30
};

// Class Solarland.SolarDragDropOperation
// Size: 0xd0 (Inherited: 0x88)
struct USolarDragDropOperation : UDragDropOperation {
	int32_t dropId; // 0x88(0x04)
	int32_t DropNum; // 0x8c(0x04)
	int32_t DropWeaponSlot; // 0x90(0x04)
	int32_t DropItemType; // 0x94(0x04)
	struct FString DropName; // 0x98(0x10)
	int32_t DropFromGridType; // 0xa8(0x04)
	int32_t DropFromIndex; // 0xac(0x04)
	struct AActor* DropActor; // 0xb0(0x08)
	int32_t DropGrade; // 0xb8(0x04)
	int32_t DropFromPickupType; // 0xbc(0x04)
	int32_t DropFromThisID; // 0xc0(0x04)
	int32_t DropWeaponPartType; // 0xc4(0x04)
	int32_t DropLevel; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
};

// Class Solarland.SolarDriveControlBase
// Size: 0x4f8 (Inherited: 0x348)
struct USolarDriveControlBase : USolarUserWidget {
	struct ASolarPlayerController* SolarPC; // 0x348(0x08)
	struct ASolarVehiclePawn* VehiclePawn; // 0x350(0x08)
	char pad_358[0x8]; // 0x358(0x08)
	struct FLinearColor TxtSpeedOriginColor; // 0x360(0x10)
	struct FLinearColor TxtSpeedFinalColor; // 0x370(0x10)
	struct UProgressBar* ProgressBar_Speed; // 0x380(0x08)
	struct UTextBlock* Txt_Speed_1; // 0x388(0x08)
	struct UTextBlock* Txt_Speed; // 0x390(0x08)
	struct USolarTextBlock* Txt_BrandName; // 0x398(0x08)
	struct UCommonLazyImage* LazyImg_Brand; // 0x3a0(0x08)
	struct UCanvasPanel* Panel_Speed; // 0x3a8(0x08)
	struct UCanvasPanel* Panel_SwitchSeat; // 0x3b0(0x08)
	struct UCheckBoxGroup* SeatFlag; // 0x3b8(0x08)
	char pad_3C0[0x18]; // 0x3c0(0x18)
	struct USolarVehicleHealthWidget* UI_Vehicle_Health; // 0x3d8(0x08)
	char pad_3E0[0x40]; // 0x3e0(0x40)
	struct UCanvasPanel* Panel_Warning_Danger; // 0x420(0x08)
	struct UImage* Img_Danger_Mask; // 0x428(0x08)
	struct UProgressBar* ProgressBar_Danger; // 0x430(0x08)
	struct UCanvasPanel* Panel_ProgressBar_Danger; // 0x438(0x08)
	char pad_440[0x48]; // 0x440(0x48)
	struct UCanvasPanel* Panel_ScopeUI; // 0x488(0x08)
	struct UCanvasPanel* Panel_Prep; // 0x490(0x08)
	struct UCanvasPanel* Panel_PrepEmpty; // 0x498(0x08)
	struct UProgressBar* ProgressBar_Prep; // 0x4a0(0x08)
	struct UTextBlock* Txt_Bullet_1; // 0x4a8(0x08)
	struct UTextBlock* Txt_Bullet; // 0x4b0(0x08)
	struct UWidgetAnimation* Anim_PrepEmpty; // 0x4b8(0x08)
	struct FLinearColor EmptyBulletColor; // 0x4c0(0x10)
	struct FLinearColor NomalBulletColor; // 0x4d0(0x10)
	char pad_4E0[0x18]; // 0x4e0(0x18)

	void TriggerNoAmmoAlert(); // Function Solarland.SolarDriveControlBase.TriggerNoAmmoAlert // (Final|Native|Protected) // @ game+0x20d4570
	void ShowDriveControl(enum class EDriveState InDriveState, struct FVehicleControlUserSettings& InDriverSettings); // Function Solarland.SolarDriveControlBase.ShowDriveControl // (Native|Public|HasOutParms) // @ game+0x20d4320
	void SetOnVehicleUI(enum class EDriveState InDriveState); // Function Solarland.SolarDriveControlBase.SetOnVehicleUI // (Final|Native|Public|BlueprintCallable) // @ game+0x20d4210
	void ScopeUIStateChanged(bool BOpened); // Function Solarland.SolarDriveControlBase.ScopeUIStateChanged // (Native|Public) // @ game+0x20d3b90
	void RefreshVehicleWeakPoints(); // Function Solarland.SolarDriveControlBase.RefreshVehicleWeakPoints // (Final|Native|Protected) // @ game+0x20d3a40
	void RefreshVehicleBrokenDangerUI(float DangerRate, float TweenSpeed, float InDeltaTime); // Function Solarland.SolarDriveControlBase.RefreshVehicleBrokenDangerUI // (Native|Protected) // @ game+0x20d3920
	void RefreshRequiredAbilityUI(int32_t InAbilityIndex, bool bTagActive); // Function Solarland.SolarDriveControlBase.RefreshRequiredAbilityUI // (Final|Native|Protected) // @ game+0x20d37b0
	void RefreshOccupiedSeats(bool bSwtichVehicleSeatPlayer); // Function Solarland.SolarDriveControlBase.RefreshOccupiedSeats // (Native|Protected) // @ game+0x20d3720
	void RefreshHealthPercentUI(); // Function Solarland.SolarDriveControlBase.RefreshHealthPercentUI // (Final|Native|Protected) // @ game+0x20d3600
	void RefreshBlockedAbilityUI(); // Function Solarland.SolarDriveControlBase.RefreshBlockedAbilityUI // (Final|Native|Protected) // @ game+0x20d35e0
	void RefreshAbilityActivation(bool bInActivated, bool bCanCancel, char InAbilityIndex, float InDurationTime); // Function Solarland.SolarDriveControlBase.RefreshAbilityActivation // (Native|Protected) // @ game+0x20d3470
	void OnVehicleWeaponChanged(); // Function Solarland.SolarDriveControlBase.OnVehicleWeaponChanged // (Final|Native|Protected) // @ game+0x20d3330
	void OnVehicleTypeChange(); // Function Solarland.SolarDriveControlBase.OnVehicleTypeChange // (Native|Public) // @ game+0x1547f50
	void OnVehicleSkinUpdate(struct ASolarVehiclePawn* VehicleComp); // Function Solarland.SolarDriveControlBase.OnVehicleSkinUpdate // (Final|Native|Protected) // @ game+0x20d32a0
	void OnSelfHealingChanged(bool bActived); // Function Solarland.SolarDriveControlBase.OnSelfHealingChanged // (Final|Native|Protected) // @ game+0x20d2fc0
	void OnLocalWeaponSystemVehicleInitialized(); // Function Solarland.SolarDriveControlBase.OnLocalWeaponSystemVehicleInitialized // (Final|Native|Protected) // @ game+0x20d2eb0
	void HiddenDriveControl(); // Function Solarland.SolarDriveControlBase.HiddenDriveControl // (Native|Public|BlueprintCallable) // @ game+0x1547f70
	void ClearVehicleHandle(); // Function Solarland.SolarDriveControlBase.ClearVehicleHandle // (Native|Public) // @ game+0xb9afb0
	void BP_ApplyVehicleUI(enum class EDriveState InDriveState); // Function Solarland.SolarDriveControlBase.BP_ApplyVehicleUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ApplyVehicleUI(enum class EDriveState InDriveState); // Function Solarland.SolarDriveControlBase.ApplyVehicleUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void AddScopeToPanel(struct UUserWidget* InChildWidget, bool bInSpectate); // Function Solarland.SolarDriveControlBase.AddScopeToPanel // (Final|Native|Public) // @ game+0x20d18f0
};

// Class Solarland.SolarDriveControlWidgetPC
// Size: 0x500 (Inherited: 0x4f8)
struct USolarDriveControlWidgetPC : USolarDriveControlBase {
	struct UWidgetSwitcher* WidgetSwitcher_GetOff; // 0x4f8(0x08)
};

// Class Solarland.SolarDriveControWidgetMobile
// Size: 0x6c8 (Inherited: 0x4f8)
struct USolarDriveControWidgetMobile : USolarDriveControlBase {
	char pad_4F8[0x20]; // 0x4f8(0x20)
	struct UVehicleMoveWidget* Joy_Mode1_D; // 0x518(0x08)
	struct UVehicleMoveWidget* Joy_Mode2_D; // 0x520(0x08)
	struct UCanvasPanel* Sprint; // 0x528(0x08)
	char pad_530[0x8]; // 0x530(0x08)
	struct UImage* Img_SprintActive; // 0x538(0x08)
	struct USolarTextBlock* Txt_Sprint; // 0x540(0x08)
	struct UCanvasPanel* SprintActiveOncePanel; // 0x548(0x08)
	struct UImage* Img_SprintLock; // 0x550(0x08)
	struct UImage* FX_CircleLoop; // 0x558(0x08)
	char pad_560[0x8]; // 0x560(0x08)
	struct UCheckBoxGroup* SeatFlag_Expand; // 0x568(0x08)
	struct UCanvasPanel* BT_Switch_Normal; // 0x570(0x08)
	struct UCanvasPanel* BT_Switch_Expand; // 0x578(0x08)
	struct USolarButton* BT_ChangeSeat; // 0x580(0x08)
	struct UButton* Btn_SeatClose; // 0x588(0x08)
	char pad_590[0x10]; // 0x590(0x10)
	struct UCanvasPanel* Panel_VehicleFire; // 0x5a0(0x08)
	struct UCanvasPanel* Panel_Reload; // 0x5a8(0x08)
	struct UCanvasPanel* Panel_Gunsight; // 0x5b0(0x08)
	struct USolarInputButton* BT_Drive_Shot; // 0x5b8(0x08)
	struct UCanvasPanel* Panel_QuickADS; // 0x5c0(0x08)
	struct UProgressBar* QuickAds_Progress_CD; // 0x5c8(0x08)
	struct USolarTextBlock* QuickAds_Txt_Progress; // 0x5d0(0x08)
	struct USolarTextBlock* Txt_Fire; // 0x5d8(0x08)
	struct UWidgetSwitcher* WGS_Vehicle_PrimaryFire; // 0x5e0(0x08)
	char pad_5E8[0x10]; // 0x5e8(0x10)
	struct USolarInputButton* BT_Weapon_Exit; // 0x5f8(0x08)
	struct UButton* BT_Drive_Out; // 0x600(0x08)
	struct UButton* BT_Jet_Out; // 0x608(0x08)
	struct UWidgetAnimation* Anim_Drive_Out_Enter; // 0x610(0x08)
	struct UCanvasPanel* Panel_Drive_Out; // 0x618(0x08)
	struct UImage* Img_vx_Circle; // 0x620(0x08)
	char pad_628[0x8]; // 0x628(0x08)
	struct UCanvasPanel* Panel_DriveCarup; // 0x630(0x08)
	char pad_638[0x8]; // 0x638(0x08)
	struct UCanvasPanel* Panel_DriveCardown; // 0x640(0x08)
	char pad_648[0x8]; // 0x648(0x08)
	struct UCanvasPanel* Container_Driver; // 0x650(0x08)
	struct USolarInputButton* BT_Trumpet_Shot; // 0x658(0x08)
	struct USolarInputButton* BT_Drive_Drift; // 0x660(0x08)
	struct UCanvasPanel* Car_Control_UI_Vehicle; // 0x668(0x08)
	struct UCanvasPanel* Drive_Mode_2; // 0x670(0x08)
	struct UCanvasPanel* Drive_Mode_3; // 0x678(0x08)
	struct USolarInputButton* BT_Drive_R; // 0x680(0x08)
	struct USolarInputButton* BT_Drive_Return; // 0x688(0x08)
	struct UWalkWidgetNew* SteeringJoyStick; // 0x690(0x08)
	struct UImage* Img_Steering; // 0x698(0x08)
	struct UCheckBox* CheckBox_Steeting_Right; // 0x6a0(0x08)
	struct UCheckBox* CheckBox_Steeting_Left; // 0x6a8(0x08)
	float EjectionBtnScaleMagnification; // 0x6b0(0x04)
	struct FVector2D EjectionBtnMaxScale; // 0x6b4(0x08)
	char pad_6BC[0xc]; // 0x6bc(0x0c)

	void StopAutoMove(bool bResetJoy); // Function Solarland.SolarDriveControWidgetMobile.StopAutoMove // (Final|Native|Protected|BlueprintCallable) // @ game+0x20d4400
	void SetVehicleWeaponAbilityActivated(bool bInActive); // Function Solarland.SolarDriveControWidgetMobile.SetVehicleWeaponAbilityActivated // (Final|Native|Protected) // @ game+0x20d4290
	void ResetDriverControlInput(bool bIgnoreSprint); // Function Solarland.SolarDriveControWidgetMobile.ResetDriverControlInput // (Final|Native|Public|BlueprintCallable) // @ game+0x20d3b00
	void OnSwitchRotateInAir(bool bOpen); // Function Solarland.SolarDriveControWidgetMobile.OnSwitchRotateInAir // (Final|Native|Protected|BlueprintCallable) // @ game+0x20d3210
	void OnSteeringInput(float Offset); // Function Solarland.SolarDriveControWidgetMobile.OnSteeringInput // (Final|Native|Protected) // @ game+0x20d3190
	void OnSprintLockIconActiveFunc(struct FVector2D& SprintPosition); // Function Solarland.SolarDriveControWidgetMobile.OnSprintLockIconActiveFunc // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x20d3100
	void OnSprintIconHideFunc(); // Function Solarland.SolarDriveControWidgetMobile.OnSprintIconHideFunc // (Final|Native|Protected) // @ game+0x20d30e0
	void OnSprintIconActiveFunc(struct FVector2D& SprintPosition); // Function Solarland.SolarDriveControWidgetMobile.OnSprintIconActiveFunc // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x20d3050
	void OnJetEnterAnimFinished(); // Function Solarland.SolarDriveControWidgetMobile.OnJetEnterAnimFinished // (Final|Native|Protected) // @ game+0x20d2e90
	void OnExpandSeatFlagChanged(struct TArray<struct UCheckBox*>& ChildChangedArray, int32_t CheckedChildIndex); // Function Solarland.SolarDriveControWidgetMobile.OnExpandSeatFlagChanged // (Final|Native|Protected|HasOutParms) // @ game+0x20d2d90
	void OnDriverVehicleHit(float SpeedDifferenceInKM); // Function Solarland.SolarDriveControWidgetMobile.OnDriverVehicleHit // (Final|Native|Protected) // @ game+0x20d2bb0
	void OnDriverSettingSaved(); // Function Solarland.SolarDriveControWidgetMobile.OnDriverSettingSaved // (Final|Native|Protected) // @ game+0x20d2b90
	void OnDriveDownPressed(); // Function Solarland.SolarDriveControWidgetMobile.OnDriveDownPressed // (Final|Native|Protected) // @ game+0x20d2b70
	void OnCloseExpandSwitchClicked(); // Function Solarland.SolarDriveControWidgetMobile.OnCloseExpandSwitchClicked // (Final|Native|Protected) // @ game+0x20d2b30
	void OnChangeSeatReleased(); // Function Solarland.SolarDriveControWidgetMobile.OnChangeSeatReleased // (Final|Native|Protected) // @ game+0x20d2b10
	void OnChangeSeatPressed(); // Function Solarland.SolarDriveControWidgetMobile.OnChangeSeatPressed // (Final|Native|Protected) // @ game+0x20d2af0
	void OnChangeSeatHolding(); // Function Solarland.SolarDriveControWidgetMobile.OnChangeSeatHolding // (Final|Native|Protected) // @ game+0x20d2ad0
	void InputSprintLockStart(); // Function Solarland.SolarDriveControWidgetMobile.InputSprintLockStart // (Final|Native|Protected) // @ game+0x20d26f0
	bool CanSwitchVehicleSeatByTags(); // Function Solarland.SolarDriveControWidgetMobile.CanSwitchVehicleSeatByTags // (Final|Native|Protected) // @ game+0x20d19e0
	void BeginAutoMove(); // Function Solarland.SolarDriveControWidgetMobile.BeginAutoMove // (Final|Native|Protected) // @ game+0x20d19c0
	void ApplyCustomizeLayoutEx(int32_t LayoutType, enum class EVehicleControlUIType VehicleControlUIType); // Function Solarland.SolarDriveControWidgetMobile.ApplyCustomizeLayoutEx // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarEasyAntiCheatComponent
// Size: 0xc8 (Inherited: 0xb0)
struct USolarEasyAntiCheatComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct USolarEasyAntiCheatManager* AntiCheatManager; // 0xb8(0x08)
	struct AActor* Owner; // 0xc0(0x08)

	void ServerOnUnRegisterClient(); // Function Solarland.SolarEasyAntiCheatComponent.ServerOnUnRegisterClient // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xc28e70
	void ServerOnRegisterClient(struct FString ProductID); // Function Solarland.SolarEasyAntiCheatComponent.ServerOnRegisterClient // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20d3d00
	void ServerOnReceiveClientNotifyMessage(uint32_t DataLenBytes, struct FString Data); // Function Solarland.SolarEasyAntiCheatComponent.ServerOnReceiveClientNotifyMessage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20d3c20
	void ClientOnReceiveServerNotifyMessage(uint32_t DataLenBytes, struct FString Data); // Function Solarland.SolarEasyAntiCheatComponent.ClientOnReceiveServerNotifyMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20d1f20
	void ClientOnActionRequired(int32_t ClientAction, int32_t ActionReason, struct FString Details); // Function Solarland.SolarEasyAntiCheatComponent.ClientOnActionRequired // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x20d1df0
};

// Class Solarland.SolarEasyAntiCheatManager
// Size: 0xc8 (Inherited: 0x28)
struct USolarEasyAntiCheatManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	bool EnableAntiCheat; // 0x30(0x01)
	bool bEnableAntiCheatLauncherCheck; // 0x31(0x01)
	char pad_32[0x96]; // 0x32(0x96)

	void TestSendDSAction(int32_t ActionReason, struct FString ActionDetials); // Function Solarland.SolarEasyAntiCheatManager.TestSendDSAction // (Final|Native|Public|BlueprintCallable) // @ game+0x20d4490
	void SwitchAntiCheatState(); // Function Solarland.SolarEasyAntiCheatManager.SwitchAntiCheatState // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetEOSOpenIDToken(struct FString OpenIDToken); // Function Solarland.SolarEasyAntiCheatManager.SetEOSOpenIDToken // (Final|Native|Public|BlueprintCallable) // @ game+0x20d4170
	void SendSteamAntiCheatRequest(int32_t ErrorCode); // Function Solarland.SolarEasyAntiCheatManager.SendSteamAntiCheatRequest // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReportAntiCheatBI(int32_t ErrorCode); // Function Solarland.SolarEasyAntiCheatManager.ReportAntiCheatBI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool IsLaunchbyEOSBootstrapper(); // Function Solarland.SolarEasyAntiCheatManager.IsLaunchbyEOSBootstrapper // (Final|Native|Public|BlueprintCallable) // @ game+0x20d27e0
	bool IsEOSSettingChanged(); // Function Solarland.SolarEasyAntiCheatManager.IsEOSSettingChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x20d2710
	void EasyAntiCheatLogin(struct FString AppToken); // Function Solarland.SolarEasyAntiCheatManager.EasyAntiCheatLogin // (Final|Native|Public|BlueprintCallable) // @ game+0x20d2110
	void AntiCheatLauncherCheck(); // Function Solarland.SolarEasyAntiCheatManager.AntiCheatLauncherCheck // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool AntiCheatEosSettingCheck(); // Function Solarland.SolarEasyAntiCheatManager.AntiCheatEosSettingCheck // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarEffectExecution
// Size: 0x68 (Inherited: 0x40)
struct USolarEffectExecution : UGameplayEffectExecutionCalculation {
	struct USolarEffectExecutionProxy* CDOProxyClass; // 0x40(0x08)
	struct USolarEffectExecutionProxy* CDOProxy; // 0x48(0x08)
	char pad_50[0x18]; // 0x50(0x18)
};

// Class Solarland.SolarEffectExecutionProxy
// Size: 0x30 (Inherited: 0x28)
struct USolarEffectExecutionProxy : UObject {
	struct TWeakObjectPtr<struct USolarEffectExecution> CDOOwner; // 0x28(0x08)

	void Execute(struct FGameplayEffectCustomExecutionParameters& ExecutionParams, struct FGameplayEffectCustomExecutionOutput& OutExecutionOutput); // Function Solarland.SolarEffectExecutionProxy.Execute // (Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x25d85b0
	struct USolarEffectExecutionProxy* CreateProxy(struct USolarEffectExecution* InCDOOwner, struct USolarEffectExecutionProxy* ProxyClass); // Function Solarland.SolarEffectExecutionProxy.CreateProxy // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x20d2040
};

// Class Solarland.SolarEffectInitiatorInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarEffectInitiatorInterface : UInterface {
};

// Class Solarland.SolarEffectRecipientInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarEffectRecipientInterface : UInterface {

	void ResponseAbilityEffectHitResult(struct AActor* InEffectInitiator, struct FHitResult& InHitResult, float InDamage); // Function Solarland.SolarEffectRecipientInterface.ResponseAbilityEffectHitResult // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarElectricShop
// Size: 0x450 (Inherited: 0x238)
struct ASolarElectricShop : ASolarInteractableActor {
	int32_t MaxWeaponLevel; // 0x238(0x04)
	int32_t MaxShieldLevel; // 0x23c(0x04)
	struct TArray<float> UpgradeEnergyCosts; // 0x240(0x10)
	struct UStaticMeshComponent* ShopMesh; // 0x250(0x08)
	struct USphereComponent* CollisionComp; // 0x258(0x08)
	int32_t SpawnID; // 0x260(0x04)
	bool bSpecificShopID; // 0x264(0x01)
	char pad_265[0x3]; // 0x265(0x03)
	struct TSoftObjectPtr<UDataTable> ShopMeshPathTable; // 0x268(0x28)
	bool bIfShowInMap; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)
	struct TSoftClassPtr<UObject> MapIcon; // 0x298(0x28)
	int32_t MapIconID; // 0x2c0(0x04)
	float MaxTirggerAngle; // 0x2c4(0x04)
	int32_t ShopID; // 0x2c8(0x04)
	bool bIsBroken; // 0x2cc(0x01)
	char pad_2CD[0x3]; // 0x2cd(0x03)
	float TirggerDistance; // 0x2d0(0x04)
	enum class EShopModelAnimType CurrentModeAnimType; // 0x2d4(0x01)
	enum class EShopModelAnimType WantedModeAnimType; // 0x2d5(0x01)
	char pad_2D6[0x2]; // 0x2d6(0x02)
	struct TArray<struct TWeakObjectPtr<struct ASolarCharacter>> InstigateCharacters; // 0x2d8(0x10)
	struct UDataTable* ShopMeshDataTable; // 0x2e8(0x08)
	struct TArray<struct FElectricShopSection> ItemSections; // 0x2f0(0x10)
	struct TArray<struct FElectricShopCDRecord> ItemCDRecords; // 0x300(0x10)
	struct TArray<float> PoolRefreshTimeList; // 0x310(0x10)
	struct TArray<struct FPoolRefreshInfo> PoolRefreshInfoList; // 0x320(0x10)
	int32_t CurPoolGroupID; // 0x330(0x04)
	char pad_334[0x14]; // 0x334(0x14)
	struct TArray<struct UMapMarkBase*> MapMarkArray; // 0x348(0x10)
	struct TArray<struct FTimerHandle> CachedHandles; // 0x358(0x10)
	float DemoRotationSpeed; // 0x368(0x04)
	float DemoSwtichTime; // 0x36c(0x04)
	float DemoOffsetFromZ; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)
	struct TSoftObjectPtr<UDataTable> ItemDemoBPTable; // 0x378(0x28)
	struct UDataTable* ItemDemoBPDataTable; // 0x3a0(0x08)
	struct TMap<struct FSoftObjectPath, struct AElectricShopItemDemo*> DemoActorMap; // 0x3a8(0x50)
	struct AElectricShopItemDemo* CurDemo; // 0x3f8(0x08)
	struct FTimerHandle DemoLoopPlaybackHandle; // 0x400(0x08)
	struct TArray<struct AElectricShopItemDemo*> SpawnedDemoActorList; // 0x408(0x10)
	char pad_418[0x28]; // 0x418(0x28)
	struct TArray<struct UObject*> CachedDemoItemsClass; // 0x440(0x10)

	void UpgradeWeaponResponse(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.UpgradeWeaponResponse // (Net|Native|Event|NetMulticast|Public) // @ game+0x20d4620
	void UpgradeShieldResponse(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.UpgradeShieldResponse // (Net|Native|Event|NetMulticast|Public) // @ game+0x20d4590
	bool ServerUpgradeWeapon(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ServerUpgradeWeapon // (Final|Native|Public) // @ game+0x20d40a0
	bool ServerUpgradeShield(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ServerUpgradeShield // (Final|Native|Public) // @ game+0x20d4000
	void ServerStatisticElectricShop(struct ASolarCharacter* ActivateCharacter, enum class EShopStatisticType StatisticType, int32_t InValueA, int32_t InValueB); // Function Solarland.SolarElectricShop.ServerStatisticElectricShop // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x20d3eb0
	bool ServerPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ServerPurchaseEShopItems // (Final|Native|Public) // @ game+0x20d3da0
	bool RemoveInstigator(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.RemoveInstigator // (Final|Native|Public) // @ game+0x20d3a60
	bool RefreshSellingItem(int32_t InProductID); // Function Solarland.SolarElectricShop.RefreshSellingItem // (Final|Native|Protected) // @ game+0x20d3880
	void RefreshItemCDRecords(struct FElectricShopItem& InItem, struct FString InPlayerID); // Function Solarland.SolarElectricShop.RefreshItemCDRecords // (Final|Native|Protected|HasOutParms) // @ game+0x20d3620
	void PurchaseEShopItemsResponse(int32_t InProductID, bool bSuccess, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.PurchaseEShopItemsResponse // (Net|Native|Event|NetMulticast|Public) // @ game+0x20d3350
	void OnShopIDReplicatedBP(); // Function Solarland.SolarElectricShop.OnShopIDReplicatedBP // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnRep_ShopID(); // Function Solarland.SolarElectricShop.OnRep_ShopID // (Final|Native|Protected) // @ game+0x20d2fa0
	void OnRep_ItemSections(); // Function Solarland.SolarElectricShop.OnRep_ItemSections // (Final|Native|Protected) // @ game+0x20d2f80
	void OnRep_ItemCDRecords(); // Function Solarland.SolarElectricShop.OnRep_ItemCDRecords // (Final|Native|Protected) // @ game+0x20d2f60
	void OnRep_CurPoolGroupID(int32_t PrePoolGroupID); // Function Solarland.SolarElectricShop.OnRep_CurPoolGroupID // (Final|Native|Protected) // @ game+0x20d2ed0
	void OnPlayWeaponUpgradeAnim(); // Function Solarland.SolarElectricShop.OnPlayWeaponUpgradeAnim // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayPurchaseAnim(); // Function Solarland.SolarElectricShop.OnPlayPurchaseAnim // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayIdleAnim(); // Function Solarland.SolarElectricShop.OnPlayIdleAnim // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarElectricShop.OnEndOverlap // (Final|Native|Protected) // @ game+0x20d2c30
	void OnCurrentAnimFinish(); // Function Solarland.SolarElectricShop.OnCurrentAnimFinish // (Final|Native|Protected|BlueprintCallable) // @ game+0x20d2b50
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarElectricShop.OnBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x20d28b0
	bool IsProductRecommendEquipType(enum class EItemType ProductType); // Function Solarland.SolarElectricShop.IsProductRecommendEquipType // (Final|Native|Public) // @ game+0x20d2810
	bool IsInteractable(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.IsInteractable // (Final|Native|Public) // @ game+0x20d2740
	void InitWeaponUpgradeEnergyCost(); // Function Solarland.SolarElectricShop.InitWeaponUpgradeEnergyCost // (Final|Native|Public) // @ game+0x20d26b0
	void InitializeElectricShop(); // Function Solarland.SolarElectricShop.InitializeElectricShop // (Final|Native|Public) // @ game+0x20d26d0
	float GetServerWorldTime(); // Function Solarland.SolarElectricShop.GetServerWorldTime // (Final|Native|Protected) // @ game+0x20d2680
	float GetRemainingCD(int32_t ProductID); // Function Solarland.SolarElectricShop.GetRemainingCD // (Final|Native|Public) // @ game+0x20d25e0
	float GetDiscountedPrice(struct ASolarCharacter* BuyerCharacter, float Price); // Function Solarland.SolarElectricShop.GetDiscountedPrice // (Final|Native|Public) // @ game+0x20d2510
	void GetDiscountedItem(struct ASolarCharacter* BuyerCharacter, struct FElectricShopItem& OutItem); // Function Solarland.SolarElectricShop.GetDiscountedItem // (Final|Native|Public|HasOutParms) // @ game+0x20d2430
	bool GetCurrentItem(int32_t InProductID, struct FElectricShopItem& OutItem); // Function Solarland.SolarElectricShop.GetCurrentItem // (Final|Native|Public|HasOutParms) // @ game+0x20d2340
	struct FString GetBuyerID(int32_t ProductID); // Function Solarland.SolarElectricShop.GetBuyerID // (Final|Native|Public) // @ game+0x20d2260
	struct FElectricShopItem GenerateNewItem(int32_t InProductID); // Function Solarland.SolarElectricShop.GenerateNewItem // (Final|Native|Protected) // @ game+0x20d21b0
	void ClientUpgradeWeaponSuccess(); // Function Solarland.SolarElectricShop.ClientUpgradeWeaponSuccess // (Final|Native|Protected) // @ game+0x20d2020
	void ClientUpgradeShieldSuccess(); // Function Solarland.SolarElectricShop.ClientUpgradeShieldSuccess // (Final|Native|Protected) // @ game+0x20d2020
	void ClientUpdateModelAnim(); // Function Solarland.SolarElectricShop.ClientUpdateModelAnim // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ClientPurchaseSuccess(); // Function Solarland.SolarElectricShop.ClientPurchaseSuccess // (Final|Native|Protected) // @ game+0x20d2000
	void ClientHUDUpgradeWeaponSuccess(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDUpgradeWeaponSuccess // (Final|Native|Protected) // @ game+0x20d1d20
	void ClientHUDUpgradeShieldSuccess(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDUpgradeShieldSuccess // (Final|Native|Protected) // @ game+0x20d1c90
	void ClientHUDPurchaseSuccess(int32_t InProductID, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDPurchaseSuccess // (Final|Native|Protected) // @ game+0x20d1bc0
	void ClientHUDPoolRefresh(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDPoolRefresh // (Final|Native|Protected) // @ game+0x20d1b30
	void ClientHUDItemRefresh(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDItemRefresh // (Final|Native|Protected) // @ game+0x20d1aa0
	void ClientHUDCDRefresh(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDCDRefresh // (Final|Native|Protected) // @ game+0x20d1a10
	void AddInstigator(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.AddInstigator // (Final|Native|Public) // @ game+0x20d1860
};

// Class Solarland.ElectricShopItemDemo
// Size: 0x230 (Inherited: 0x228)
struct AElectricShopItemDemo : AActor {
	char pad_228[0x8]; // 0x228(0x08)
};

// Class Solarland.SolarEnergyShield
// Size: 0x6c0 (Inherited: 0x3e0)
struct ASolarEnergyShield : ASummonItemBase {
	char pad_3E0[0x8]; // 0x3e0(0x08)
	struct UParticleSystem* HitEffect; // 0x3e8(0x08)
	struct UParticleSystem* ExplodeEffect; // 0x3f0(0x08)
	struct TSoftObjectPtr<UParticleSystem> VehicleWholeShieldBrokenEffect; // 0x3f8(0x28)
	struct FVector HitEffectScale; // 0x420(0x0c)
	char OwnerTeam; // 0x42c(0x01)
	char pad_42D[0x3]; // 0x42d(0x03)
	struct TMap<enum class ESolarSummonSoundType, struct FString> StartSoundMap; // 0x430(0x50)
	struct TMap<enum class ESolarSummonSoundType, struct FString> LoopSoundMap; // 0x480(0x50)
	struct TMap<enum class ESolarSummonSoundType, struct FString> HitSoundMap; // 0x4d0(0x50)
	struct TMap<enum class ESolarSummonSoundType, struct FString> EndSoundMap; // 0x520(0x50)
	struct TMap<enum class ESolarSummonSoundType, struct FString> BrokenSoundMap; // 0x570(0x50)
	struct FString CollisionMeshName; // 0x5c0(0x10)
	struct FString ShieldMeshName; // 0x5d0(0x10)
	struct FString DecalMeshName; // 0x5e0(0x10)
	struct TArray<struct FMatUpdateParams> BeginMatUpdateParams; // 0x5f0(0x10)
	struct TArray<struct FMatUpdateParams> DeathMatUpdateParams; // 0x600(0x10)
	struct TArray<struct FMatUpdateParams> HealthMatUpdateParams; // 0x610(0x10)
	struct TArray<struct UMaterialInterface*> EnemyShieldMaterials; // 0x620(0x10)
	struct TArray<struct UMaterialInterface*> EnemyDecalMaterials; // 0x630(0x10)
	struct UParticleSystem* EnemyHitEffect; // 0x640(0x08)
	struct UParticleSystem* EnemyExplodeEffect; // 0x648(0x08)
	struct TMap<struct TWeakObjectPtr<struct AActor>, float> OverlapActorsTimeMap; // 0x650(0x50)
	float OverlapActorIntervalTime; // 0x6a0(0x04)
	float BounceForceToUniqueSkill; // 0x6a4(0x04)
	struct UStaticMeshComponent* CollisionMesh; // 0x6a8(0x08)
	struct UStaticMeshComponent* ShieldMesh; // 0x6b0(0x08)
	struct UStaticMeshComponent* DecalMesh; // 0x6b8(0x08)

	void PlayHitEffectOnVehicleWholeShield(int32_t IndexToPlayHitEffect, struct FVector& HitLocation); // Function Solarland.SolarEnergyShield.PlayHitEffectOnVehicleWholeShield // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
	void PlayHitEffect(struct FHitResult& HitResult); // Function Solarland.SolarEnergyShield.PlayHitEffect // (Final|Native|Public|HasOutParms) // @ game+0x20de4d0
	void OnRep_OwnerTeam(); // Function Solarland.SolarEnergyShield.OnRep_OwnerTeam // (Final|Native|Protected) // @ game+0x20de280
	void ChangeColor(bool IsChanged); // Function Solarland.SolarEnergyShield.ChangeColor // (Native|Event|Public|BlueprintEvent) // @ game+0x20ddbb0
};

// Class Solarland.SolarEnergyBubble
// Size: 0x760 (Inherited: 0x6c0)
struct ASolarEnergyBubble : ASolarEnergyShield {
	struct UStaticMeshComponent* HandMesh; // 0x6c0(0x08)
	struct UParticleSystem* HandMeshStartEffect; // 0x6c8(0x08)
	struct UParticleSystem* HandMeshStartEffectEnemy; // 0x6d0(0x08)
	float HandMeshStartEffectDelay; // 0x6d8(0x04)
	float TraceUpOffset; // 0x6dc(0x04)
	float MeshHeight; // 0x6e0(0x04)
	float RotateSpeed; // 0x6e4(0x04)
	struct UProjectileMovementComponent* ProjectileMovementComponent; // 0x6e8(0x08)
	struct FName ReleaseEnergyBubbleNotify; // 0x6f0(0x08)
	struct FName VFXTagName; // 0x6f8(0x08)
	struct FVector InitVelocity; // 0x700(0x0c)
	char pad_70C[0x4]; // 0x70c(0x04)
	struct FTransform HandMeshRelativeTransform; // 0x710(0x30)
	char pad_740[0x8]; // 0x740(0x08)
	struct USceneComponent* VFXComponent; // 0x748(0x08)
	char pad_750[0x10]; // 0x750(0x10)

	void PlayHandMeshStartEffect(); // Function Solarland.SolarEnergyBubble.PlayHandMeshStartEffect // (Final|Native|Protected) // @ game+0x20de4b0
	void OnProjectileStop(struct FHitResult& InImpactResult); // Function Solarland.SolarEnergyBubble.OnProjectileStop // (Final|Native|Protected|HasOutParms) // @ game+0x20de1a0
	void OnProjectileBounce(struct FHitResult& InImpactResult, struct FVector& InImpactVelocity); // Function Solarland.SolarEnergyBubble.OnProjectileBounce // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x20de070
};

// Class Solarland.SolarEngine
// Size: 0xe60 (Inherited: 0xe60)
struct USolarEngine : UGameEngine {
};

// Class Solarland.SolarEQC_GetAITarget
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_GetAITarget : UEnvQueryContext {

	void ProvideSingleActor(struct UObject* QuerierObject, struct AActor* QuerierActor, struct AActor*& ResultingActor); // Function Solarland.SolarEQC_GetAITarget.ProvideSingleActor // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x25d85b0
};

// Class Solarland.SolarEQC_OwnerBackRotation
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_OwnerBackRotation : UEnvQueryContext {
};

// Class Solarland.SolarEQC_WarmTarget
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_WarmTarget : UEnvQueryContext {
};

// Class Solarland.SolarEQC_WarmTargetTrailCenter
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_WarmTargetTrailCenter : UEnvQueryContext {
};

// Class Solarland.SolarEQC_WarmTargetNearbyPlayers
// Size: 0x30 (Inherited: 0x28)
struct USolarEQC_WarmTargetNearbyPlayers : UEnvQueryContext {
	float DistanceThreshold; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Solarland.SolarEQC_WarmPopLocation
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_WarmPopLocation : UEnvQueryContext {
};

// Class Solarland.SolarEQC_NearbyPOILocation
// Size: 0x30 (Inherited: 0x28)
struct USolarEQC_NearbyPOILocation : UEnvQueryContext {
	float MaxDetectRadius; // 0x28(0x04)
	float MinDetectRadius; // 0x2c(0x04)
};

// Class Solarland.SolarEQT_AgentPathFinding
// Size: 0x2c8 (Inherited: 0x280)
struct USolarEQT_AgentPathFinding : UEnvQueryTest_Pathfinding {
	bool bOverrideOwnerAgentProperty; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
	struct FNavAgentProperties NavAgentProperties; // 0x288(0x30)
	bool bUseCustomRecastQueryExtent; // 0x2b8(0x01)
	char pad_2B9[0x3]; // 0x2b9(0x03)
	struct FVector CustomRecastQueryExtent; // 0x2bc(0x0c)
};

// Class Solarland.SolarEQT_CheckInEffectArea
// Size: 0x260 (Inherited: 0x1f8)
struct USolarEQT_CheckInEffectArea : UEnvQueryTest {
	bool bOverridePerceptionConfig; // 0x1f8(0x01)
	char pad_1F9[0x7]; // 0x1f9(0x07)
	struct FPerceivableEAInfluenceConfig InfluenceConfig; // 0x200(0x60)
};

// Class Solarland.SolarEQT_CheckInSafeArea
// Size: 0x1f8 (Inherited: 0x1f8)
struct USolarEQT_CheckInSafeArea : UEnvQueryTest {
};

// Class Solarland.SolarEQT_MoveProbe
// Size: 0x210 (Inherited: 0x1f8)
struct USolarEQT_MoveProbe : UEnvQueryTest {
	int32_t NumDivideRound; // 0x1f8(0x04)
	float ReferTraceDist; // 0x1fc(0x04)
	float MinDistAsNoObstacle; // 0x200(0x04)
	int32_t MaxNumDirNoObstacle; // 0x204(0x04)
	int32_t MinNumDirNoObstacle; // 0x208(0x04)
	float TraceOffsetZ; // 0x20c(0x04)
};

// Class Solarland.SolarEQT_TraceLimit
// Size: 0x318 (Inherited: 0x2d8)
struct USolarEQT_TraceLimit : UEnvQueryTest_Trace {
	bool bWantsHit; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
	struct FAIDataProviderBoolValue StartPenetratingValid; // 0x2e0(0x38)
};

// Class Solarland.SolarEQTHavePlayerInRange
// Size: 0x218 (Inherited: 0x1f8)
struct USolarEQTHavePlayerInRange : UEnvQueryTest {
	float TraceRange; // 0x1f8(0x04)
	bool bIgnoreSpectatePlayer; // 0x1fc(0x01)
	char pad_1FD[0x3]; // 0x1fd(0x03)
	float TraceStartOffsetZ; // 0x200(0x04)
	char pad_204[0x14]; // 0x204(0x14)
};

// Class Solarland.SolarEventSubsystem
// Size: 0x80 (Inherited: 0x30)
struct USolarEventSubsystem : UGameInstanceSubsystem {
	char pad_30[0x50]; // 0x30(0x50)
};

// Class Solarland.SolarExternalToolsWidget
// Size: 0x348 (Inherited: 0x348)
struct USolarExternalToolsWidget : USolarUserWidget {

	struct UWidget* GetTopWidget(struct UWidget* InWidget); // Function Solarland.SolarExternalToolsWidget.GetTopWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ddc40
};

// Class Solarland.SolarFireCircle
// Size: 0x248 (Inherited: 0x238)
struct ASolarFireCircle : ASolarInteractableActor {
	struct USolarAkGameObject* SolarAkGameObject; // 0x238(0x08)
	struct UAkComponent* AkAudioComponent; // 0x240(0x08)

	void InitializeSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarFireCircle.InitializeSolarAkGameObject // (Final|Native|Private) // @ game+0x20ddda0
};

// Class Solarland.SolarTrailEffect
// Size: 0x228 (Inherited: 0x228)
struct ASolarTrailEffect : AActor {

	void OnFinished(); // Function Solarland.SolarTrailEffect.OnFinished // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FTransform GetTrackingTransform(struct ASolarCharacter* Character); // Function Solarland.SolarTrailEffect.GetTrackingTransform // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x20ddcd0
	void AttachToCharacter(struct ASolarCharacter* Character); // Function Solarland.SolarTrailEffect.AttachToCharacter // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x20d4590
};

// Class Solarland.SolarTrailProxyComponent
// Size: 0x340 (Inherited: 0x320)
struct USolarTrailProxyComponent : USceneComponent {
	struct TWeakObjectPtr<struct ASolarCharacter> PlayerBeingTracked; // 0x318(0x08)
	char pad_328[0x18]; // 0x328(0x18)
};

// Class Solarland.SkydiveTrailEffect
// Size: 0x230 (Inherited: 0x228)
struct ASkydiveTrailEffect : AActor {
	struct ASolarFlyTrail* FlyTrailManager; // 0x228(0x08)

	void UpdateTrailEffect(float CurrentTime); // Function Solarland.SkydiveTrailEffect.UpdateTrailEffect // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x20de6d0
	void OnTrailFinish(); // Function Solarland.SkydiveTrailEffect.OnTrailFinish // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x80df50
	void InitEffectAppearance(bool IsDefender, bool IsSameTeamWithLocalPlayer); // Function Solarland.SkydiveTrailEffect.InitEffectAppearance // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void InitAppearanceByPlayerState(struct ASolarPlayerState* PlayerState); // Function Solarland.SkydiveTrailEffect.InitAppearanceByPlayerState // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x157d550
	void AddTrailPoint(float Timestamp, struct FVector& Location, struct FRotator& Rotation, struct FVector& Velocity); // Function Solarland.SkydiveTrailEffect.AddTrailPoint // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x20dda20
};

// Class Solarland.SolarFlyTrail
// Size: 0x570 (Inherited: 0x228)
struct ASolarFlyTrail : AActor {
	struct TArray<struct USolarTrailProxyComponent*> CachedProxyComponents; // 0x228(0x10)
	struct FSoftObjectPath TrailEffectClass; // 0x238(0x18)
	struct TSoftClassPtr<UObject> FallbackTrailEffectClass; // 0x250(0x28)
	struct UObject* CachedTrailEffectClass; // 0x278(0x08)
	char pad_280[0x50]; // 0x280(0x50)
	struct FCharacterSkydiveTrailStaticInfoContainer SkydiveTrailStaticInfo; // 0x2d0(0x120)
	struct FPackedSkydiveTrailFrameInfoContainer SkydiveTrailFrameInfo; // 0x3f0(0x120)
	struct ASkydiveTrailEffect* SkydiveTrailEffectClass; // 0x510(0x08)
	struct TMap<struct ASolarPlayerState*, struct FCharacterSkydiveTrailData> SkydiveTrailData; // 0x518(0x50)
	struct ASolarPlayerState* LocalPlayerSkydiveTrailProxy; // 0x568(0x08)

	void OnRep_TrailEffectClass(); // Function Solarland.SolarFlyTrail.OnRep_TrailEffectClass // (Final|Native|Protected) // @ game+0x20de2a0
};

// Class Solarland.SolarFlyTrailSettings
// Size: 0x60 (Inherited: 0x38)
struct USolarFlyTrailSettings : UDeveloperSettings {
	struct TSoftClassPtr<UObject> DefaultFlyTrailClass; // 0x38(0x28)
};

// Class Solarland.SolarFollowingComponent
// Size: 0x3c0 (Inherited: 0x2a0)
struct USolarFollowingComponent : UCrowdFollowingComponent {
	bool bEnableOffmeshDetect; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	float MinDetectInterval; // 0x2a4(0x04)
	uint32_t MaxDetectIteration; // 0x2a8(0x04)
	struct FVector InitialOffmeshSolveExtent; // 0x2ac(0x0c)
	float MinZDiffDetectUndergroud; // 0x2b8(0x04)
	float AgentSwimingHalfHeightPct; // 0x2bc(0x04)
	float AgentNormalHalfHeightPct; // 0x2c0(0x04)
	float ReachTestCheckAngleWV; // 0x2c4(0x04)
	float MinSpeedLastSegmentWV; // 0x2c8(0x04)
	float TurningSpeedWV; // 0x2cc(0x04)
	float TurningSteeringThresholdWV; // 0x2d0(0x04)
	float BlockDetectionDistanceCharacter; // 0x2d4(0x04)
	float BlockDetectionDistanceVehicle; // 0x2d8(0x04)
	char pad_2DC[0x10]; // 0x2dc(0x10)
	bool bEnableSolveBlock; // 0x2ec(0x01)
	char pad_2ED[0x3b]; // 0x2ed(0x3b)
	struct ASolarVehiclePawn* VehicleActor; // 0x328(0x08)
	char pad_330[0xc]; // 0x330(0x0c)
	float SensorTraceDistance; // 0x33c(0x04)
	bool bEnableDebug; // 0x340(0x01)
	char pad_341[0x3]; // 0x341(0x03)
	float RightSensorAlpha; // 0x344(0x04)
	float CentralSensorAlpha; // 0x348(0x04)
	float LeftSensorAlpha; // 0x34c(0x04)
	float SteeringAngle; // 0x350(0x04)
	float VehicleSteeringSensitivity; // 0x354(0x04)
	float BrakingForce; // 0x358(0x04)
	float DecelerationDistance; // 0x35c(0x04)
	float VehicleDecelerationSpeed; // 0x360(0x04)
	float VehicleTurningSpeed; // 0x364(0x04)
	float CheckReverseDistance; // 0x368(0x04)
	float HoverCheckBlockSpeed; // 0x36c(0x04)
	float WheeledCheckBlockSpeed; // 0x370(0x04)
	float LeggedVehicleCheckBlockSpeed; // 0x374(0x04)
	char pad_378[0x4]; // 0x378(0x04)
	float CheckBlockTime; // 0x37c(0x04)
	char pad_380[0x8]; // 0x380(0x08)
	int32_t TryReverseTimes; // 0x388(0x04)
	float TryReverseDurationTime; // 0x38c(0x04)
	char pad_390[0x8]; // 0x390(0x08)
	float SolveBlockGoFrontTime; // 0x398(0x04)
	char pad_39C[0x4]; // 0x39c(0x04)
	bool bPathFinish; // 0x3a0(0x01)
	char pad_3A1[0x1f]; // 0x3a1(0x1f)

	void SetVehicle(struct AActor* VehicleActorIn); // Function Solarland.SolarFollowingComponent.SetVehicle // (Final|Native|Public) // @ game+0x20de640
	void OnUpdatedCharacterMovementModeChanged(struct ACharacter* Character, enum class EMovementMode PrevMovementMode, char PreviousCustomMode); // Function Solarland.SolarFollowingComponent.OnUpdatedCharacterMovementModeChanged // (Native|Protected) // @ game+0x20de3a0
	void OnUpdatedCharacterLanded(struct FHitResult& Hit); // Function Solarland.SolarFollowingComponent.OnUpdatedCharacterLanded // (Native|Protected|HasOutParms) // @ game+0x20de2c0
};

// Class Solarland.SolarFontManager
// Size: 0x38 (Inherited: 0x28)
struct USolarFontManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UFont* ChineseFont; // 0x30(0x08)

	void SaveChineseFontSetting(bool bHasLoad); // Function Solarland.SolarFontManager.SaveChineseFontSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x20de5b0
	bool MergeCompositeFont(struct FString NewFontAssetPath); // Function Solarland.SolarFontManager.MergeCompositeFont // (Final|Native|Public|BlueprintCallable) // @ game+0x20ddfc0
	struct UFont* LoadNewFont(struct FString NewFontAssetPath); // Function Solarland.SolarFontManager.LoadNewFont // (Final|Native|Public|BlueprintCallable) // @ game+0x20ddf10
	bool IsNeedMergeChineseFont(bool bAutoLoad); // Function Solarland.SolarFontManager.IsNeedMergeChineseFont // (Final|Native|Public|BlueprintCallable) // @ game+0x20dde70
	void Init(); // Function Solarland.SolarFontManager.Init // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarGameConfigManager
// Size: 0xe8 (Inherited: 0x28)
struct USolarGameConfigManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UDataTable* WeaponDTInstance; // 0x30(0x08)
	struct UDataTable* WeaponAppearanceDTInstance; // 0x38(0x08)
	struct UDataTable* ItemActorDTInstance; // 0x40(0x08)
	struct UDataTable* BackpackTrailAssembingDTInstance; // 0x48(0x08)
	struct UDataTable* CharacterDTInstance; // 0x50(0x08)
	struct UDataTable* ItemResourceDTInstance; // 0x58(0x08)
	struct UDataTable* BuffEffectDTInstance; // 0x60(0x08)
	struct UDataTable* ScreenEffectDTInstance; // 0x68(0x08)
	struct UGlobalWeaponConfig* WeaponsConfigAsset; // 0x70(0x08)
	struct UGlobalVehicleWeaponConfig* GlobalVehicleWeaponConfigAsset; // 0x78(0x08)
	struct USolarRoleSkillDataConfig* RoleConfigAsset; // 0x80(0x08)
	float HeadHitValue; // 0x88(0x04)
	float ShieldReducePhy; // 0x8c(0x04)
	float ShieldReduceEn; // 0x90(0x04)
	float ArmorReducePhy; // 0x94(0x04)
	float ArmorReduceEn; // 0x98(0x04)
	int32_t BackpackEnergyID; // 0x9c(0x04)
	int32_t BackpackExtraEnergyID; // 0xa0(0x04)
	int32_t MedicineItemId; // 0xa4(0x04)
	int32_t RadarItemId; // 0xa8(0x04)
	int32_t ShieldRechargerItemId; // 0xac(0x04)
	int32_t ShieldBigRechargerItemId; // 0xb0(0x04)
	float UnPickupItemTime; // 0xb4(0x04)
	float UnAutoPickupItemTime; // 0xb8(0x04)
	float AutoPickupTime; // 0xbc(0x04)
	float AutoMarkCDTime; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct TArray<int32_t> AutoMarkItemTypeList; // 0xc8(0x10)
	float AutoMarkTeammateDistance; // 0xd8(0x04)
	float PickupCapsuleRadius; // 0xdc(0x04)
	float PickupCapsuleHalfHeight; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)

	void OnInitialized(); // Function Solarland.SolarGameConfigManager.OnInitialized // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct USolarRoleSkillDataConfig* GetSolarRoleSkillDataConfig(); // Function Solarland.SolarGameConfigManager.GetSolarRoleSkillDataConfig // (Final|Native|Public|Const) // @ game+0x202b460
	struct FLinearColor GetLowQualityColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetLowQualityColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x20e20f0
	struct FLinearColor GetHUDDecorateColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetHUDDecorateColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x20e1f50
	struct FLinearColor GetHUDColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetHUDColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x20e1eb0
	struct FLinearColor GetHUDBGColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetHUDBGColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x20e1e10
	struct FLinearColor GetHighQualityColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetHighQualityColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x20e1ff0
	struct UGlobalWeaponConfig* GetGlobalWeaponConfig(); // Function Solarland.SolarGameConfigManager.GetGlobalWeaponConfig // (Final|Native|Public|Const) // @ game+0x20e1de0
	struct UGlobalVehicleWeaponConfig* GetGlobalVehicleWeaponConfig(); // Function Solarland.SolarGameConfigManager.GetGlobalVehicleWeaponConfig // (Final|Native|Public|Const) // @ game+0x20e1db0
	struct FString GetFGByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetFGByQuality // (Final|Native|Public) // @ game+0x20e1c70
	struct FLinearColor GetColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x20e1a30
};

// Class Solarland.SolarGameInstanceBase
// Size: 0x9b8 (Inherited: 0x348)
struct USolarGameInstanceBase : USolarArchitecture {
	char pad_348[0x8]; // 0x348(0x08)
	struct FSoftObjectPath LoginMap; // 0x350(0x18)
	struct FSoftObjectPath LobbyMap; // 0x368(0x18)
	struct FSoftObjectPath EntryMap; // 0x380(0x18)
	struct FSoftObjectPath GameMap; // 0x398(0x18)
	struct FSoftObjectPath SettlementMap; // 0x3b0(0x18)
	struct FSoftObjectPath ConfigServerMap; // 0x3c8(0x18)
	struct FString ConfigBattleAddr; // 0x3e0(0x10)
	int32_t ConfigBattlePort; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct FString ConfigBackendAddr; // 0x3f8(0x10)
	int32_t ConfigBackendPort; // 0x408(0x04)
	int32_t BuildNumber; // 0x40c(0x04)
	struct TSoftClassPtr<UObject> SaveGameClass; // 0x410(0x28)
	struct FSoftClassPath DefaultOperationLayout; // 0x438(0x18)
	struct FSoftClassPath DefaultLockSettings; // 0x450(0x18)
	struct FSoftClassPath ReplayManagerClass; // 0x468(0x18)
	struct FSoftClassPath DefaultGameModeLockSettings; // 0x480(0x18)
	bool bNeedRebootButNot; // 0x498(0x01)
	char pad_499[0x3]; // 0x499(0x03)
	int32_t LastChoosedVoiceLangID; // 0x49c(0x04)
	struct FString CachedNetworkErrorString; // 0x4a0(0x10)
	struct USolarOperationUIElement* CachedDefaultOperationLayout; // 0x4b0(0x08)
	bool bBaseManagersInit; // 0x4b8(0x01)
	bool bGameManagersInit; // 0x4b9(0x01)
	bool bLuaManagersInit; // 0x4ba(0x01)
	char pad_4BB[0x5]; // 0x4bb(0x05)
	struct FMulticastInlineDelegate OnBaseManagersInit; // 0x4c0(0x10)
	struct FMulticastInlineDelegate OnGameManagersInit; // 0x4d0(0x10)
	struct FMulticastInlineDelegate OnLuaManagersInit; // 0x4e0(0x10)
	char pad_4F0[0x178]; // 0x4f0(0x178)
	struct UGameArgs* GameArgsManager; // 0x668(0x08)
	struct UUIManager* UIManager; // 0x670(0x08)
	struct UUINavigationManager* UINavigationManager; // 0x678(0x08)
	struct USolarInputMappingManager* SolarInputMappingManager; // 0x680(0x08)
	struct USolarTimerManager* SolarTimerManager; // 0x688(0x08)
	struct USolarMainPlayerModel* MainPlayerModel; // 0x690(0x08)
	struct USolarGameConfigManager* GameConfigManager; // 0x698(0x08)
	struct UBattlePassConfigInfo* BattlePassConfigInfo; // 0x6a0(0x08)
	struct USolarLuaHelper* SolarLuaHelper; // 0x6a8(0x08)
	struct USolarAnoHelper* SolarAnoHelper; // 0x6b0(0x08)
	struct USolarTableManager* SolarTableManager; // 0x6b8(0x08)
	struct USolarTcpNetworkManager* SolarTcpNetworkManager; // 0x6c0(0x08)
	struct USolarUDPManager* SolarUDPManager; // 0x6c8(0x08)
	struct USolarAssetManager* SolarAssetManager; // 0x6d0(0x08)
	struct USolarItemManager* SolarItemManager; // 0x6d8(0x08)
	struct USolarInteractableManager* SolarInteractableManager; // 0x6e0(0x08)
	struct USolarPlatformHelper* SolarPlatformHelper; // 0x6e8(0x08)
	struct USolarMapManager* SolarMapManager; // 0x6f0(0x08)
	struct UWeaponGrowthManager* WeaponGrowthManager; // 0x6f8(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x700(0x08)
	struct UIMChatObject* SolarIMChatObject; // 0x708(0x08)
	struct USolarLuaManager* SolarLuaManager; // 0x710(0x08)
	struct USolarGameStatistics* SolarGameStatistics; // 0x718(0x08)
	struct USolarWeaponMergeMeshManager* WeaponMergeMeshManager; // 0x720(0x08)
	struct UCrashReportManager* CrashReportManager; // 0x728(0x08)
	struct USolarPopPanelManager* SolarPopPanelManager; // 0x730(0x08)
	struct USolarApplicationLifetimeManager* SolarApplicationLifetimeManager; // 0x738(0x08)
	struct USolarHomeActorManager* SolarHomeActorManager; // 0x740(0x08)
	struct USolarGameplayLogger* SolarGameplayLoggger; // 0x748(0x08)
	struct USolarAttributeSubSystem* SolarAttributeSubSystem; // 0x750(0x08)
	struct USCustomizedGameModeManager* CustomizedGameManager; // 0x758(0x08)
	struct USolarRedHintManager* SolarRedHintMgr; // 0x760(0x08)
	struct USolarGameModeSelectionManager* SolarGameModeSelectionMgr; // 0x768(0x08)
	struct USolarPingFpsManager* SolarPingFpsMgr; // 0x770(0x08)
	struct USolarGameUserSettingsMgr* SolarGameUserSettingsMgr; // 0x778(0x08)
	struct USolarLoginManager* SolarLoginManager; // 0x780(0x08)
	struct USolarLockSettingsMgr* SolarLockSettingsMgr; // 0x788(0x08)
	struct USolarGameProgressManager* SolarGameProgressMgr; // 0x790(0x08)
	struct USolarABTestManager* SolarABTestManager; // 0x798(0x08)
	struct USolarHttpManager* SolarHttpManager; // 0x7a0(0x08)
	struct USolarActivityManager* SolarActivityManager; // 0x7a8(0x08)
	struct USolarTutorialManager* SolarTutorialManager; // 0x7b0(0x08)
	struct USolarReplayManager* SolarReplayManager; // 0x7b8(0x08)
	struct USolarSaveGame* SolarSaveGame; // 0x7c0(0x08)
	struct TSoftClassPtr<UObject> SettlementManagerClass; // 0x7c8(0x28)
	struct USettlementStageManager* SettlementManager; // 0x7f0(0x08)
	struct UCGMCrossLevelDataMgr* CrossLevelDataMgr; // 0x7f8(0x08)
	char pad_800[0x18]; // 0x800(0x18)
	struct TSoftClassPtr<UObject> SolarGraphicSettingsClass; // 0x818(0x28)
	struct USolarAccessLuaDataUtils* LuaDataAccessUtils; // 0x840(0x08)
	struct USolarAkSoundManager* SolarAkSoundManager; // 0x848(0x08)
	bool bIsDedicatedServerStressTest; // 0x850(0x01)
	char pad_851[0x7]; // 0x851(0x07)
	struct UKeyMappingManager* KeyMappingManager; // 0x858(0x08)
	struct USolarEasyAntiCheatManager* SolarEasyAntiCheatManager; // 0x860(0x08)
	struct USolarSpecialEffectsMgr* SolarSpecialEffectsManager; // 0x868(0x08)
	struct UPakHashManager* SolarPakHashManager; // 0x870(0x08)
	struct USolarFontManager* SolarFontManager; // 0x878(0x08)
	struct USolarGraphicSettings* SolarGraphicSettings; // 0x880(0x08)
	struct UAndroidInputManager* AndroidInputManager; // 0x888(0x08)
	char pad_890[0x10]; // 0x890(0x10)
	struct FMulticastInlineDelegate OnPatchComplete; // 0x8a0(0x10)
	struct FMulticastInlineDelegate OnTouchInputDelegate; // 0x8b0(0x10)
	struct FRegistedActorContainer CachedRegistedActors; // 0x8c0(0x50)
	char pad_910[0x18]; // 0x910(0x18)
	bool IsHotPatched; // 0x928(0x01)
	char pad_929[0x3]; // 0x929(0x03)
	bool bCheatedInGame; // 0x92c(0x01)
	char pad_92D[0x3]; // 0x92d(0x03)
	struct FText KickOutReason; // 0x930(0x18)
	struct FMulticastInlineDelegate OnSsmDSGetConfigSuccess; // 0x948(0x10)
	struct TArray<struct FAntiCheatSetting> AntiCheatSettings; // 0x958(0x10)
	struct FScreenshotConfig ScreenshotConfig; // 0x968(0x50)

	void UpdateScreenshotSetting(); // Function Solarland.SolarGameInstanceBase.UpdateScreenshotSetting // (Final|Native|Public) // @ game+0x20e36d0
	void UpdateAntiCheatSetting(); // Function Solarland.SolarGameInstanceBase.UpdateAntiCheatSetting // (Final|Native|Public) // @ game+0x20e36b0
	void TestEnsureMsgInternal(); // Function Solarland.SolarGameInstanceBase.TestEnsureMsgInternal // (Final|Native|Protected|BlueprintCallable) // @ game+0x8e9ae0
	void TestCrashInternal(); // Function Solarland.SolarGameInstanceBase.TestCrashInternal // (Final|Native|Protected|BlueprintCallable) // @ game+0x20e3690
	void SolarGm_UploadLogFile(); // Function Solarland.SolarGameInstanceBase.SolarGm_UploadLogFile // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_Tut(struct FString Cmd, struct TArray<struct FString>& Args); // Function Solarland.SolarGameInstanceBase.SolarGM_Tut // (Final|Exec|Native|Public|HasOutParms) // @ game+0x20e3210
	void SolarGM_TriggerSteamAntiCheat(int32_t ActionReason, struct FString ActionDetials); // Function Solarland.SolarGameInstanceBase.SolarGM_TriggerSteamAntiCheat // (Final|Exec|Native|Public) // @ game+0x20e35b0
	void SolarGM_TransmitGMLua(struct FString playerName, struct TArray<struct FString>& GmArray); // Function Solarland.SolarGameInstanceBase.SolarGM_TransmitGMLua // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void SolarGM_TransmitGM(struct FString playerName, struct TArray<struct FString>& transmitGm); // Function Solarland.SolarGameInstanceBase.SolarGM_TransmitGM // (Final|Exec|Native|Public|HasOutParms) // @ game+0x20e3210
	void SolarGM_TestEnsureMsgWithBP(); // Function Solarland.SolarGameInstanceBase.SolarGM_TestEnsureMsgWithBP // (Exec|Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SolarGM_TestEnsureMsg(); // Function Solarland.SolarGameInstanceBase.SolarGM_TestEnsureMsg // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_TestCrashWithBP(); // Function Solarland.SolarGameInstanceBase.SolarGM_TestCrashWithBP // (Exec|Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SolarGM_TestCrash(); // Function Solarland.SolarGameInstanceBase.SolarGM_TestCrash // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGm_SwitchFastFont(bool bIsEnable); // Function Solarland.SolarGameInstanceBase.SolarGm_SwitchFastFont // (Final|Exec|Native|Public) // @ game+0x1f99610
	void SolarGM_StopRecordingReplay(); // Function Solarland.SolarGameInstanceBase.SolarGM_StopRecordingReplay // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_StopPlayingReplay(); // Function Solarland.SolarGameInstanceBase.SolarGM_StopPlayingReplay // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_StartRecordingLocalReplay(struct FString Filename); // Function Solarland.SolarGameInstanceBase.SolarGM_StartRecordingLocalReplay // (Final|Exec|Native|Public) // @ game+0x20a3480
	void SolarGM_SetQuality(int32_t InQuality); // Function Solarland.SolarGameInstanceBase.SolarGM_SetQuality // (Final|Exec|Native|Public) // @ game+0x15936f0
	void SolarGM_RequestWatchingLiveOfPlayer(struct FString PlayerId); // Function Solarland.SolarGameInstanceBase.SolarGM_RequestWatchingLiveOfPlayer // (Final|Exec|Native|Public) // @ game+0x20a3480
	void SolarGM_RequestReplayList(int32_t PageIndex, int32_t PageSize); // Function Solarland.SolarGameInstanceBase.SolarGM_RequestReplayList // (Final|Exec|Native|Public) // @ game+0x20c3160
	void SolarGM_RequestPlayReplayByIdx(uint32_t Index); // Function Solarland.SolarGameInstanceBase.SolarGM_RequestPlayReplayByIdx // (Final|Exec|Native|Public) // @ game+0x20e3520
	void SolarGM_RequestPlayReplayByBattleID(struct FString BattleID, bool IsLive); // Function Solarland.SolarGameInstanceBase.SolarGM_RequestPlayReplayByBattleID // (Final|Exec|Native|Public) // @ game+0x20e3440
	void SolarGM_RequestPlayReplay(struct FString BattleID, struct FString DownloadUrl); // Function Solarland.SolarGameInstanceBase.SolarGM_RequestPlayReplay // (Final|Exec|Native|Public) // @ game+0x20e3340
	void SolarGM_PlayLocalReplay(struct FString Filename); // Function Solarland.SolarGameInstanceBase.SolarGM_PlayLocalReplay // (Final|Exec|Native|Public) // @ game+0x20a3480
	void SolarGM_LobbyLua(struct FString CmdName, struct TArray<struct FString>& Params); // Function Solarland.SolarGameInstanceBase.SolarGM_LobbyLua // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void SolarGM_Lobby(struct FString CmdName, struct TArray<struct FString>& Params); // Function Solarland.SolarGameInstanceBase.SolarGM_Lobby // (Final|Exec|Native|Public|HasOutParms) // @ game+0x20e3210
	void SolarGM_KickMeOut(); // Function Solarland.SolarGameInstanceBase.SolarGM_KickMeOut // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_GoHome(); // Function Solarland.SolarGameInstanceBase.SolarGM_GoHome // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGm_EnableLuaCallStackProfile(bool bIsEnable); // Function Solarland.SolarGameInstanceBase.SolarGm_EnableLuaCallStackProfile // (Final|Exec|Native|Public) // @ game+0x1f99610
	void SolarGM_AddWeaponExpLua(int32_t weaponid, int32_t count); // Function Solarland.SolarGameInstanceBase.SolarGM_AddWeaponExpLua // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SolarGM_AddWeaponExp(int32_t weaponid, int32_t count); // Function Solarland.SolarGameInstanceBase.SolarGM_AddWeaponExp // (Final|Exec|Native|Public) // @ game+0x20c3160
	void SolarGM_AddItemLua(int32_t ItemID, int32_t count); // Function Solarland.SolarGameInstanceBase.SolarGM_AddItemLua // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SolarGM_AddItem(int32_t ItemID, int32_t count); // Function Solarland.SolarGameInstanceBase.SolarGM_AddItem // (Final|Exec|Native|Public) // @ game+0x20c3160
	void ShutDownPCSDK(); // Function Solarland.SolarGameInstanceBase.ShutDownPCSDK // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ShutDownLimSdk(); // Function Solarland.SolarGameInstanceBase.ShutDownLimSdk // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ShutdownAnoSDK(); // Function Solarland.SolarGameInstanceBase.ShutdownAnoSDK // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void SetIsFirstLaunch(bool bIsFirst); // Function Solarland.SolarGameInstanceBase.SetIsFirstLaunch // (Final|Native|Public|BlueprintCallable) // @ game+0x20e3180
	void SetCleanUpfile(bool bCleanCache); // Function Solarland.SolarGameInstanceBase.SetCleanUpfile // (Final|Native|Public|BlueprintCallable) // @ game+0x20e30f0
	bool ServerTravel(struct FString Map, int32_t ListenPort, bool bSpectator, bool bSkipGameNotify, struct FString options); // Function Solarland.SolarGameInstanceBase.ServerTravel // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2f30
	void SaveGame(); // Function Solarland.SolarGameInstanceBase.SaveGame // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2f10
	void RequestShutDown(struct FString reason); // Function Solarland.SolarGameInstanceBase.RequestShutDown // (Final|Exec|Native|Public) // @ game+0x20e2e70
	void ReportLoadingInfoToBI(struct TArray<struct FString>& LoadingInfo, float LoadingTime, bool bIsFinished); // Function Solarland.SolarGameInstanceBase.ReportLoadingInfoToBI // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void RegisterNetworkManager(); // Function Solarland.SolarGameInstanceBase.RegisterNetworkManager // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnStartBattle(struct FString BattleID); // Function Solarland.SolarGameInstanceBase.OnStartBattle // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2dd0
	void OnSsmDSGetConfigSuccess__DelegateSignature(); // DelegateFunction Solarland.SolarGameInstanceBase.OnSsmDSGetConfigSuccess__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnManagersInitialized__DelegateSignature(); // DelegateFunction Solarland.SolarGameInstanceBase.OnManagersInitialized__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnHotPatchComplete(); // Function Solarland.SolarGameInstanceBase.OnHotPatchComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2db0
	void OnDisconnect(); // Function Solarland.SolarGameInstanceBase.OnDisconnect // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void LuaStartGameFrameWork(); // Function Solarland.SolarGameInstanceBase.LuaStartGameFrameWork // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void LuaInitGameFrameWork(); // Function Solarland.SolarGameInstanceBase.LuaInitGameFrameWork // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	bool IsStandalone(); // Function Solarland.SolarGameInstanceBase.IsStandalone // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2d80
	bool IsSolarServer(struct UObject* WorldContextObject); // Function Solarland.SolarGameInstanceBase.IsSolarServer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20e2cf0
	bool IsSkipLogin(); // Function Solarland.SolarGameInstanceBase.IsSkipLogin // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2cc0
	bool IsServerOrStandalone(); // Function Solarland.SolarGameInstanceBase.IsServerOrStandalone // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2c90
	bool IsListenServer(); // Function Solarland.SolarGameInstanceBase.IsListenServer // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2c60
	bool IsGIsEditor(); // Function Solarland.SolarGameInstanceBase.IsGIsEditor // (Final|Native|Public|BlueprintCallable) // @ game+0x20a96a0
	bool IsFirstLaunchAfterVersionUpdate(); // Function Solarland.SolarGameInstanceBase.IsFirstLaunchAfterVersionUpdate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2c40
	bool IsEditor(); // Function Solarland.SolarGameInstanceBase.IsEditor // (Final|Native|Public|BlueprintCallable) // @ game+0x20a96a0
	bool IsDedicatedServerStressTest(); // Function Solarland.SolarGameInstanceBase.IsDedicatedServerStressTest // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2c20
	bool IsDedicatedServer(); // Function Solarland.SolarGameInstanceBase.IsDedicatedServer // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2bf0
	bool IsClientOrStandalone(); // Function Solarland.SolarGameInstanceBase.IsClientOrStandalone // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2bc0
	bool IsClient(); // Function Solarland.SolarGameInstanceBase.IsClient // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2b90
	void InitLuaClasses(); // Function Solarland.SolarGameInstanceBase.InitLuaClasses // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void InitGameManagers(); // Function Solarland.SolarGameInstanceBase.InitGameManagers // (Final|Native|Protected|BlueprintCallable) // @ game+0x20e2b70
	bool HasCommandlineParam(struct FString Param); // Function Solarland.SolarGameInstanceBase.HasCommandlineParam // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2ac0
	void GoHomeLuaCall(); // Function Solarland.SolarGameInstanceBase.GoHomeLuaCall // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct USolarWeaponMergeMeshManager* GetWeaponMergeMeshManager(); // Function Solarland.SolarGameInstanceBase.GetWeaponMergeMeshManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2a90
	struct UWeaponGrowthManager* GetWeaponGrowthManager(); // Function Solarland.SolarGameInstanceBase.GetWeaponGrowthManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2a60
	struct UUINavigationManager* GetUINavigationManager(); // Function Solarland.SolarGameInstanceBase.GetUINavigationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2a30
	struct USolarVibrateManager* GetSolarVibrateManager(); // Function Solarland.SolarGameInstanceBase.GetSolarVibrateManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2a00
	struct USolarTutorialManager* GetSolarTutorialManager(); // Function Solarland.SolarGameInstanceBase.GetSolarTutorialManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e29d0
	struct USolarTimerManager* GetSolarTimerManager(); // Function Solarland.SolarGameInstanceBase.GetSolarTimerManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e29a0
	struct USolarTcpNetworkManager* GetSolarTcpNetworkManager(); // Function Solarland.SolarGameInstanceBase.GetSolarTcpNetworkManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2970
	struct USolarTableManager* GetSolarTableManager(); // Function Solarland.SolarGameInstanceBase.GetSolarTableManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2940
	struct USolarSaveGame* GetSolarSaveGame(); // Function Solarland.SolarGameInstanceBase.GetSolarSaveGame // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2910
	struct USolarReplayManager* GetSolarReplayManager(); // Function Solarland.SolarGameInstanceBase.GetSolarReplayManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e28e0
	struct USolarRedHintManager* GetSolarRedHintManager(); // Function Solarland.SolarGameInstanceBase.GetSolarRedHintManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e28b0
	struct USolarPopPanelManager* GetSolarPopPanelManager(); // Function Solarland.SolarGameInstanceBase.GetSolarPopPanelManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2880
	struct USolarPlatformHelper* GetSolarPlatformHelper(); // Function Solarland.SolarGameInstanceBase.GetSolarPlatformHelper // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2850
	struct USolarPingFpsManager* GetSolarPingFpsManager(); // Function Solarland.SolarGameInstanceBase.GetSolarPingFpsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2820
	struct USolarMapManager* GetSolarMapManager(); // Function Solarland.SolarGameInstanceBase.GetSolarMapManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e27f0
	struct USolarMainPlayerModel* GetSolarMainPlayerModel(); // Function Solarland.SolarGameInstanceBase.GetSolarMainPlayerModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e27c0
	struct USolarLuaManager* GetSolarLuaManager(); // Function Solarland.SolarGameInstanceBase.GetSolarLuaManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2790
	struct USolarLuaHelper* GetSolarLuaHelper(); // Function Solarland.SolarGameInstanceBase.GetSolarLuaHelper // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2760
	struct USolarLoginManager* GetSolarLoginManager(); // Function Solarland.SolarGameInstanceBase.GetSolarLoginManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2740
	struct USolarLockSettingsMgr* GetSolarLockSettingsManager(); // Function Solarland.SolarGameInstanceBase.GetSolarLockSettingsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2710
	struct USolarItemManager* GetSolarItemManager(); // Function Solarland.SolarGameInstanceBase.GetSolarItemManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e26e0
	struct USolarInteractableManager* GetSolarInteractableManager(); // Function Solarland.SolarGameInstanceBase.GetSolarInteractableManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e26b0
	struct USolarInputMappingManager* GetSolarInputMappingManager(); // Function Solarland.SolarGameInstanceBase.GetSolarInputMappingManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2680
	struct UIMChatObject* GetSolarIMChatObject(); // Function Solarland.SolarGameInstanceBase.GetSolarIMChatObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2650
	struct USolarHttpManager* GetSolarHttpManager(); // Function Solarland.SolarGameInstanceBase.GetSolarHttpManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2630
	struct USolarHomeActorManager* GetSolarHomeActorManager(); // Function Solarland.SolarGameInstanceBase.GetSolarHomeActorManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2600
	struct USolarGameUserSettingsMgr* GetSolarGameUserSettingsManager(); // Function Solarland.SolarGameInstanceBase.GetSolarGameUserSettingsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e25a0
	struct USolarGameplayLogger* GetSolarGameplayLogger(); // Function Solarland.SolarGameInstanceBase.GetSolarGameplayLogger // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e25d0
	struct USolarGameModeSelectionManager* GetSolarGameModeSelectionManager(); // Function Solarland.SolarGameInstanceBase.GetSolarGameModeSelectionManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2570
	struct USolarGameInstanceBase* GetSolarGameInstanceBase(struct UObject* WorldContextObject); // Function Solarland.SolarGameInstanceBase.GetSolarGameInstanceBase // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20e24e0
	struct USolarEasyAntiCheatManager* GetSolarEasyAntiCheatManager(); // Function Solarland.SolarGameInstanceBase.GetSolarEasyAntiCheatManager // (Final|Native|Public|BlueprintCallable) // @ game+0x20e24b0
	struct USolarAnoHelper* GetSolarAnoHelperStatic(struct UObject* WorldContextObject); // Function Solarland.SolarGameInstanceBase.GetSolarAnoHelperStatic // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20e2420
	struct USolarAnoHelper* GetSolarAnoHelper(); // Function Solarland.SolarGameInstanceBase.GetSolarAnoHelper // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e23f0
	struct USolarAkSoundManager* GetSolarAkSoundManager(); // Function Solarland.SolarGameInstanceBase.GetSolarAkSoundManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e23d0
	struct USolarAkGameObject* GetSolarAkGameObject(); // Function Solarland.SolarGameInstanceBase.GetSolarAkGameObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e23a0
	struct USolarActivityManager* GetSolarActivityManager(); // Function Solarland.SolarGameInstanceBase.GetSolarActivityManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2380
	struct USolarABTestManager* GetSolarABTestManager(); // Function Solarland.SolarGameInstanceBase.GetSolarABTestManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2360
	struct USettlementStageManager* GetSettlementStageManager(); // Function Solarland.SolarGameInstanceBase.GetSettlementStageManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e2340
	enum class ESolarPlayStage GetPlayStage(); // Function Solarland.SolarGameInstanceBase.GetPlayStage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e22f0
	struct ASolarCharacter* GetPlayerCharacter(); // Function Solarland.SolarGameInstanceBase.GetPlayerCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2310
	struct FString GetPIEServerURL(); // Function Solarland.SolarGameInstanceBase.GetPIEServerURL // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2270
	int32_t GetPIEInstance(); // Function Solarland.SolarGameInstanceBase.GetPIEInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2240
	struct FString GetNetModeString(); // Function Solarland.SolarGameInstanceBase.GetNetModeString // (Final|Native|Public|BlueprintCallable) // @ game+0x20e21c0
	enum class ESolarNetMode GetNetMode(); // Function Solarland.SolarGameInstanceBase.GetNetMode // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2190
	struct UKeyMappingManager* GetKeyMappingManager(); // Function Solarland.SolarGameInstanceBase.GetKeyMappingManager // (Final|Native|Public|BlueprintCallable) // @ game+0x20e20c0
	bool GetIsMutiPlayer(); // Function Solarland.SolarGameInstanceBase.GetIsMutiPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x20e2090
	struct USolarGameStatistics* GetGameStatistics(); // Function Solarland.SolarGameInstanceBase.GetGameStatistics // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e1d80
	struct USolarGameConfigManager* GetGameConfigManager(); // Function Solarland.SolarGameInstanceBase.GetGameConfigManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e1d50
	struct USolarOperationUIElement* GetDefaultOperationLayout(); // Function Solarland.SolarGameInstanceBase.GetDefaultOperationLayout // (Final|Native|Public) // @ game+0x20e1c40
	struct USCustomizedGameModeManager* GetCustomizedGameManager(); // Function Solarland.SolarGameInstanceBase.GetCustomizedGameManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e1c10
	struct UCGMCrossLevelDataMgr* GetCrossLevelDataMgr(); // Function Solarland.SolarGameInstanceBase.GetCrossLevelDataMgr // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e1bf0
	struct UCrashReportManager* GetCrashReportManager(); // Function Solarland.SolarGameInstanceBase.GetCrashReportManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e1bc0
	struct FString GetCommandlineParam(struct FString Param); // Function Solarland.SolarGameInstanceBase.GetCommandlineParam // (Final|Native|Public|BlueprintCallable) // @ game+0x20e1ad0
	int32_t GetClientNumber(); // Function Solarland.SolarGameInstanceBase.GetClientNumber // (Final|Native|Public|BlueprintCallable) // @ game+0x20e1a00
	void GetCategorizedActorsOfType(struct UObject* WorldContextObject, enum class EActorRegisterType InActorType, struct TArray<struct AActor*>& OutActors); // Function Solarland.SolarGameInstanceBase.GetCategorizedActorsOfType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20e18e0
	void GetCategorizedActorsByBits(struct UObject* WorldContextObject, char InActorBit, struct TArray<struct AActor*>& OutActors); // Function Solarland.SolarGameInstanceBase.GetCategorizedActorsByBits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20e17c0
	struct UBattlePassConfigInfo* GetBattlePassConfigInfo(); // Function Solarland.SolarGameInstanceBase.GetBattlePassConfigInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e1790
	struct USolarAssetManager* GetAssetManager(); // Function Solarland.SolarGameInstanceBase.GetAssetManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20e1760
	int64_t GetAppActiveTimestampInterval(); // Function Solarland.SolarGameInstanceBase.GetAppActiveTimestampInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x20e1730
	void ExecuteCommandArray(struct TArray<struct FString>& cmdArray); // Function Solarland.SolarGameInstanceBase.ExecuteCommandArray // (Final|Native|Public|HasOutParms) // @ game+0x20e1660
	void ExecuteCommand(struct FString Cmd); // Function Solarland.SolarGameInstanceBase.ExecuteCommand // (Final|Native|Public) // @ game+0x20e15c0
	void ExecuteChangeAudioModeLuaCall(bool bTurnOn); // Function Solarland.SolarGameInstanceBase.ExecuteChangeAudioModeLuaCall // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ExecuteBackKeyLuaCall(); // Function Solarland.SolarGameInstanceBase.ExecuteBackKeyLuaCall // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ExecGameArgs(struct FString Args, struct FString& FailReason, enum class EBoolean& Branches); // Function Solarland.SolarGameInstanceBase.ExecGameArgs // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x20e1460
	void ClientTravel(struct FString URL, enum class ETravelType TravelType, bool bSeamless, int32_t FGuid_A, int32_t FGuid_B, int32_t FGuid_C, int32_t FGuid_D); // Function Solarland.SolarGameInstanceBase.ClientTravel // (Final|Native|Public|BlueprintCallable) // @ game+0x20e1230
	void ClearGameManagers(); // Function Solarland.SolarGameInstanceBase.ClearGameManagers // (Final|Native|Protected|BlueprintCallable) // @ game+0x20e1210
	void CheckSavedDirFiles(struct TArray<struct FString>& Files); // Function Solarland.SolarGameInstanceBase.CheckSavedDirFiles // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void Browse(struct FString URL, enum class ETravelType TravelType); // Function Solarland.SolarGameInstanceBase.Browse // (Final|Native|Public|BlueprintCallable) // @ game+0x20e1130
};

// Class Solarland.SolarGameMode_HandleElementRPC
// Size: 0xb8 (Inherited: 0xb0)
struct USolarGameMode_HandleElementRPC : UActorComponent {
	struct FName ComponentTagName; // 0xb0(0x08)

	void OnRep_ComponentName(); // Function Solarland.SolarGameMode_HandleElementRPC.OnRep_ComponentName // (Final|Native|Public) // @ game+0x20e7540
};

// Class Solarland.SGameMode_ModeConfig
// Size: 0x1d8 (Inherited: 0x30)
struct USGameMode_ModeConfig : UDataAsset {
	struct FSoftObjectPath BP_Mode; // 0x30(0x18)
	struct FSoftObjectPath BP_Reward; // 0x48(0x18)
	struct FSoftObjectPath RewardMap; // 0x60(0x18)
	struct FSoftObjectPath JobStructure; // 0x78(0x18)
	struct FSoftObjectPath DataStructure; // 0x90(0x18)
	struct FSoftObjectPath AttributeModifier; // 0xa8(0x18)
	struct FSoftObjectPath WellEffectJobRelationTable; // 0xc0(0x18)
	struct FSoftObjectPath BadEffectJobRelationTable; // 0xd8(0x18)
	struct FString UIConfig; // 0xf0(0x10)
	struct FSCustomMode_GameModeSetting GameModeSetting; // 0x100(0x68)
	struct TArray<struct FSGameMode_LevelConfig> Levels; // 0x168(0x10)
	struct TMap<struct FString, struct FString> Arguments; // 0x178(0x50)
	bool bDestroyItemOnDiscard; // 0x1c8(0x01)
	bool bDestroyWeaponOnDiscard; // 0x1c9(0x01)
	char pad_1CA[0x2]; // 0x1ca(0x02)
	float AllowJoinBattleLifeTime; // 0x1cc(0x04)
	bool bAllowJoinAITeammate; // 0x1d0(0x01)
	bool bConsiderPotentialPlayerWhenSpawnAI; // 0x1d1(0x01)
	char pad_1D2[0x6]; // 0x1d2(0x06)
};

// Class Solarland.SGameMode_EditorSaveData
// Size: 0x38 (Inherited: 0x28)
struct USGameMode_EditorSaveData : USaveGame {
	struct FString ConfigPath; // 0x28(0x10)
};

// Class Solarland.SolarGameModeData
// Size: 0xf8 (Inherited: 0x28)
struct USolarGameModeData : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	int32_t GameModeId; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct USGameMode_ModeConfig* CurrentModeData; // 0x38(0x08)
	struct FString ModeConfigPath; // 0x40(0x10)
	struct FString ModeParamsStr; // 0x50(0x10)
	struct UDataTable* JobDataTable; // 0x60(0x08)
	struct UDataTable* BoardDataTable; // 0x68(0x08)
	struct UDataTable* AttributeDataTable; // 0x70(0x08)
	char pad_78[0x30]; // 0x78(0x30)
	struct TMap<struct FString, struct FString> ModeParams; // 0xa8(0x50)

	void ReadConfigData(); // Function Solarland.SolarGameModeData.ReadConfigData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void InitModeParams(struct FString ParamStr); // Function Solarland.SolarGameModeData.InitModeParams // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SidesOperationAuthorityConfig
// Size: 0x80 (Inherited: 0x30)
struct USidesOperationAuthorityConfig : UDataAsset {
	struct TMap<struct FString, bool> OperationAuthority; // 0x30(0x50)

	bool GetOperationAuthority(struct FString SelfSide, struct FString OtherSide); // Function Solarland.SidesOperationAuthorityConfig.GetOperationAuthority // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x20e7070
};

// Class Solarland.SolarGameMode_ElementManager
// Size: 0x108 (Inherited: 0x28)
struct USolarGameMode_ElementManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct ASolarMapElementBase*> ElementsList; // 0x30(0x10)
	struct TArray<struct ASolarPlayerStart*> PlayerStartList; // 0x40(0x10)
	struct TMap<struct FName, struct USolarGameMode_HandleElementRPC*> HandleActorRPCBPs; // 0x50(0x50)
	struct TMap<struct FString, struct ASolarMapElementBase*> ElementMap; // 0xa0(0x50)
	char pad_F0[0x18]; // 0xf0(0x18)
};

// Class Solarland.SolarGameModeLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarGameModeLibrary : UObject {

	void UnBindEventOnItemUsed(struct UObject* WorldContextObject, struct FDelegate& Deletage); // Function Solarland.SolarGameModeLibrary.UnBindEventOnItemUsed // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20ee260
	void SwitchWeapon(struct ASolarCharacter* TargetPlayer, enum class EWeaponSlotType InWeaponSlot); // Function Solarland.SolarGameModeLibrary.SwitchWeapon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ee1a0
	void StopLoadingScreen(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.StopLoadingScreen // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x20ee120
	void StaticCastAbility(struct AActor* SourceActor, struct ASolarCharacter* TargetActor, struct ASolarAbility* Ability, bool ValidSourceLocation, struct FVector& SourceLocation, struct FVector& HitLocation, struct FName& HitBoneName, float Scale, struct FString InExtraInfo); // Function Solarland.SolarGameModeLibrary.StaticCastAbility // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20ede30
	struct ULoadingWidgetBase* StartLoadingScreen(struct UObject* WorldContextObject, struct ULoadingWidgetBase* LoadingScreenClass); // Function Solarland.SolarGameModeLibrary.StartLoadingScreen // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x20edd60
	void SpawnItemAtTransform(struct UObject* WorldContextObject, int32_t ItemID, int32_t ItemNum, struct FTransform& trans); // Function Solarland.SolarGameModeLibrary.SpawnItemAtTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20edbd0
	void SolarButtonCallReleased(struct USolarButton* Button); // Function Solarland.SolarGameModeLibrary.SolarButtonCallReleased // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20edb50
	void SolarButtonCallPressed(struct USolarButton* Button); // Function Solarland.SolarGameModeLibrary.SolarButtonCallPressed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20edad0
	void SolarButtonCallClick(struct USolarButton* Button); // Function Solarland.SolarGameModeLibrary.SolarButtonCallClick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20eda50
	void ShowWidget(struct UObject* WorldContextObject, struct USolarUserWidget* WidgetClass, struct USolarUserWidget*& OutWidget, enum class EUIRoot UILayer); // Function Solarland.SolarGameModeLibrary.ShowWidget // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20ed8f0
	void ShowWeapon(struct ASolarCharacter* TargetPlayer); // Function Solarland.SolarGameModeLibrary.ShowWeapon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ed870
	void ShowNoticeOnLocalWithoutLocalization(struct UObject* WorldContextObject, struct UUINoticeBase* InNoticeClass, float InTime, struct FString InText, struct UObject* InIcon, int32_t InNoticeColor); // Function Solarland.SolarGameModeLibrary.ShowNoticeOnLocalWithoutLocalization // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ed690
	void ShowNoticeOnLocalWithLocalization(struct UObject* WorldContextObject, int32_t NoticeId); // Function Solarland.SolarGameModeLibrary.ShowNoticeOnLocalWithLocalization // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ed5d0
	void SetMiniMapFOV(struct UObject* WorldContextObject, float TargetFOV, float PlayTime, bool WithIconScale); // Function Solarland.SolarGameModeLibrary.SetMiniMapFOV // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ed480
	void SetCharacterMeleeAttackState(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, bool CanAttack); // Function Solarland.SolarGameModeLibrary.SetCharacterMeleeAttackState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ed380
	void SetActorOwnerToLocalController(struct UObject* TargetObject); // Function Solarland.SolarGameModeLibrary.SetActorOwnerToLocalController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ed300
	void RemoveMarkFromRotationBar(struct UObject* WorldContextObject, struct URotationBarMarkWidget* InRotationMark); // Function Solarland.SolarGameModeLibrary.RemoveMarkFromRotationBar // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ed240
	void RemoveMarkFromMap(struct UObject* WorldContextObject, struct UMapMarkBase* InMapMark); // Function Solarland.SolarGameModeLibrary.RemoveMarkFromMap // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ed180
	bool RemoveMapElement(struct UObject* WorldContextObject, struct ASolarMapElementBase* Target); // Function Solarland.SolarGameModeLibrary.RemoveMapElement // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ed0b0
	void RemoveDotLineToMapFrame(struct UObject* WorldContextObject, int32_t DotLineID); // Function Solarland.SolarGameModeLibrary.RemoveDotLineToMapFrame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ecff0
	void RemoveActorWorldMark(struct UObject* WorldContextObject, struct UActorMarkBase* InActorMark); // Function Solarland.SolarGameModeLibrary.RemoveActorWorldMark // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ecf30
	struct URotationBarMarkWidget* RegisterMarkToRotationBar(struct UObject* WorldContextObject, struct URotationBarMarkWidget* InRotationBarMarkClass, struct FVector& InMarkPos, int32_t InZOrder); // Function Solarland.SolarGameModeLibrary.RegisterMarkToRotationBar // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20ecdd0
	struct UMapMarkBase* RegisterMarkToMapFrame(struct UObject* WorldContextObject, struct UMapMarkBase* InMapMarkClass, struct FVector2D& Pivot, int32_t ZOrder); // Function Solarland.SolarGameModeLibrary.RegisterMarkToMapFrame // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20ecc70
	struct TArray<struct UMapMarkBase*> RegisterMarkToMap(struct UObject* WorldContextObject, struct UMapMarkBase* InMapMarkClass, struct FVector& InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int32_t ZOrder); // Function Solarland.SolarGameModeLibrary.RegisterMarkToMap // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20eca40
	int32_t RegisterDotLineToMapFrame(struct UObject* WorldContextObject, struct AActor* StartPointActor, struct AActor* EndPointActor, struct FLinearColor& DotLineColor); // Function Solarland.SolarGameModeLibrary.RegisterDotLineToMapFrame // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20ec8f0
	struct UActorMarkBase* RegisterActorMarkOnActor(struct UObject* WorldContextObject, struct UActorMarkBase* InActorMarkClass, struct AActor* FollowActor); // Function Solarland.SolarGameModeLibrary.RegisterActorMarkOnActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ec7f0
	void PlayerOutBySelf(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.PlayerOutBySelf // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ec770
	void PlayAudioInGame(struct FString InAudioName); // Function Solarland.SolarGameModeLibrary.PlayAudioInGame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ec6e0
	void MarkVictory(struct ASolarPlayerState* InPlayerState, int32_t Result); // Function Solarland.SolarGameModeLibrary.MarkVictory // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ec620
	void KillCharacter(struct UObject* Killer, struct ASolarCharacter* TargetCharacter, struct ASolarAbility* AbilityClass); // Function Solarland.SolarGameModeLibrary.KillCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ec520
	bool IsSecondCustomGameMode(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.IsSecondCustomGameMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20ec490
	void HideRotationBar(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.HideRotationBar // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ec410
	void HidePowerBar(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.HidePowerBar // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ec390
	void HideBattle(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.HideBattle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ec310
	void HideAllPlayerNav(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.HideAllPlayerNav // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ec290
	void HiddenWeapon(struct ASolarCharacter* TargetPlayer); // Function Solarland.SolarGameModeLibrary.HiddenWeapon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ec210
	void GotoLobby(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GotoLobby // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ec190
	void GlobalLogGameStateStatistics(struct UObject* WorldContextObject, struct FString InLogName, struct TMap<struct FString, struct FString>& LogValues); // Function Solarland.SolarGameModeLibrary.GlobalLogGameStateStatistics // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20ebfe0
	int32_t GetWramGameType(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetWramGameType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20ebf50
	struct USkeletalMesh* GetWeaponMesh(struct UObject* WorldContextObject, int32_t WeaponItemID, float& SpawnOffset); // Function Solarland.SolarGameModeLibrary.GetWeaponMesh // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20ebe40
	struct FString GetNoticeFormatText(struct UObject* WorldContextObject, int32_t InLocalizationID, struct TMap<struct FString, struct FString>& FormatContext); // Function Solarland.SolarGameModeLibrary.GetNoticeFormatText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20ebc70
	struct APawn* GetLocalCharacter(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetLocalCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20ebbe0
	struct USolarItemManager* GetItemManager(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetItemManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20ebb50
	struct USolarGameMode_ElementManager* GetElementManager(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetElementManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20ebac0
	struct USolarGameMode_HandleElementRPC* GetElementHandleRPCComponent(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetElementHandleRPCComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20eba30
	bool GetElementByID(struct UObject* WorldContextObject, struct FString ElementID, struct ASolarMapElementBase*& TargetElement); // Function Solarland.SolarGameModeLibrary.GetElementByID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20eb900
	void GetDropItemDataByOutComeData(struct UObject* WorldContextObject, struct TArray<struct FSolarGameMode_DropItemData>& OutcomeData, struct TArray<struct FSolarGameMode_DropItemData>& TargetData); // Function Solarland.SolarGameModeLibrary.GetDropItemDataByOutComeData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20eb7b0
	void GetCharacterID(struct ASolarCharacter* Character, int32_t& CharacterId, int32_t& SkinId, int32_t& ColorID); // Function Solarland.SolarGameModeLibrary.GetCharacterID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20eb640
	struct UUserWidget* GetBattleControlWidget(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetBattleControlWidget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20eb5b0
	struct UUserWidget* GetBattleBackpackWidget(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetBattleBackpackWidget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20eb520
	bool GetBackpackWeaponBySlot(struct ASolarCharacter* Character, int32_t Slot, struct FSolarItemData& ItemData); // Function Solarland.SolarGameModeLibrary.GetBackpackWeaponBySlot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20eb390
	bool GetBackpackItemDataByType(struct ASolarCharacter* Character, int32_t ItemType, struct FSolarItemData& ItemData); // Function Solarland.SolarGameModeLibrary.GetBackpackItemDataByType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20eb200
	bool GetBackpackItemDataByID(struct ASolarCharacter* Character, int32_t ItemID, struct FSolarItemData& ItemData); // Function Solarland.SolarGameModeLibrary.GetBackpackItemDataByID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20eb070
	int32_t GetAILevelCurrentMatch(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetAILevelCurrentMatch // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20eafe0
	struct ASolarMapElementBase* GenerateMapElement(struct UObject* WorldContextObject, struct ASolarMapElementBase* ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct AActor* Owner, struct APawn* Instigator, struct FString ElementID, struct FString Side, struct FString Job, struct TArray<struct FName>& Tags, enum class ESGameMode_ElementType ElementType, enum class EElementStateType State, enum class EElementVisibilityType Visibility, bool IsPersistent); // Function Solarland.SolarGameModeLibrary.GenerateMapElement // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x20eab20
	struct TArray<struct ASolarPlayerStart*> FindPlayerStart(struct UObject* WorldContextObject, struct TArray<struct FString>& Sides, struct TArray<struct FString>& Jobs, struct TArray<struct FString>& Tags); // Function Solarland.SolarGameModeLibrary.FindPlayerStart // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20ea8b0
	struct TArray<struct ASolarMapElementBase*> FindElementsByClass(struct UObject* WorldContextObject, struct TArray<struct UObject*>& ElementClasses, struct TArray<struct FString>& Sides, struct TArray<struct FString>& Jobs, struct TArray<struct FString>& Tags); // Function Solarland.SolarGameModeLibrary.FindElementsByClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20ea5e0
	struct TArray<struct ASolarMapElementBase*> FindElements(struct UObject* WorldContextObject, struct TArray<struct FString>& ElementTypes, struct TArray<struct FString>& Sides, struct TArray<struct FString>& Jobs, struct TArray<struct FString>& Tags); // Function Solarland.SolarGameModeLibrary.FindElements // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20ea2f0
	struct ASolarMapElementBase* FindElementByID(struct UObject* WorldContextObject, struct FString InElementID); // Function Solarland.SolarGameModeLibrary.FindElementByID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x20ea210
	bool DestoryDeadCharacter(struct ASolarCharacter* TargetCharacter); // Function Solarland.SolarGameModeLibrary.DestoryDeadCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20ea180
	void CharacterEnterDeath(struct ASolarCharacter* TargetCharacter, struct FSolarPointDamageEvent& DamageEvent, bool bEnterDying, bool bSpawnDeathBox, enum class EHealthChangeType ChangeType, struct AController* EventInstigator, float DamageValue); // Function Solarland.SolarGameModeLibrary.CharacterEnterDeath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20e9f00
	void ChangeMiniMapToTargetID(struct UObject* WorldContextObject, int32_t InMapID); // Function Solarland.SolarGameModeLibrary.ChangeMiniMapToTargetID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20e9e40
	void ButtonCallReleased(struct UButton* Button); // Function Solarland.SolarGameModeLibrary.ButtonCallReleased // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20e9dc0
	void ButtonCallPressed(struct UButton* Button); // Function Solarland.SolarGameModeLibrary.ButtonCallPressed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20e9d40
	void ButtonCallClick(struct UButton* Button); // Function Solarland.SolarGameModeLibrary.ButtonCallClick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20e9cc0
	void BindWidgetVisibilityChanged(struct UObject* WorldContextObject, struct FDelegate& Event); // Function Solarland.SolarGameModeLibrary.BindWidgetVisibilityChanged // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20e9be0
	void BindEventOnItemUsed(struct UObject* WorldContextObject, struct FDelegate& Deletage); // Function Solarland.SolarGameModeLibrary.BindEventOnItemUsed // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20e9b00
	void ApplyAbility(struct UObject* SourceObject, struct TArray<struct ASolarCharacter*>& TargetCharacters, struct TArray<struct ASolarAbility*>& Abilities); // Function Solarland.SolarGameModeLibrary.ApplyAbility // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20e99b0
	void AddItem(struct ASolarCharacter* SolarCharacter, int32_t ItemID, int32_t ItemNum); // Function Solarland.SolarGameModeLibrary.AddItem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20e98b0
};

// Class Solarland.SolarGameModeLockSettings
// Size: 0x98 (Inherited: 0x28)
struct USolarGameModeLockSettings : USaveGame {
	struct TMap<int32_t, bool> GameModeLockStatus; // 0x28(0x50)
	struct TArray<int32_t> LobbyGameModeRecIDs; // 0x78(0x10)
	struct TArray<int32_t> GameModeGuideIDs; // 0x88(0x10)

	void CopyFrom(struct USolarGameModeLockSettings* InLockSettings); // Function Solarland.SolarGameModeLockSettings.CopyFrom // (Final|Native|Public) // @ game+0x20f1f10
};

// Class Solarland.SolarGameModeSelectionManager
// Size: 0x60 (Inherited: 0x30)
struct USolarGameModeSelectionManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct USolarGameModeLockSettings* CurGameModeLockSettings; // 0x38(0x08)
	char pad_40[0x18]; // 0x40(0x18)
	struct USolarGameModeLockSettings* DefaultGameModeLockSettings; // 0x58(0x08)

	void SaveGameModeLockSettings(); // Function Solarland.SolarGameModeSelectionManager.SaveGameModeLockSettings // (Final|Native|Public) // @ game+0x20f4010
	void LoadGameModeLockSettings(); // Function Solarland.SolarGameModeSelectionManager.LoadGameModeLockSettings // (Final|Native|Public) // @ game+0x20f3840
};

// Class Solarland.PlayerStatisticsData
// Size: 0xb8 (Inherited: 0x28)
struct UPlayerStatisticsData : UObject {
	struct FMulticastInlineDelegate OnPlayerStatDataUpdate; // 0x28(0x10)
	struct FMulticastInlineDelegate OnIncreaseWeaponKillNum; // 0x38(0x10)
	char pad_48[0x70]; // 0x48(0x70)

	struct FVector GetValue_Vector(enum class EStatisticsType InType); // Function Solarland.PlayerStatisticsData.GetValue_Vector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x20f2fb0
	void GetValue_MapKeyWithValueInt(enum class EStatisticsType InType, struct TArray<int32_t>& OutValue); // Function Solarland.PlayerStatisticsData.GetValue_MapKeyWithValueInt // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20f2ec0
	void GetValue_MapKeyWithValueFloat(enum class EStatisticsType InType, struct TArray<int32_t>& OutValue); // Function Solarland.PlayerStatisticsData.GetValue_MapKeyWithValueFloat // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20f2dd0
	int32_t GetValue_IntFromMap(enum class EStatisticsType InType, int32_t IntKey); // Function Solarland.PlayerStatisticsData.GetValue_IntFromMap // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x20f2d00
	void GetValue_IntArray(enum class EStatisticsType InType, struct TArray<int32_t>& OutResult); // Function Solarland.PlayerStatisticsData.GetValue_IntArray // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20f2b00
	int32_t GetValue_Int(enum class EStatisticsType InType); // Function Solarland.PlayerStatisticsData.GetValue_Int // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x20f2980
	float GetValue_FloatFromMap(enum class EStatisticsType InType, int32_t IntKey, bool Floor); // Function Solarland.PlayerStatisticsData.GetValue_FloatFromMap // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x20f2870
	void GetValue_FloatArray(enum class EStatisticsType InType, struct TArray<float>& OutResult); // Function Solarland.PlayerStatisticsData.GetValue_FloatArray // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20f2780
	float GetValue_Float(enum class EStatisticsType InType, bool Floor); // Function Solarland.PlayerStatisticsData.GetValue_Float // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x20f26b0
};

// Class Solarland.SideStatisticsData
// Size: 0x78 (Inherited: 0x28)
struct USideStatisticsData : UObject {
	char pad_28[0x50]; // 0x28(0x50)
};

// Class Solarland.SolarGameModeStatisticsComponent
// Size: 0x148 (Inherited: 0xd0)
struct USolarGameModeStatisticsComponent : UGameModeCompBase {
	char pad_D0[0x8]; // 0xd0(0x08)
	struct TMap<struct FString, struct UPlayerStatisticsData*> AllPlayerStatData; // 0xd8(0x50)
	struct TArray<enum class EStatisticsType> SpecialFuncTag; // 0x128(0x10)
	char pad_138[0x10]; // 0x138(0x10)

	struct TArray<int32_t> GetValue_IntArray(struct FString InPlayerID, enum class EStatisticsType InType); // Function Solarland.SolarGameModeStatisticsComponent.GetValue_IntArray // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x20f2bf0
	int32_t GetValue_Int(struct FString InPlayerID, enum class EStatisticsType InType); // Function Solarland.SolarGameModeStatisticsComponent.GetValue_Int // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x20f2a10
	struct UPlayerStatisticsData* GetPlayerStatData(struct FString InPlayerID); // Function Solarland.SolarGameModeStatisticsComponent.GetPlayerStatData // (Final|Native|Public) // @ game+0x20f2600
};

// Class Solarland.SolarGameplayAbilitySet
// Size: 0x40 (Inherited: 0x30)
struct USolarGameplayAbilitySet : UDataAsset {
	struct TArray<struct UGameplayAbility*> Abilities; // 0x30(0x10)
};

// Class Solarland.SolarGameplayCueManager
// Size: 0x310 (Inherited: 0x310)
struct USolarGameplayCueManager : UGameplayCueManager {
};

// Class Solarland.SolarGameplayLogger
// Size: 0x38 (Inherited: 0x28)
struct USolarGameplayLogger : UObject {
	struct TArray<enum class ELogChannel> DefaultChannels; // 0x28(0x10)

	void SolarDebugLog(enum class ELogChannel Channel, struct FString Message); // Function Solarland.SolarGameplayLogger.SolarDebugLog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20f40c0
	void EnableDebugLogChannel(enum class ELogChannel Channel); // Function Solarland.SolarGameplayLogger.EnableDebugLogChannel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20f21a0
	void DisableDebugLogChannel(enum class ELogChannel Channel); // Function Solarland.SolarGameplayLogger.DisableDebugLogChannel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20f2130
};

// Class Solarland.SolarGameplaySmokeComponent
// Size: 0x100 (Inherited: 0xb0)
struct USolarGameplaySmokeComponent : UActorComponent {
	float SmokeRadius; // 0xb0(0x04)
	float LocalPlayerCheckRadiusWithCamera; // 0xb4(0x04)
	float DetectDistance; // 0xb8(0x04)
	char DetectTargetFlag; // 0xbc(0x01)
	char pad_BD[0x3]; // 0xbd(0x03)
	struct FGameplayCueTag TeamPerspectiveCueTag; // 0xc0(0x08)
	struct FGameplayCueTag HawkeyePerspectiveCueTag; // 0xc8(0x08)
	bool bEnableSmokeDamage; // 0xd0(0x01)
	char pad_D1[0x3]; // 0xd1(0x03)
	float DamageDistance; // 0xd4(0x04)
	float DamagePerTime; // 0xd8(0x04)
	float DamageFreq; // 0xdc(0x04)
	char pad_E0[0x20]; // 0xe0(0x20)

	void SetIsValid(bool bInIsValid); // Function Solarland.SolarGameplaySmokeComponent.SetIsValid // (Final|Native|Public|BlueprintCallable) // @ game+0x20f4030
};

// Class Solarland.SolarGameplayTagLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarGameplayTagLibrary : UBlueprintFunctionLibrary {

	bool K2_RequestGameplayTag(struct FName TagName, struct FGameplayTag& OutTagFound); // Function Solarland.SolarGameplayTagLibrary.K2_RequestGameplayTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20f3760
	struct FGameplayTagContainer DiffTags(struct FGameplayTagContainer TagsA, struct FGameplayTagContainer& TagsB); // Function Solarland.SolarGameplayTagLibrary.DiffTags // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x20f1fa0
};

// Class Solarland.SolarGameplayTagSystem
// Size: 0x80 (Inherited: 0x30)
struct USolarGameplayTagSystem : UEngineSubsystem {
	struct TMap<struct FName, struct UDataAsset*> LoadedTagReflectors; // 0x30(0x50)
};

// Class Solarland.SolarGameProgressManager
// Size: 0x128 (Inherited: 0x30)
struct USolarGameProgressManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnGameStart; // 0x38(0x10)
	char pad_48[0xe0]; // 0x48(0xe0)

	void OnWorldConditionsCompleted(); // Function Solarland.SolarGameProgressManager.OnWorldConditionsCompleted // (Final|Native|Protected) // @ game+0x20f3e30
	void OnStreamingLevelComplete(); // Function Solarland.SolarGameProgressManager.OnStreamingLevelComplete // (Final|Native|Protected) // @ game+0x20f3e10
	void OnShadersCompileComplete(); // Function Solarland.SolarGameProgressManager.OnShadersCompileComplete // (Final|Native|Protected) // @ game+0x20f3df0
	void OnGameStart__DelegateSignature(); // DelegateFunction Solarland.SolarGameProgressManager.OnGameStart__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void K2_ReceiveGlobalConditionCompleted(struct UObject* WorldContextObject, struct FGameplayTag CompletedCondition); // Function Solarland.SolarGameProgressManager.K2_ReceiveGlobalConditionCompleted // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x20f36a0
	void K2_ReceiveConditionCompleted(struct UObject* WorldContextObject, struct FGameplayTag CompletedCondition); // Function Solarland.SolarGameProgressManager.K2_ReceiveConditionCompleted // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x20f35e0
	void K2_OnGlobalConditionCompleted(struct FGameplayTag CompletedCondition); // Function Solarland.SolarGameProgressManager.K2_OnGlobalConditionCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f3550
	void K2_OnConditionCompleted(struct UWorld* CurrentWorld, struct FGameplayTag CompletedCondition); // Function Solarland.SolarGameProgressManager.K2_OnConditionCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f3480
	bool IsGameStartNeedCondition(struct UObject* WorldContextObject, struct FGameplayTag& InCondition); // Function Solarland.SolarGameProgressManager.IsGameStartNeedCondition // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20f33a0
	bool IsConditionInList(struct FGameplayTag& InCondition, struct UWorld* WorldCheck); // Function Solarland.SolarGameProgressManager.IsConditionInList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x20f32b0
	bool IsAllStartGameConditionCompleted(struct UWorld* WorldCheck); // Function Solarland.SolarGameProgressManager.IsAllStartGameConditionCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20f3210
	bool InitGameStartCondition(struct UWorld* CurrentWorld, struct FGameplayTagContainer ConditionList); // Function Solarland.SolarGameProgressManager.InitGameStartCondition // (Final|Native|Public|BlueprintCallable) // @ game+0x20f30e0
	bool HasGameStarted(struct UObject* WorldContextObject); // Function Solarland.SolarGameProgressManager.HasGameStarted // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20f3050
	struct USolarGameProgressManager* Get(struct UObject* WorldContextObject); // Function Solarland.SolarGameProgressManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20f23d0
};

// Class Solarland.SolarGameSession
// Size: 0x240 (Inherited: 0x240)
struct ASolarGameSession : AGameSession {
};

// Class Solarland.SolarGameSettingsRange
// Size: 0x170 (Inherited: 0x28)
struct USolarGameSettingsRange : UObject {
	struct FSoundSettingsRange SoundSettings; // 0x28(0x20)
	struct FSensitivitySettingsRange SensitivitySettings; // 0x48(0x120)
	struct FGraphicsSettingsRange GraphicsSettings; // 0x168(0x08)
};

// Class Solarland.SolarGameSettingsRangePC
// Size: 0x188 (Inherited: 0x170)
struct USolarGameSettingsRangePC : USolarGameSettingsRange {
	struct FMouseAndKeyboardSettingsRange KeyboardControlSettings; // 0x170(0x08)
	struct FGamepadSettingsRange GamepadSettings; // 0x178(0x10)
};

// Class Solarland.SolarGameStateBase
// Size: 0x2e0 (Inherited: 0x278)
struct ASolarGameStateBase : AGameStateBase {
	char pad_278[0x8]; // 0x278(0x08)
	struct FGameStartConditionList GameStartConditions; // 0x280(0x58)
	struct USolarGameplayConfigComponent* GameplayConfigComponent; // 0x2d8(0x08)
};

// Class Solarland.SolarGameStatistics
// Size: 0x88 (Inherited: 0x28)
struct USolarGameStatistics : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FString PlayerIdName; // 0x30(0x10)
	struct FString LogTypeName; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)
	struct USolarGameInstanceBase* Owner; // 0x58(0x08)
	struct FSolarGameStatisticsLogHeadInfo LogHeadInfo; // 0x60(0x28)

	struct FSolarGameStatisticsLogHeadInfo StaticGetLogHeadInfo(); // Function Solarland.SolarGameStatistics.StaticGetLogHeadInfo // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x20f9660
	void SetSwapLogFileSize(int32_t InSize); // Function Solarland.SolarGameStatistics.SetSwapLogFileSize // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f9510
	void SetSwapLogFileInterval(int32_t InInterval); // Function Solarland.SolarGameStatistics.SetSwapLogFileInterval // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f9490
	void SetLogValueSeparater(struct FString InValueSeparater); // Function Solarland.SolarGameStatistics.SetLogValueSeparater // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f9320
	void SetLogTerminator(struct FString InTerminator); // Function Solarland.SolarGameStatistics.SetLogTerminator // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f9240
	void SetLogFileNameSuffix(struct FString InLogFileNameSuffix); // Function Solarland.SolarGameStatistics.SetLogFileNameSuffix // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f9160
	void SetLogFileNamePrefix(struct FString InLogFileNamePrefix); // Function Solarland.SolarGameStatistics.SetLogFileNamePrefix // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f9080
	void SetLogFileExtension(struct FString InLogFileExtension); // Function Solarland.SolarGameStatistics.SetLogFileExtension // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f8fa0
	void SetLogFileDir(struct FString InLogFileDir); // Function Solarland.SolarGameStatistics.SetLogFileDir // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f8ec0
	void SetLogElementSeparater(struct FString InElementSeparater); // Function Solarland.SolarGameStatistics.SetLogElementSeparater // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f8de0
	void SetLogCheckIntervalMS(int32_t InLogCheckIntervalMS); // Function Solarland.SolarGameStatistics.SetLogCheckIntervalMS // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f8d60
	void ReceiveShutdown(); // Function Solarland.SolarGameStatistics.ReceiveShutdown // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveInit(); // Function Solarland.SolarGameStatistics.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void NotifyBattleStart(struct FString InBattleID); // Function Solarland.SolarGameStatistics.NotifyBattleStart // (Final|Native|Public|BlueprintCallable) // @ game+0x20f87a0
	void NotifyBattleEnd(); // Function Solarland.SolarGameStatistics.NotifyBattleEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x20f8780
	void LogInternal(struct FString InLog); // Function Solarland.SolarGameStatistics.LogInternal // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x20f85e0
	void LogGameStats_KeyValues(struct FString InKey, struct TArray<struct FString>& InValues); // Function Solarland.SolarGameStatistics.LogGameStats_KeyValues // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x20f84c0
	void LogGameStats_KeyValue(struct FString InKey, struct FString InValue); // Function Solarland.SolarGameStatistics.LogGameStats_KeyValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20f83d0
	void LogGameStats_Key(struct FString InKey); // Function Solarland.SolarGameStatistics.LogGameStats_Key // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20f8340
	bool IsUseEmptyHeadData(struct FString InPlayerID); // Function Solarland.SolarGameStatistics.IsUseEmptyHeadData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetSwapLogFileSize(); // Function Solarland.SolarGameStatistics.GetSwapLogFileSize // (Final|Native|Public|BlueprintCallable) // @ game+0x20f7c60
	int32_t GetSwapLogFileInterval(); // Function Solarland.SolarGameStatistics.GetSwapLogFileInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x20f7c40
	struct FString GetSCMLogDataString(bool bIncludeStatistics, struct ASolarPlayerState* InPS); // Function Solarland.SolarGameStatistics.GetSCMLogDataString // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FString GetProperLogElement(struct FString InElement); // Function Solarland.SolarGameStatistics.GetProperLogElement // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x20f7a00
	struct FString GetLogValueSeparater(); // Function Solarland.SolarGameStatistics.GetLogValueSeparater // (Final|Native|Public|BlueprintCallable) // @ game+0x20f7350
	struct FString GetLogTerminator(); // Function Solarland.SolarGameStatistics.GetLogTerminator // (Final|Native|Public|BlueprintCallable) // @ game+0x20f7290
	struct FSolarGameStatisticsLogHeadInfo GetLogHeadInfo(); // Function Solarland.SolarGameStatistics.GetLogHeadInfo // (Final|Native|Protected|BlueprintCallable) // @ game+0x20f7230
	struct FString GetLogFileNameSuffix(); // Function Solarland.SolarGameStatistics.GetLogFileNameSuffix // (Final|Native|Public|BlueprintCallable) // @ game+0x20f7170
	struct FString GetLogFileNamePrefix(); // Function Solarland.SolarGameStatistics.GetLogFileNamePrefix // (Final|Native|Public|BlueprintCallable) // @ game+0x20f70b0
	struct FString GetLogFileExtension(); // Function Solarland.SolarGameStatistics.GetLogFileExtension // (Final|Native|Public|BlueprintCallable) // @ game+0x20f6ff0
	struct FString GetLogFileDir(); // Function Solarland.SolarGameStatistics.GetLogFileDir // (Final|Native|Public|BlueprintCallable) // @ game+0x20f6f30
	struct FString GetLogElementSeparater(); // Function Solarland.SolarGameStatistics.GetLogElementSeparater // (Final|Native|Public|BlueprintCallable) // @ game+0x20f6e70
	struct FString GetLogDataString(bool bIncludeStatistics, struct FString InPlayerID); // Function Solarland.SolarGameStatistics.GetLogDataString // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetLogCheckIntervalMS(); // Function Solarland.SolarGameStatistics.GetLogCheckIntervalMS // (Final|Native|Public|BlueprintCallable) // @ game+0x20f6e50
	struct FString GetHeadDataString(struct FString InPlayerID); // Function Solarland.SolarGameStatistics.GetHeadDataString // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FString GetEmptyHeadDataString(); // Function Solarland.SolarGameStatistics.GetEmptyHeadDataString // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool CanReportBIWrapper(struct FString InLogType); // Function Solarland.SolarGameStatistics.CanReportBIWrapper // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarGameUserSettings
// Size: 0x1b8 (Inherited: 0x38)
struct USolarGameUserSettings : UDeveloperSettings {
	struct FPickupUserSettings PickupSettings; // 0x38(0x18)
	struct FGraphicsUserSettings GraphicsSettings; // 0x50(0x40)
	struct FWeaponUserSettings WeaponSettings; // 0x90(0x20)
	struct FLanguageUserSettings LanguageSettings; // 0xb0(0x03)
	struct FCharacterVoiceUserSettings CharacterVoiceSettings; // 0xb3(0x01)
	struct FSoundUserSettings SoundSettings; // 0xb4(0x3c)
	struct FBasicUserSettings BasicSettings; // 0xf0(0x09)
	char pad_F9[0x3]; // 0xf9(0x03)
	struct FSensitivityUserSettings SensitivitySettings; // 0xfc(0x94)
	struct FShakeUserSettings ShakeSettings; // 0x190(0x01)
	struct FVehicleControlUserSettings DriverSettings; // 0x191(0x05)
	struct FChatOperatorUserSettings ChatOperatorSettings; // 0x196(0x02)
	struct FSoftClassPath DefaultSettingsRangePath; // 0x198(0x18)
	bool bIsSynchronized; // 0x1b0(0x01)
	enum class EConfigVersion ConfigVersion; // 0x1b1(0x01)
	bool bFirstTimeLanunchGame; // 0x1b2(0x01)
	char pad_1B3[0x5]; // 0x1b3(0x05)

	struct FString ToJsonObjectString(); // Function Solarland.SolarGameUserSettings.ToJsonObjectString // (Final|Native|Public|Const) // @ game+0x21035f0
	struct FWeaponUserSettings GetWeaponSettings(); // Function Solarland.SolarGameUserSettings.GetWeaponSettings // (Native|Public|Const) // @ game+0x21032b0
	struct FSoundUserSettings GetSoundSettings(); // Function Solarland.SolarGameUserSettings.GetSoundSettings // (Native|Public|Const) // @ game+0x2103250
	struct FShakeUserSettings GetShakeSettings(); // Function Solarland.SolarGameUserSettings.GetShakeSettings // (Native|Public|Const) // @ game+0x2103210
	struct FSensitivityUserSettings GetSensitivitySettings(); // Function Solarland.SolarGameUserSettings.GetSensitivitySettings // (Native|Public|Const) // @ game+0x2103180
	struct FPickupUserSettings GetPickupSettings(); // Function Solarland.SolarGameUserSettings.GetPickupSettings // (Native|Public|Const) // @ game+0x2103140
	struct FLanguageUserSettings GetLanguageSettings(); // Function Solarland.SolarGameUserSettings.GetLanguageSettings // (Native|Public|Const) // @ game+0x2103100
	struct FGraphicsUserSettings GetGraphicsSettings(); // Function Solarland.SolarGameUserSettings.GetGraphicsSettings // (Native|Public|Const) // @ game+0x21030c0
	struct FVehicleControlUserSettings GetDriverSettings(); // Function Solarland.SolarGameUserSettings.GetDriverSettings // (Native|Public|Const) // @ game+0x2103080
	struct FChatOperatorUserSettings GetChatOperatorSettings(); // Function Solarland.SolarGameUserSettings.GetChatOperatorSettings // (Native|Public|Const) // @ game+0x2103010
	struct FCharacterVoiceUserSettings GetCharacterVoiceSettings(); // Function Solarland.SolarGameUserSettings.GetCharacterVoiceSettings // (Native|Public|Const) // @ game+0x2102fd0
	struct FBasicUserSettings GetBasicSettings(); // Function Solarland.SolarGameUserSettings.GetBasicSettings // (Native|Public|Const) // @ game+0x2102f90
	void FromJsonObjectString(struct FString JsonStr); // Function Solarland.SolarGameUserSettings.FromJsonObjectString // (Final|Native|Public) // @ game+0x2102ef0
	bool CheckJsonObjectString(struct FString JsonStr); // Function Solarland.SolarGameUserSettings.CheckJsonObjectString // (Final|Native|Public|Const) // @ game+0x2102e10
};

// Class Solarland.SolarGameUserSettingsMgr
// Size: 0x68 (Inherited: 0x28)
struct USolarGameUserSettingsMgr : UObject {
	struct USolarGameUserSettings* CurGameUserSettings; // 0x28(0x08)
	struct USolarGameSettingsRange* DefaultGameSettingsRange; // 0x30(0x08)
	bool bIsDefalutSettings; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct USolarGameInstanceBase* SolarGameInstance; // 0x40(0x08)
	char pad_48[0x20]; // 0x48(0x20)

	void SynchronizeInputSettings(); // Function Solarland.SolarGameUserSettingsMgr.SynchronizeInputSettings // (Final|Native|Private) // @ game+0x21035d0
	void SaveGameSettings(); // Function Solarland.SolarGameUserSettingsMgr.SaveGameSettings // (Final|Native|Public) // @ game+0x21035b0
	void ResetToDefault(enum class ESolarGameUserSettingPart SettingPart); // Function Solarland.SolarGameUserSettingsMgr.ResetToDefault // (Final|Native|Public) // @ game+0x2103530
	void RefreshValid(struct USolarGameInstanceBase* GameInstance, bool SaveIfDirty); // Function Solarland.SolarGameUserSettingsMgr.RefreshValid // (Final|Native|Public) // @ game+0x2103460
	void RefreshDynamicShadow(); // Function Solarland.SolarGameUserSettingsMgr.RefreshDynamicShadow // (Final|Native|Public) // @ game+0x2103440
	void RefreshAnalogCursorSpeed(); // Function Solarland.SolarGameUserSettingsMgr.RefreshAnalogCursorSpeed // (Final|Native|Public) // @ game+0x2103420
	void OnSettingConfigSaved(); // Function Solarland.SolarGameUserSettingsMgr.OnSettingConfigSaved // (Final|Native|Public) // @ game+0x2103400
	void OnPickupSettingChanged(); // Function Solarland.SolarGameUserSettingsMgr.OnPickupSettingChanged // (Final|Native|Public) // @ game+0x21033e0
	bool IsLowLevelDevice(); // Function Solarland.SolarGameUserSettingsMgr.IsLowLevelDevice // (Final|Native|Public) // @ game+0x21033b0
	bool IsDefaultEnableDynamicShadow(); // Function Solarland.SolarGameUserSettingsMgr.IsDefaultEnableDynamicShadow // (Final|Native|Public) // @ game+0x2103380
	void InitializeSettings(struct USolarGameInstanceBase* GameInstance); // Function Solarland.SolarGameUserSettingsMgr.InitializeSettings // (Final|Native|Public) // @ game+0x912e20
	void Init(struct USolarGameInstanceBase* GameInstance); // Function Solarland.SolarGameUserSettingsMgr.Init // (Final|Native|Public) // @ game+0x21032f0
	int32_t GetCurNativeRefreshRate(); // Function Solarland.SolarGameUserSettingsMgr.GetCurNativeRefreshRate // (Final|Native|Public) // @ game+0x2103050
	bool FixConfigVersion(); // Function Solarland.SolarGameUserSettingsMgr.FixConfigVersion // (Final|Native|Public) // @ game+0x2102ec0
};

// Class Solarland.SolarGameUserSettingsPC
// Size: 0x3b8 (Inherited: 0x1b8)
struct USolarGameUserSettingsPC : USolarGameUserSettings {
	struct FSensitivityUserSettings SensitivitySettingsKeyboard; // 0x1b8(0x94)
	struct FSensitivityUserSettings SensitivitySettingsGamepad; // 0x24c(0x94)
	struct FMouseAndKeyboardSettings KeyboardControlSettings; // 0x2e0(0x08)
	struct FGamepadSettings GamepadSettings; // 0x2e8(0xc8)
	bool bEnableCursorNoticePanel; // 0x3b0(0x01)
	char pad_3B1[0x7]; // 0x3b1(0x07)
};

// Class Solarland.SolarLeggedVehicleAnimInstance
// Size: 0x3f0 (Inherited: 0x330)
struct USolarLeggedVehicleAnimInstance : USolarVehicleAnimInstance {
	enum class EVehicleAnimationState VehicleAnimState; // 0x330(0x01)
	char pad_331[0x3]; // 0x331(0x03)
	float YawDifference; // 0x334(0x04)
	enum class EVehicleRotateAnimationType VehicleRotateType; // 0x338(0x01)
	char pad_339[0x3]; // 0x339(0x03)
	struct FVector RotationBlend; // 0x33c(0x0c)
	float ProceduralWalkingAlpha; // 0x348(0x04)
	struct FVector BodyRelativeLocation; // 0x34c(0x0c)
	struct FRotator BodyRelativeRotator; // 0x358(0x0c)
	struct FVector FLFootIKEffectorLocation; // 0x364(0x0c)
	struct FVector FRFootIKEffectorLocation; // 0x370(0x0c)
	struct FVector MLFootIKEffectorLocation; // 0x37c(0x0c)
	struct FVector MRFootIKEffectorLocation; // 0x388(0x0c)
	struct FVector BLFootIKEffectorLocation; // 0x394(0x0c)
	struct FVector BRFootIKEffectorLocation; // 0x3a0(0x0c)
	float FLFootIKAlpha; // 0x3ac(0x04)
	float FRFootIKAlpha; // 0x3b0(0x04)
	float MLFootIKAlpha; // 0x3b4(0x04)
	float MRFootIKAlpha; // 0x3b8(0x04)
	float BLFootIKAlpha; // 0x3bc(0x04)
	float BRFootIKAlpha; // 0x3c0(0x04)
	char pad_3C4[0x4]; // 0x3c4(0x04)
	struct TArray<float> FootRotatorOffsets; // 0x3c8(0x10)
	float LeftFootLocationX; // 0x3d8(0x04)
	float RightFootLocationX; // 0x3dc(0x04)
	float LeaningDegree; // 0x3e0(0x04)
	char pad_3E4[0xc]; // 0x3e4(0x0c)

	void AnimNotify_EnableInput(); // Function Solarland.SolarLeggedVehicleAnimInstance.AnimNotify_EnableInput // (Final|Native|Public) // @ game+0x2140470
	void AnimNotify_EnableIK(); // Function Solarland.SolarLeggedVehicleAnimInstance.AnimNotify_EnableIK // (Final|Native|Public) // @ game+0x2140450
	void AnimNotify_DisableInput(); // Function Solarland.SolarLeggedVehicleAnimInstance.AnimNotify_DisableInput // (Final|Native|Public) // @ game+0x2140430
	void AnimNotify_DisableIK(); // Function Solarland.SolarLeggedVehicleAnimInstance.AnimNotify_DisableIK // (Final|Native|Public) // @ game+0x2140410
};

// Class Solarland.SolarGatlingVehicleAnimInstance
// Size: 0x410 (Inherited: 0x3f0)
struct USolarGatlingVehicleAnimInstance : USolarLeggedVehicleAnimInstance {
	float GatlingRollSpeed; // 0x3e8(0x04)
	struct FRotator DashingWeaponYawRot; // 0x3ec(0x0c)
	struct FRotator DashingWeaponPicthRot; // 0x3f8(0x0c)
	struct FName PitchRotParentBone; // 0x404(0x08)
	float DashingWeaponRotAlpha; // 0x40c(0x04)
};

// Class Solarland.SolarGauntletController
// Size: 0x38 (Inherited: 0x30)
struct USolarGauntletController : UGauntletTestController {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarGauntletBPAutoTestController
// Size: 0x38 (Inherited: 0x38)
struct USolarGauntletBPAutoTestController : USolarGauntletController {
};

// Class Solarland.SolarGauntletBPBase
// Size: 0x238 (Inherited: 0x228)
struct ASolarGauntletBPBase : AActor {
	char pad_228[0x10]; // 0x228(0x10)

	void StopTesting(float Delay); // Function Solarland.SolarGauntletBPBase.StopTesting // (Native|Public|BlueprintCallable) // @ game+0x2108300
	void SendLocalCharactorMoveTo(struct FVector Vector); // Function Solarland.SolarGauntletBPBase.SendLocalCharactorMoveTo // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x21080e0
};

// Class Solarland.SolarGauntletClientController
// Size: 0x38 (Inherited: 0x38)
struct USolarGauntletClientController : USolarGauntletController {
};

// Class Solarland.SolarGauntletClientSmokeController
// Size: 0x50 (Inherited: 0x38)
struct USolarGauntletClientSmokeController : USolarGauntletController {
	char pad_38[0x18]; // 0x38(0x18)
};

// Class Solarland.SolarGauntletBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarGauntletBlueprintLibrary : UBlueprintFunctionLibrary {

	void EndTest(int32_t ExitCode); // Function Solarland.SolarGauntletBlueprintLibrary.EndTest // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2107b20
	void BookmarkEnd(struct FString Message); // Function Solarland.SolarGauntletBlueprintLibrary.BookmarkEnd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2107190
	void BookmarkBegin(struct FString Message); // Function Solarland.SolarGauntletBlueprintLibrary.BookmarkBegin // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2107100
};

// Class Solarland.SolarGauntletPSOGatherBP
// Size: 0x238 (Inherited: 0x238)
struct ASolarGauntletPSOGatherBP : ASolarGauntletBPBase {

	void StartPSOGathering(); // Function Solarland.SolarGauntletPSOGatherBP.StartPSOGathering // (Final|Native|Public|BlueprintCallable) // @ game+0x21082e0
	void SendTravelToNextLevel(float InFirstDelay); // Function Solarland.SolarGauntletPSOGatherBP.SendTravelToNextLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x2108260
	void SendStartLevelScriptEvent(struct FString FunctionName); // Function Solarland.SolarGauntletPSOGatherBP.SendStartLevelScriptEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x2108170
};

// Class Solarland.SolarGauntletPSOGatherController
// Size: 0x98 (Inherited: 0x38)
struct USolarGauntletPSOGatherController : USolarGauntletController {
	char pad_38[0x60]; // 0x38(0x60)
};

// Class Solarland.SolarGauntletPureAIDSReportController
// Size: 0x48 (Inherited: 0x38)
struct USolarGauntletPureAIDSReportController : USolarGauntletController {
	char pad_38[0x10]; // 0x38(0x10)
};

// Class Solarland.SolarGauntletReplayController
// Size: 0x40 (Inherited: 0x38)
struct USolarGauntletReplayController : USolarGauntletController {
	char pad_38[0x8]; // 0x38(0x08)

	void OnPostEndPlay(); // Function Solarland.SolarGauntletReplayController.OnPostEndPlay // (Final|Native|Private) // @ game+0x2108080
};

// Class Solarland.SolarGauntletServerController
// Size: 0x50 (Inherited: 0x38)
struct USolarGauntletServerController : USolarGauntletController {
	char pad_38[0x18]; // 0x38(0x18)
};

// Class Solarland.SolarGauntletServerSmokeController
// Size: 0x38 (Inherited: 0x38)
struct USolarGauntletServerSmokeController : USolarGauntletController {
};

// Class Solarland.SolarGlobalEventBase
// Size: 0x28 (Inherited: 0x28)
struct USolarGlobalEventBase : UObject {
};

// Class Solarland.SolarGlobalEventSystem
// Size: 0x120 (Inherited: 0x30)
struct USolarGlobalEventSystem : UGameInstanceSubsystem {
	struct TMap<struct USolarGlobalEventBase*, struct FMulticastInlineDelegate> ListenerEventsByClass; // 0x30(0x50)
	struct TMap<struct FName, struct FMulticastInlineDelegate> ListenerEventsByName; // 0x80(0x50)
	struct TMap<struct FGameplayTag, struct FMulticastInlineDelegate> ListenerEventsByGameplayTag; // 0xd0(0x50)

	void UnbindGlobalEventByName(struct FName EventName, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.UnbindGlobalEventByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21087e0
	void UnbindGlobalEventByGameplayTag(struct FGameplayTag EventGameplayTag, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.UnbindGlobalEventByGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21086f0
	void UnbindGlobalEventByClass(struct USolarGlobalEventBase* EventClass, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.UnbindGlobalEventByClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2108600
	void UnbindAllGlobalEventsByName(struct UObject* Unsubscriber, struct FName EventName); // Function Solarland.SolarGlobalEventSystem.UnbindAllGlobalEventsByName // (Final|Native|Public|BlueprintCallable) // @ game+0x2108530
	void UnbindAllGlobalEventsByGameplayTag(struct UObject* Unsubscriber, struct FGameplayTag EventGameplayTag); // Function Solarland.SolarGlobalEventSystem.UnbindAllGlobalEventsByGameplayTag // (Final|Native|Public|BlueprintCallable) // @ game+0x2108460
	void UnbindAllGlobalEventsByClass(struct UObject* Unsubscriber, struct USolarGlobalEventBase* EventClass); // Function Solarland.SolarGlobalEventSystem.UnbindAllGlobalEventsByClass // (Final|Native|Public|BlueprintCallable) // @ game+0x2108390
	void GetAllBoundObjectsToEventByName(struct FName EventName, struct TArray<struct UObject*>& Objects); // Function Solarland.SolarGlobalEventSystem.GetAllBoundObjectsToEventByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2107f90
	void GetAllBoundObjectsToEventByGameplayTag(struct FGameplayTag EventGameplayTag, struct TArray<struct UObject*>& Objects); // Function Solarland.SolarGlobalEventSystem.GetAllBoundObjectsToEventByGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2107ea0
	void GetAllBoundObjectsToEventByClass(struct USolarGlobalEventBase* EventClass, struct TArray<struct UObject*>& Objects); // Function Solarland.SolarGlobalEventSystem.GetAllBoundObjectsToEventByClass // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2107db0
	void GetAllActiveGlobalEventsClass(struct TArray<struct USolarGlobalEventBase*>& Events); // Function Solarland.SolarGlobalEventSystem.GetAllActiveGlobalEventsClass // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2107d00
	void GetAllActiveGlobalEventNames(struct TArray<struct FName>& Events); // Function Solarland.SolarGlobalEventSystem.GetAllActiveGlobalEventNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2107c50
	void GetAllActiveGlobalEventGameplayTag(struct TArray<struct FGameplayTag>& Events); // Function Solarland.SolarGlobalEventSystem.GetAllActiveGlobalEventGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2107ba0
	void ClearGlobalEventByName(struct FName EventName, bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearGlobalEventByName // (Final|Native|Public|BlueprintCallable) // @ game+0x2107a50
	void ClearGlobalEventByGameplayTag(struct FGameplayTag EventGameplayTag, bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearGlobalEventByGameplayTag // (Final|Native|Public|BlueprintCallable) // @ game+0x2107980
	void ClearGlobalEventByClass(struct USolarGlobalEventBase* EventClass, bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearGlobalEventByClass // (Final|Native|Public|BlueprintCallable) // @ game+0x21078b0
	void ClearAllGlobalEventsClass(bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearAllGlobalEventsClass // (Final|Native|Public|BlueprintCallable) // @ game+0x2107820
	void ClearAllGlobalEventNames(bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearAllGlobalEventNames // (Final|Native|Public|BlueprintCallable) // @ game+0x2107790
	void ClearAllGlobalEventGameplayTags(bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearAllGlobalEventGameplayTags // (Final|Native|Public|BlueprintCallable) // @ game+0x2107700
	void CallGlobalEventByName(struct UObject* Publisher, struct FName EventName, struct UObject* Payload, struct TArray<struct FString>& MetaData); // Function Solarland.SolarGlobalEventSystem.CallGlobalEventByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2107560
	void CallGlobalEventByGameplayTag(struct UObject* Publisher, struct FGameplayTag EventGameplayTag, struct UObject* Payload, struct TArray<struct FString>& MetaData); // Function Solarland.SolarGlobalEventSystem.CallGlobalEventByGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21073c0
	void CallGlobalEventByClass(struct UObject* Publisher, struct USolarGlobalEventBase* EventClass, struct UObject* Payload, struct TArray<struct FString>& MetaData); // Function Solarland.SolarGlobalEventSystem.CallGlobalEventByClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2107220
	void BindGlobalEventByName(struct FName EventName, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.BindGlobalEventByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2107010
	void BindGlobalEventByGameplayTag(struct FGameplayTag EventGameplayTag, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.BindGlobalEventByGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2106f20
	void BindGlobalEventByClass(struct USolarGlobalEventBase* EventClass, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.BindGlobalEventByClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2106e30
};

// Class Solarland.SolarGlobalRepInfo
// Size: 0x360 (Inherited: 0x228)
struct ASolarGlobalRepInfo : AInfo {
	struct FSolarShieldItemShopDataArray ShieldItemShopInteractInfo; // 0x228(0x130)
	int32_t ShieldUpgradeItemShopGroupID; // 0x358(0x04)
	char pad_35C[0x4]; // 0x35c(0x04)

	void OnRep_ShieldUpgradeItemShopGroupID(); // Function Solarland.SolarGlobalRepInfo.OnRep_ShieldUpgradeItemShopGroupID // (Final|Native|Public) // @ game+0x21080c0
	void OnRep_ShieldItemShopInteractInfo(); // Function Solarland.SolarGlobalRepInfo.OnRep_ShieldItemShopInteractInfo // (Final|Native|Public) // @ game+0x21080a0
};

// Class Solarland.SolarPostProcessSettingItem
// Size: 0x16f0 (Inherited: 0x28)
struct USolarPostProcessSettingItem : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FColorGradingItem ColorGradingItem[0x4]; // 0x30(0x16c0)
};

// Class Solarland.SolarGraphicSettings
// Size: 0x2e8 (Inherited: 0x28)
struct USolarGraphicSettings : UObject {
	uint32_t CurrentActiveColorThemeIndex; // 0x28(0x04)
	struct FFrameRateLevelItem FrameRateLevelItem[0x5]; // 0x2c(0x50)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct TMap<enum class ESolarGraphicsQualityLevel, enum class ESolarFrameRateLevel> DefaultQualityToDefaultFrameRateLevel; // 0x80(0x50)
	struct TMap<enum class ESolarGraphicsQualityLevel, struct FMaxQualityConfig> DefaultAndCurQualityToMaxFrameRateLevel; // 0xd0(0x50)
	int32_t MobileMaxFrameRate; // 0x120(0x04)
	int32_t HighRefreshRateThreshold; // 0x124(0x04)
	int32_t DefaultMSAALevel; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct FContentScaleFactorLevelItem ContentScaleFactorLevelItems[0x4]; // 0x130(0x160)
	struct TMap<enum class ESolarDeviceLevel, enum class ESolarContentScaleFactorLevel> DefaultContentScaleFactorLevel; // 0x290(0x50)
	char pad_2E0[0x8]; // 0x2e0(0x08)
};

// Class Solarland.SolarGroundPreviewActor
// Size: 0x430 (Inherited: 0x228)
struct ASolarGroundPreviewActor : ASolarDormantActor {
	char pad_228[0x40]; // 0x228(0x40)
	struct FSolarItemData ItemData; // 0x268(0xb8)
	float SpawnOffset; // 0x320(0x04)
	char pad_324[0x4]; // 0x324(0x04)
	struct USphereComponent* SphereComponent; // 0x328(0x08)
	struct TArray<struct FSoftObjectPath> DiscardMatPath; // 0x330(0x10)
	struct FSoftObjectPath OutlineMatPath; // 0x340(0x18)
	char pad_358[0x8]; // 0x358(0x08)
	struct TArray<char> MarkedTeamIdList; // 0x360(0x10)
	int32_t WeaponLevel; // 0x370(0x04)
	enum class EWeaponType WeaponType; // 0x374(0x01)
	char pad_375[0x3]; // 0x375(0x03)
	int32_t FireModeNameLocalizationID; // 0x378(0x04)
	char pad_37C[0x4]; // 0x37c(0x04)
	struct FSlateBrush TriggerIcon; // 0x380(0x98)
	int32_t weaponid; // 0x418(0x04)
	bool bIsItemWeapon; // 0x41c(0x01)
	bool bIsSummonVehicleWeapon; // 0x41d(0x01)
	bool bIsAntiVehicleWeapon; // 0x41e(0x01)
	char pad_41F[0x1]; // 0x41f(0x01)
	struct USkeletalMeshComponent* SkeletalMeshComp; // 0x420(0x08)
	char pad_428[0x8]; // 0x428(0x08)

	void UnMarkThisItem(char TeamID); // Function Solarland.SolarGroundPreviewActor.UnMarkThisItem // (Native|Public) // @ game+0x21117f0
	void SetItemData(struct FSolarItemData& _ItemData); // Function Solarland.SolarGroundPreviewActor.SetItemData // (Native|Public|HasOutParms) // @ game+0x2110940
	void OnServerPawned(); // Function Solarland.SolarGroundPreviewActor.OnServerPawned // (Native|Public) // @ game+0x21103f0
	void OnRep_ItemDataChange(); // Function Solarland.SolarGroundPreviewActor.OnRep_ItemDataChange // (Native|Public) // @ game+0x80df50
	void NotifyThisItemWasPickedUp(); // Function Solarland.SolarGroundPreviewActor.NotifyThisItemWasPickedUp // (Final|Native|Public) // @ game+0x210fc20
	void MarkThisItem(char TeamID); // Function Solarland.SolarGroundPreviewActor.MarkThisItem // (Native|Public) // @ game+0x210f960
	int32_t GetQuality(); // Function Solarland.SolarGroundPreviewActor.GetQuality // (Native|Public) // @ game+0x210f320
};

// Class Solarland.SolarHealAndArmorPile
// Size: 0x670 (Inherited: 0x550)
struct ASolarHealAndArmorPile : ASolarPile {
	float HealQuantity; // 0x548(0x04)
	float HealFrequency; // 0x54c(0x04)
	struct UMaterialInstanceDynamic* DynamicMatHealPile; // 0x550(0x08)
	float MaterialDynamicOffSetYBegin; // 0x558(0x04)
	float MaterialDynamicOffSetYEnd; // 0x55c(0x04)
	float MaterialDynamicOffSetYCur; // 0x560(0x04)
	struct UUserWidget* FullEffectWidgetClass; // 0x568(0x08)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleStartPath; // 0x570(0x28)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleLoopPath; // 0x598(0x28)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleEndPath; // 0x5c0(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleStartPath; // 0x5e8(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleLoopPath; // 0x610(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleEndPath; // 0x638(0x28)
	struct UParticleSystemComponent* RangeLoopEffect; // 0x660(0x08)
	char pad_66C[0x4]; // 0x66c(0x04)

	void ClientHealPileSound(struct ASolarCharacter* ChargingCharacter, enum class EPileHealingType HealingType); // Function Solarland.SolarHealAndArmorPile.ClientHealPileSound // (Net|Native|Event|NetMulticast|Protected|NetClient) // @ game+0x210df90
};

// Class Solarland.SolarHealthPointModule
// Size: 0x28 (Inherited: 0x28)
struct USolarHealthPointModule : UBlueprintFunctionLibrary {

	void InflictDamageWithHitResult(struct UObject* WorldContextObject, struct FSolarDamageInfo& DamageInfo, struct FHitResult& HitResult); // Function Solarland.SolarHealthPointModule.InflictDamageWithHitResult // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x210f7f0
	void InflictDamageWithDamageEvent(struct AActor* TargetActor, float DamageTaken, struct FSolarPointDamageEvent& DamageEvent, struct AController* InstigatorController); // Function Solarland.SolarHealthPointModule.InflictDamageWithDamageEvent // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x210f650
};

// Class Solarland.SolarHomeConnectedGraph
// Size: 0xd0 (Inherited: 0x28)
struct USolarHomeConnectedGraph : UObject {
	struct TSet<struct ASolarHomeActor*> ConnectedFloors; // 0x28(0x50)
	struct TSet<struct ASolarHomeActor*> BaseWalls; // 0x78(0x50)
	char pad_C8[0x8]; // 0xc8(0x08)
};

// Class Solarland.SolarHomeActor
// Size: 0x3c0 (Inherited: 0x228)
struct ASolarHomeActor : AActor {
	struct UStaticMeshComponent* StaticMeshComp; // 0x228(0x08)
	struct FHomeActorStaticData HomeActorStaticData; // 0x230(0x38)
	struct FHomeActorServerData HomeActorServerData; // 0x268(0x68)
	struct TMap<struct FName, struct FHomeOriginalShader> OriginalShaders; // 0x2d0(0x50)
	char pad_320[0x10]; // 0x320(0x10)
	struct USolarHomeActorManager* HomeActorMgr; // 0x330(0x08)
	struct TArray<struct UBoxComponent*> BoxComps; // 0x338(0x10)
	struct TMap<struct ASolarHomeActor*, int32_t> HitHomeActors; // 0x348(0x50)
	struct USolarHomeConnectedGraph* CurrentConnectedGraph; // 0x398(0x08)
	struct TArray<struct ASolarHomeActor*> NeighborFloors; // 0x3a0(0x10)
	struct TArray<struct ASolarHomeActor*> NeighborWalls; // 0x3b0(0x10)

	void UpdateHomeActor(struct FHomeActorServerData& NewServerData); // Function Solarland.SolarHomeActor.UpdateHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x2111970
	void UpdateHitHomeActors(struct ASolarHomeActor* NewActor, bool isAdd); // Function Solarland.SolarHomeActor.UpdateHitHomeActors // (Final|Native|Private) // @ game+0x21118a0
	void SetStaticData(struct FHomeActorStaticData& NewData); // Function Solarland.SolarHomeActor.SetStaticData // (Final|Native|Protected|HasOutParms) // @ game+0x2110ef0
	void SetServerData(struct FHomeActorServerData& NewData); // Function Solarland.SolarHomeActor.SetServerData // (Final|Native|Protected|HasOutParms) // @ game+0x2110d70
	void SetMaterial(struct FHomeActorServerData& InServerData, bool bPlaceable); // Function Solarland.SolarHomeActor.SetMaterial // (Final|Native|Protected|HasOutParms) // @ game+0x2110ba0
	void OnOverlayEnd(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarHomeActor.OnOverlayEnd // (Final|Native|Private) // @ game+0x21102a0
	void OnOverlayBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarHomeActor.OnOverlayBegin // (Final|Native|Private|HasOutParms) // @ game+0x2110080
	void OnOverLap(struct AActor* OtherActor, bool isHitBegin); // Function Solarland.SolarHomeActor.OnOverLap // (Final|Native|Private) // @ game+0x210ffb0
	void OnCreatedByServer(struct FHomeActorStaticData& NewStaticData, struct FHomeActorServerData& NewServerData); // Function Solarland.SolarHomeActor.OnCreatedByServer // (Final|Native|Public|HasOutParms) // @ game+0x210fcd0
	void OnCanSaveChanged(bool bNewCanSave); // Function Solarland.SolarHomeActor.OnCanSaveChanged // (Final|Native|Private) // @ game+0x210fc40
	struct UDataTable* GetTextureDataTable(); // Function Solarland.SolarHomeActor.GetTextureDataTable // (Final|Native|Private) // @ game+0x210f5c0
	struct UStaticMeshComponent* GetStaticMeshComp(); // Function Solarland.SolarHomeActor.GetStaticMeshComp // (Final|Native|Public) // @ game+0x173a400
	struct FHomeActorStaticData GetStaticData(); // Function Solarland.SolarHomeActor.GetStaticData // (Final|Native|Public|Const) // @ game+0x210f3f0
	struct USolarHomeShaderConfig* GetShaderConfig(); // Function Solarland.SolarHomeActor.GetShaderConfig // (Final|Native|Private) // @ game+0x210f390
	struct FHomeActorServerData GetServerData(); // Function Solarland.SolarHomeActor.GetServerData // (Final|Native|Public|Const) // @ game+0x210f360
	bool GetNextLegalRotator(float RotAngle, struct FRotator& OutNextRot); // Function Solarland.SolarHomeActor.GetNextLegalRotator // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x210f230
	enum class EHomeActorSurfaceDir GetHitSurface(struct FVector& HitNormal); // Function Solarland.SolarHomeActor.GetHitSurface // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x210e840
	bool GetCanSave(); // Function Solarland.SolarHomeActor.GetCanSave // (Final|Native|Public) // @ game+0x210e720
	bool CanSelected(); // Function Solarland.SolarHomeActor.CanSelected // (Final|Native|Public) // @ game+0x210db10
	bool CanRemove(); // Function Solarland.SolarHomeActor.CanRemove // (Final|Native|Public) // @ game+0x210dae0
};

// Class Solarland.SolarHomeActorManager
// Size: 0x650 (Inherited: 0x28)
struct USolarHomeActorManager : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	struct TMap<struct FString, struct ASolarHomeActor*> SpawnedHomeActors; // 0x40(0x50)
	struct TMap<struct FIntVector, struct ASolarHomeActor*> SpawnedConstructsLocKey; // 0x90(0x50)
	struct TMap<struct FIntVector, struct ASolarHomeActor*> PreviewConstructsLocKey; // 0xe0(0x50)
	struct TSet<struct USolarHomeConnectedGraph*> ConnectedGraphSet; // 0x130(0x50)
	struct TMap<struct FString, struct ASolarHomeActor*> ClippingHomeActors; // 0x180(0x50)
	struct TMap<struct FString, struct ASolarHomeActor*> InValidHomeActors; // 0x1d0(0x50)
	struct TMap<struct FString, struct USubPoolOfHomeActor*> HomeActorPools; // 0x220(0x50)
	struct TMap<int32_t, struct FHomeActorStaticData> StaticDataMap; // 0x270(0x50)
	struct TMap<struct FString, struct UObject*> HomeActorClassPool; // 0x2c0(0x50)
	char pad_310[0x68]; // 0x310(0x68)
	struct TMap<struct FIntVector, struct ASolarHomeBaseSpace*> SpawnedSpacesLocKey; // 0x378(0x50)
	struct TMap<struct FIntVector, struct ASolarHomeBaseSpace*> ShowsSpacesLocKey; // 0x3c8(0x50)
	char pad_418[0x58]; // 0x418(0x58)
	struct UDataTable* HomeObjectTable; // 0x470(0x08)
	struct USolarHomeShaderConfig* ShaderConfig; // 0x478(0x08)
	struct UDataTable* TextureDataTable; // 0x480(0x08)
	struct UDataTable* IconDataTable; // 0x488(0x08)
	struct UDataTable* PicDataTable; // 0x490(0x08)
	int32_t BuildCountPerFrame; // 0x498(0x04)
	char pad_49C[0x14]; // 0x49c(0x14)
	struct ASolarHomeSpaceSpawner* HomeSpaceSpawner; // 0x4b0(0x08)
	struct ASolarHomePlayerController* HomePlayerCtrl; // 0x4b8(0x08)
	char pad_4C0[0x20]; // 0x4c0(0x20)
	struct ASolarWaterActorNew* WaterActor; // 0x4e0(0x08)
	struct TMap<struct FHomeShaderData, struct UMaterialInstanceDynamic*> HomeObjShadersPool; // 0x4e8(0x50)
	char pad_538[0x41]; // 0x538(0x41)
	bool bIsConstruct; // 0x579(0x01)
	bool IsLoadingOpen; // 0x57a(0x01)
	char pad_57B[0x2d]; // 0x57b(0x2d)
	struct TSet<struct ASolarHomeDragUI*> CacheDragUIs; // 0x5a8(0x50)
	struct TSet<struct ASolarHomeDragUI*> UsedDragUIs; // 0x5f8(0x50)
	char pad_648[0x8]; // 0x648(0x08)

	void UpdateCanSendSaveMsg(); // Function Solarland.SolarHomeActorManager.UpdateCanSendSaveMsg // (Final|Native|Private) // @ game+0x2111880
	void UpdateCameraLayer(int32_t NewLayer); // Function Solarland.SolarHomeActorManager.UpdateCameraLayer // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool TrySelectHomeActor(struct FString& SelectedThisID, bool bSelect); // Function Solarland.SolarHomeActorManager.TrySelectHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x21116f0
	bool TrySaveAllHomeActors(); // Function Solarland.SolarHomeActorManager.TrySaveAllHomeActors // (Final|Native|Public) // @ game+0x21116c0
	void TryResetAllHomeActors(); // Function Solarland.SolarHomeActorManager.TryResetAllHomeActors // (Final|Native|Public) // @ game+0x21116a0
	void TryRemoveHomeActors(struct TArray<struct FString>& RemoveThisID); // Function Solarland.SolarHomeActorManager.TryRemoveHomeActors // (Final|Native|Public|HasOutParms) // @ game+0x21115d0
	void TryRemoveHomeActor(struct FString& RemoveThisID); // Function Solarland.SolarHomeActorManager.TryRemoveHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x2111520
	void TryRemoveAllInvalidHomeActors(); // Function Solarland.SolarHomeActorManager.TryRemoveAllInvalidHomeActors // (Final|Native|Public) // @ game+0x2111500
	void TryRemoveAllHomeActors(); // Function Solarland.SolarHomeActorManager.TryRemoveAllHomeActors // (Final|Native|Public) // @ game+0x21114e0
	void TryDyeHomeActor(struct FString& DyeThisID, struct FString& SlotName, struct FString& TexturesID); // Function Solarland.SolarHomeActorManager.TryDyeHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x2111360
	void TryCreateHomeActorsNoLimit(struct TArray<struct FHomeBuildReqData>& ReqDataArr); // Function Solarland.SolarHomeActorManager.TryCreateHomeActorsNoLimit // (Final|Native|Public|HasOutParms) // @ game+0x2111280
	void TryCreateHomeActors(struct TArray<struct FHomeBuildReqData>& ReqData); // Function Solarland.SolarHomeActorManager.TryCreateHomeActors // (Final|Native|Public|HasOutParms) // @ game+0x21111a0
	void TryCreateHomeActor(struct FHomeBuildReqData& ReqData); // Function Solarland.SolarHomeActorManager.TryCreateHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x2111070
	void TryConfirmHomeActor(struct FString& SelectedThisID, bool bCancel); // Function Solarland.SolarHomeActorManager.TryConfirmHomeActor // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void TryCancelHomeActor(struct FString& SelectedThisID); // Function Solarland.SolarHomeActorManager.TryCancelHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x2110fc0
	void SetLastSelectingThisID(struct FString& InThisID); // Function Solarland.SolarHomeActorManager.SetLastSelectingThisID // (Final|Native|Public|HasOutParms) // @ game+0x2110af0
	void SetLastCreateThisID(struct FString& InThisID); // Function Solarland.SolarHomeActorManager.SetLastCreateThisID // (Final|Native|Public|HasOutParms) // @ game+0x2110a40
	void SetIsConstruct(bool bNewConstruct); // Function Solarland.SolarHomeActorManager.SetIsConstruct // (Final|Native|Public) // @ game+0x21108b0
	void SetHomeActorValid(struct ASolarHomeActor* TargetActor, bool bNewValid); // Function Solarland.SolarHomeActorManager.SetHomeActorValid // (Final|Native|Public) // @ game+0x21107e0
	void SetHoldingType(enum class EHomeActor_SecondType NewType); // Function Solarland.SolarHomeActorManager.SetHoldingType // (Final|Native|Public) // @ game+0x2110750
	void SetDragUILoc(struct ASolarHomeDragUI* TargetUI, struct FVector& NewLoc); // Function Solarland.SolarHomeActorManager.SetDragUILoc // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2110680
	void SetCurSelectingThisID(struct FString& InThisID, bool bSelected); // Function Solarland.SolarHomeActorManager.SetCurSelectingThisID // (Final|Native|Public|HasOutParms) // @ game+0x2110580
	void SetCurBuildingID(int32_t NewItemID); // Function Solarland.SolarHomeActorManager.SetCurBuildingID // (Final|Native|Public) // @ game+0x21104f0
	void SelectHomeActor_Request(struct FString& SelectedThisID, bool bSelect); // Function Solarland.SolarHomeActorManager.SelectHomeActor_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void SelectHomeActor_Other(struct FString ThisID); // Function Solarland.SolarHomeActorManager.SelectHomeActor_Other // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SaveBuilding_Request(bool bSave); // Function Solarland.SolarHomeActorManager.SaveBuilding_Request // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RotateHomeActor(struct ASolarHomeActor* TargetHomeActor, int32_t DeltaAngle); // Function Solarland.SolarHomeActorManager.RotateHomeActor // (Final|Native|Public) // @ game+0x2110420
	void RemoveHomeActors_Request(struct TArray<struct FString>& WillRemoveThisIDs); // Function Solarland.SolarHomeActorManager.RemoveHomeActors_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void RemoveHomeActor_Request(struct FString& WillRemoveThisID); // Function Solarland.SolarHomeActorManager.RemoveHomeActor_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void RemoveAllHomeActors_Request(); // Function Solarland.SolarHomeActorManager.RemoveAllHomeActors_Request // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnSelectingThisIDChanged(bool bSelect, struct FString& NewThisID); // Function Solarland.SolarHomeActorManager.OnSelectingThisIDChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnSelectingActorCanSaveChanged(bool bNewCanSave); // Function Solarland.SolarHomeActorManager.OnSelectingActorCanSaveChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool OnIsDragChanged(bool bIsDrag); // Function Solarland.SolarHomeActorManager.OnIsDragChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnInvalidActorsCountChanged(int32_t NewCount); // Function Solarland.SolarHomeActorManager.OnInvalidActorsCountChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnHoldingTypeChanged(enum class EHomeActor_SecondType OldType, enum class EHomeActor_SecondType NewType); // Function Solarland.SolarHomeActorManager.OnHoldingTypeChanged // (Final|Native|Public) // @ game+0x210fee0
	void NotifyWhenWallDevicePutOnOtherPlace(); // Function Solarland.SolarHomeActorManager.NotifyWhenWallDevicePutOnOtherPlace // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyWhenFloorDevicePutOnOtherPlace(); // Function Solarland.SolarHomeActorManager.NotifyWhenFloorDevicePutOnOtherPlace // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyWhenClickActorOnOtherFloor(); // Function Solarland.SolarHomeActorManager.NotifyWhenClickActorOnOtherFloor // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyWhenCeilingDevicePutOnOtherPlace(); // Function Solarland.SolarHomeActorManager.NotifyWhenCeilingDevicePutOnOtherPlace // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyLoadingUIChanged(bool bShow); // Function Solarland.SolarHomeActorManager.NotifyLoadingUIChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void MoveDevice(struct ASolarHomeActor* TargetHomeActor, struct ASolarHomeActor* ParHomeActor, enum class EHomeActorSurfaceDir HitDir, struct FVector& NewLoc); // Function Solarland.SolarHomeActorManager.MoveDevice // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x210fac0
	void MoveConstruct(struct ASolarHomeActor* TargetHomeActor, struct ASolarHomeBaseSpace* NewSpace); // Function Solarland.SolarHomeActorManager.MoveConstruct // (Final|Native|Public) // @ game+0x210f9f0
	bool HasFoundation(); // Function Solarland.SolarHomeActorManager.HasFoundation // (Final|Native|Public) // @ game+0x210f620
	struct UDataTable* GetTextureDataTable(); // Function Solarland.SolarHomeActorManager.GetTextureDataTable // (Final|Native|Public) // @ game+0x210f5f0
	struct FHomeActorStaticData GetStaticDataByItemID(int32_t ItemID); // Function Solarland.SolarHomeActorManager.GetStaticDataByItemID // (Final|Native|Public) // @ game+0x210f470
	struct USolarHomeShaderConfig* GetShaderConfig(); // Function Solarland.SolarHomeActorManager.GetShaderConfig // (Final|Native|Public) // @ game+0x210f3c0
	void GetMeshDefaultMat(int64_t InItemID, struct TArray<struct FBuildMeshSlotData>& outData); // Function Solarland.SolarHomeActorManager.GetMeshDefaultMat // (Final|Native|Public|HasOutParms) // @ game+0x210f110
	struct FString GetLastCreateThisID(); // Function Solarland.SolarHomeActorManager.GetLastCreateThisID // (Final|Native|Public|Const) // @ game+0x210f050
	int32_t GetInvalidActorsCount(); // Function Solarland.SolarHomeActorManager.GetInvalidActorsCount // (Final|Native|Public) // @ game+0x210f030
	struct ASolarHomeSpaceSpawner* GetHomeSpaceSpawner(); // Function Solarland.SolarHomeActorManager.GetHomeSpaceSpawner // (Final|Native|Public) // @ game+0x210f000
	struct ASolarHomePlayerController* GetHomePlayerCtrl(); // Function Solarland.SolarHomeActorManager.GetHomePlayerCtrl // (Final|Native|Public) // @ game+0x210efd0
	bool GetHomePicConfig(struct FString Name, struct FHomePic& OutConfig); // Function Solarland.SolarHomeActorManager.GetHomePicConfig // (Final|Native|Public|HasOutParms) // @ game+0x210ee60
	bool GetHomeObjectConfig(int32_t InItemID, struct FHomeObject& OutConfig); // Function Solarland.SolarHomeActorManager.GetHomeObjectConfig // (Final|Native|Public|HasOutParms) // @ game+0x210ece0
	bool GetHomeIconConfig(struct FString Name, struct FHomeIcon& OutConfig); // Function Solarland.SolarHomeActorManager.GetHomeIconConfig // (Final|Native|Public|HasOutParms) // @ game+0x210eb50
	enum class EHomeActor_SecondType GetHomeActorSecondType(int32_t ItemID); // Function Solarland.SolarHomeActorManager.GetHomeActorSecondType // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	enum class EHomeActor_FirstType GetHomeActorFirstType(int32_t ItemID); // Function Solarland.SolarHomeActorManager.GetHomeActorFirstType // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct ASolarHomeActor* GetHomeActorByThisID(struct FString& InThisID); // Function Solarland.SolarHomeActorManager.GetHomeActorByThisID // (Final|Native|Public|HasOutParms) // @ game+0x210ea70
	struct ASolarHomeActor* GetHomeActorByLoc(struct FVector& InLoc); // Function Solarland.SolarHomeActorManager.GetHomeActorByLoc // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x210e8e0
	struct FString GetCurSelectingThisID(); // Function Solarland.SolarHomeActorManager.GetCurSelectingThisID // (Final|Native|Public|Const) // @ game+0x210e780
	enum class EHomeActor_SecondType GetCurHoldingItemType(); // Function Solarland.SolarHomeActorManager.GetCurHoldingItemType // (Final|Native|Public|Const) // @ game+0x210e760
	int32_t GetCurBuildingID(); // Function Solarland.SolarHomeActorManager.GetCurBuildingID // (Final|Native|Public|Const) // @ game+0x210e740
	bool GetActorCanSave(struct ASolarHomeActor* InActor); // Function Solarland.SolarHomeActorManager.GetActorCanSave // (Final|Native|Public) // @ game+0x210e680
	void ExportHomeActorDataToPath(struct FString FilePath); // Function Solarland.SolarHomeActorManager.ExportHomeActorDataToPath // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void DyeingHomeActor_Request(struct FString& WillDyeingThisID, struct FString& SlotName, struct FString& TexturesID); // Function Solarland.SolarHomeActorManager.DyeingHomeActor_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void DeSelectAllHomeActors_Request(); // Function Solarland.SolarHomeActorManager.DeSelectAllHomeActors_Request // (Final|Native|Public) // @ game+0x210e660
	void CreateHomeActors_Request(struct TArray<struct FHomeBuildReqData>& WillCreateDatas); // Function Solarland.SolarHomeActorManager.CreateHomeActors_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void CreateHomeActor_Request(struct FHomeBuildReqData& WillCreateData); // Function Solarland.SolarHomeActorManager.CreateHomeActor_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void ClientUpdateHomeActor_UseQueue(struct FHomeActorServerData& UpdateData); // Function Solarland.SolarHomeActorManager.ClientUpdateHomeActor_UseQueue // (Final|Native|Public|HasOutParms) // @ game+0x210e4e0
	void ClientUpdateHomeActor(struct FHomeActorServerData& UpdateData); // Function Solarland.SolarHomeActorManager.ClientUpdateHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x210e360
	void ClientRemoveHomeActor_UseQueue(struct FHomeActorServerData& RemoveData); // Function Solarland.SolarHomeActorManager.ClientRemoveHomeActor_UseQueue // (Final|Native|Public|HasOutParms) // @ game+0x210e1e0
	void ClientRemoveHomeActor(struct FHomeActorServerData& RemoveData); // Function Solarland.SolarHomeActorManager.ClientRemoveHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x210e060
	void ClientCreateHomeActor_UseQueue(struct FHomeActorServerData& WillCreateData, enum class EHomeLoadingChangeType InLoadingType); // Function Solarland.SolarHomeActorManager.ClientCreateHomeActor_UseQueue // (Final|Native|Public|HasOutParms) // @ game+0x210ddd0
	bool ClientCreateHomeActor(struct FHomeActorServerData& WillCreateData, bool InIsConstruct); // Function Solarland.SolarHomeActorManager.ClientCreateHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x210dbf0
	void Clear(); // Function Solarland.SolarHomeActorManager.Clear // (Final|Native|Public) // @ game+0x210dbd0
	void ChangeCameraLayer(int32_t DeltaLayer); // Function Solarland.SolarHomeActorManager.ChangeCameraLayer // (Final|Native|Public) // @ game+0x210db40
	bool CanPreviewWithBuilding(int32_t TypeID); // Function Solarland.SolarHomeActorManager.CanPreviewWithBuilding // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool CanDevicePlace(enum class EHomeActor_SecondType DeviceType, struct ASolarHomeActor*& HitConstruct, enum class EHomeActorSurfaceDir& HitDir); // Function Solarland.SolarHomeActorManager.CanDevicePlace // (Final|Native|Public|HasOutParms) // @ game+0x210d9c0
};

// Class Solarland.SolarHomeBaseSpace
// Size: 0x250 (Inherited: 0x228)
struct ASolarHomeBaseSpace : AActor {
	struct USolarHomeActorManager* HomeActorMgr; // 0x228(0x08)
	struct TArray<struct UBoxComponent*> BoxComps; // 0x230(0x10)
	struct FBaseSpaceData BaseSpaceData; // 0x240(0x0c)
	char pad_24C[0x4]; // 0x24c(0x04)

	void UpdateHomeSpaceByData(struct FBaseSpaceData& NewData); // Function Solarland.SolarHomeBaseSpace.UpdateHomeSpaceByData // (Final|Native|Protected|HasOutParms) // @ game+0x2115d30
	void ShowBaseSpace(); // Function Solarland.SolarHomeBaseSpace.ShowBaseSpace // (Final|Native|Public) // @ game+0x2115c70
	void OnBaseSpaceUnOccupied(); // Function Solarland.SolarHomeBaseSpace.OnBaseSpaceUnOccupied // (Final|Native|Public) // @ game+0x2115550
	void OnBaseSpaceOccupied(); // Function Solarland.SolarHomeBaseSpace.OnBaseSpaceOccupied // (Final|Native|Public) // @ game+0x2115530
	void OnBaseSpaceCreated(int32_t Layer, enum class EHomeActor_SecondType BaseSpaceType); // Function Solarland.SolarHomeBaseSpace.OnBaseSpaceCreated // (Final|Native|Public) // @ game+0x2115460
	void HideBaseSpace(); // Function Solarland.SolarHomeBaseSpace.HideBaseSpace // (Final|Native|Public) // @ game+0x2114f80
	struct FBaseSpaceData GetData(); // Function Solarland.SolarHomeBaseSpace.GetData // (Final|Native|Public|Const) // @ game+0x2114d40
};

// Class Solarland.SolarHomeBuildComponent
// Size: 0xe0 (Inherited: 0xb0)
struct USolarHomeBuildComponent : UActorComponent {
	char pad_B0[0x10]; // 0xb0(0x10)
	struct USolarHomeActorManager* HomeActorMgr; // 0xc0(0x08)
	float MinCheckDistance; // 0xc8(0x04)
	float MaxCheckDistance; // 0xcc(0x04)
	bool IsBuilding; // 0xd0(0x01)
	char pad_D1[0x3]; // 0xd1(0x03)
	int32_t HoldingItemID; // 0xd4(0x04)
	struct ASolarHomeBaseSpace* HittingActor; // 0xd8(0x08)

	void StopBuild(); // Function Solarland.SolarHomeBuildComponent.StopBuild // (Final|Native|Public) // @ game+0x2115cf0
	void StartBuild(); // Function Solarland.SolarHomeBuildComponent.StartBuild // (Final|Native|Public) // @ game+0x2115c90
	void SetBuildingId(int32_t NewItemID); // Function Solarland.SolarHomeBuildComponent.SetBuildingId // (Final|Native|Public) // @ game+0x2115b60
	void SelecteHomeActor(struct ASolarHomeActor* WillSelectedActor); // Function Solarland.SolarHomeBuildComponent.SelecteHomeActor // (Final|Native|Protected) // @ game+0x2115ad0
	void InitHomeBuildComponent(); // Function Solarland.SolarHomeBuildComponent.InitHomeBuildComponent // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct ASolarCharacter* GetSolarOwner(); // Function Solarland.SolarHomeBuildComponent.GetSolarOwner // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2114f50
	void GetHitResult(struct ASolarHomeActor*& HitHomeActor, struct ASolarHomeBaseSpace*& HitBaseSapce, struct FVector& OutHitNormal, struct FVector& OutHitLocation); // Function Solarland.SolarHomeBuildComponent.GetHitResult // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2114d70
	void EndBuild(); // Function Solarland.SolarHomeBuildComponent.EndBuild // (Final|Native|Protected) // @ game+0x2114cf0
	void EmitBuilding(); // Function Solarland.SolarHomeBuildComponent.EmitBuilding // (Final|Native|Public) // @ game+0x2114cd0
	void CreateHomeActor(struct FHomeBuildReqData& ReqData); // Function Solarland.SolarHomeBuildComponent.CreateHomeActor // (Final|Native|Protected|HasOutParms) // @ game+0x2114ba0
	bool CanAttachSpace(int32_t ActorId, struct ASolarHomeBaseSpace* WillAttachHomeSpace); // Function Solarland.SolarHomeBuildComponent.CanAttachSpace // (Final|Native|Protected) // @ game+0x2114770
	void BeginBuild(); // Function Solarland.SolarHomeBuildComponent.BeginBuild // (Final|Native|Protected) // @ game+0x21146f0
};

// Class Solarland.SolarHomeCameraManager
// Size: 0x250 (Inherited: 0xb0)
struct USolarHomeCameraManager : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FCameraMovementParameters CameraMovementSetting; // 0xb8(0x68)
	char pad_120[0x14]; // 0x120(0x14)
	struct FVector LookAtLocation; // 0x134(0x0c)
	struct USolarHomeActorManager* HomeActorMgr; // 0x140(0x08)
	char pad_148[0x8]; // 0x148(0x08)
	struct ASolarHomeSpaceSpawner* CacheHomeSpaceSpawner; // 0x150(0x08)
	struct ACameraActor* BuildCamera; // 0x158(0x08)
	struct AActor* BattleCamera; // 0x160(0x08)
	struct UCameraComponent* BuildCameraComp; // 0x168(0x08)
	char pad_170[0xe0]; // 0x170(0xe0)

	void UpdateSliderScaleUI(float InScale); // Function Solarland.SolarHomeCameraManager.UpdateSliderScaleUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UpdateCameraDistanceUI(float InPercent, float InScale); // Function Solarland.SolarHomeCameraManager.UpdateCameraDistanceUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetNormalCameraTarget(); // Function Solarland.SolarHomeCameraManager.SetNormalCameraTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2115c50
	void SetConstructionCameraTarget(); // Function Solarland.SolarHomeCameraManager.SetConstructionCameraTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2115c10
	void RotateCameraSpin(float Value); // Function Solarland.SolarHomeCameraManager.RotateCameraSpin // (Final|Native|Public|BlueprintCallable) // @ game+0x2115a50
	void RotateCameraPitch(float Value); // Function Solarland.SolarHomeCameraManager.RotateCameraPitch // (Final|Native|Public|BlueprintCallable) // @ game+0x21159d0
	void MoveCameraRight(float Value); // Function Solarland.SolarHomeCameraManager.MoveCameraRight // (Final|Native|Public|BlueprintCallable) // @ game+0x2115350
	void MoveCameraForward(float Value); // Function Solarland.SolarHomeCameraManager.MoveCameraForward // (Final|Native|Public|BlueprintCallable) // @ game+0x21152d0
	void MoveCamera(int32_t Index, struct FVector& Location, struct TMap<int32_t, struct FVector> FingerLocations); // Function Solarland.SolarHomeCameraManager.MoveCamera // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2115070
	bool ChangeCameraMode(enum class EHomeCameraMode InMode); // Function Solarland.SolarHomeCameraManager.ChangeCameraMode // (Final|Native|Public|BlueprintCallable) // @ game+0x21149e0
	void ChangeCameraDistancePercent(bool IsDoubleFinger, float InPercent); // Function Solarland.SolarHomeCameraManager.ChangeCameraDistancePercent // (Final|Native|Public) // @ game+0x2114910
	void ChangeCameraDistanceDiff(bool IsDoubleFinger, float InValue); // Function Solarland.SolarHomeCameraManager.ChangeCameraDistanceDiff // (Final|Native|Public) // @ game+0x2114840
};

// Class Solarland.SolarHomeCharacter
// Size: 0x2080 (Inherited: 0x2080)
struct ASolarHomeCharacter : ASolarCharacter {
	struct USolarHomeBuildComponent* SolarHomeBuildComponent; // 0x2078(0x08)

	void MoveToBuildWait(struct FVector& WaitLoc); // Function Solarland.SolarHomeCharacter.MoveToBuildWait // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x21153d0
	void CharacterResetOfflinePos(struct FVector& Loc, uint32_t Roll, uint32_t yawPitch); // Function Solarland.SolarHomeCharacter.CharacterResetOfflinePos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2114a70
	void Building(); // Function Solarland.SolarHomeCharacter.Building // (Final|Native|Public) // @ game+0x2114750
};

// Class Solarland.SolarHomeDragUI
// Size: 0x240 (Inherited: 0x228)
struct ASolarHomeDragUI : AActor {
	char pad_228[0x18]; // 0x228(0x18)
};

// Class Solarland.SolarHomeFloorActor
// Size: 0x3c0 (Inherited: 0x3c0)
struct ASolarHomeFloorActor : ASolarHomeActor {
};

// Class Solarland.SolarHomeMeshConfig
// Size: 0x80 (Inherited: 0x30)
struct USolarHomeMeshConfig : UDataAsset {
	struct TMap<int64_t, struct FBuildMeshData> MeshData; // 0x30(0x50)
};

// Class Solarland.SolarHomePlayerController
// Size: 0x10f0 (Inherited: 0xe58)
struct ASolarHomePlayerController : ASolarPlayerController {
	struct UInputComponent* ConstructionInputComponent; // 0xe58(0x08)
	struct USolarHomeActorManager* HomeActorMgr; // 0xe60(0x08)
	struct ASolarHomeActor* DragActor; // 0xe68(0x08)
	float MinCheckDistance; // 0xe70(0x04)
	float MaxCheckDistance; // 0xe74(0x04)
	struct ASolarHomeSpaceSpawner* CacheHomeSpaceSpawner; // 0xe78(0x08)
	bool bIsViewMode; // 0xe80(0x01)
	bool bIsConstruction; // 0xe81(0x01)
	char pad_E82[0x6]; // 0xe82(0x06)
	struct UAkComponent* AkAudioComponent; // 0xe88(0x08)
	float MoveCheckDis; // 0xe90(0x04)
	char pad_E94[0x194]; // 0xe94(0x194)
	float CheckDis; // 0x1028(0x04)
	char pad_102C[0x94]; // 0x102c(0x94)
	struct USolarHomeCameraManager* CameraManager; // 0x10c0(0x08)
	struct FVector LookAtLocation; // 0x10c8(0x0c)
	struct FVector OriginalLookAtLocation; // 0x10d4(0x0c)
	struct AActor* CurrentViewTarget; // 0x10e0(0x08)
	struct AActor* OriginalViewTarget; // 0x10e8(0x08)

	void StopBuilding(); // Function Solarland.SolarHomePlayerController.StopBuilding // (Final|Native|Public) // @ game+0x2115d10
	void StartFadeOutEffect(); // Function Solarland.SolarHomePlayerController.StartFadeOutEffect // (Final|Native|Public) // @ game+0x2115cd0
	void StartBuilding(); // Function Solarland.SolarHomePlayerController.StartBuilding // (Final|Native|Public) // @ game+0x2115cb0
	void SolarGM_Home_ResetLayer(int32_t InLayer); // Function Solarland.SolarHomePlayerController.SolarGM_Home_ResetLayer // (Final|Exec|Native|Public) // @ game+0x15936f0
	void SolarGM_FillUpHome(); // Function Solarland.SolarHomePlayerController.SolarGM_FillUpHome // (Final|Exec|Native|Public) // @ game+0x8e9ae0
	void SolarGM_ExportHomeActorToPath(struct FString FilePath); // Function Solarland.SolarHomePlayerController.SolarGM_ExportHomeActorToPath // (Final|Exec|Native|Public) // @ game+0x20a3480
	void ShowBuildMainUI(bool bShow); // Function Solarland.SolarHomePlayerController.ShowBuildMainUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetNormalCameraTarget(); // Function Solarland.SolarHomePlayerController.SetNormalCameraTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2115c30
	void SetConstructionCameraTarget(); // Function Solarland.SolarHomePlayerController.SetConstructionCameraTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2115bf0
	void SendMoveToBackend(struct FServerMoveData& MoveData); // Function Solarland.SolarHomePlayerController.SendMoveToBackend // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void ResetConstructionCamera(); // Function Solarland.SolarHomePlayerController.ResetConstructionCamera // (Final|Exec|Native|Public) // @ game+0x21159b0
	void ResetCameraRotation(); // Function Solarland.SolarHomePlayerController.ResetCameraRotation // (Final|Native|Public) // @ game+0x2115990
	void OnTouchMove(int32_t Index, struct FVector& Location); // Function Solarland.SolarHomePlayerController.OnTouchMove // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21158a0
	void OnTouchEnd(int32_t Index, struct FVector& Location); // Function Solarland.SolarHomePlayerController.OnTouchEnd // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21157d0
	void OnTouchBegin(int32_t Index, struct FVector& Location); // Function Solarland.SolarHomePlayerController.OnTouchBegin // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2115700
	void OnDragBegin(struct FVector& Location); // Function Solarland.SolarHomePlayerController.OnDragBegin // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2115670
	void OnCameraRight(float Value); // Function Solarland.SolarHomePlayerController.OnCameraRight // (Final|Native|Public) // @ game+0x21155f0
	void OnCameraForward(float Value); // Function Solarland.SolarHomePlayerController.OnCameraForward // (Final|Native|Public) // @ game+0x2115570
	bool GetIsConstruction(); // Function Solarland.SolarHomePlayerController.GetIsConstruction // (Final|Native|Public|Const) // @ game+0x2114f30
	int32_t GetCameraCurrentLayer(); // Function Solarland.SolarHomePlayerController.GetCameraCurrentLayer // (Final|Native|Public) // @ game+0x2114d10
	void BindConstructionInput(); // Function Solarland.SolarHomePlayerController.BindConstructionInput // (Final|Native|Public) // @ game+0x2114730
	void BindBattleInput(); // Function Solarland.SolarHomePlayerController.BindBattleInput // (Final|Native|Public) // @ game+0x2114710
};

// Class Solarland.SolarHomePlayerWait
// Size: 0x2a0 (Inherited: 0x298)
struct ASolarHomePlayerWait : ASolarMapElementBase {
	int32_t TeamIndex; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
};

// Class Solarland.SolarHomeShaderConfig
// Size: 0x110 (Inherited: 0x30)
struct USolarHomeShaderConfig : UDataAsset {
	struct FSoftObjectPath EmissiveMatPath; // 0x30(0x18)
	struct FSoftObjectPath MaskedMatPath; // 0x48(0x18)
	struct FSoftObjectPath TranslucentMatPath; // 0x60(0x18)
	struct FSoftObjectPath DeleteEmissiveMatPath; // 0x78(0x18)
	struct FSoftObjectPath DeleteMaskedMatPath; // 0x90(0x18)
	struct FSoftObjectPath DeleteTranslucentMatPath; // 0xa8(0x18)
	struct FLinearColor PrdinaryColor; // 0xc0(0x10)
	struct FLinearColor PlaceableColor; // 0xd0(0x10)
	struct FLinearColor UnPlaceableColor; // 0xe0(0x10)
	struct FLinearColor PlaceableColorOther; // 0xf0(0x10)
	float BreathLightTimeScale; // 0x100(0x04)
	float PlaceableEmissveA; // 0x104(0x04)
	float UnPlaceableEmissveA; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
};

// Class Solarland.SolarHomeSpaceSpawner
// Size: 0x3c0 (Inherited: 0x298)
struct ASolarHomeSpaceSpawner : ASolarMapElementBase {
	struct USolarHomeActorManager* HomeActorMgr; // 0x298(0x08)
	struct TMap<enum class EHomeActor_SecondType, struct UObject*> TypeClassMap; // 0x2a0(0x50)
	struct TMap<float, int32_t> LayerMap; // 0x2f0(0x50)
	char pad_340[0x20]; // 0x340(0x20)
	float FloorUnit; // 0x360(0x04)
	float WallUnit; // 0x364(0x04)
	float BaseUnit; // 0x368(0x04)
	float RoundOnBase; // 0x36c(0x04)
	float RoundOnFloor; // 0x370(0x04)
	float ArrowOnBase; // 0x374(0x04)
	float ArrowOnFloor; // 0x378(0x04)
	float ArrowToWall; // 0x37c(0x04)
	char pad_380[0x8]; // 0x380(0x08)
	struct TArray<struct FTransform> BasisFloorsTransArr; // 0x388(0x10)
	char pad_398[0x20]; // 0x398(0x20)
	bool IsAirWallOpen; // 0x3b8(0x01)
	char pad_3B9[0x7]; // 0x3b9(0x07)

	void OpenAirWall(); // Function Solarland.SolarHomeSpaceSpawner.OpenAirWall // (Final|Native|Public) // @ game+0x2115970
	void Init(int32_t InBuildWidth, int32_t InBuildHeight); // Function Solarland.SolarHomeSpaceSpawner.Init // (Final|Native|Public) // @ game+0x2114fa0
	bool GetIsAirWallOpen(); // Function Solarland.SolarHomeSpaceSpawner.GetIsAirWallOpen // (Final|Native|Public) // @ game+0x2114f10
	void CloseAirWall(); // Function Solarland.SolarHomeSpaceSpawner.CloseAirWall // (Final|Native|Public) // @ game+0x2114b80
};

// Class Solarland.SolarHomeSummonWallActor
// Size: 0x238 (Inherited: 0x228)
struct ASolarHomeSummonWallActor : AActor {
	float UsingEffectSecondTime; // 0x228(0x04)
	char pad_22C[0x4]; // 0x22c(0x04)
	struct UStaticMeshComponent* SummonStaticMeshComp; // 0x230(0x08)

	void SetEffectPlayAllTime(float SecondTime); // Function Solarland.SolarHomeSummonWallActor.SetEffectPlayAllTime // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarHomeTrigger
// Size: 0x228 (Inherited: 0x228)
struct ASolarHomeTrigger : AActor {

	void OnActorExitLua(int32_t ID); // Function Solarland.SolarHomeTrigger.OnActorExitLua // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnActorExit(int32_t ID); // Function Solarland.SolarHomeTrigger.OnActorExit // (Final|Native|Public|BlueprintCallable) // @ game+0x2119580
	void OnActorEnterLua(int32_t ID); // Function Solarland.SolarHomeTrigger.OnActorEnterLua // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnActorEnter(int32_t ID); // Function Solarland.SolarHomeTrigger.OnActorEnter // (Final|Native|Public|BlueprintCallable) // @ game+0x21194f0
};

// Class Solarland.SolarHoverCraftVehicle
// Size: 0x1440 (Inherited: 0x13b0)
struct ASolarHoverCraftVehicle : ASolarHoverVehicle {
	float MeshOffsetWithoutDriver; // 0x13a8(0x04)
	float MeshOffsetLerpSpeed; // 0x13ac(0x04)
	struct TMap<enum class EHoverCraftHitType, float> HoverCraftHitImpulseMul; // 0x13b0(0x50)
	float HoverCraftHitImpulseLimit; // 0x1400(0x04)
	struct UBoxComponent* BodyBoxComp; // 0x1408(0x08)
	struct TArray<int32_t> BodyTraceExceptVehicleTypeIDs; // 0x1410(0x10)
	char pad_1424[0x1c]; // 0x1424(0x1c)

	void OnHoverCraftVehicleHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarHoverCraftVehicle.OnHoverCraftVehicleHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x21197b0
	void CheckBody(); // Function Solarland.SolarHoverCraftVehicle.CheckBody // (Final|Native|Protected) // @ game+0x2118fd0
};

// Class Solarland.SolarHoverCraftVehicleAnimInstance
// Size: 0x3b0 (Inherited: 0x360)
struct USolarHoverCraftVehicleAnimInstance : USolarHoverVehicleAnimInstance {
	struct ASolarHoverVehicle* MyHoverCraftVehicle; // 0x360(0x08)
	struct USolarHoverVehicleMovement* MyHoverCraftVehicleMoveComp; // 0x368(0x08)
	bool bStartUp; // 0x370(0x01)
	char pad_371[0x7]; // 0x371(0x07)
	float MaxStartUpSpeed; // 0x378(0x04)
	bool bDrop; // 0x37c(0x01)
	bool bInAir; // 0x37d(0x01)
	char pad_37E[0x2]; // 0x37e(0x02)
	float CompressMinValue[0x4]; // 0x380(0x10)
	float CompressFullRateValue[0x4]; // 0x390(0x10)
	float CompressXValue; // 0x3a0(0x04)
	float CompressYValue; // 0x3a4(0x04)
	bool bCompress; // 0x3a8(0x01)
	char pad_3A9[0x7]; // 0x3a9(0x07)

	void AnimNotify_StartUpLeft(); // Function Solarland.SolarHoverCraftVehicleAnimInstance.AnimNotify_StartUpLeft // (Final|Native|Public) // @ game+0x2118df0
	void AnimNotify_IdleEnter(); // Function Solarland.SolarHoverCraftVehicleAnimInstance.AnimNotify_IdleEnter // (Final|Native|Public) // @ game+0x2118dd0
	void AnimNotify_DropLeft(); // Function Solarland.SolarHoverCraftVehicleAnimInstance.AnimNotify_DropLeft // (Final|Native|Public) // @ game+0x2118db0
	void AnimNotify_CompressLeft(); // Function Solarland.SolarHoverCraftVehicleAnimInstance.AnimNotify_CompressLeft // (Final|Native|Public) // @ game+0x2118d90
};

// Class Solarland.SolarHoverMotorAnimInstance
// Size: 0x380 (Inherited: 0x360)
struct USolarHoverMotorAnimInstance : USolarHoverVehicleAnimInstance {
	struct FVector VehicleWeaponLeftOffset; // 0x360(0x0c)
	struct FVector VehicleWeaponRightOffset; // 0x36c(0x0c)
	char pad_378[0x8]; // 0x378(0x08)
};

// Class Solarland.SolarHoverVehicleMovement
// Size: 0x940 (Inherited: 0x138)
struct USolarHoverVehicleMovement : UPawnMovementComponent {
	char pad_138[0xf8]; // 0x138(0xf8)
	struct USkeletalMeshComponent* VehicleMesh; // 0x230(0x08)
	float MinLocationDiffForThrusterTrace; // 0x238(0x04)
	float MinRotationDiffForThrusterTrace; // 0x23c(0x04)
	float DriverJustOnTimer; // 0x240(0x04)
	struct FVector MassOffset; // 0x244(0x0c)
	float HoverForce; // 0x250(0x04)
	float HoverSpringCoefficient; // 0x254(0x04)
	float HoverDampingCoefficient; // 0x258(0x04)
	float HoverHeight; // 0x25c(0x04)
	float MinHoverHeight; // 0x260(0x04)
	float BouncinessForMinHoverHeight; // 0x264(0x04)
	struct TArray<struct FThrusterData> ThrusterDataArray; // 0x268(0x10)
	struct UCurveFloat* DustEffectScaleCurve; // 0x278(0x08)
	float ThrusterTargetAnimationBlendSpeed; // 0x280(0x04)
	float YawDegreeDifference; // 0x284(0x04)
	float SpoilerRotateSpeed; // 0x288(0x04)
	float MaxRudderRoll; // 0x28c(0x04)
	float MinRudderRoll; // 0x290(0x04)
	float MaxRudderYaw; // 0x294(0x04)
	float MinRudderYaw; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
	struct FRuntimeFloatCurve AccelerationCurve; // 0x2a0(0x88)
	float MaxSideMovingSpeed; // 0x328(0x04)
	float MaxBackwardMovingSpeed; // 0x32c(0x04)
	float DecelerationDegree; // 0x330(0x04)
	float DecelerationOnInput; // 0x334(0x04)
	float DecelerationOnMovingDirection; // 0x338(0x04)
	float MinDecelerationOnMovingDirection; // 0x33c(0x04)
	struct FGameplayTagContainer IgnoreDecelerationOnMovingDirectionTags; // 0x340(0x20)
	struct FRuntimeFloatCurve DecelerationOnSide; // 0x360(0x88)
	struct FRuntimeFloatCurve AccelerationMultiplierForSideVelocity; // 0x3e8(0x88)
	float MaxControllableDegree; // 0x470(0x04)
	char pad_474[0x4]; // 0x474(0x04)
	struct FGameplayTagContainer InAirControllableTags; // 0x478(0x20)
	float AdditionalDegreeForStabilize; // 0x498(0x04)
	char pad_49C[0x4]; // 0x49c(0x04)
	struct FRuntimeFloatCurve StabilizeDampingCurve; // 0x4a0(0x88)
	struct FRuntimeFloatCurve StabilizeSpeedCurve; // 0x528(0x88)
	float TimerForAntiStuck; // 0x5b0(0x04)
	float StuckAcceleration; // 0x5b4(0x04)
	float StuckAccelerationLerpSpeed; // 0x5b8(0x04)
	float GravityAcceleration; // 0x5bc(0x04)
	float GravityWithoutDriver; // 0x5c0(0x04)
	float LandingDuration; // 0x5c4(0x04)
	float MaximumVelocityOnZWithoutDriver; // 0x5c8(0x04)
	float DecelerationRateWithoutDriver; // 0x5cc(0x04)
	float AngularDampingWithoutDriver; // 0x5d0(0x04)
	float WaterLineForFloatingForce; // 0x5d4(0x04)
	float UpwardAccelerationFloatingOnWater; // 0x5d8(0x04)
	float WaterAlignSpeed; // 0x5dc(0x04)
	float WaterHeightWithoutDriver; // 0x5e0(0x04)
	struct FPIDController UpwardForcePIDController; // 0x5e4(0x1c)
	float RotateAccelaration; // 0x600(0x04)
	float RotateDecelaration; // 0x604(0x04)
	float MaxAngularSpeed; // 0x608(0x04)
	float HoverHeightMultiplierAfterBroken; // 0x60c(0x04)
	float ParticleMultiplierAfterBroken; // 0x610(0x04)
	char pad_614[0x4]; // 0x614(0x04)
	struct TArray<struct FVehicleVFX> ThrusterParticles; // 0x618(0x10)
	char pad_628[0x8]; // 0x628(0x08)
	struct FVehicleVFX MovementParticles[0x4]; // 0x630(0x240)
	char pad_870[0x78]; // 0x870(0x78)
	struct TArray<struct FThrusterState> ThrusterStateArray; // 0x8e8(0x10)
	struct ASolarVehiclePawn* VehiclePawn; // 0x8f8(0x08)
	struct USolarNetMovementComponent* VehicleNetMovement; // 0x900(0x08)
	struct UAkComponent* AkComponent; // 0x908(0x08)
	char pad_910[0x30]; // 0x910(0x30)

	void OnVehicleHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarHoverVehicleMovement.OnVehicleHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2119af0
	void OnDriverGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarHoverVehicleMovement.OnDriverGetOnVehicle // (Final|Native|Protected) // @ game+0x21196e0
	void OnDriverGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarHoverVehicleMovement.OnDriverGetOffVehicle // (Final|Native|Protected) // @ game+0x2119610
};

// Class Solarland.SolarHoverVehicleStencilAnimInstance
// Size: 0x2a0 (Inherited: 0x270)
struct USolarHoverVehicleStencilAnimInstance : UAnimInstance {
	struct FVector FLThrusterBoneScale; // 0x268(0x0c)
	struct FVector FRThrusterBoneScale; // 0x274(0x0c)
	struct FVector BLThrusterBoneScale; // 0x280(0x0c)
	struct FVector BRThrusterBoneScale; // 0x28c(0x0c)
	struct TWeakObjectPtr<struct USolarHoverVehicleAnimInstance> VehicleAnim; // 0x298(0x08)
};

// Class Solarland.SolarHPProgressBoard
// Size: 0x300 (Inherited: 0x260)
struct USolarHPProgressBoard : UUserWidget {
	struct UImage* ProgressBoard; // 0x260(0x08)
	struct UMaterialInstance* ProgressShader; // 0x268(0x08)
	float Speed; // 0x270(0x04)
	float RechargeSpeed; // 0x274(0x04)
	float RechargeTime; // 0x278(0x04)
	int32_t RechargeIndex; // 0x27c(0x04)
	bool bDebugMode; // 0x280(0x01)
	char pad_281[0x3]; // 0x281(0x03)
	float Percent1; // 0x284(0x04)
	float Percent2; // 0x288(0x04)
	float Percent3; // 0x28c(0x04)
	float Percent4; // 0x290(0x04)
	bool bNeedAlternateColor; // 0x294(0x01)
	char pad_295[0x3]; // 0x295(0x03)
	struct FLinearColor IncreaseColor; // 0x298(0x10)
	struct FLinearColor DecreaseColor; // 0x2a8(0x10)
	char pad_2B8[0x48]; // 0x2b8(0x48)

	void UpdateMaxValue(float Max); // Function Solarland.SolarHPProgressBoard.UpdateMaxValue // (Final|Native|Public|BlueprintCallable) // @ game+0x211a640
	void UpdateCurrentValue(float Current); // Function Solarland.SolarHPProgressBoard.UpdateCurrentValue // (Final|Native|Public|BlueprintCallable) // @ game+0x211a5c0
	void SetSpacing(float InValue); // Function Solarland.SolarHPProgressBoard.SetSpacing // (Final|Native|Public|BlueprintCallable) // @ game+0x211a410
	void SetProgressColorByID(struct FLinearColor& InColor, int32_t InID); // Function Solarland.SolarHPProgressBoard.SetProgressColorByID // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
	void SetPreAddColor(); // Function Solarland.SolarHPProgressBoard.SetPreAddColor // (Final|Native|Public|BlueprintCallable) // @ game+0x211a3f0
	void SetPercentageByIndex(float Percent, int32_t Index); // Function Solarland.SolarHPProgressBoard.SetPercentageByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x211a320
	void SetFragment(float Num); // Function Solarland.SolarHPProgressBoard.SetFragment // (Final|Native|Public|BlueprintCallable) // @ game+0x211a2a0
	void SetCurrentValueInstantly(float Current); // Function Solarland.SolarHPProgressBoard.SetCurrentValueInstantly // (Final|Native|Public|BlueprintCallable) // @ game+0x211a220
	void SetAlternateColor(struct FLinearColor& InColor, bool IsChangeBoth, bool IsForIncrease); // Function Solarland.SolarHPProgressBoard.SetAlternateColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x211a0f0
	void PreAddValue(float InCurrentValue, float InChangeValue, enum class EShieldRechargeState RechargeState, bool bInFixPreAdd, bool bInAdaptiveRecharge); // Function Solarland.SolarHPProgressBoard.PreAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2119eb0
	void InitProgressBoard(float Current, float Max, float Fragment); // Function Solarland.SolarHPProgressBoard.InitProgressBoard // (Final|Native|Public|BlueprintCallable) // @ game+0x21193b0
	void InitProgress(); // Function Solarland.SolarHPProgressBoard.InitProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x2119390
	struct FLinearColor GetAlternateColor(bool bIncrease); // Function Solarland.SolarHPProgressBoard.GetAlternateColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x21191d0
	void DoMinusValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarHPProgressBoard.DoMinusValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2119100
	void DoAddValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarHPProgressBoard.DoAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2119030
	void CancelAddValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarHPProgressBoard.CancelAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2118f00
};

// Class Solarland.SolarHttpManager
// Size: 0x148 (Inherited: 0x30)
struct USolarHttpManager : USolarGameManager {
	char pad_30[0x18]; // 0x30(0x18)
	struct TMap<struct FString, int32_t> ReportStr2ReprotTimes; // 0x48(0x50)
	int32_t ReportRetryTimes; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct FMulticastInlineDelegate OnImgUploaded; // 0xa0(0x10)
	char pad_B0[0x1c]; // 0xb0(0x1c)
	int32_t Jank; // 0xcc(0x04)
	int32_t BigJank; // 0xd0(0x04)
	float FPS25; // 0xd4(0x04)
	char pad_D8[0x28]; // 0xd8(0x28)
	int32_t PeakPlayerNum; // 0x100(0x04)
	int32_t PeakAINum; // 0x104(0x04)
	int32_t PeakVehicleNum; // 0x108(0x04)
	char pad_10C[0x3c]; // 0x10c(0x3c)

	void UploadToHTTP(struct FString URL, struct FString str); // Function Solarland.SolarHttpManager.UploadToHTTP // (Final|Native|Public|BlueprintCallable) // @ game+0x211a8f0
	void UploadImg(int32_t& AppId, int32_t& AppUid, struct FString AppToken, int32_t& GameID, int32_t& Uid, struct FString SourceImgPath); // Function Solarland.SolarHttpManager.UploadImg // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x211a6c0
	struct FString StringToBase64(struct FString str); // Function Solarland.SolarHttpManager.StringToBase64 // (Final|Native|Public|BlueprintCallable) // @ game+0x211a4d0
	void StopRecordJank(); // Function Solarland.SolarHttpManager.StopRecordJank // (Final|Native|Public|BlueprintCallable) // @ game+0x211a4b0
	void StartRecordJank(); // Function Solarland.SolarHttpManager.StartRecordJank // (Final|Native|Public|BlueprintCallable) // @ game+0x211a490
	void ResetPerfData(bool bKeepCurrentData); // Function Solarland.SolarHttpManager.ResetPerfData // (Final|Native|Public|BlueprintCallable) // @ game+0x211a060
	void ReportAbnormalPlayerWeaponToBackend(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue, struct FString InAttackLocation, struct FString InHitLocation, struct FString InHitBoneScale, struct FString InWeaponBlueprintName); // Function Solarland.SolarHttpManager.ReportAbnormalPlayerWeaponToBackend // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReportAbnormalPlayerVehicleToBackend(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue, struct FString InVehiclePreviousLocation, struct FString InVehiclePresentLocation, struct FString InVehicleBlueprintName); // Function Solarland.SolarHttpManager.ReportAbnormalPlayerVehicleToBackend // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReportAbnormalPlayerToBackend(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue); // Function Solarland.SolarHttpManager.ReportAbnormalPlayerToBackend // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReportAbnormalPlayerBaittingToBackend(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue, struct FString InDamageType, struct FString InBotLocation, struct FString InPlayerLocation); // Function Solarland.SolarHttpManager.ReportAbnormalPlayerBaittingToBackend // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReCordOnlineError(struct FString InStr); // Function Solarland.SolarHttpManager.ReCordOnlineError // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnImgUploaded__DelegateSignature(int32_t RespCode, struct FString RespMsg, struct FString ImgUrl); // DelegateFunction Solarland.SolarHttpManager.OnImgUploaded__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void InitializeDelegates(); // Function Solarland.SolarHttpManager.InitializeDelegates // (Final|Native|Public|BlueprintCallable) // @ game+0x21194d0
	struct FString GetHttpReportUrl(); // Function Solarland.SolarHttpManager.GetHttpReportUrl // (Final|Native|Public|BlueprintCallable) // @ game+0x2119310
	float GetAvgNum(int32_t PerfType); // Function Solarland.SolarHttpManager.GetAvgNum // (Final|Native|Public|BlueprintCallable) // @ game+0x2119270
	void ClearDelegates(); // Function Solarland.SolarHttpManager.ClearDelegates // (Final|Native|Public|BlueprintCallable) // @ game+0x2119010
	void CleanPerfDirtyData(); // Function Solarland.SolarHttpManager.CleanPerfDirtyData // (Final|Native|Public|BlueprintCallable) // @ game+0x2118ff0
	struct FString Base64ToMD5(struct FString str); // Function Solarland.SolarHttpManager.Base64ToMD5 // (Final|Native|Public|BlueprintCallable) // @ game+0x2118e10
};

// Class Solarland.SolarHUDEventSubsystem
// Size: 0x50 (Inherited: 0x30)
struct USolarHUDEventSubsystem : UWorldSubsystem {
	struct FMulticastInlineDelegate OnSettingConfigSaved; // 0x30(0x10)
	struct FMulticastInlineDelegate OnPickupSettingChanged; // 0x40(0x10)

	void SimpleTriggerDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarHUDEventSubsystem.SimpleTriggerDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void ClearDelegates(); // Function Solarland.SolarHUDEventSubsystem.ClearDelegates // (Final|Native|Protected) // @ game+0x211d970
	void BroadcastOnSettingConfigSaved(); // Function Solarland.SolarHUDEventSubsystem.BroadcastOnSettingConfigSaved // (Final|Native|Public) // @ game+0x211d550
	void BroadcastOnPickupSettingChanged(); // Function Solarland.SolarHUDEventSubsystem.BroadcastOnPickupSettingChanged // (Final|Native|Public) // @ game+0x211d4b0
};

// Class Solarland.SolarHUDInGame
// Size: 0x4d8 (Inherited: 0x318)
struct ASolarHUDInGame : ASolarHUD {
	struct FMulticastInlineDelegate OnVJetForbiddenChanged; // 0x318(0x10)
	struct FMulticastInlineDelegate OnHJetForbiddenChanged; // 0x328(0x10)
	struct FMulticastInlineDelegate OnVJetTotalTimesSet; // 0x338(0x10)
	struct FMulticastInlineDelegate OnHJetTotalTimesSet; // 0x348(0x10)
	struct FMulticastInlineDelegate OnVJetRestTimesSet; // 0x358(0x10)
	struct FMulticastInlineDelegate OnHJetRestTimesSet; // 0x368(0x10)
	struct FMulticastInlineDelegate OnVJetChargeStateChanged; // 0x378(0x10)
	struct FMulticastInlineDelegate OnVJetCDStateChanged; // 0x388(0x10)
	struct FMulticastInlineDelegate OnHJetChargeStateChanged; // 0x398(0x10)
	struct FMulticastInlineDelegate OnHJetCDStateChanged; // 0x3a8(0x10)
	struct FMulticastInlineDelegate OnVJetTimesCharging; // 0x3b8(0x10)
	struct FMulticastInlineDelegate OnHJetTimesCharging; // 0x3c8(0x10)
	struct FMulticastInlineDelegate OnVJetCoolingDown; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnHJetCoolingDown; // 0x3e8(0x10)
	struct FMulticastInlineDelegate OnVJetModuleLevelChanged; // 0x3f8(0x10)
	struct FMulticastInlineDelegate OnHJetModuleLevelChanged; // 0x408(0x10)
	char pad_418[0x10]; // 0x418(0x10)
	struct FMulticastInlineDelegate OnSkydiveFlyStateChanged; // 0x428(0x10)
	struct FMulticastInlineDelegate OnSkydiveAltitudeUpdate; // 0x438(0x10)
	struct FMulticastInlineDelegate OnSkydiveSpeedUpdate; // 0x448(0x10)
	char pad_458[0x40]; // 0x458(0x40)
	struct FMulticastInlineDelegate OnTeammateStateChanged; // 0x498(0x10)
	struct FMulticastInlineDelegate OnCharacterRescueStateChanged; // 0x4a8(0x10)
	char pad_4B8[0x20]; // 0x4b8(0x20)

	void ShowDiePage(); // Function Solarland.SolarHUDInGame.ShowDiePage // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OpenSetting(); // Function Solarland.SolarHUDInGame.OpenSetting // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OpenMap(); // Function Solarland.SolarHUDInGame.OpenMap // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnTimeToEndMessage(int32_t TimeToEnd); // Function Solarland.SolarHUDInGame.OnTimeToEndMessage // (Final|Native|Public|BlueprintCallable) // @ game+0x211dc20
	void OnTeammateStateChanged__DelegateSignature(bool NeedRefresh); // DelegateFunction Solarland.SolarHUDInGame.OnTeammateStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.SolarHUDInGame.OnSpectateTargetChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnSkydiveSpeedUpdate__DelegateSignature(float NewSpeed); // DelegateFunction Solarland.SolarHUDInGame.OnSkydiveSpeedUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSkydiveFlyStateChanged__DelegateSignature(bool bInFly); // DelegateFunction Solarland.SolarHUDInGame.OnSkydiveFlyStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSkydiveDataUpdate__DelegateSignature(float NewData); // DelegateFunction Solarland.SolarHUDInGame.OnSkydiveDataUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSkydiveAltitudeUpdate__DelegateSignature(float NewHeight, float NewZValue); // DelegateFunction Solarland.SolarHUDInGame.OnSkydiveAltitudeUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnReceiveBeginPlay(); // Function Solarland.SolarHUDInGame.OnReceiveBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerNumberChange(); // Function Solarland.SolarHUDInGame.OnPlayerNumberChange // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnMarkButtonTouchMoved__DelegateSignature(float DegreeToCenter); // DelegateFunction Solarland.SolarHUDInGame.OnMarkButtonTouchMoved__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnMarkButtonHoverChanged__DelegateSignature(bool bIsHovered); // DelegateFunction Solarland.SolarHUDInGame.OnMarkButtonHoverChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnMarkButtonDragSelectEnded__DelegateSignature(); // DelegateFunction Solarland.SolarHUDInGame.OnMarkButtonDragSelectEnded__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnMarkButtonBeenLoopPressed__DelegateSignature(); // DelegateFunction Solarland.SolarHUDInGame.OnMarkButtonBeenLoopPressed__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnJetTimesChanged__DelegateSignature(int32_t NewTimes); // DelegateFunction Solarland.SolarHUDInGame.OnJetTimesChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnJetModuleLevelChanged__DelegateSignature(int32_t NewLevel); // DelegateFunction Solarland.SolarHUDInGame.OnJetModuleLevelChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnJetFlyStateChanged__DelegateSignature(bool bStart); // DelegateFunction Solarland.SolarHUDInGame.OnJetFlyStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnJetFlyForbiddenChanged__DelegateSignature(bool bForbidden); // DelegateFunction Solarland.SolarHUDInGame.OnJetFlyForbiddenChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnJetFlyDataUpdated__DelegateSignature(float Value, float Percent); // DelegateFunction Solarland.SolarHUDInGame.OnJetFlyDataUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterRescueStateChanged__DelegateSignature(enum class ERescueState NewRescueState); // DelegateFunction Solarland.SolarHUDInGame.OnCharacterRescueStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterEnterWater__DelegateSignature(); // DelegateFunction Solarland.SolarHUDInGame.OnCharacterEnterWater__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCharacterDead__DelegateSignature(); // DelegateFunction Solarland.SolarHUDInGame.OnCharacterDead__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCapsulePlayerNumChange(int32_t CurrentNum, int32_t Total); // Function Solarland.SolarHUDInGame.OnCapsulePlayerNumChange // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyBombingEnd(int32_t BombId); // Function Solarland.SolarHUDInGame.NotifyBombingEnd // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyBombingBegin(int32_t BombId, struct FVector Location, float Radius); // Function Solarland.SolarHUDInGame.NotifyBombingBegin // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
	void MarkWarningOnWorld(); // Function Solarland.SolarHUDInGame.MarkWarningOnWorld // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void MarkPointOnWorld(); // Function Solarland.SolarHUDInGame.MarkPointOnWorld // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool HasBegunPlay(); // Function Solarland.SolarHUDInGame.HasBegunPlay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x211db60
	void HandleSendQuickMessage(struct FString NickName, struct FString Message, bool IsLocalPlayer, bool bSound); // Function Solarland.SolarHUDInGame.HandleSendQuickMessage // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void CloseSetting(); // Function Solarland.SolarHUDInGame.CloseSetting // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void CloseMap(); // Function Solarland.SolarHUDInGame.CloseMap // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void BroadcastSkydiveSpeed_Internal(); // Function Solarland.SolarHUDInGame.BroadcastSkydiveSpeed_Internal // (Final|Native|Protected) // @ game+0x211d950
	void BroadcastSkydiveSpeed(); // Function Solarland.SolarHUDInGame.BroadcastSkydiveSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x211d930
	void BroadcastOnVJetTotalTimesSetDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetTotalTimesSetDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d8f0
	void BroadcastOnVJetTotalTimesSet_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetTotalTimesSet_Internal // (Final|Native|Protected) // @ game+0x211d910
	void BroadcastOnVJetTimesChargingDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetTimesChargingDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d8b0
	void BroadcastOnVJetTimesCharging_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetTimesCharging_Internal // (Final|Native|Protected) // @ game+0x211d8d0
	void BroadcastOnVJetRestTimesSetDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetRestTimesSetDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d870
	void BroadcastOnVJetRestTimesSet_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetRestTimesSet_Internal // (Final|Native|Protected) // @ game+0x211d890
	void BroadcastOnVJetModuleLevelChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetModuleLevelChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d830
	void BroadcastOnVJetModuleLevelChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetModuleLevelChanged_Internal // (Final|Native|Protected) // @ game+0x211d850
	void BroadcastOnVJetForbiddenChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetForbiddenChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d7f0
	void BroadcastOnVJetForbiddenChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetForbiddenChanged_Internal // (Final|Native|Protected) // @ game+0x211d810
	void BroadcastOnVJetCoolingDownDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetCoolingDownDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d7b0
	void BroadcastOnVJetCoolingDown_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetCoolingDown_Internal // (Final|Native|Protected) // @ game+0x211d7d0
	void BroadcastOnVJetChargeStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetChargeStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d770
	void BroadcastOnVJetChargeStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetChargeStateChanged_Internal // (Final|Native|Protected) // @ game+0x211d790
	void BroadcastOnVJetCDStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetCDStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d730
	void BroadcastOnVJetCDStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetCDStateChanged_Internal // (Final|Native|Protected) // @ game+0x211d750
	void BroadcastOnTeammateStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnTeammateStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d6f0
	void BroadcastOnTeammateStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnTeammateStateChanged_Internal // (Final|Native|Protected) // @ game+0x211d710
	void BroadcastOnSkydiveFlyStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnSkydiveFlyStateChanged_Internal // (Final|Native|Protected) // @ game+0x211d6d0
	void BroadcastOnSkydiveFlyStateChanged(); // Function Solarland.SolarHUDInGame.BroadcastOnSkydiveFlyStateChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x211d6b0
	void BroadcastOnShowGameNoticeDelegateDeprecated(int32_t InNoticeID, struct TMap<struct FString, struct FString>& InNoticeParams); // Function Solarland.SolarHUDInGame.BroadcastOnShowGameNoticeDelegateDeprecated // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x211d570
	void BroadcastOnRefreshBackpackWeaponPartDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnRefreshBackpackWeaponPartDelegate // (Final|Native|Public) // @ game+0x211d530
	void BroadcastOnRefreshBackpackWeaponDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnRefreshBackpackWeaponDelegate // (Final|Native|Public) // @ game+0x211d510
	void BroadcastOnRefreshBackpackItemDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnRefreshBackpackItemDelegate // (Final|Native|Public) // @ game+0x211d4f0
	void BroadcastOnRefreshBackpackEquipDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnRefreshBackpackEquipDelegate // (Final|Native|Public) // @ game+0x211d4d0
	void BroadcastOnHJetTotalTimesSetDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetTotalTimesSetDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d470
	void BroadcastOnHJetTotalTimesSet_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetTotalTimesSet_Internal // (Final|Native|Protected) // @ game+0x211d490
	void BroadcastOnHJetTimesChargingDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetTimesChargingDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d430
	void BroadcastOnHJetTimesCharging_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetTimesCharging_Internal // (Final|Native|Protected) // @ game+0x211d450
	void BroadcastOnHJetRestTimesSetDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetRestTimesSetDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d3f0
	void BroadcastOnHJetRestTimesSet_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetRestTimesSet_Internal // (Final|Native|Protected) // @ game+0x211d410
	void BroadcastOnHJetModuleLevelChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetModuleLevelChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d3b0
	void BroadcastOnHJetModuleLevelChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetModuleLevelChanged_Internal // (Final|Native|Protected) // @ game+0x211d3d0
	void BroadcastOnHJetForbiddenChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetForbiddenChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d370
	void BroadcastOnHJetForbiddenChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetForbiddenChanged_Internal // (Final|Native|Protected) // @ game+0x211d390
	void BroadcastOnHJetCoolingDownDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetCoolingDownDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d330
	void BroadcastOnHJetCoolingDown_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetCoolingDown_Internal // (Final|Native|Protected) // @ game+0x211d350
	void BroadcastOnHJetChargeStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetChargeStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d2f0
	void BroadcastOnHJetChargeStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetChargeStateChanged_Internal // (Final|Native|Protected) // @ game+0x211d310
	void BroadcastOnHJetCDStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetCDStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x211d2b0
	void BroadcastOnHJetCDStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetCDStateChanged_Internal // (Final|Native|Protected) // @ game+0x211d2d0
	void BroadcastOnBindPickupDelegates(); // Function Solarland.SolarHUDInGame.BroadcastOnBindPickupDelegates // (Final|Native|Public) // @ game+0x211d290
	void BroadcastOnBindItemPanelDelegates(); // Function Solarland.SolarHUDInGame.BroadcastOnBindItemPanelDelegates // (Final|Native|Public) // @ game+0x211d270
	void BroadcastOnBindHPPanelDelegates(); // Function Solarland.SolarHUDInGame.BroadcastOnBindHPPanelDelegates // (Final|Native|Public) // @ game+0x211d250
	void BindLocalPlayerSpectateDelegates(struct ASolarSpectateInfo* LocalSpecInfo); // Function Solarland.SolarHUDInGame.BindLocalPlayerSpectateDelegates // (Final|Native|Private) // @ game+0x211d1c0
};

// Class Solarland.SolarHyperLinkRichText
// Size: 0x730 (Inherited: 0x720)
struct USolarHyperLinkRichText : URichTextBlock {
	struct FMulticastInlineDelegate OnHyperLinkClicked; // 0x720(0x10)
};

// Class Solarland.SolarImage
// Size: 0x2e0 (Inherited: 0x138)
struct USolarImage : UWidget {
	struct FSlateBrush Brush; // 0x138(0x98)
	enum class ESolarImageFillType FillType; // 0x1d0(0x01)
	char pad_1D1[0x7]; // 0x1d1(0x07)
	struct FSolarImageProgressInfo ImageProgressInfo; // 0x1d8(0x20)
	struct FDelegate BrushDelegate; // 0x1f8(0x10)
	struct FLinearColor ColorAndOpacity; // 0x208(0x10)
	struct FDelegate ColorAndOpacityDelegate; // 0x218(0x10)
	bool bEnableLocImage; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)
	struct FText ImagePath; // 0x230(0x18)
	int32_t LocTextID; // 0x248(0x04)
	enum class ESolarSupportLanguages PreviewLang; // 0x24c(0x01)
	char pad_24D[0x3]; // 0x24d(0x03)
	struct FDelegate OnMouseButtonDownEvent; // 0x250(0x10)
	struct FDelegate OnMouseButtonUpEvent; // 0x260(0x10)
	struct FDelegate OnMouseMoveEvent; // 0x270(0x10)
	char pad_280[0x60]; // 0x280(0x60)

	void UpdateImageAsync(int32_t NewLocTextID); // Function Solarland.SolarImage.UpdateImageAsync // (Final|Native|Protected) // @ game+0x211f550
	void UpdateImage(int32_t NewLocTextID); // Function Solarland.SolarImage.UpdateImage // (Final|Native|Protected) // @ game+0x211f4c0
	void SetOpacity(float InOpacity); // Function Solarland.SolarImage.SetOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x211f320
	void SetImageProgressInfo(struct FSolarImageProgressInfo& InSolarImageProgressInfo); // Function Solarland.SolarImage.SetImageProgressInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x211f270
	void SetImageProgressByInfo(struct FSolarImageProgressInfo& InSolarImageProgressInfo); // Function Solarland.SolarImage.SetImageProgressByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x211f1c0
	void SetImageProgress(float InProgress); // Function Solarland.SolarImage.SetImageProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x211f140
	void SetImageFillType(enum class ESolarImageFillType InImageFillType); // Function Solarland.SolarImage.SetImageFillType // (Final|Native|Public|BlueprintCallable) // @ game+0x211f0c0
	void SetColorAndOpacity(struct FLinearColor InColorAndOpacity); // Function Solarland.SolarImage.SetColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x211efa0
	void SetBrushTintColor(struct FSlateColor TintColor); // Function Solarland.SolarImage.SetBrushTintColor // (Final|Native|Public|BlueprintCallable) // @ game+0x211edc0
	void SetBrushSize(struct FVector2D DesiredSize); // Function Solarland.SolarImage.SetBrushSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x211ecc0
	void SetBrushResourceObject(struct UObject* ResourceObject); // Function Solarland.SolarImage.SetBrushResourceObject // (Final|Native|Public|BlueprintCallable) // @ game+0x211eba0
	void SetBrushFromTextureDynamic(struct UTexture2DDynamic* Texture, bool bMatchSize); // Function Solarland.SolarImage.SetBrushFromTextureDynamic // (Native|Public|BlueprintCallable) // @ game+0x211ea00
	void SetBrushFromTexture(struct UTexture2D* Texture, bool bMatchSize); // Function Solarland.SolarImage.SetBrushFromTexture // (Native|Public|BlueprintCallable) // @ game+0x211e860
	void SetBrushFromSoftTexture(struct TSoftObjectPtr<UTexture2D> SoftTexture, bool bMatchSize); // Function Solarland.SolarImage.SetBrushFromSoftTexture // (Native|Public|BlueprintCallable) // @ game+0x211e5c0
	void SetBrushFromSoftMaterial(struct TSoftObjectPtr<UMaterialInterface> SoftMaterial); // Function Solarland.SolarImage.SetBrushFromSoftMaterial // (Native|Public|BlueprintCallable) // @ game+0x211e3a0
	void SetBrushFromMaterial(struct UMaterialInterface* Material); // Function Solarland.SolarImage.SetBrushFromMaterial // (Native|Public|BlueprintCallable) // @ game+0xba5c50
	void SetBrushFromAtlasInterface(struct TScriptInterface<ISlateTextureAtlasInterface> AtlasRegion, bool bMatchSize); // Function Solarland.SolarImage.SetBrushFromAtlasInterface // (Native|Public|BlueprintCallable) // @ game+0x211e130
	void SetBrushFromAsset(struct USlateBrushAsset* Asset); // Function Solarland.SolarImage.SetBrushFromAsset // (Native|Public|BlueprintCallable) // @ game+0x211e010
	void SetBrush(struct FSlateBrush& InBrush); // Function Solarland.SolarImage.SetBrush // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x211dcd0
	float GetImageProgressByInfo(struct FSolarImageProgressInfo& InSolarImageProgressInfo); // Function Solarland.SolarImage.GetImageProgressByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x211da20
	struct UMaterialInstanceDynamic* GetDynamicMaterial(); // Function Solarland.SolarImage.GetDynamicMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x211d9c0
};

// Class Solarland.SolarImageURL
// Size: 0x330 (Inherited: 0x138)
struct USolarImageURL : UWidget {
	struct FString URL; // 0x138(0x10)
	bool bDownloadFailedResetToPlaceholder; // 0x148(0x01)
	bool bDownloadFailedAutoRetry; // 0x149(0x01)
	char pad_14A[0x2]; // 0x14a(0x02)
	int32_t AutoRetryDelayTime; // 0x14c(0x04)
	int32_t AutoRetryTimes; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
	struct FSlateBrush Brush; // 0x158(0x98)
	struct FSlateBrush PlaceholderBrush; // 0x1f0(0x98)
	struct FDelegate BrushDelegate; // 0x288(0x10)
	struct FLinearColor ColorAndOpacity; // 0x298(0x10)
	struct FDelegate ColorAndOpacityDelegate; // 0x2a8(0x10)
	bool bFlipForRightToLeftFlowDirection; // 0x2b8(0x01)
	char pad_2B9[0x3]; // 0x2b9(0x03)
	struct FDelegate OnMouseButtonDownEvent; // 0x2bc(0x10)
	char pad_2CC[0x4]; // 0x2cc(0x04)
	struct FMulticastInlineDelegate OnURLDownloadFinish; // 0x2d0(0x10)
	char pad_2E0[0x50]; // 0x2e0(0x50)

	void URLDownloadFinish__DelegateSignature(bool bSuccess); // DelegateFunction Solarland.SolarImageURL.URLDownloadFinish__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void UpdateURLImage(); // Function Solarland.SolarImageURL.UpdateURLImage // (Native|Public|BlueprintCallable) // @ game+0x211f5e0
	void SetURLForNextTick(struct FString URLForNextTick); // Function Solarland.SolarImageURL.SetURLForNextTick // (Final|Native|Public) // @ game+0x211f420
	void SetOpacity(float InOpacity); // Function Solarland.SolarImageURL.SetOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x211f3a0
	void SetColorAndOpacity(struct FLinearColor InColorAndOpacity); // Function Solarland.SolarImageURL.SetColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x211f030
	void SetBrushTintColor(struct FSlateColor TintColor); // Function Solarland.SolarImageURL.SetBrushTintColor // (Final|Native|Public|BlueprintCallable) // @ game+0x211eeb0
	void SetBrushSize(struct FVector2D DesiredSize); // Function Solarland.SolarImageURL.SetBrushSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x211ed40
	void SetBrushResourceObject(struct UObject* ResourceObject); // Function Solarland.SolarImageURL.SetBrushResourceObject // (Final|Native|Public|BlueprintCallable) // @ game+0x211ec30
	void SetBrushFromTextureDynamic(struct UTexture2DDynamic* Texture, bool bMatchSize); // Function Solarland.SolarImageURL.SetBrushFromTextureDynamic // (Native|Public|BlueprintCallable) // @ game+0x211ead0
	void SetBrushFromTexture(struct UTexture2D* Texture, bool bMatchSize); // Function Solarland.SolarImageURL.SetBrushFromTexture // (Native|Public|BlueprintCallable) // @ game+0x211e930
	void SetBrushFromSoftTexture(struct TSoftObjectPtr<UTexture2D> SoftTexture, bool bMatchSize); // Function Solarland.SolarImageURL.SetBrushFromSoftTexture // (Native|Public|BlueprintCallable) // @ game+0x211e710
	void SetBrushFromSoftMaterial(struct TSoftObjectPtr<UMaterialInterface> SoftMaterial); // Function Solarland.SolarImageURL.SetBrushFromSoftMaterial // (Native|Public|BlueprintCallable) // @ game+0x211e4b0
	void SetBrushFromMaterial(struct UMaterialInterface* Material); // Function Solarland.SolarImageURL.SetBrushFromMaterial // (Native|Public|BlueprintCallable) // @ game+0x211e310
	void SetBrushFromAtlasInterface(struct TScriptInterface<ISlateTextureAtlasInterface> AtlasRegion, bool bMatchSize); // Function Solarland.SolarImageURL.SetBrushFromAtlasInterface // (Native|Public|BlueprintCallable) // @ game+0x211e220
	void SetBrushFromAsset(struct USlateBrushAsset* Asset); // Function Solarland.SolarImageURL.SetBrushFromAsset // (Native|Public|BlueprintCallable) // @ game+0x211e0a0
	void SetBrush(struct FSlateBrush& InBrush); // Function Solarland.SolarImageURL.SetBrush // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x211de70
	void ResetToPlaceholder(); // Function Solarland.SolarImageURL.ResetToPlaceholder // (Native|Public|BlueprintCallable) // @ game+0x211dcb0
	void LoadURLImage(struct UTexture2DDynamic* Texture); // Function Solarland.SolarImageURL.LoadURLImage // (Native|Public|BlueprintCallable) // @ game+0x211db90
	struct FString GetUrl(); // Function Solarland.SolarImageURL.GetUrl // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x211dae0
	struct UMaterialInstanceDynamic* GetDynamicMaterial(); // Function Solarland.SolarImageURL.GetDynamicMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x211d9f0
	enum class EImageURLDownloadState GetDownloadState(); // Function Solarland.SolarImageURL.GetDownloadState // (Native|Public|BlueprintCallable) // @ game+0x211d990
	void CancelDownload(); // Function Solarland.SolarImageURL.CancelDownload // (Native|Public|BlueprintCallable) // @ game+0x1554220
};

// Class Solarland.SolarInputActionContext
// Size: 0x218 (Inherited: 0x28)
struct USolarInputActionContext : UObject {
	char pad_28[0x20]; // 0x28(0x20)
	struct UInputMappingContext* InputMappingContext; // 0x48(0x08)
	struct TMap<struct FKey, struct UInputAction*> KeyChordInputActionDict; // 0x50(0x50)
	struct TMap<struct FName, struct FSolarInputActionEntry> ActionInputActionDict; // 0xa0(0x50)
	struct TMap<struct FName, struct FSolarInputActionEntry> ChordActionInputActionDict; // 0xf0(0x50)
	struct UInputAction* NullInputAction; // 0x140(0x08)
	char pad_148[0xd0]; // 0x148(0xd0)
};

// Class Solarland.SolarInputButton
// Size: 0x4b8 (Inherited: 0x498)
struct USolarInputButton : UButton {
	struct FSolarVirtualInput VirtualActionInput; // 0x498(0x20)
};

// Class Solarland.SolarInputComponent
// Size: 0x178 (Inherited: 0x168)
struct USolarInputComponent : UEnhancedInputComponent {
	char pad_168[0x10]; // 0x168(0x10)
};

// Class Solarland.InputTriggerDownOne
// Size: 0x48 (Inherited: 0x40)
struct UInputTriggerDownOne : UInputTrigger {
	char pad_40[0x1]; // 0x40(0x01)
	bool bIsOneShot; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)
};

// Class Solarland.InputTriggerPressedOld
// Size: 0x40 (Inherited: 0x40)
struct UInputTriggerPressedOld : UInputTrigger {
};

// Class Solarland.InputTriggerReleasedOld
// Size: 0x40 (Inherited: 0x40)
struct UInputTriggerReleasedOld : UInputTrigger {
};

// Class Solarland.InputTriggerPressedAndReleased
// Size: 0x40 (Inherited: 0x40)
struct UInputTriggerPressedAndReleased : UInputTrigger {
};

// Class Solarland.InputTriggerTriggered
// Size: 0x40 (Inherited: 0x40)
struct UInputTriggerTriggered : UInputTrigger {
};

// Class Solarland.InputTriggerDoubleTap
// Size: 0x48 (Inherited: 0x40)
struct UInputTriggerDoubleTap : UInputTrigger {
	float Delay; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Solarland.InputModifierConstBool
// Size: 0x30 (Inherited: 0x28)
struct UInputModifierConstBool : UInputModifier {
	float ConstValue; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Solarland.SolarInputKeyMapSubsystem
// Size: 0x38 (Inherited: 0x30)
struct USolarInputKeyMapSubsystem : UEngineSubsystem {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarInputManager
// Size: 0x2d8 (Inherited: 0xb0)
struct USolarInputManager : UActorComponent {
	char pad_B0[0x18]; // 0xb0(0x18)
	struct USolarPlayerSensitivitys* SenSetting; // 0xc8(0x08)
	char pad_D0[0x38]; // 0xd0(0x38)
	struct FTouchHandler TouchHandler; // 0x108(0x178)
	char pad_280[0x58]; // 0x280(0x58)

	void SetTouchScaler(float InVal); // Function Solarland.SolarInputManager.SetTouchScaler // (Final|Native|Public|BlueprintCallable) // @ game+0x2124e10
	void SetNoiseThresholdFactor(float InVal); // Function Solarland.SolarInputManager.SetNoiseThresholdFactor // (Final|Native|Public|BlueprintCallable) // @ game+0x2124d70
	void SetMouseScaler(struct FVector2D InVal); // Function Solarland.SolarInputManager.SetMouseScaler // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2124cd0
	void SetMinNoiseMultiplier(float InVal); // Function Solarland.SolarInputManager.SetMinNoiseMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x2124c30
	void SetCurveVerticalFix(struct FVector2D InVec); // Function Solarland.SolarInputManager.SetCurveVerticalFix // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2124b90
	void SetCurveVerticalFactor(struct FVector2D InVec); // Function Solarland.SolarInputManager.SetCurveVerticalFactor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2124af0
	void SetCurveHorizonFix(struct FVector2D InVec); // Function Solarland.SolarInputManager.SetCurveHorizonFix // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2124a50
	void SetCurveHorizonFactor(struct FVector2D InVec); // Function Solarland.SolarInputManager.SetCurveHorizonFactor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x21249b0
	void OnCacheNeedUpdate(); // Function Solarland.SolarInputManager.OnCacheNeedUpdate // (Final|Native|Private) // @ game+0x2124170
	float GetTouchScaler(); // Function Solarland.SolarInputManager.GetTouchScaler // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2124110
	struct FVector2D GetTouchOutputScale(); // Function Solarland.SolarInputManager.GetTouchOutputScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x21240d0
	float GetNoiseThresholdFactor(); // Function Solarland.SolarInputManager.GetNoiseThresholdFactor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2124060
	struct FVector2D GetMouseScaler(); // Function Solarland.SolarInputManager.GetMouseScaler // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2124020
	float GetMinNoiseMultiplier(); // Function Solarland.SolarInputManager.GetMinNoiseMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2123fe0
	struct FVector2D GetFixedOutput(); // Function Solarland.SolarInputManager.GetFixedOutput // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2123f70
	struct FVector2D GetDeltaMove(); // Function Solarland.SolarInputManager.GetDeltaMove // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2123f30
	struct FVector2D GetCurveVerticalFix(); // Function Solarland.SolarInputManager.GetCurveVerticalFix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2123ef0
	struct FVector2D GetCurveVerticalFactor(); // Function Solarland.SolarInputManager.GetCurveVerticalFactor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2123eb0
	struct FVector2D GetCurveHorizonFix(); // Function Solarland.SolarInputManager.GetCurveHorizonFix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2123e70
	struct FVector2D GetCurveHorizonFactor(); // Function Solarland.SolarInputManager.GetCurveHorizonFactor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2123e30
	struct FVector2D GetAverageDeltaMove(); // Function Solarland.SolarInputManager.GetAverageDeltaMove // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2123df0
};

// Class Solarland.SolarInputMappingManager
// Size: 0xa8 (Inherited: 0x30)
struct USolarInputMappingManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnInputMappingUpdate; // 0x38(0x10)
	struct TMap<struct FString, struct FInputKeyMappingEntry> KeyMappingEntryDict; // 0x48(0x50)
	struct TArray<struct FInputKeyMappingEntry> CacheKeyMappingEntries; // 0x98(0x10)

	void SplitInputChord(struct FInputChord& InInputChord, struct FString& KeyStr1, struct FString& KeyStr2); // Function Solarland.SolarInputMappingManager.SplitInputChord // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2124f40
	struct TArray<struct FInputKeyMappingEntry> GetKeyMappingEntries(); // Function Solarland.SolarInputMappingManager.GetKeyMappingEntries // (Event|Protected|BlueprintEvent|Const) // @ game+0x25d85b0
	struct FInputKeyMappingEntry FindKeyMappingEntry(struct FString ActionID); // Function Solarland.SolarInputMappingManager.FindKeyMappingEntry // (Final|Native|Public|Const) // @ game+0x2123d10
	struct FInputKeyMappingEntry CreateKeyMappingEntry(struct FString InActionID, struct FString InActionName, enum class ESolarTablesEnum_InputActionType InActionType, float InScale, struct FString InKeyStr1, struct FString InKeyStr2, struct FString InKeyStr3, enum class ESolarTablesEnum_InputTriggerType InInputTriggerType1, enum class ESolarTablesEnum_InputTriggerType InInputTriggerType2, enum class ESolarTablesEnum_InputTriggerType InInputTriggerType3); // Function Solarland.SolarInputMappingManager.CreateKeyMappingEntry // (Final|Native|Static|Protected) // @ game+0x21238b0
	bool CreateInputChord(struct FString KeyStr1, struct FString KeyStr2, struct FInputChord& OutInputChord); // Function Solarland.SolarInputMappingManager.CreateInputChord // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2123710
	void ApplyKeyMappings(); // Function Solarland.SolarInputMappingManager.ApplyKeyMappings // (Final|Native|Protected) // @ game+0x21236f0
};

// Class Solarland.SolarInputModePolicyComponent
// Size: 0x180 (Inherited: 0xb0)
struct USolarInputModePolicyComponent : UActorComponent {
	char pad_B0[0xd0]; // 0xb0(0xd0)
};

// Class Solarland.SolarInputSetting
// Size: 0x290 (Inherited: 0x38)
struct USolarInputSetting : UDeveloperSettings {
	struct FVector2D TouchScaler; // 0x38(0x08)
	float NoiseThresholdFactor; // 0x40(0x04)
	float MinNoiseMultiplier; // 0x44(0x04)
	bool bEnableAccMode; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float AccConfigThreshold; // 0x4c(0x04)
	float ConstantThreshold; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct FSoftObjectPath TouchDistHorizCurve; // 0x58(0x18)
	struct FSoftObjectPath TouchDistVertCurve; // 0x70(0x18)
	struct FVector2D TouchDistHorizCurveScale; // 0x88(0x08)
	struct FVector2D TouchDistVertCurveScale; // 0x90(0x08)
	struct FVector2D TouchDistHorizCurveOffset; // 0x98(0x08)
	struct FVector2D TouchDistVertCurveOffset; // 0xa0(0x08)
	struct FSoftObjectPath TouchHorizCurve; // 0xa8(0x18)
	struct FSoftObjectPath TouchVertCurve; // 0xc0(0x18)
	struct FVector2D TouchHorizCurveScale; // 0xd8(0x08)
	struct FVector2D TouchVertCurveScale; // 0xe0(0x08)
	struct FVector2D TouchHorizCurveOffset; // 0xe8(0x08)
	struct FVector2D TouchVertCurveOffset; // 0xf0(0x08)
	struct TMap<struct FName, struct FSoftObjectPath> InputActionPaths; // 0xf8(0x50)
	struct TSet<struct FName> InputActionCanceledToCompletedSet; // 0x148(0x50)
	struct TSet<struct FName> InputActionOneShotBlackList; // 0x198(0x50)
	struct FSoftObjectPath DefaultInputActionPath; // 0x1e8(0x18)
	struct FSoftObjectPath DefaultInputActionChordPath; // 0x200(0x18)
	struct FSoftObjectPath DefaultInputActionTmplPath; // 0x218(0x18)
	struct FSoftObjectPath DefaultInputActionModifyKeyPath; // 0x230(0x18)
	struct FSoftObjectPath DefaultInputActionTapPath; // 0x248(0x18)
	struct FSoftObjectPath DefaultInputActionDoubleTapPath; // 0x260(0x18)
	struct FSoftObjectPath DefaultInputActionHoldPath; // 0x278(0x18)

	struct USolarInputSetting* GetInputSettings(); // Function Solarland.SolarInputSetting.GetInputSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2123fb0
};

// Class Solarland.SolarInputSubsystem
// Size: 0x78 (Inherited: 0x30)
struct USolarInputSubsystem : UWorldSubsystem {
	char pad_30[0x48]; // 0x30(0x48)

	bool TestInputActionFlag(enum class EInputActionFlags InFlagBit); // Function Solarland.SolarInputSubsystem.TestInputActionFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2125100
	void RemoveInputActionFlag(enum class EInputActionFlags InFlagBit); // Function Solarland.SolarInputSubsystem.RemoveInputActionFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x2124930
	void OnInputMethodChanged(enum class ECommonInputType InInputType); // Function Solarland.SolarInputSubsystem.OnInputMethodChanged // (Final|Native|Private) // @ game+0x2124300
	void OnControllerConnectionChange(bool bIsConnected, int32_t UserId, int32_t ControllerId); // Function Solarland.SolarInputSubsystem.OnControllerConnectionChange // (Final|Native|Private) // @ game+0x21241d0
	void AddInputActionFlag(enum class EInputActionFlags InFlagBit); // Function Solarland.SolarInputSubsystem.AddInputActionFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x2123670
};

// Class Solarland.SolarInteractableManager
// Size: 0x98 (Inherited: 0x30)
struct USolarInteractableManager : USolarGameManager {
	char pad_30[0x10]; // 0x30(0x10)
	int32_t ZoneNum; // 0x40(0x04)
	int32_t TotalNum; // 0x44(0x04)
	struct TArray<struct FRadarStationCollection> CurrRadarStations; // 0x48(0x10)
	struct TArray<struct ASolarElectricShop*> CurrElectricShops; // 0x58(0x10)
	struct TArray<struct TWeakObjectPtr<struct ASolarShieldUpgradeItemShop>> ActiveShieldUpgradeItemShopList; // 0x68(0x10)
	struct FString SceneObjectLevelName; // 0x78(0x10)
	struct TWeakObjectPtr<struct ASolarGlobalRepInfo> GlobalMapRepInfo; // 0x88(0x08)
	char pad_90[0x8]; // 0x90(0x08)

	void OnSceneObjectsLoadComplete(struct FString LevelName); // Function Solarland.SolarInteractableManager.OnSceneObjectsLoadComplete // (Final|Native|Public) // @ game+0x21245f0
	void OnClientShowShieldUpgradeItemShops(); // Function Solarland.SolarInteractableManager.OnClientShowShieldUpgradeItemShops // (Final|Native|Public|BlueprintCallable) // @ game+0x21241b0
	int32_t GetShieldUpgradeItemShopGroupID(); // Function Solarland.SolarInteractableManager.GetShieldUpgradeItemShopGroupID // (Final|Native|Public|BlueprintCallable) // @ game+0x21240a0
};

// Class Solarland.SolarInteractionItemWidget
// Size: 0x360 (Inherited: 0x348)
struct USolarInteractionItemWidget : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct USolarInteractionListWidget* InteractionList; // 0x350(0x08)
	struct FGameplayTag InteractionType; // 0x358(0x08)

	void FadeOut(); // Function Solarland.SolarInteractionItemWidget.FadeOut // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x15480b0
	void FadeIn(); // Function Solarland.SolarInteractionItemWidget.FadeIn // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1547f70
};

// Class Solarland.SolarInteractionListWidget
// Size: 0x388 (Inherited: 0x348)
struct USolarInteractionListWidget : USolarUserWidget {
	struct TArray<struct USolarInteractionItemWidget*> ItemWidgets; // 0x348(0x10)
	struct TArray<struct USolarInteractionTriggerWidget*> TriggerWidgets; // 0x358(0x10)
	char pad_368[0x8]; // 0x368(0x08)
	struct USolarInteractionItemWidget* FocusedActiveItem; // 0x370(0x08)
	char pad_378[0x4]; // 0x378(0x04)
	float RefreshActiveWidgetInterval; // 0x37c(0x04)
	char pad_380[0x8]; // 0x380(0x08)

	void OnTryCancelInteraction(); // Function Solarland.SolarInteractionListWidget.OnTryCancelInteraction // (Final|Native|Protected) // @ game+0x2124910
	void OnStopInteractionCountDown(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionListWidget.OnStopInteractionCountDown // (Final|Native|Protected|HasOutParms) // @ game+0x21247d0
	void OnStartInteractionCountDown(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionListWidget.OnStartInteractionCountDown // (Final|Native|Protected|HasOutParms) // @ game+0x2124690
	bool OnInteractionTriggered(); // Function Solarland.SolarInteractionListWidget.OnInteractionTriggered // (Final|Native|Protected) // @ game+0x21245c0
	void OnInteractionTriggerDisappear(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.SolarInteractionListWidget.OnInteractionTriggerDisappear // (Final|Native|Protected|HasOutParms) // @ game+0x21244a0
	void OnInteractionTriggerAppear(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.SolarInteractionListWidget.OnInteractionTriggerAppear // (Final|Native|Protected|HasOutParms) // @ game+0x2124380
	void OnHideInteractionListRequested(); // Function Solarland.SolarInteractionListWidget.OnHideInteractionListRequested // (Final|Native|Protected) // @ game+0x21242e0
	void OnCancelHideInteractionListRequested(); // Function Solarland.SolarInteractionListWidget.OnCancelHideInteractionListRequested // (Final|Native|Protected) // @ game+0x2124190
};

// Class Solarland.SolarInteractionOpenAirdropWidget
// Size: 0x378 (Inherited: 0x360)
struct USolarInteractionOpenAirdropWidget : USolarInteractionItemWidget {
	char pad_360[0x8]; // 0x360(0x08)
	struct USolarBattleModel* BattleViewModel; // 0x368(0x08)
	char pad_370[0x8]; // 0x370(0x08)

	void UpdateProgress(struct ASolarTreasureBoxActor* InBoxActor, float InProgress); // Function Solarland.SolarInteractionOpenAirdropWidget.UpdateProgress // (Final|Native|Protected) // @ game+0x2128670
	void UnBindDelegates(); // Function Solarland.SolarInteractionOpenAirdropWidget.UnBindDelegates // (Final|Native|Protected) // @ game+0x8e9ae0
	bool TryOpenAirdropBox(); // Function Solarland.SolarInteractionOpenAirdropWidget.TryOpenAirdropBox // (Final|Native|Protected) // @ game+0x2128640
	void SetTBoxActor(struct ASolarTreasureBoxActor* InBoxActor); // Function Solarland.SolarInteractionOpenAirdropWidget.SetTBoxActor // (Final|Native|Protected) // @ game+0x2128590
	void SetSelfVisibility(bool InShow); // Function Solarland.SolarInteractionOpenAirdropWidget.SetSelfVisibility // (Final|Native|Protected) // @ game+0x2128500
	void SetAirdropBoxActor(struct AActor* InBoxActor); // Function Solarland.SolarInteractionOpenAirdropWidget.SetAirdropBoxActor // (Final|Native|Protected) // @ game+0x21283e0
	void RefreshToSelfOpening(); // Function Solarland.SolarInteractionOpenAirdropWidget.RefreshToSelfOpening // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshToOtherOpening(); // Function Solarland.SolarInteractionOpenAirdropWidget.RefreshToOtherOpening // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshToCanOpen(); // Function Solarland.SolarInteractionOpenAirdropWidget.RefreshToCanOpen // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshProgressDisplay(float Progress, float InMaxOpenTime); // Function Solarland.SolarInteractionOpenAirdropWidget.RefreshProgressDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnPressCancelButtonPC(); // Function Solarland.SolarInteractionOpenAirdropWidget.OnPressCancelButtonPC // (Final|Native|Protected) // @ game+0x2128240
	bool OnPressButtonPC(); // Function Solarland.SolarInteractionOpenAirdropWidget.OnPressButtonPC // (Final|Native|Protected) // @ game+0x2128280
	void OnPressButtonOpen(); // Function Solarland.SolarInteractionOpenAirdropWidget.OnPressButtonOpen // (Final|Native|Protected|BlueprintCallable) // @ game+0x2128260
	void OnPressButtonCancel(); // Function Solarland.SolarInteractionOpenAirdropWidget.OnPressButtonCancel // (Final|Native|Protected|BlueprintCallable) // @ game+0x2128240
	void OnOpenCharacterChanged(struct AAirDropTreasureBox* InBoxActor); // Function Solarland.SolarInteractionOpenAirdropWidget.OnOpenCharacterChanged // (Final|Native|Protected) // @ game+0x21281b0
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.SolarInteractionOpenAirdropWidget.OnDrivingStateChanged // (Final|Native|Protected) // @ game+0x2127e60
	void OnBtnActiveChanged(bool Inactive); // Function Solarland.SolarInteractionOpenAirdropWidget.OnBtnActiveChanged // (Final|Native|Protected) // @ game+0x1f99610
	void OnAirdropProgressChanged(struct AAirDropTreasureBox* InBoxActor); // Function Solarland.SolarInteractionOpenAirdropWidget.OnAirdropProgressChanged // (Final|Native|Protected) // @ game+0x2127c70
	void HideSelfByThisID(int64_t InThisID); // Function Solarland.SolarInteractionOpenAirdropWidget.HideSelfByThisID // (Final|Native|Protected) // @ game+0x2127bc0
	void ForceCancel(); // Function Solarland.SolarInteractionOpenAirdropWidget.ForceCancel // (Final|Native|Protected) // @ game+0x2127b80
	bool BSameThisID(int64_t InThisID); // Function Solarland.SolarInteractionOpenAirdropWidget.BSameThisID // (Final|Native|Protected) // @ game+0x2127ac0
	void BindDelegates(); // Function Solarland.SolarInteractionOpenAirdropWidget.BindDelegates // (Final|Native|Protected) // @ game+0x2127b60
};

// Class Solarland.SolarInteractionRescueTeammateWidget
// Size: 0x3b8 (Inherited: 0x360)
struct USolarInteractionRescueTeammateWidget : USolarInteractionItemWidget {
	int32_t FastReliefSkillCharacterID; // 0x360(0x04)
	char pad_364[0x54]; // 0x364(0x54)

	void WrappedStopCountDownProgress(int32_t InActionID); // Function Solarland.SolarInteractionRescueTeammateWidget.WrappedStopCountDownProgress // (Final|Native|Protected) // @ game+0x21289c0
	void WrappedStartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionRescueTeammateWidget.WrappedStartCountDownProgress // (Final|Native|Protected|HasOutParms) // @ game+0x2128740
	void StopCountDownProgress(int32_t InActionID); // Function Solarland.SolarInteractionRescueTeammateWidget.StopCountDownProgress // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void StartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionRescueTeammateWidget.StartCountDownProgress // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshToPreInteracting(); // Function Solarland.SolarInteractionRescueTeammateWidget.RefreshToPreInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshToNonCancellableInteracting(); // Function Solarland.SolarInteractionRescueTeammateWidget.RefreshToNonCancellableInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshToCancellableInteracting(); // Function Solarland.SolarInteractionRescueTeammateWidget.RefreshToCancellableInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnRescueButtonVisibilitySet(bool bShow); // Function Solarland.SolarInteractionRescueTeammateWidget.OnRescueButtonVisibilitySet // (Final|Native|Protected) // @ game+0x2128330
	void OnRescueButtonClicked(); // Function Solarland.SolarInteractionRescueTeammateWidget.OnRescueButtonClicked // (Final|Native|Protected|BlueprintCallable) // @ game+0x202eff0
	void OnProgressiveInteractCompleted(); // Function Solarland.SolarInteractionRescueTeammateWidget.OnProgressiveInteractCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x21282f0
	void OnProgressiveInteractCanceled(); // Function Solarland.SolarInteractionRescueTeammateWidget.OnProgressiveInteractCanceled // (Final|Native|Protected|BlueprintCallable) // @ game+0x21282b0
	void OnCharacterIDSet(int32_t InCharacterId); // Function Solarland.SolarInteractionRescueTeammateWidget.OnCharacterIDSet // (Final|Native|Protected) // @ game+0x2127dd0
	void EnablePassiveBuffDisplay(int32_t CharacterId, int32_t LocalTextId); // Function Solarland.SolarInteractionRescueTeammateWidget.EnablePassiveBuffDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void DisablePassiveBuffDisplay(); // Function Solarland.SolarInteractionRescueTeammateWidget.DisablePassiveBuffDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarInteractionTriggerWidget
// Size: 0x3e8 (Inherited: 0x360)
struct USolarInteractionTriggerWidget : USolarInteractionItemWidget {
	char pad_360[0x88]; // 0x360(0x88)

	void WrappedStopCountDownProgress(int32_t InActionID); // Function Solarland.SolarInteractionTriggerWidget.WrappedStopCountDownProgress // (Final|Native|Public) // @ game+0x2128a50
	void WrappedStartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionTriggerWidget.WrappedStartCountDownProgress // (Final|Native|Public|HasOutParms) // @ game+0x2128880
	void StopCountDownProgress(int32_t InActionID); // Function Solarland.SolarInteractionTriggerWidget.StopCountDownProgress // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void StartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionTriggerWidget.StartCountDownProgress // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshToPreInteracting(); // Function Solarland.SolarInteractionTriggerWidget.RefreshToPreInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshToNonCancellableInteracting(); // Function Solarland.SolarInteractionTriggerWidget.RefreshToNonCancellableInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshToCancellableInteracting(); // Function Solarland.SolarInteractionTriggerWidget.RefreshToCancellableInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnProgressiveInteractCompleted(); // Function Solarland.SolarInteractionTriggerWidget.OnProgressiveInteractCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x2128310
	void OnProgressiveInteractCanceled(); // Function Solarland.SolarInteractionTriggerWidget.OnProgressiveInteractCanceled // (Final|Native|Protected|BlueprintCallable) // @ game+0x21282d0
	void OnInteractButtonTriggered(); // Function Solarland.SolarInteractionTriggerWidget.OnInteractButtonTriggered // (Final|Native|Protected|BlueprintCallable) // @ game+0x2127fb0
	void InitByTriggerInfo(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.SolarInteractionTriggerWidget.InitByTriggerInfo // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void EnablePassiveBuffDisplay(int32_t CharacterId, int32_t LocalTextId); // Function Solarland.SolarInteractionTriggerWidget.EnablePassiveBuffDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void DisablePassiveBuffDisplay(); // Function Solarland.SolarInteractionTriggerWidget.DisablePassiveBuffDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarInteractionVolume
// Size: 0x250 (Inherited: 0x230)
struct ASolarInteractionVolume : ATriggerBox {
	char pad_230[0x18]; // 0x230(0x18)
	bool DisableInteractionVolume; // 0x248(0x01)
	bool DebugDrawVolume; // 0x249(0x01)
	char pad_24A[0x6]; // 0x24a(0x06)

	void OnEndOverlap(struct AActor* ThisActor, struct AActor* OtherActor); // Function Solarland.SolarInteractionVolume.OnEndOverlap // (Final|Native|Public) // @ game+0x2127ee0
	void OnBeginOverlap(struct AActor* ThisActor, struct AActor* OtherActor); // Function Solarland.SolarInteractionVolume.OnBeginOverlap // (Final|Native|Public) // @ game+0x2127d00
};

// Class Solarland.SolarIrisSettings
// Size: 0x78 (Inherited: 0x38)
struct USolarIrisSettings : UDeveloperSettings {
	struct FString BaseURL; // 0x38(0x10)
	struct FString GameID; // 0x48(0x10)
	struct FString RegionID; // 0x58(0x10)
	struct FString KeyStr; // 0x68(0x10)
};

// Class Solarland.SolarIronManVehicle
// Size: 0x18e0 (Inherited: 0x13b0)
struct ASolarIronManVehicle : ASolarHoverVehicle {
	struct FName LeftHandSocket; // 0x13a8(0x08)
	struct FName RightHandSocket; // 0x13b0(0x08)
	struct FName LeftFootSocket; // 0x13b8(0x08)
	struct FName RightFootSocket; // 0x13c0(0x08)
	struct FName BackPackSocket; // 0x13c8(0x08)
	struct TSoftObjectPtr<UAnimMontage> RotationLaserMontage; // 0x13d0(0x28)
	struct FVector BoxHalfSize; // 0x13f8(0x0c)
	int32_t QuerySameActorMaxNum; // 0x1404(0x04)
	float VehicleSpeedThresholdFromStandToLie; // 0x1408(0x04)
	struct FVehicleVFX LeftHandBulletEffect; // 0x1410(0x90)
	struct FVehicleVFX LeftHandMuzzleEffect; // 0x14a0(0x90)
	struct FVehicleVFX RightHandBulletEffect; // 0x1530(0x90)
	struct FVehicleVFX RightHandMuzzleEffect; // 0x15c0(0x90)
	struct FVehicleVFX HitEffect; // 0x1650(0x90)
	struct TArray<struct FVehicleVFX> IronManJetEffectInfo; // 0x16e0(0x10)
	struct TArray<enum class ECollisionChannel> HitDecalExceptObjTypes; // 0x16f0(0x10)
	struct TSoftObjectPtr<UParticleSystem> HitDecalParticle; // 0x1700(0x28)
	struct FVector HitDecalScale; // 0x1728(0x0c)
	float HitDecalInterval; // 0x1734(0x04)
	float HitDecalBeginTime; // 0x1738(0x04)
	float HitDecalEndTime; // 0x173c(0x04)
	float HitDecalLength; // 0x1740(0x04)
	float SmoothRotationSpeed; // 0x1748(0x04)
	float MaxJetEffectFXkgValue; // 0x174c(0x04)
	struct FName JetEffectFXkgName; // 0x1750(0x08)
	struct UGameplayEffect* CanNotSwitchSeat; // 0x1758(0x08)
	char pad_1760[0x50]; // 0x1760(0x50)
	struct TSoftObjectPtr<UStaticMesh> IronManStaticMeshWithDriver; // 0x17b0(0x28)
	struct TSoftObjectPtr<UStaticMesh> IronManStaticMeshWithNoDriver; // 0x17d8(0x28)
	bool bAddRiderSeat; // 0x1800(0x01)
	char pad_1801[0x7]; // 0x1801(0x07)
	struct FVehicleSeatSlot RiderSeatSlot; // 0x1808(0xd8)

	void OnIronManRootHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarIronManVehicle.OnIronManRootHit // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x2127fd0
};

// Class Solarland.SolarIronManVehicleAnimInstance
// Size: 0x4b0 (Inherited: 0x360)
struct USolarIronManVehicleAnimInstance : USolarHoverVehicleAnimInstance {
	char pad_360[0x8]; // 0x360(0x08)
	struct TMap<struct FName, struct FTransform> SocketToTransform; // 0x368(0x50)
	char pad_3B8[0x8]; // 0x3b8(0x08)
	struct FTransform LeftHandTransform; // 0x3c0(0x30)
	struct FTransform RightHandTransform; // 0x3f0(0x30)
	struct FTransform LeftFootTransform; // 0x420(0x30)
	struct FTransform RightFootTransform; // 0x450(0x30)
	struct FTransform BackPackTransform; // 0x480(0x30)
};

// Class Solarland.SolarItemCardViewWidget
// Size: 0x358 (Inherited: 0x348)
struct USolarItemCardViewWidget : USolarUserWidget {
	enum class ESolarItemQualityType QualityType; // 0x348(0x01)
	enum class ESolarItemSelectType SelectType; // 0x349(0x01)
	enum class ESolarItemLockType LockType; // 0x34a(0x01)
	enum class ESolarItemDownloadType DownloadType; // 0x34b(0x01)
	enum class ESolarItemMarkType MarkType; // 0x34c(0x01)
	enum class ESolarItemLimitType LimitType; // 0x34d(0x01)
	enum class ESolarItemUseType UseType; // 0x34e(0x01)
	enum class ESolarItemBuyType BuyType; // 0x34f(0x01)
	enum class ESolarItemOwnType OwnType; // 0x350(0x01)
	enum class ESolarRedHintType RedHintType; // 0x351(0x01)
	enum class ESolarItemShowType ShowType; // 0x352(0x01)
	enum class EClassType CharacterBuildType; // 0x353(0x01)
	char pad_354[0x4]; // 0x354(0x04)

	void ReflashItemView(); // Function Solarland.SolarItemCardViewWidget.ReflashItemView // (Final|Native|Public|BlueprintCallable) // @ game+0x21283c0
	void OnUseChanged(enum class ESolarItemUseType InType); // Function Solarland.SolarItemCardViewWidget.OnUseChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnShowTypeChanged(enum class ESolarItemShowType InType); // Function Solarland.SolarItemCardViewWidget.OnShowTypeChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnSelectedChanged(enum class ESolarItemSelectType InType); // Function Solarland.SolarItemCardViewWidget.OnSelectedChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnrRedHintChanged(enum class ESolarRedHintType InType); // Function Solarland.SolarItemCardViewWidget.OnrRedHintChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnQualityChanged(enum class ESolarItemQualityType InType); // Function Solarland.SolarItemCardViewWidget.OnQualityChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnOwnChanged(enum class ESolarItemOwnType InType); // Function Solarland.SolarItemCardViewWidget.OnOwnChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnMarkedChanged(enum class ESolarItemMarkType InType); // Function Solarland.SolarItemCardViewWidget.OnMarkedChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnLockedChanged(enum class ESolarItemLockType InType); // Function Solarland.SolarItemCardViewWidget.OnLockedChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnLimitChanged(enum class ESolarItemLimitType InType); // Function Solarland.SolarItemCardViewWidget.OnLimitChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnDownloadedChanged(enum class ESolarItemDownloadType InType); // Function Solarland.SolarItemCardViewWidget.OnDownloadedChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnBuyChanged(enum class ESolarItemBuyType InType); // Function Solarland.SolarItemCardViewWidget.OnBuyChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnBuildTypeChanged(enum class EClassType InType); // Function Solarland.SolarItemCardViewWidget.OnBuildTypeChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarItemComponent
// Size: 0xc0 (Inherited: 0xb0)
struct USolarItemComponent : UActorComponent {
	struct ASolarCharacter* OwnerChara; // 0xb0(0x08)
	char pad_B8[0x8]; // 0xb8(0x08)

	void UseItemRequestLuaCall(int32_t ItemID, int32_t Num); // Function Solarland.SolarItemComponent.UseItemRequestLuaCall // (Final|Native|Public) // @ game+0x213ab00
	void OnPlayerBackpackItemUpdate(); // Function Solarland.SolarItemComponent.OnPlayerBackpackItemUpdate // (Final|Native|Public) // @ game+0x21399c0
	bool CanUseMedicine(); // Function Solarland.SolarItemComponent.CanUseMedicine // (Final|Native|Public) // @ game+0x21364a0
};

// Class Solarland.SolarItemCountActor
// Size: 0x240 (Inherited: 0x228)
struct ASolarItemCountActor : AActor {
	struct UTextRenderComponent* TextPtr; // 0x228(0x08)
	struct FString TextPrefix; // 0x230(0x10)

	void SetItemCount(int32_t count); // Function Solarland.SolarItemCountActor.SetItemCount // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarItemInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarItemInterface : UInterface {
};

// Class Solarland.SolarItemManager
// Size: 0x7b0 (Inherited: 0x28)
struct USolarItemManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct ASolarItemRootActor* RootActor; // 0x30(0x08)
	char pad_38[0xa0]; // 0x38(0xa0)
	struct TArray<struct ASolarItemSpawner*> ItemSpawners; // 0xd8(0x10)
	struct TArray<struct ASolarItemSpawner*> NSItemSpanwers; // 0xe8(0x10)
	struct TArray<struct ASolarVehicleSpawner*> VehicleSpawners; // 0xf8(0x10)
	char pad_108[0x50]; // 0x108(0x50)
	struct TMap<int32_t, struct ASolarItemSpawner*> ItemSpawnersMap; // 0x158(0x50)
	struct TMap<int32_t, struct ASolarAirDropSpawner*> AirDropSpawnersMap; // 0x1a8(0x50)
	struct TMap<int32_t, struct FSolarItemSpawnerArray> NSItemSpawnerMap; // 0x1f8(0x50)
	struct TMap<int32_t, struct FOutcomeData> ItemOutcomeDatas; // 0x248(0x50)
	struct TMap<int32_t, struct FOutcomeDataCollection> OutcomeCollection; // 0x298(0x50)
	struct TMap<int32_t, struct FSimpleDropItemDataCollection> OriginDropItemDatas; // 0x2e8(0x50)
	struct TMap<int32_t, struct FFinalDropDataCollection> AirDropItemDatas; // 0x338(0x50)
	struct TMap<int32_t, int32_t> AirDropChestIndexMap; // 0x388(0x50)
	struct TMap<int32_t, int32_t> UsedAirDropChestIndexMap; // 0x3d8(0x50)
	struct TMap<int32_t, int32_t> MaxPileMap; // 0x428(0x50)
	struct FRandomStream ItemStream; // 0x478(0x08)
	float DelaySpawnTime; // 0x480(0x04)
	char pad_484[0x4]; // 0x484(0x04)
	struct TArray<struct FString> SubLevelNames; // 0x488(0x10)
	bool BInitSpawner; // 0x498(0x01)
	bool BSpawnerDestoryed; // 0x499(0x01)
	char pad_49A[0x6]; // 0x49a(0x06)
	struct FTimerHandle ItemInitSpawnerHandle; // 0x4a0(0x08)
	float DelayInitSpawnerTime; // 0x4a8(0x04)
	char pad_4AC[0x4]; // 0x4ac(0x04)
	struct FTimerHandle ItemLoopSpawnHandle; // 0x4b0(0x08)
	float SpawnLoopInterval; // 0x4b8(0x04)
	float SpawnMinDisSquared; // 0x4bc(0x04)
	float SpawnMaxHeightOffset; // 0x4c0(0x04)
	float ChestSpawnMinDisSquared; // 0x4c4(0x04)
	float VehicleSpawnMinDisSquared; // 0x4c8(0x04)
	char pad_4CC[0x4]; // 0x4cc(0x04)
	struct UDataTable* ItemResReferenceTable; // 0x4d0(0x08)
	struct FString ItemResReferenceTablePath; // 0x4d8(0x10)
	char pad_4E8[0x38]; // 0x4e8(0x38)
	bool BOpenLog; // 0x520(0x01)
	char pad_521[0x3]; // 0x521(0x03)
	int32_t FirstSpawnerIndex; // 0x524(0x04)
	int32_t FirstTBoxIndex; // 0x528(0x04)
	int32_t FirstAirDropIndex; // 0x52c(0x04)
	int32_t FirstVehicleIndex; // 0x530(0x04)
	int32_t ChestKeyCode; // 0x534(0x04)
	int32_t Level1OutcomeID; // 0x538(0x04)
	int32_t Level2OutcomeID; // 0x53c(0x04)
	int32_t Level3OutcomeID; // 0x540(0x04)
	char pad_544[0xf4]; // 0x544(0xf4)
	struct TMap<int32_t, enum class EItemType> ItemID2Types; // 0x638(0x50)
	int64_t ThisIdRefCount; // 0x688(0x08)
	int64_t ServerNowSeconds; // 0x690(0x08)
	struct FString RootActorBpPath; // 0x698(0x10)
	float CheckDropRadius; // 0x6a8(0x04)
	float CheckDropHeight; // 0x6ac(0x04)
	float DropLineTraceLength; // 0x6b0(0x04)
	float DropUnitOffset; // 0x6b4(0x04)
	struct USolarMapManager* MapManager; // 0x6b8(0x08)
	struct TArray<struct ASolarAirDropSpawner*> ActiveAirDropBox; // 0x6c0(0x10)
	char pad_6D0[0xb0]; // 0x6d0(0xb0)
	struct TArray<struct TWeakObjectPtr<struct AAirDropTreasureBox>> AirDropsList; // 0x780(0x10)
	struct TArray<struct TWeakObjectPtr<struct ADeathTreasureBox>> DeathTreasureBoxList; // 0x790(0x10)
	char pad_7A0[0x10]; // 0x7a0(0x10)

	void UpdateItemParams(); // Function Solarland.SolarItemManager.UpdateItemParams // (Final|Native|Protected) // @ game+0x213aae0
	bool TryDropAtLocation(struct ASolarCharacterBase* Owner, struct FVector& CheckPos); // Function Solarland.SolarItemManager.TryDropAtLocation // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x213aa00
	void SplitBurstItems(struct FSolarItemData Source, struct TArray<struct FSolarItemData>& SplitedPile); // Function Solarland.SolarItemManager.SplitBurstItems // (Final|Native|Public|HasOutParms) // @ game+0x213a830
	void SpawnTreasureBoxByID(int32_t TreasureId, struct FTransform trans, struct TArray<struct FSolarItemData> ItemsToSpawn, struct ASolarCharacter* SummonCharacter, float InSpawnDelay, float InStartHeight); // Function Solarland.SolarItemManager.SpawnTreasureBoxByID // (Final|Native|Public|HasDefaults) // @ game+0x213a570
	void SpawnMutipleItems(struct ASolarCharacter* InCharacter, int32_t InItemID, int32_t InPerCount, int32_t InTotalCount); // Function Solarland.SolarItemManager.SpawnMutipleItems // (Final|Native|Public) // @ game+0x213a410
	void SpawnItemsByOutcomeID(int32_t OutcomeID, struct FTransform& trans); // Function Solarland.SolarItemManager.SpawnItemsByOutcomeID // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x213a2f0
	void SpawnItems(int32_t ItemID, int32_t ItemNum, struct FTransform trans); // Function Solarland.SolarItemManager.SpawnItems // (Final|Native|Public|HasDefaults) // @ game+0x213a170
	struct FSolarItemData SpawnItemData(int32_t ItemID); // Function Solarland.SolarItemManager.SpawnItemData // (Final|Native|Public) // @ game+0x213a060
	void SpawnDeathBox(struct ASolarCharacterBase* Owner, struct FRotator& Rotator, struct TArray<struct FSolarItemData>& DataTarray, int32_t& DeathBoxId, struct TArray<struct ASolarPlayerWeapon*>& DeathBoxWeaponArray, float& CurrEnergyValue, float& CurrExtraEnergyValue, int32_t& MonsterID); // Function Solarland.SolarItemManager.SpawnDeathBox // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2139d10
	void SpawnAirDropByID(int32_t ChestID, struct FVector Location, struct TArray<struct FSolarItemData> ItemsToSpawn); // Function Solarland.SolarItemManager.SpawnAirDropByID // (Final|Native|Public|HasDefaults) // @ game+0x2139b60
	void ResetThisID(); // Function Solarland.SolarItemManager.ResetThisID // (Final|Native|Public) // @ game+0x2139b40
	bool RefreshOutcomePoolContent(struct FOutcomeData& InOutcomeData); // Function Solarland.SolarItemManager.RefreshOutcomePoolContent // (Final|Native|Public|HasOutParms) // @ game+0x2139a70
	void OnUpdateServerNowSeconds(int32_t InNowSeconds); // Function Solarland.SolarItemManager.OnUpdateServerNowSeconds // (Final|Native|Public) // @ game+0x21399e0
	void OnCustomGameStateChanged(enum class ESCMInGameState InNewState); // Function Solarland.SolarItemManager.OnCustomGameStateChanged // (Final|Native|Public) // @ game+0x2139940
	void OnAsyncLoadTreasureBoxComplete(struct FSoftClassPath SClassPath, struct FSolarItemData BoxItemData, struct TArray<struct FSolarItemData> ItemDataList, struct FTransform trans, struct ASolarCharacter* InCharacter, float InSpawnDelay, float InStartHeight); // Function Solarland.SolarItemManager.OnAsyncLoadTreasureBoxComplete // (Final|Native|Protected|HasDefaults) // @ game+0x2139530
	void OnAsyncLoadItemComplete(struct FSoftClassPath SClassPath, struct FSolarItemData ItemData, struct FTransform trans); // Function Solarland.SolarItemManager.OnAsyncLoadItemComplete // (Final|Native|Protected|HasDefaults) // @ game+0x21392d0
	void OnAsyncLoadDiscardItemComplete(struct FSoftClassPath SClassPath, struct ASolarCharacter* Owner, struct FSolarItemData ItemData); // Function Solarland.SolarItemManager.OnAsyncLoadDiscardItemComplete // (Final|Native|Protected|HasDefaults) // @ game+0x21390e0
	void OnAsyncLoadDeathBoxComplete(struct UObject* DeathBoxClass, struct ASolarCharacterBase* Owner, struct FRotator Rotator, struct TArray<struct FSolarItemData> DataTarray, struct FSolarItemData DeathBoxData, struct TArray<struct ASolarPlayerWeapon*> DeathBoxWeaponArray, float CurrEnergyValue, float CurrExtraEnergyValue, int32_t MonsterID); // Function Solarland.SolarItemManager.OnAsyncLoadDeathBoxComplete // (Final|Native|Protected|HasDefaults) // @ game+0x2138cb0
	void OnAsyncLoadAirdropComplete(struct FSoftClassPath SClassPath, struct FSolarItemData BoxItemData, struct TArray<struct FSolarItemData> ItemDataList, struct FVector Location); // Function Solarland.SolarItemManager.OnAsyncLoadAirdropComplete // (Final|Native|Protected|HasDefaults) // @ game+0x21389d0
	void NotifySpawnerDestroy(); // Function Solarland.SolarItemManager.NotifySpawnerDestroy // (Final|Native|Public) // @ game+0x8e9ae0
	void NotifyAvailableAirDropsNumChanged(); // Function Solarland.SolarItemManager.NotifyAvailableAirDropsNumChanged // (Final|Native|Public) // @ game+0x21389b0
	void NotifyAirDropOpened(); // Function Solarland.SolarItemManager.NotifyAirDropOpened // (Final|Native|Public) // @ game+0x2138990
	void NetStartAirDrops(int32_t SpawnerID, int32_t ChestID); // Function Solarland.SolarItemManager.NetStartAirDrops // (Final|Native|Public) // @ game+0x21388c0
	void NetRunVehicleSpawn(enum class ESpawnStage InSpawnStage); // Function Solarland.SolarItemManager.NetRunVehicleSpawn // (Final|Native|Public) // @ game+0x2138840
	bool NetRunSpecOutcome(int32_t InData, struct TArray<struct FSolarItemData>& OutItemArray); // Function Solarland.SolarItemManager.NetRunSpecOutcome // (Final|Native|Public|HasOutParms) // @ game+0x21386e0
	void NetRunGlobalDrop(); // Function Solarland.SolarItemManager.NetRunGlobalDrop // (Final|Native|Public) // @ game+0x21386c0
	void NetRunDrop(enum class ESpawnStage InSpecifiedStage); // Function Solarland.SolarItemManager.NetRunDrop // (Final|Native|Public) // @ game+0x2138640
	bool NetDropOutcomeContent(int32_t TargetContentID, struct FOutcomeData& OutcomeData, struct TMap<int32_t, struct FSimpleDropItemDataCollection>& InDropItemDatas, bool fromSpawner, struct FTransform& trans); // Function Solarland.SolarItemManager.NetDropOutcomeContent // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x21383b0
	bool NetDropOutcome(struct FOutcomeData& OutcomeData, int32_t& OutTargetContentID); // Function Solarland.SolarItemManager.NetDropOutcome // (Final|Native|Public|HasOutParms) // @ game+0x2138290
	void NetDropGlobalOutcome(struct FGlobalOutcomeData& GlobalOutcomeData); // Function Solarland.SolarItemManager.NetDropGlobalOutcome // (Final|Native|Public|HasOutParms) // @ game+0x21380e0
	void LoadSpawnerLevelComplete(); // Function Solarland.SolarItemManager.LoadSpawnerLevelComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x21380c0
	void LoadItemSpawnerLevels(); // Function Solarland.SolarItemManager.LoadItemSpawnerLevels // (Final|Native|Public|BlueprintCallable) // @ game+0x21380a0
	bool IsPosBlocked(struct FVector& CheckPos); // Function Solarland.SolarItemManager.IsPosBlocked // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x2138000
	bool IsInSafeArea(struct FVector& Location); // Function Solarland.SolarItemManager.IsInSafeArea // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2137f60
	void InitWeaponPartLevel(struct FSolarItemData& InItemData); // Function Solarland.SolarItemManager.InitWeaponPartLevel // (Final|Native|Public|HasOutParms) // @ game+0x2137e70
	void InitWeaponLevel(struct FSolarItemData& InItemData); // Function Solarland.SolarItemManager.InitWeaponLevel // (Final|Native|Public|HasOutParms) // @ game+0x2137d80
	void InitVehicleSpawnGroupData(struct TMap<int32_t, int32_t>& VehicleGroupIdToNum); // Function Solarland.SolarItemManager.InitVehicleSpawnGroupData // (Final|Native|Public|HasOutParms) // @ game+0x2137c00
	void InitItemDataShieldValue(struct FSolarItemData& InItemData); // Function Solarland.SolarItemManager.InitItemDataShieldValue // (Final|Native|Public|HasOutParms) // @ game+0x2137b10
	int64_t IncreaseThisID(); // Function Solarland.SolarItemManager.IncreaseThisID // (Final|Native|Public) // @ game+0x2137ae0
	int32_t GetVehicleIDBySingleSpawnId(int32_t SpawnID); // Function Solarland.SolarItemManager.GetVehicleIDBySingleSpawnId // (Final|Native|Public) // @ game+0x2137a40
	int32_t GetVehicleIDByGroupIDAndIndex(int32_t groupid, int32_t GroupIndex); // Function Solarland.SolarItemManager.GetVehicleIDByGroupIDAndIndex // (Final|Native|Public) // @ game+0x2137970
	int32_t GetVehicleIDByCustomRandomData(); // Function Solarland.SolarItemManager.GetVehicleIDByCustomRandomData // (Final|Native|Public) // @ game+0x2137940
	int32_t GetVehicleGroupIDByVehicleID(int32_t InVehicleID); // Function Solarland.SolarItemManager.GetVehicleGroupIDByVehicleID // (Final|Native|Static|Public) // @ game+0x21378b0
	struct FSolarVehicleData GetVehicleConfigData(int32_t InVehicleID); // Function Solarland.SolarItemManager.GetVehicleConfigData // (Final|Native|Static|Public) // @ game+0x21377e0
	int32_t GetServerNowSeconds(); // Function Solarland.SolarItemManager.GetServerNowSeconds // (Final|Native|Public) // @ game+0x21377b0
	int32_t GetRankSeasonID(); // Function Solarland.SolarItemManager.GetRankSeasonID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetRandomIDInMap(int32_t TotalWeight, struct TMap<int32_t, int32_t>& WeightIDMap); // Function Solarland.SolarItemManager.GetRandomIDInMap // (Final|Native|Public|HasOutParms) // @ game+0x21375e0
	int32_t GetRandomAirDropIDInMap(); // Function Solarland.SolarItemManager.GetRandomAirDropIDInMap // (Final|Native|Public) // @ game+0x21375b0
	int32_t GetOutcomeIdByTreasureBoxId(int32_t TreasureBoxID); // Function Solarland.SolarItemManager.GetOutcomeIdByTreasureBoxId // (Final|Native|Public) // @ game+0x2137510
	struct FOutcomeData GetOutcomeDataByID(int32_t OutcomeID); // Function Solarland.SolarItemManager.GetOutcomeDataByID // (Final|Native|Public) // @ game+0x2137440
	struct FOutcomeContentData GetOutcomeContentDataByID(int32_t ContentID); // Function Solarland.SolarItemManager.GetOutcomeContentDataByID // (Final|Native|Public) // @ game+0x2137310
	bool GetItemResReference(int32_t InItemID, struct FItemResReference& outData); // Function Solarland.SolarItemManager.GetItemResReference // (Final|Native|Public|HasOutParms) // @ game+0x21371e0
	int32_t GetItemPrize(int32_t InItemID); // Function Solarland.SolarItemManager.GetItemPrize // (Final|Native|Public) // @ game+0x2137140
	int32_t GetItemMaxPileByID(int32_t InItemID); // Function Solarland.SolarItemManager.GetItemMaxPileByID // (Final|Native|Public) // @ game+0x21370a0
	bool GetGlobalOutcomeData(int32_t GamePlayMode, struct TArray<struct FGlobalOutcomeData>& GlobalOutcomeDatas); // Function Solarland.SolarItemManager.GetGlobalOutcomeData // (Final|Native|Public|HasOutParms) // @ game+0x2136f70
	int32_t GetEntryID(); // Function Solarland.SolarItemManager.GetEntryID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool GetCurrItemSubLevels(struct FString InMapName, struct TArray<struct FString>& OutSubLevelNames); // Function Solarland.SolarItemManager.GetCurrItemSubLevels // (Final|Native|Public|HasOutParms) // @ game+0x2136e40
	struct FOutcomeData GetCookedOutcomeDataByID(int32_t OutcomeID); // Function Solarland.SolarItemManager.GetCookedOutcomeDataByID // (Final|Native|Public) // @ game+0x2136d70
	bool GetChestsFromChestSpawn(int32_t ChestSpawnID, struct TArray<int32_t>& ChestIDs); // Function Solarland.SolarItemManager.GetChestsFromChestSpawn // (Final|Native|Public|HasOutParms) // @ game+0x2136c70
	int32_t GetAvailableAirDropsNum(); // Function Solarland.SolarItemManager.GetAvailableAirDropsNum // (Final|Native|Public) // @ game+0x2136c40
	bool GetAirDropChestIDsByGamePlayMode(int32_t GamePlayMode, struct TArray<int32_t>& ChestIDs); // Function Solarland.SolarItemManager.GetAirDropChestIDsByGamePlayMode // (Final|Native|Public|HasOutParms) // @ game+0x2136b40
	struct TArray<struct ASolarAirDropSpawner*> GetActiveAirDropBox(); // Function Solarland.SolarItemManager.GetActiveAirDropBox // (Final|Native|Public|BlueprintCallable) // @ game+0x2136ac0
	void FindTransformForBoxItem(struct AActor* TargetActor, struct FTransform& InTrans, bool bUseNewLocation); // Function Solarland.SolarItemManager.FindTransformForBoxItem // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2136960
	struct FRotator FindRotationForDropItem(struct AActor* TargetActor, struct FVector& FindTargetPos); // Function Solarland.SolarItemManager.FindRotationForDropItem // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2136870
	bool FindPosForDropItem(struct ASolarCharacterBase* Owner, struct FVector& FindTargetPos, bool bPreferCenter); // Function Solarland.SolarItemManager.FindPosForDropItem // (Final|Native|Private|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2136740
	struct FSolarItemData CreateItemDataByKey(int32_t InItemID); // Function Solarland.SolarItemManager.CreateItemDataByKey // (Final|Native|Public) // @ game+0x2136630
	void ConvertToItemdataAndSetToSpawners(); // Function Solarland.SolarItemManager.ConvertToItemdataAndSetToSpawners // (Final|Native|Public) // @ game+0x2136610
	void ClearSpawnLoopTimer(); // Function Solarland.SolarItemManager.ClearSpawnLoopTimer // (Final|Native|Public) // @ game+0x21365f0
	void CheckSpawnItemByDis(); // Function Solarland.SolarItemManager.CheckSpawnItemByDis // (Final|Native|Public) // @ game+0x21365d0
	bool CheckPointInCircle(struct FVector2D Center, float Radius, struct FVector2D PlayerPoint); // Function Solarland.SolarItemManager.CheckPointInCircle // (Final|Native|Public|HasDefaults) // @ game+0x21364d0
	void AddVehicleGroupDataSingle(int32_t groupid, struct TMap<int32_t, int32_t>& SingleData); // Function Solarland.SolarItemManager.AddVehicleGroupDataSingle // (Final|Native|Public|HasOutParms) // @ game+0x21362e0
	void AddOneDropDataToTempDatas(int32_t SpawnerID, int32_t InItemID, int32_t InItemNum, struct TMap<int32_t, struct FSimpleDropItemDataCollection>& InDropItemDatas); // Function Solarland.SolarItemManager.AddOneDropDataToTempDatas // (Final|Native|Public|HasOutParms) // @ game+0x2136120
	void AddAirDropToList(struct AAirDropTreasureBox* AirDrop); // Function Solarland.SolarItemManager.AddAirDropToList // (Final|Native|Public) // @ game+0x2136090
};

// Class Solarland.SolarItemResourceDataTable
// Size: 0xc8 (Inherited: 0xc8)
struct USolarItemResourceDataTable : UDataTable {
};

// Class Solarland.SolarItemRootActor
// Size: 0x240 (Inherited: 0x228)
struct ASolarItemRootActor : AActor {
	int32_t MAX_LOAD_NUM; // 0x228(0x04)
	int32_t MAX_SPAWN_NUM; // 0x22c(0x04)
	int32_t CurrLoadNum; // 0x230(0x04)
	int32_t CurrSpawnNum; // 0x234(0x04)
	int32_t TempFrame; // 0x238(0x04)
	int32_t FrameInterval; // 0x23c(0x04)
};

// Class Solarland.SolarJoyStick
// Size: 0x1e0 (Inherited: 0x138)
struct USolarJoyStick : UWidget {
	struct FSolarVirtualInput VirtualActionInput; // 0x138(0x20)
	struct FSolarVirtualInput VirtualAxisXInput; // 0x158(0x20)
	struct FSolarVirtualInput VirtualAxisYInput; // 0x178(0x20)
	struct FMulticastInlineDelegate OnTouchPressed; // 0x198(0x10)
	struct FMulticastInlineDelegate OnTouchReleased; // 0x1a8(0x10)
	struct FMulticastInlineDelegate OnTouchMoveX; // 0x1b8(0x10)
	struct FMulticastInlineDelegate OnTouchMoveY; // 0x1c8(0x10)
	char pad_1D8[0x8]; // 0x1d8(0x08)

	void ResetControlInput(); // Function Solarland.SolarJoyStick.ResetControlInput // (Native|Public|BlueprintCallable) // @ game+0x213d3c0
};

// Class Solarland.SolarKeyMapButton
// Size: 0x500 (Inherited: 0x4d8)
struct USolarKeyMapButton : USolarButton {
	struct FSolarVirtualInput VirtualActionInput; // 0x4d8(0x20)
	bool IsFocus; // 0x4f8(0x01)
	char pad_4F9[0x7]; // 0x4f9(0x07)
};

// Class Solarland.SolarLocalMessage
// Size: 0x28 (Inherited: 0x28)
struct USolarLocalMessage : ULocalMessage {
};

// Class Solarland.SolarKillEffectMessage
// Size: 0x28 (Inherited: 0x28)
struct USolarKillEffectMessage : USolarLocalMessage {
};

// Class Solarland.SolarKillNotifyMessage
// Size: 0x28 (Inherited: 0x28)
struct USolarKillNotifyMessage : USolarLocalMessage {
};

// Class Solarland.SolarlandContentStringDownloader
// Size: 0xa8 (Inherited: 0x28)
struct USolarlandContentStringDownloader : UObject {
	struct FMulticastInlineDelegate OnContentStringDownloaded; // 0x28(0x10)
	struct FMulticastInlineDelegate OnContentStringDownloading; // 0x38(0x10)
	struct FMulticastInlineDelegate OnContentStringFailed; // 0x48(0x10)
	char pad_58[0x21]; // 0x58(0x21)
	bool bForceRedownload; // 0x79(0x01)
	char pad_7A[0xa]; // 0x7a(0x0a)
	int32_t ChunkSize; // 0x84(0x04)
	char pad_88[0x20]; // 0x88(0x20)

	void StartDownload(); // Function Solarland.SolarlandContentStringDownloader.StartDownload // (Final|Native|Public|BlueprintCallable) // @ game+0x213d420
	bool IsCurrentDownloading(); // Function Solarland.SolarlandContentStringDownloader.IsCurrentDownloading // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x8e95c0
};

// Class Solarland.SolarlandDownloadModule
// Size: 0x30 (Inherited: 0x30)
struct USolarlandDownloadModule : UEngineSubsystem {
};

// Class Solarland.SolarlandDownloadSetting
// Size: 0x70 (Inherited: 0x28)
struct USolarlandDownloadSetting : UObject {
	bool bPrepareDownloadWithApplocationStart; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct FString CDNURLPrefix; // 0x30(0x10)
	struct FString ExtraCDNURLPrefix; // 0x40(0x10)
	struct FString ServerListFileName; // 0x50(0x10)
	struct FString FileVersion; // 0x60(0x10)
};

// Class Solarland.SolarlandFileDownloader
// Size: 0x110 (Inherited: 0x28)
struct USolarlandFileDownloader : UObject {
	struct FMulticastInlineDelegate OnEachFileDownloaded; // 0x28(0x10)
	struct FMulticastInlineDelegate OnDownloadCompleted; // 0x38(0x10)
	struct FMulticastInlineDelegate OnEachFileDownloading; // 0x48(0x10)
	struct FMulticastInlineDelegate OnFileDownloadFailed; // 0x58(0x10)
	struct FMulticastInlineDelegate OnHashCheckFailedFileDownloader; // 0x68(0x10)
	char pad_78[0x31]; // 0x78(0x31)
	bool bForceRedownload; // 0xa9(0x01)
	char pad_AA[0x2a]; // 0xaa(0x2a)
	int32_t ChunkSize; // 0xd4(0x04)
	char pad_D8[0x38]; // 0xd8(0x38)

	void StartDownload(); // Function Solarland.SolarlandFileDownloader.StartDownload // (Final|Native|Public|BlueprintCallable) // @ game+0x213d440
	bool IsCurrentDownloading(); // Function Solarland.SolarlandFileDownloader.IsCurrentDownloading // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x8e95c0
};

// Class Solarland.SolarlandPakMounter
// Size: 0x88 (Inherited: 0x28)
struct USolarlandPakMounter : UObject {
	struct FMulticastInlineDelegate OnMountCompleted; // 0x28(0x10)
	struct FMulticastInlineDelegate OnMountFailed; // 0x38(0x10)
	char pad_48[0x39]; // 0x48(0x39)
	bool bMounting; // 0x81(0x01)
	char pad_82[0x6]; // 0x82(0x06)
};

// Class Solarland.SolarLeggedVehicleMovement
// Size: 0x880 (Inherited: 0x138)
struct USolarLeggedVehicleMovement : UPawnMovementComponent {
	float LandingSweepTraceDistance; // 0x138(0x04)
	float LandedVFXHeightThreshold; // 0x13c(0x04)
	struct TMap<enum class EPhysicalSurface, struct FVehicleVFX> JumpLandedVFXs; // 0x140(0x50)
	struct FVehicleLocomotionData LocomotionDatas[0x3]; // 0x190(0x54)
	float MaxControllableDegreeOffset; // 0x1e4(0x04)
	float WalkableFloorAngle; // 0x1e8(0x04)
	float GravityZ; // 0x1ec(0x04)
	bool bDelayInputForOneFrame; // 0x1f0(0x01)
	bool bEnableProceduralAnimation; // 0x1f1(0x01)
	bool bAdvancedProceduralAnimation; // 0x1f2(0x01)
	char pad_1F3[0x1]; // 0x1f3(0x01)
	float StepHeight; // 0x1f4(0x04)
	float StepDistanceForward; // 0x1f8(0x04)
	float StepDistanceRight; // 0x1fc(0x04)
	float StepSequencePercent; // 0x200(0x04)
	float MinStepDuration; // 0x204(0x04)
	float MinDistanceToUnplant; // 0x208(0x04)
	float FixFeetTargetsAfterPercent; // 0x20c(0x04)
	float FeetTipBonesRotationInterpSpeed; // 0x210(0x04)
	char pad_214[0x4]; // 0x214(0x04)
	struct FRuntimeFloatCurve SpeedCurve; // 0x218(0x88)
	struct FRuntimeFloatCurve HeightCurve; // 0x2a0(0x88)
	struct FRuntimeFloatCurve BodyRelativeZCurve; // 0x328(0x88)
	float AdditionalBodyRelativeZ; // 0x3b0(0x04)
	char pad_3B4[0x4]; // 0x3b4(0x04)
	struct UCurveVector* BodyRelativeRotatorCurve; // 0x3b8(0x08)
	float BodyTransformLerpSpeedWithoutDriver; // 0x3c0(0x04)
	float TraceLength; // 0x3c4(0x04)
	float DistanceCheckMultiplier; // 0x3c8(0x04)
	float RadiusCheckMultiplier; // 0x3cc(0x04)
	float BodyAlignTerrainBlendSpeed; // 0x3d0(0x04)
	float BodyZOffsetMultiplier; // 0x3d4(0x04)
	float MaxBodyZOffset; // 0x3d8(0x04)
	float MinBodyZOffset; // 0x3dc(0x04)
	float MinBodyAlignPitchDegree; // 0x3e0(0x04)
	float MaxBodyAlignPitchDegree; // 0x3e4(0x04)
	float MinBodyAlignRollDegree; // 0x3e8(0x04)
	float MaxBodyAlignRollDegree; // 0x3ec(0x04)
	float SkipIkTraceDurationWhenReceiveUpdateFromServer; // 0x3f0(0x04)
	bool bRotateOnInput; // 0x3f4(0x01)
	char pad_3F5[0x3]; // 0x3f5(0x03)
	float MinRotateDegree; // 0x3f8(0x04)
	float LerpSpeedWithinMinRotateDegree; // 0x3fc(0x04)
	float DegreeForRotatePiAnimation; // 0x400(0x04)
	float DegreeForRotateHalfPiAnimation; // 0x404(0x04)
	struct FFindFloorResult CurrentFloor; // 0x408(0x94)
	char pad_49C[0x4]; // 0x49c(0x04)
	struct FLeggedVehiclePostPhysicsTickFunction PostPhysicsTickFunction; // 0x4a0(0x30)
	char pad_4D0[0xd0]; // 0x4d0(0xd0)
	bool bAlwaysCheckFloor; // 0x5a0(0x01)
	char pad_5A1[0x3]; // 0x5a1(0x03)
	float MaxStepHeight; // 0x5a4(0x04)
	float PerchRadiusThreshold; // 0x5a8(0x04)
	float PerchAdditionalHeight; // 0x5ac(0x04)
	bool bCanWalkOffLedges; // 0x5b0(0x01)
	bool bIgnoreBaseRotation; // 0x5b1(0x01)
	char pad_5B2[0x2]; // 0x5b2(0x02)
	float LedgeCheckThreshold; // 0x5b4(0x04)
	bool bJumpIgnoreInput; // 0x5b8(0x01)
	char pad_5B9[0x3]; // 0x5b9(0x03)
	float JumpZVelocity; // 0x5bc(0x04)
	float JumpXYVelocityOnInput; // 0x5c0(0x04)
	struct FGameplayTag JumpFailedTagForNotice; // 0x5c4(0x08)
	int32_t JumpFailedNoticeID; // 0x5cc(0x04)
	float AirControl; // 0x5d0(0x04)
	float AirControlBoostMultiplier; // 0x5d4(0x04)
	float AirControlBoostVelocityThreshold; // 0x5d8(0x04)
	float FallingLateralFriction; // 0x5dc(0x04)
	int32_t MaxJumpApexAttemptsPerSimulation; // 0x5e0(0x04)
	bool bNotifyApex; // 0x5e4(0x01)
	char pad_5E5[0x3]; // 0x5e5(0x03)
	float JumpOffJumpZFactor; // 0x5e8(0x04)
	float MoveSpeedFactorForPiRotation; // 0x5ec(0x04)
	float MoveSpeedFactorForHalfPiRotation; // 0x5f0(0x04)
	float MinFootIKEffectorZ; // 0x5f4(0x04)
	float MaxFootIKEffectorZ; // 0x5f8(0x04)
	char pad_5FC[0x4]; // 0x5fc(0x04)
	struct TArray<struct FVehicleFootIKData> FootIKDataArray; // 0x600(0x10)
	float IKSweepTraceRadius; // 0x610(0x04)
	float IKEffectorBlendSpeed; // 0x614(0x04)
	float FloorAndMeshAngleForDoubleSweep; // 0x618(0x04)
	int32_t MaxBrokenWeakPointForLocomotion; // 0x61c(0x04)
	float RefreshBoneTransformTimerForDedicatedServer; // 0x620(0x04)
	char pad_624[0x4]; // 0x624(0x04)
	struct TArray<struct FVehicleVFX> WeakPointParticles; // 0x628(0x10)
	float MaxJoyStickYaw; // 0x638(0x04)
	float MinJoyStickYaw; // 0x63c(0x04)
	float MaxJoyStickPitch; // 0x640(0x04)
	float MinJoyStickPitch; // 0x644(0x04)
	float RotationBlendSpeed; // 0x648(0x04)
	float MaxFootZValueForAlignGround; // 0x64c(0x04)
	struct FName LeaningBone; // 0x650(0x08)
	enum class EAxis LeaningBoneForwardAxis; // 0x658(0x01)
	char pad_659[0x3]; // 0x659(0x03)
	float SpeedThresholdForLeaning; // 0x65c(0x04)
	float LeaningAnimationBlendSpeed; // 0x660(0x04)
	float LeaningDegree; // 0x664(0x04)
	float BaseDegreeForLeaningDegree; // 0x668(0x04)
	int32_t MaxSimulationIterations; // 0x66c(0x04)
	float MaxSimulationTimeStep; // 0x670(0x04)
	float LandingTimerForAnitCheating; // 0x674(0x04)
	float EnablePhysicsCollisionTimer; // 0x678(0x04)
	char pad_67C[0x4]; // 0x67c(0x04)
	struct USkeletalMeshComponent* VehicleMesh; // 0x680(0x08)
	struct UCapsuleComponent* UpdatedCapsule; // 0x688(0x08)
	struct ASolarVehiclePawn* VehiclePawn; // 0x690(0x08)
	struct USceneComponent* DeferredUpdatedMoveComponent; // 0x698(0x08)
	struct USolarVehicleStateMachine* VehicleStateMachine; // 0x6a0(0x08)
	char pad_6A8[0x1d8]; // 0x6a8(0x1d8)

	void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarLeggedVehicleMovement.OnPlayerGetOnVehicle // (Final|Native|Protected) // @ game+0x2140c60
	void OnCapsuleComponentHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarLeggedVehicleMovement.OnCapsuleComponentHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2140a80
	void EnableFootIK(bool bEnable, bool bResetAlpha, bool bResetStandOnStatic); // Function Solarland.SolarLeggedVehicleMovement.EnableFootIK // (Final|Native|Public|BlueprintCallable) // @ game+0x21406c0
};

// Class Solarland.SolarLeggedVehicleStencilAnimInstance
// Size: 0x2b0 (Inherited: 0x270)
struct USolarLeggedVehicleStencilAnimInstance : UAnimInstance {
	struct FVector FLFootIKEffectorLocation; // 0x268(0x0c)
	struct FVector FRFootIKEffectorLocation; // 0x274(0x0c)
	struct FVector BLFootIKEffectorLocation; // 0x280(0x0c)
	struct FVector BRFootIKEffectorLocation; // 0x28c(0x0c)
	float FLFootIKAlpha; // 0x298(0x04)
	float FRFootIKAlpha; // 0x29c(0x04)
	float BLFootIKAlpha; // 0x2a0(0x04)
	float BRFootIKAlpha; // 0x2a4(0x04)
	struct TWeakObjectPtr<struct USolarLeggedVehicleAnimInstance> VehicleAnim; // 0x2a8(0x08)
};

// Class Solarland.SolarListView
// Size: 0x970 (Inherited: 0x950)
struct USolarListView : UListView {
	struct FMulticastInlineDelegate OnFocusLosted; // 0x950(0x10)
	struct FMulticastInlineDelegate OnListViewScrolled; // 0x960(0x10)

	void SetClampScoll(bool InValue); // Function Solarland.SolarListView.SetClampScoll // (Final|Native|Public) // @ game+0x2141220
};

// Class Solarland.SolarListViewItem
// Size: 0x30 (Inherited: 0x28)
struct USolarListViewItem : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Solarland.SolarLobbyAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct USolarLobbyAnimInstance : UAnimInstance {
	bool bPlayIdleShow; // 0x268(0x01)
	bool bInIdleShow; // 0x269(0x01)
	bool bResetToIdle; // 0x26a(0x01)
	bool EnableAnimSound; // 0x26b(0x01)

	void ShowRecommendUI(bool bVisible); // Function Solarland.SolarLobbyAnimInstance.ShowRecommendUI // (Final|Native|Public|BlueprintCallable) // @ game+0x2141670
	void SetEnableAnimSound(bool InEnableAnimSound); // Function Solarland.SolarLobbyAnimInstance.SetEnableAnimSound // (Final|Native|Public|BlueprintCallable) // @ game+0x21412b0
	void SetCharacterInIdleShow(bool IsPlayingIdleShow); // Function Solarland.SolarLobbyAnimInstance.SetCharacterInIdleShow // (Final|Native|Public|BlueprintCallable) // @ game+0x2141040
	void SetCharacterCanBeLooked(bool IsVisible); // Function Solarland.SolarLobbyAnimInstance.SetCharacterCanBeLooked // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ResetToIdle(); // Function Solarland.SolarLobbyAnimInstance.ResetToIdle // (Final|Native|Public|BlueprintCallable) // @ game+0x2140f90
	void RefreshTick(); // Function Solarland.SolarLobbyAnimInstance.RefreshTick // (Final|Native|Public|BlueprintCallable) // @ game+0x2140f70
	void RandIdleShow(); // Function Solarland.SolarLobbyAnimInstance.RandIdleShow // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void LookAtFunctionSwitcher(bool bOpen); // Function Solarland.SolarLobbyAnimInstance.LookAtFunctionSwitcher // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void KawaiiPhysicsSwitcher(bool bOpen); // Function Solarland.SolarLobbyAnimInstance.KawaiiPhysicsSwitcher // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void GetCameraLocation(struct FString ModuleCameraName); // Function Solarland.SolarLobbyAnimInstance.GetCameraLocation // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ExitAnimFinish(); // Function Solarland.SolarLobbyAnimInstance.ExitAnimFinish // (Final|Native|Public|BlueprintCallable) // @ game+0x21407f0
	void AnimPlayIdleShow(bool Enable); // Function Solarland.SolarLobbyAnimInstance.AnimPlayIdleShow // (Final|Native|Public|BlueprintCallable) // @ game+0x2140490
};

// Class Solarland.SolarLobbyCharacterData
// Size: 0x298 (Inherited: 0x30)
struct USolarLobbyCharacterData : UDataAsset {
	struct FSoftObjectPath SkinShareImage; // 0x30(0x18)
	struct FSoftObjectPath SkinBackgroundShare; // 0x48(0x18)
	struct FSoftObjectPath Mesh; // 0x60(0x18)
	struct FSoftObjectPath Material; // 0x78(0x18)
	struct TMap<uint16_t, struct FCharacterTransformData> CharacterTransformData; // 0x90(0x50)
	struct TArray<struct FSoftObjectPath> MaterialArray; // 0xe0(0x10)
	struct TMap<struct FString, struct TSoftObjectPtr<UMaterialInterface>> CharacterChangeMat; // 0xf0(0x50)
	struct FSoftObjectPath AnimBlueprint; // 0x140(0x18)
	struct FSoftObjectPath WinAnimation; // 0x158(0x18)
	struct TArray<struct FSoftObjectPath> IdleShowList; // 0x170(0x10)
	struct FSoftObjectPath LobbyIdleAnimation; // 0x180(0x18)
	struct FSoftObjectPath AccessoryBlueprint; // 0x198(0x18)
	struct FSoftObjectPath EnterAnim; // 0x1b0(0x18)
	struct FSoftObjectPath ExitAnim; // 0x1c8(0x18)
	struct FSoftObjectPath RefuseAnim; // 0x1e0(0x18)
	struct FSoftObjectPath EncounterIdleAnim; // 0x1f8(0x18)
	struct TArray<struct FSoftObjectPath> EncounterIdleShowList; // 0x210(0x10)
	struct FSoftObjectPath RecommendAnimBlueprint; // 0x220(0x18)
	bool bParameterChanged; // 0x238(0x01)
	char pad_239[0x7]; // 0x239(0x07)
	struct TArray<struct FPSAttachElem> PSAttachArray; // 0x240(0x10)
	struct FSoftObjectPath IdleShowSequence; // 0x250(0x18)
	struct FSoftObjectPath LeftHandProp; // 0x268(0x18)
	struct FSoftObjectPath RightHandProp; // 0x280(0x18)
};

// Class Solarland.SolarLobbyCharacter
// Size: 0x438 (Inherited: 0x288)
struct ASolarLobbyCharacter : APawn {
	char pad_288[0x8]; // 0x288(0x08)
	struct TSoftObjectPtr<UCurveVector> DissolveCurvePath; // 0x290(0x28)
	struct TSoftObjectPtr<UMaterialInterface> DissolveMatPath; // 0x2b8(0x28)
	struct TSoftObjectPtr<UCurveVector> FresnelCurvePath; // 0x2e0(0x28)
	struct TSoftObjectPtr<UMaterialInterface> FresnelMatPath; // 0x308(0x28)
	struct TSoftObjectPtr<UParticleSystem> SwitchParticleEffectPath; // 0x330(0x28)
	char pad_358[0x8]; // 0x358(0x08)
	float SwitchEffectInterval; // 0x360(0x04)
	float SelfDelayShowSeconds; // 0x364(0x04)
	char pad_368[0x8]; // 0x368(0x08)
	struct UAkComponent* AkAudioComponent; // 0x370(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x378(0x08)
	struct USkeletalMeshComponent* SkeletalMesh; // 0x380(0x08)
	struct USkeletalMeshComponent* MirrorSkeletalMesh; // 0x388(0x08)
	struct AActor* LobbyAccessory; // 0x390(0x08)
	struct AActor* MirrorLobbyAccessory; // 0x398(0x08)
	struct USkeletalMeshComponent* DissovleSkeletalMesh; // 0x3a0(0x08)
	struct USkeletalMeshComponent* FresnelSkeletalMesh; // 0x3a8(0x08)
	struct USkeletalMeshComponent* MirrorDissovleSkeletalMesh; // 0x3b0(0x08)
	struct USkeletalMeshComponent* MirrorFresnelSkeletalMesh; // 0x3b8(0x08)
	struct UMaterialInterface* DissovleMat; // 0x3c0(0x08)
	struct UMaterialInterface* FresnelMat; // 0x3c8(0x08)
	struct UCurveVector* DissovleCurve; // 0x3d0(0x08)
	struct UCurveVector* FresnelCurve; // 0x3d8(0x08)
	char pad_3E0[0x8]; // 0x3e0(0x08)
	struct TArray<struct UMaterialInstanceDynamic*> DynamicDissovleMats; // 0x3e8(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> DynamicFresnelMats; // 0x3f8(0x10)
	char pad_408[0x14]; // 0x408(0x14)
	bool bCanPlayVoiceInIdleShow; // 0x41c(0x01)
	bool bOpenMirror; // 0x41d(0x01)
	bool CharacterIsVisiblity; // 0x41e(0x01)
	char pad_41F[0x1]; // 0x41f(0x01)
	int32_t CurSkinId; // 0x420(0x04)
	int32_t CurChunkId; // 0x424(0x04)
	bool bIsPlayIdleShow; // 0x428(0x01)
	char pad_429[0x7]; // 0x429(0x07)
	struct UObject* AnimBPClass; // 0x430(0x08)

	void UpdateLobbyAccessory(struct FString InAccessoryPath); // Function Solarland.SolarLobbyCharacter.UpdateLobbyAccessory // (Final|Native|Public|BlueprintCallable) // @ game+0x2141780
	void StopPlayIdleShow(); // Function Solarland.SolarLobbyCharacter.StopPlayIdleShow // (Final|Native|Public|BlueprintCallable) // @ game+0x2141760
	void StartPlaySwitchEffect(); // Function Solarland.SolarLobbyCharacter.StartPlaySwitchEffect // (Final|Native|Public) // @ game+0x2141740
	void StartPlayFresnelSwitchEffect(); // Function Solarland.SolarLobbyCharacter.StartPlayFresnelSwitchEffect // (Final|Native|Public) // @ game+0x2141720
	void StartPlayDissovleSwitchEffect(); // Function Solarland.SolarLobbyCharacter.StartPlayDissovleSwitchEffect // (Final|Native|Public) // @ game+0x2141700
	void SetSwitchEffetComp(struct USkeletalMeshComponent* EffectComp, struct USkeletalMeshComponent* DefaultComp, struct UMaterialInterface* EffectMat, struct TArray<struct UMaterialInstanceDynamic*>& DyniamEffectMats); // Function Solarland.SolarLobbyCharacter.SetSwitchEffetComp // (Final|Native|Public|HasOutParms) // @ game+0x21414f0
	void SetPropVisiable(bool isVisiable); // Function Solarland.SolarLobbyCharacter.SetPropVisiable // (Final|Native|Public|BlueprintCallable) // @ game+0x2141460
	void SetMeshVisibility(bool IsVisible); // Function Solarland.SolarLobbyCharacter.SetMeshVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x21413d0
	void SetIsPlayIdleShow(bool InIsPlayIdleShow); // Function Solarland.SolarLobbyCharacter.SetIsPlayIdleShow // (Final|Native|Public|BlueprintCallable) // @ game+0x2141340
	void SetCharacterRotationByDelta(float InDeltaYaw); // Function Solarland.SolarLobbyCharacter.SetCharacterRotationByDelta // (Final|Native|Public|BlueprintCallable) // @ game+0x21411a0
	void SetCharacterMeshAndMat(int32_t InSkinID, bool IsForce); // Function Solarland.SolarLobbyCharacter.SetCharacterMeshAndMat // (Final|Native|Public|BlueprintCallable) // @ game+0x21410d0
	void SetCharacterByLoadedData(struct USolarLobbyCharacterData* InData); // Function Solarland.SolarLobbyCharacter.SetCharacterByLoadedData // (Final|Native|Public|BlueprintCallable) // @ game+0x2140fb0
	void PlayIdleShow(); // Function Solarland.SolarLobbyCharacter.PlayIdleShow // (Final|Native|Public|BlueprintCallable) // @ game+0x2140f50
	void OpenLookAtAndSetPostProcessABPCameraLocation(bool bOpen, struct FString ModuleCameraName); // Function Solarland.SolarLobbyCharacter.OpenLookAtAndSetPostProcessABPCameraLocation // (Final|Native|Public|BlueprintCallable) // @ game+0x2140e60
	bool IsCanOpenMirror(); // Function Solarland.SolarLobbyCharacter.IsCanOpenMirror // (Native|Event|Public|BlueprintEvent) // @ game+0x2140a50
	bool IsCanOpenChangeAnim(); // Function Solarland.SolarLobbyCharacter.IsCanOpenChangeAnim // (Native|Event|Public|BlueprintEvent) // @ game+0x2140a20
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarLobbyCharacter.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x2140950
	void InitCharacterByLua(); // Function Solarland.SolarLobbyCharacter.InitCharacterByLua // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct USolarAkGameObject* GetSolarAkGameObject(); // Function Solarland.SolarLobbyCharacter.GetSolarAkGameObject // (Final|Native|Public|BlueprintCallable) // @ game+0x2140930
	struct USolarLobbyCharacterData* GetLobbySkinResourceBySkinId(int32_t InSkinID, bool IsLowRes); // Function Solarland.SolarLobbyCharacter.GetLobbySkinResourceBySkinId // (Final|Native|Public|BlueprintCallable) // @ game+0x2140860
	bool GetIsPlayIdleShow(); // Function Solarland.SolarLobbyCharacter.GetIsPlayIdleShow // (Final|Native|Public|BlueprintCallable) // @ game+0x2140840
	struct USolarLobbyAnimInstance* GetCharAnimInstance(); // Function Solarland.SolarLobbyCharacter.GetCharAnimInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x2140810
	void DetachCharacterSocketPS(); // Function Solarland.SolarLobbyCharacter.DetachCharacterSocketPS // (Final|Native|Protected) // @ game+0x21406a0
	void DelayShowSelf(struct USolarLobbyCharacterData* InData); // Function Solarland.SolarLobbyCharacter.DelayShowSelf // (Final|Native|Public) // @ game+0x2140610
	void ClearSwitchEffect(); // Function Solarland.SolarLobbyCharacter.ClearSwitchEffect // (Final|Native|Public) // @ game+0x21405f0
	void ClearCharacterByLua(); // Function Solarland.SolarLobbyCharacter.ClearCharacterByLua // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void AttachCharacterSocketPS(struct TArray<struct FPSAttachElem>& PSAttachArray); // Function Solarland.SolarLobbyCharacter.AttachCharacterSocketPS // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x2140520
};

// Class Solarland.SolarLobbyPlayerController
// Size: 0x5b8 (Inherited: 0x5a8)
struct ASolarLobbyPlayerController : APlayerController {
	char pad_5A8[0x10]; // 0x5a8(0x10)

	void SolarGM_StartWarmup(); // Function Solarland.SolarLobbyPlayerController.SolarGM_StartWarmup // (Exec|Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetTotalFrameCount(); // Function Solarland.SolarLobbyPlayerController.GetTotalFrameCount // (Final|Native|Protected|Const) // @ game+0x2146530
};

// Class Solarland.SolarLocalizationToolsWidget
// Size: 0x348 (Inherited: 0x348)
struct USolarLocalizationToolsWidget : USolarExternalToolsWidget {
};

// Class Solarland.SolarLockSettings
// Size: 0x78 (Inherited: 0x28)
struct USolarLockSettings : USaveGame {
	struct TMap<int32_t, bool> FeaturesLockStatus; // 0x28(0x50)

	void CopyFrom(struct USolarLockSettings* InLockSettings); // Function Solarland.SolarLockSettings.CopyFrom // (Final|Native|Public) // @ game+0x2144620
};

// Class Solarland.SolarLockSettingsMgr
// Size: 0x50 (Inherited: 0x28)
struct USolarLockSettingsMgr : UObject {
	struct USolarLockSettings* CurLockSettings; // 0x28(0x08)
	struct USolarGameInstanceBase* SolarGameInstance; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)
	struct USolarLockSettings* DefaultLockSettings; // 0x48(0x08)

	void SaveLockSettings(); // Function Solarland.SolarLockSettingsMgr.SaveLockSettings // (Final|Native|Public) // @ game+0x2146ed0
	void LoadLockSettings(); // Function Solarland.SolarLockSettingsMgr.LoadLockSettings // (Final|Native|Public) // @ game+0x2146940
	void Init(struct USolarGameInstanceBase* GameInstance); // Function Solarland.SolarLockSettingsMgr.Init // (Final|Native|Public) // @ game+0x2146700
};

// Class Solarland.SolarLoginManager
// Size: 0x38 (Inherited: 0x30)
struct USolarLoginManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)

	void InitFromLogin(); // Function Solarland.SolarLoginManager.InitFromLogin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void Init(struct USolarGameInstanceBase* GameInstance); // Function Solarland.SolarLoginManager.Init // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarUploaderSetting
// Size: 0x50 (Inherited: 0x38)
struct USolarUploaderSetting : UDeveloperSettings {
	struct FString SolarLogServerUrl; // 0x38(0x10)
	bool bEnableAutoUpload; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Solarland.SolarLootZone
// Size: 0x2d8 (Inherited: 0x228)
struct ASolarLootZone : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct TArray<struct ASolarItemSpawner*> OwnningItemSpawners; // 0x230(0x10)
	struct TMap<struct ASolarItemSpawner*, struct FItemSpawnerGraphNode> SpawnerPathGraph; // 0x240(0x50)
	struct TArray<struct FLootZonePath> LootZonePathGraph; // 0x290(0x10)
	float MaxRadius; // 0x2a0(0x04)
	char pad_2A4[0x4]; // 0x2a4(0x04)
	struct TArray<struct TSoftObjectPtr<ASolarChargingPile>> OwnningChargingPiles; // 0x2a8(0x10)
	struct TArray<struct TSoftObjectPtr<ASolarBotSniperPosition>> OwnningSniperPosition; // 0x2b8(0x10)
	struct TArray<struct FVector> OwnningPOIs; // 0x2c8(0x10)
};

// Class Solarland.SolarLowMemoryDeviceSettings
// Size: 0x50 (Inherited: 0x38)
struct USolarLowMemoryDeviceSettings : UDeveloperSettings {
	bool EnableLowMemDevice; // 0x38(0x01)
	bool EnableLowMemDeviceDebugMode; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
	struct TArray<struct FString> AdditionalCommand; // 0x40(0x10)
};

// Class Solarland.SolarLuaHelper
// Size: 0x50 (Inherited: 0x28)
struct USolarLuaHelper : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UDataTable* KeyMappingInfoDataTable; // 0x30(0x08)
	struct UDataTable* KeyMappingDisplayInfoDataTable; // 0x38(0x08)
	struct TArray<struct FSolarPlayerReport> SettleTeamReports; // 0x40(0x10)

	bool WriteFile(struct FString FilePath, struct FString Content); // Function Solarland.SolarLuaHelper.WriteFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2148590
	void UELogWarning(struct FString str); // Function Solarland.SolarLuaHelper.UELogWarning // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2070e60
	void UELogNetwork(struct FString str); // Function Solarland.SolarLuaHelper.UELogNetwork // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2070e60
	void UELogError(struct FString str); // Function Solarland.SolarLuaHelper.UELogError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2070e60
	void UELog(struct FString str); // Function Solarland.SolarLuaHelper.UELog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2070e60
	struct UObject* TryLoadBySoftObjectPath(struct FSoftObjectPath& ObjectPath); // Function Solarland.SolarLuaHelper.TryLoadBySoftObjectPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21484e0
	bool TryConvertFilenameToLongPackageName(struct FString InFilename, struct FString& OutPackageName); // Function Solarland.SolarLuaHelper.TryConvertFilenameToLongPackageName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x21483e0
	void StaticSetGlobalRTPCValue(struct FString RTPC, float Value, int32_t InterpolationTimeMs); // Function Solarland.SolarLuaHelper.StaticSetGlobalRTPCValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21482c0
	void StaticSetAkState(struct FName StateGroup, struct FName State); // Function Solarland.SolarLuaHelper.StaticSetAkState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2148200
	void StaticSetAkBusConfig(struct FString BusName, enum class AkChannelConfiguration ChannelConfiguration); // Function Solarland.SolarLuaHelper.StaticSetAkBusConfig // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2148130
	void StaticPostAkEventByNameGlobal(struct FString InEventName); // Function Solarland.SolarLuaHelper.StaticPostAkEventByNameGlobal // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21480a0
	int32_t StaticPostAkEventByNameAndWaitForEnd(struct UObject* WorldContextObject, struct FString InEventName, struct FLatentActionInfo LatentInfo); // Function Solarland.SolarLuaHelper.StaticPostAkEventByNameAndWaitForEnd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147f40
	int32_t StaticPostAkEventByName(struct FString InEventName); // Function Solarland.SolarLuaHelper.StaticPostAkEventByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147ea0
	void SolarSetVSyncEnabled(bool bEnable); // Function Solarland.SolarLuaHelper.SolarSetVSyncEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147e20
	void SolarSetShadowQuality(int32_t InQuality); // Function Solarland.SolarLuaHelper.SolarSetShadowQuality // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147da0
	void SolarSetMSAAEnabled(bool bEnable); // Function Solarland.SolarLuaHelper.SolarSetMSAAEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147d20
	void SolarSetGraphicsQuality(enum class ESolarGraphicsQualityLevel InLevel); // Function Solarland.SolarLuaHelper.SolarSetGraphicsQuality // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147cb0
	void SolarSetFrameRate(enum class ESolarFrameRateLevel FrameRateLevel); // Function Solarland.SolarLuaHelper.SolarSetFrameRate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147c40
	void SolarSetColorGrading(enum class ESolarColorTheme InTheme); // Function Solarland.SolarLuaHelper.SolarSetColorGrading // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147bd0
	void SolarRefreshContentScaleFactorLevel(); // Function Solarland.SolarLuaHelper.SolarRefreshContentScaleFactorLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147bb0
	bool SolarGetTextureStreamingEnable(); // Function Solarland.SolarLuaHelper.SolarGetTextureStreamingEnable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147b80
	void SolarEnableTextureStreaming(bool bEnable); // Function Solarland.SolarLuaHelper.SolarEnableTextureStreaming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147b00
	void SolarEnableDynamicShadow(bool bEnable); // Function Solarland.SolarLuaHelper.SolarEnableDynamicShadow // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147a80
	int32_t ShouldEnterLobby(); // Function Solarland.SolarLuaHelper.ShouldEnterLobby // (Final|Native|Static|Public) // @ game+0x2147a50
	void SetSwitch(struct USolarAkGameObject* SolarAkGameObject, struct FString SwitchGroup, struct FString SwitchState); // Function Solarland.SolarLuaHelper.SetSwitch // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147920
	void SetSkeletalMeshMatFromConfig(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FSoftObjectPath& NewMatResPath, int32_t ElementIndex); // Function Solarland.SolarLuaHelper.SetSkeletalMeshMatFromConfig // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21477f0
	void SetSkeletalMeshMat(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FString NewMatResPath, int32_t ElementIndex); // Function Solarland.SolarLuaHelper.SetSkeletalMeshMat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21476e0
	void SetSkeletalMeshFromConfig(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FSoftObjectPath& NewMeshResPath); // Function Solarland.SolarLuaHelper.SetSkeletalMeshFromConfig // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2147600
	void SetSkeletalMesh(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FString NewMeshResPath); // Function Solarland.SolarLuaHelper.SetSkeletalMesh // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147530
	void SetSkeletalAnimBPFromConfig(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FSoftObjectPath& NewAnimBPResPath); // Function Solarland.SolarLuaHelper.SetSkeletalAnimBPFromConfig // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2147450
	void SetSkeletalAnimBP(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FString NewAnimBPResPath); // Function Solarland.SolarLuaHelper.SetSkeletalAnimBP // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147380
	void SetRenderBatch(int32_t Mode); // Function Solarland.SolarLuaHelper.SetRenderBatch // (Final|Native|Public) // @ game+0x21472f0
	void SetPlayerSettlementReport(struct FSolarGameModeInfo& GameInfo); // Function Solarland.SolarLuaHelper.SetPlayerSettlementReport // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void SetPlayerNameColorByVIPState(struct UTextBlock* TextWidget, char VipType); // Function Solarland.SolarLuaHelper.SetPlayerNameColorByVIPState // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetPatchBuildVersion(struct FString Version); // Function Solarland.SolarLuaHelper.SetPatchBuildVersion // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147260
	void SetEnableSoftwareCursorWidgets(bool bIsEnabled); // Function Solarland.SolarLuaHelper.SetEnableSoftwareCursorWidgets // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21471e0
	void SetCurThirdPartyInfo(struct FString InCurThirdPartyInfo); // Function Solarland.SolarLuaHelper.SetCurThirdPartyInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2147150
	void SetChangeListNumber(struct FString ChangeListNum); // Function Solarland.SolarLuaHelper.SetChangeListNumber // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21470c0
	void SetActorYawByDeltaRotatedImpl(struct AActor* InActor, float InDeltaYaw, bool bCheckCharaCanBeRotated); // Function Solarland.SolarLuaHelper.SetActorYawByDeltaRotatedImpl // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2146fb0
	void SetActorYawByDelta(struct AActor* InActor, float InDeltaYaw); // Function Solarland.SolarLuaHelper.SetActorYawByDelta // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2146ef0
	void ResumeBatching(); // Function Solarland.SolarLuaHelper.ResumeBatching // (Final|Native|Static|Public) // @ game+0x2146eb0
	struct UObject* ResolveSoftObjectPath(struct FSoftObjectPath& ObjectPath); // Function Solarland.SolarLuaHelper.ResolveSoftObjectPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2146e00
	struct FString ReadFileContent(struct FString FilePath); // Function Solarland.SolarLuaHelper.ReadFileContent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2146d20
	int32_t PostAkEventByName(struct USolarAkGameObject* SolarAkGameObject, struct FString InEventName); // Function Solarland.SolarLuaHelper.PostAkEventByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2146c40
	void PlayVoiceLocaly(int32_t CharacterId, int32_t SkinId, enum class EPassiveTriggeredVoice Type); // Function Solarland.SolarLuaHelper.PlayVoiceLocaly // (Final|Native|Public) // @ game+0x2146b30
	bool MoveFile(struct FString DestFilePath, struct FString SrcFilePath); // Function Solarland.SolarLuaHelper.MoveFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2146a40
	struct UObject* LoadObject_WithOuter(struct UObject* Outer, struct FString ObjectName); // Function Solarland.SolarLuaHelper.LoadObject_WithOuter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2146960
	struct TArray<char> LoadFileToArray(struct FString FilePath); // Function Solarland.SolarLuaHelper.LoadFileToArray // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2146860
	bool IsWorldTearingDown(); // Function Solarland.SolarLuaHelper.IsWorldTearingDown // (Final|Native|Public) // @ game+0x2146830
	bool IsLocalBuild(); // Function Solarland.SolarLuaHelper.IsLocalBuild // (Final|Native|Static|Public) // @ game+0x20cd100
	bool IsBattlePassInfoUpdated(struct ASolarPlayerState* InPlayerState); // Function Solarland.SolarLuaHelper.IsBattlePassInfoUpdated // (Final|Native|Public|BlueprintCallable) // @ game+0x2146790
	bool HasReviveItemManager(struct UObject* InWorldContext); // Function Solarland.SolarLuaHelper.HasReviveItemManager // (Final|Native|Static|Public) // @ game+0x2146590
	struct FString HashMd5(struct FString InputText); // Function Solarland.SolarLuaHelper.HashMd5 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2146620
	int64_t GetUtcNowTimestamp(); // Function Solarland.SolarLuaHelper.GetUtcNowTimestamp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2146560
	struct FString GetTaskDesc(int32_t TaskID); // Function Solarland.SolarLuaHelper.GetTaskDesc // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FString GetSourceCommitHash(); // Function Solarland.SolarLuaHelper.GetSourceCommitHash // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x21464b0
	struct FString GetSourceBuildVersion(); // Function Solarland.SolarLuaHelper.GetSourceBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x21464b0
	struct ASolarGameState* GetSolarGameState(); // Function Solarland.SolarLuaHelper.GetSolarGameState // (Final|Native|Public|Const) // @ game+0x2146480
	struct FString GetShortName(struct FString LongName); // Function Solarland.SolarLuaHelper.GetShortName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21463a0
	struct TArray<struct FString> GetServersUrlList(); // Function Solarland.SolarLuaHelper.GetServersUrlList // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2146320
	struct FString GetServerEnvTag(); // Function Solarland.SolarLuaHelper.GetServerEnvTag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x21462a0
	struct FVector2D GetScreenSizeXY(); // Function Solarland.SolarLuaHelper.GetScreenSizeXY // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2146260
	struct FString GetPatchBuildVersion(); // Function Solarland.SolarLuaHelper.GetPatchBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x21461e0
	int32_t GetMonsterDropItemOutcomeID(int32_t MonsterAICharID, int32_t StrengthGrade); // Function Solarland.SolarLuaHelper.GetMonsterDropItemOutcomeID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetMonsterDeathBoxID(int32_t MonsterAICharID); // Function Solarland.SolarLuaHelper.GetMonsterDeathBoxID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FString GetMainBuildVersion(); // Function Solarland.SolarLuaHelper.GetMainBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2146160
	struct ASolarReplayPlayerController* GetLocalSolarReplayPlayerController(); // Function Solarland.SolarLuaHelper.GetLocalSolarReplayPlayerController // (Final|Native|Public) // @ game+0x2146130
	struct ASolarPlayerState* GetLocalSolarPlayerState(); // Function Solarland.SolarLuaHelper.GetLocalSolarPlayerState // (Final|Native|Public|Const) // @ game+0x2146100
	struct ASolarPlayerController* GetLocalSolarPlayerController(); // Function Solarland.SolarLuaHelper.GetLocalSolarPlayerController // (Final|Native|Public) // @ game+0x21460d0
	struct APlayerController* GetLocalPlayerController(); // Function Solarland.SolarLuaHelper.GetLocalPlayerController // (Final|Native|Public) // @ game+0x21460a0
	struct FKey GetLeftMouseKeyDown(); // Function Solarland.SolarLuaHelper.GetLeftMouseKeyDown // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2145fe0
	void GetKeyMappingInfoByRowName(struct FString RowName, struct FKeyMappingRowInfo& OutClassInfo); // Function Solarland.SolarLuaHelper.GetKeyMappingInfoByRowName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2145db0
	struct FString GetHostByDomainName(struct FString DomainName, bool bAppendPort); // Function Solarland.SolarLuaHelper.GetHostByDomainName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2145c90
	struct FString GetGameModeParam(int32_t GameModeId, struct FString Key); // Function Solarland.SolarLuaHelper.GetGameModeParam // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FString GetExtBackdoorUrl(); // Function Solarland.SolarLuaHelper.GetExtBackdoorUrl // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2145c10
	struct UEmojiBubbleSubsystem* GetEmojiBubbleSubsystem(struct USolarGameInstanceBase* GI); // Function Solarland.SolarLuaHelper.GetEmojiBubbleSubsystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2145b80
	bool GetCurrentInputType(struct APlayerController* InPlayerController, enum class ECommonInputType& OutInputType); // Function Solarland.SolarLuaHelper.GetCurrentInputType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2145aa0
	struct UCommonInputSubsystem* GetCommonInputSubsystem(struct APlayerController* PlayerController); // Function Solarland.SolarLuaHelper.GetCommonInputSubsystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2145a10
	struct FString GetClipboardPasteText(); // Function Solarland.SolarLuaHelper.GetClipboardPasteText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2145990
	struct FString GetChangeListNumber(); // Function Solarland.SolarLuaHelper.GetChangeListNumber // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2145910
	struct FString GetBuildVariation(); // Function Solarland.SolarLuaHelper.GetBuildVariation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2145890
	struct FString GetBuildMode(); // Function Solarland.SolarLuaHelper.GetBuildMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2145810
	struct FVector GetBoneLocationByName(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FName BoneName, enum class EBoneSpaces Space); // Function Solarland.SolarLuaHelper.GetBoneLocationByName // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2145700
	struct FString GetBackdoorUrl(); // Function Solarland.SolarLuaHelper.GetBackdoorUrl // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2145680
	struct FString GetAndroidPkgName(); // Function Solarland.SolarLuaHelper.GetAndroidPkgName // (Final|Native|Static|Public) // @ game+0x2145600
	struct TArray<struct FString> GetAllLoadedPackagesPath(); // Function Solarland.SolarLuaHelper.GetAllLoadedPackagesPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2145580
	void GetAllKeyMappingInfoFromTable(struct TArray<struct FKeyMappingRowInfo>& OutKeyMappingInfo); // Function Solarland.SolarLuaHelper.GetAllKeyMappingInfoFromTable // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21453b0
	struct FString GetActualBuildVersion(); // Function Solarland.SolarLuaHelper.GetActualBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2145330
	struct FString GetAbsolutePathForWrite(struct FString FilePath); // Function Solarland.SolarLuaHelper.GetAbsolutePathForWrite // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2145250
	struct FString GetAbsolutePathForRead(struct FString FilePath); // Function Solarland.SolarLuaHelper.GetAbsolutePathForRead // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2145170
	struct FColor FromHex(struct FString HexString); // Function Solarland.SolarLuaHelper.FromHex // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x21450d0
	struct TArray<struct FString> FindFiles(struct FString Directory, struct FString FileExtension); // Function Solarland.SolarLuaHelper.FindFiles // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2144f90
	void EndOfPlayInEditor(struct UObject* InWorldContext, struct FString EndReason, bool bPopMsgBox); // Function Solarland.SolarLuaHelper.EndOfPlayInEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2144e30
	void DoLuaDebug(struct TArray<struct FString>& cmdArray); // Function Solarland.SolarLuaHelper.DoLuaDebug // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	bool DirectoryExist(struct FString TargetDirectory); // Function Solarland.SolarLuaHelper.DirectoryExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2144d90
	bool DeleteFile(struct FString FilePath); // Function Solarland.SolarLuaHelper.DeleteFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2144cf0
	bool DeleteDirectoryRecursively(struct FString Path); // Function Solarland.SolarLuaHelper.DeleteDirectoryRecursively // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2144c50
	bool DeleteDirectory(struct FString Path); // Function Solarland.SolarLuaHelper.DeleteDirectory // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2144bb0
	struct FString DecodeFile(struct FString InFilePath); // Function Solarland.SolarLuaHelper.DecodeFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2144ad0
	struct ULevelStreamingDynamic* CreateStreamInstance(struct UWorld* World, struct FString PackageName); // Function Solarland.SolarLuaHelper.CreateStreamInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21449f0
	struct AActor* CreateEmptySkeletalMeshActor(); // Function Solarland.SolarLuaHelper.CreateEmptySkeletalMeshActor // (Final|Native|Public|BlueprintCallable) // @ game+0x21449c0
	struct UMaterialInstanceDynamic* CreateDynamicMaterial(struct ACameraActor* CameraActor, struct FString TemplateMatResPath, int32_t RTSizeX, int32_t RTSizeY, enum class ETextureRenderTargetFormat RenderTargetFormat); // Function Solarland.SolarLuaHelper.CreateDynamicMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x21447f0
	bool CreateDirectoryTree(struct FString Path); // Function Solarland.SolarLuaHelper.CreateDirectoryTree // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2144750
	bool CreateDirectory(struct FString Path); // Function Solarland.SolarLuaHelper.CreateDirectory // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21446b0
	bool CopyFile(struct FString DestFilePath, struct FString SrcFilePath); // Function Solarland.SolarLuaHelper.CopyFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2144530
	void ConvertKeyMappingName(struct FKey& Key, struct FString& OutDisplayName); // Function Solarland.SolarLuaHelper.ConvertKeyMappingName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21443f0
	void CloseVirtualKeyboard(); // Function Solarland.SolarLuaHelper.CloseVirtualKeyboard // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x997950
	void ClipboardCopyText(struct FString Content); // Function Solarland.SolarLuaHelper.ClipboardCopyText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2144360
	void ClearSkeletalMeshMat(struct USkeletalMeshComponent* SkeletalMeshComponent); // Function Solarland.SolarLuaHelper.ClearSkeletalMeshMat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21442e0
	bool CheckIsNeedDownLoad(int32_t ChunkID); // Function Solarland.SolarLuaHelper.CheckIsNeedDownLoad // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2144250
	void ApplyVehicleSkinPreview(struct UObject* PreviewVehicleObj, int32_t SkinId, int32_t PageType, struct FVector DefaultLoc); // Function Solarland.SolarLuaHelper.ApplyVehicleSkinPreview // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2144100
};

// Class Solarland.LuaErrorWidgetBase
// Size: 0x260 (Inherited: 0x260)
struct ULuaErrorWidgetBase : UUserWidget {

	void ShowLuaError(struct TArray<struct FString>& LuaErrorMsgs); // Function Solarland.LuaErrorWidgetBase.ShowLuaError // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarLuaManager
// Size: 0xd8 (Inherited: 0x28)
struct USolarLuaManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FMulticastInlineDelegate OnHandleLuaException; // 0x30(0x10)
	char pad_40[0x10]; // 0x40(0x10)
	struct FSoftObjectPath LuaErrorWidgetPath; // 0x50(0x18)
	char pad_68[0x8]; // 0x68(0x08)
	struct ULuaErrorWidgetBase* LuaErrorWidget; // 0x70(0x08)
	char pad_78[0x60]; // 0x78(0x60)

	void SetLuaErrorPopWidget(struct ULuaErrorWidgetBase* Widget); // Function Solarland.SolarLuaManager.SetLuaErrorPopWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x214cd40
	void OnLuaContextCleanup(bool bFullCleanup); // Function Solarland.SolarLuaManager.OnLuaContextCleanup // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	enum class ESolarBuildConfiguration GetBuildConfiguration(); // Function Solarland.SolarLuaManager.GetBuildConfiguration // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x214bbb0
	void AddToDoNotShowAgainList(struct FString Msg); // Function Solarland.SolarLuaManager.AddToDoNotShowAgainList // (Final|Native|Public|BlueprintCallable) // @ game+0x214b790
};

// Class Solarland.SolarMainPlayerModel
// Size: 0x30 (Inherited: 0x28)
struct USolarMainPlayerModel : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	void SyncFromPlayerData(int32_t InAccountFlag); // Function Solarland.SolarMainPlayerModel.SyncFromPlayerData // (Final|Native|Public) // @ game+0x214cdd0
	bool IsAccountFlagOn(); // Function Solarland.SolarMainPlayerModel.IsAccountFlagOn // (Final|Native|Public|Const) // @ game+0x214c7a0
};

// Class Solarland.SolarMapManager
// Size: 0x1c0 (Inherited: 0x30)
struct USolarMapManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMapData MapData; // 0x38(0x3c)
	struct FVehicleData VehicleData; // 0x74(0x10)
	struct FMiniMapAirlineData CurAirlineData; // 0x84(0x30)
	struct FVector AirlineActorLoc; // 0xb4(0x0c)
	int32_t CurrentMapID; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct FString CurrentMapName; // 0xc8(0x10)
	char pad_D8[0x70]; // 0xd8(0x70)
	struct UVisualSoundConfig* BattlePromptConfig; // 0x148(0x08)
	struct UGameModeGlobalSetting* GameModeGlobalSetting; // 0x150(0x08)
	char pad_158[0x50]; // 0x158(0x50)
	struct FBattlePromptData BattlePromptData; // 0x1a8(0x18)

	struct FVector2D WorldLocationToMiniMap(struct FVector WorldLocation); // Function Solarland.SolarMapManager.WorldLocationToMiniMap // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x214cf20
	float WorldLengthToMiniMap(float WorldLength); // Function Solarland.SolarMapManager.WorldLengthToMiniMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x214ce80
	void UnInitMapData(); // Function Solarland.SolarMapManager.UnInitMapData // (Final|Native|Public|BlueprintCallable) // @ game+0x214ce60
	void ReceiveInitMapData(int32_t MapID); // Function Solarland.SolarMapManager.ReceiveInitMapData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FVector2D Normal2D(struct FVector2D VectorToTransForm); // Function Solarland.SolarMapManager.Normal2D // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x214ca20
	struct FVector MiniMapToWorldLocation(struct FVector2D PositionXY, float Z); // Function Solarland.SolarMapManager.MiniMapToWorldLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x214c940
	bool IsOutOfBound(struct FVector2D PlayerNavPos); // Function Solarland.SolarMapManager.IsOutOfBound // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x214c8b0
	bool IsMiniMapAirlineDataValid(struct FMiniMapAirlineData& InData); // Function Solarland.SolarMapManager.IsMiniMapAirlineDataValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x214c7d0
	void InitMapData(int32_t MapID); // Function Solarland.SolarMapManager.InitMapData // (Final|Native|Public|BlueprintCallable) // @ game+0x214c6f0
	struct ASolarCharacter* GetViewportFocusedCharacter(); // Function Solarland.SolarMapManager.GetViewportFocusedCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x214c620
	bool GetSafeAreaInfo(struct FSafeAreaMapInfo& OutAreaInfo); // Function Solarland.SolarMapManager.GetSafeAreaInfo // (Final|Native|Public|HasOutParms) // @ game+0x214c560
	struct FVector GetRandomVectorFromMapDarkData(struct UObject* WorldContextObject, enum class EMapDarkDataType InType, bool GetWhiteArea); // Function Solarland.SolarMapManager.GetRandomVectorFromMapDarkData // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x214c430
	struct UCurveFloat* GetMiniMapFOVCurve(float InRadius); // Function Solarland.SolarMapManager.GetMiniMapFOVCurve // (Final|Native|Public) // @ game+0x214c230
	int32_t GetLenegthFromPlayerToMarkPoint(struct FVector MarkPosRealWorld, struct FVector CurrentPlayerLocation); // Function Solarland.SolarMapManager.GetLenegthFromPlayerToMarkPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x214c140
	bool GetIntersectionOnMapFrame(struct FVector2D TeamMatePos, struct FVector2D MapAPos, float MapFrameHeight, float MapFrameWidth, struct FVector2D& InterSecionList, enum class EDirection& CrossDirection); // Function Solarland.SolarMapManager.GetIntersectionOnMapFrame // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x214bf20
	float GetDistanceToSafeArea(struct FSafeAreaMapInfo& AreaInfo, struct FVector& FromLocation); // Function Solarland.SolarMapManager.GetDistanceToSafeArea // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x214be20
	int32_t GetCurrentMapID(); // Function Solarland.SolarMapManager.GetCurrentMapID // (Final|Native|Public|BlueprintCallable) // @ game+0x214bdf0
	struct FMiniMapAirlineData GetCurAirlineData(); // Function Solarland.SolarMapManager.GetCurAirlineData // (Final|Native|Public|BlueprintCallable) // @ game+0x214bdb0
	struct UVisualSoundConfig* GetBattlePromptConfig(); // Function Solarland.SolarMapManager.GetBattlePromptConfig // (Final|Native|Protected) // @ game+0x214bb80
	struct FVector2D FixNavPos(struct FVector2D PlayerNavPos); // Function Solarland.SolarMapManager.FixNavPos // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x214baf0
	bool CheckMapDarkDataWithVector(struct FVector InVector, enum class EMapDarkDataType InType, bool GetWhiteArea); // Function Solarland.SolarMapManager.CheckMapDarkDataWithVector // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x214b9d0
	bool CheckIfMarkedPointValid(struct FVector2D& InMarkedPoint); // Function Solarland.SolarMapManager.CheckIfMarkedPointValid // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x214b930
	float CalculatePoisonDistance(struct FSafeAreaMapInfo& AreaInfo, struct FVector& FromLocation); // Function Solarland.SolarMapManager.CalculatePoisonDistance // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x214b830
};

// Class Solarland.SolarMapSelectPoint
// Size: 0x3d0 (Inherited: 0x298)
struct ASolarMapSelectPoint : ASolarMapElementBase {
	int32_t MapID; // 0x298(0x04)
	struct FMapSelectPointCellConfig MapCellConfig; // 0x29c(0x14)
	struct UMapSelectPointNoticeMap* SelectPointNoticeMapWidgetClass; // 0x2b0(0x08)
	struct UMapSelectPointCellWidget* CellWidgetClass; // 0x2b8(0x08)
	struct USolarMapManager* MapManager; // 0x2c0(0x08)
	struct USolarGameMode_ElementManager* ElementManager; // 0x2c8(0x08)
	struct UMapSelectPointNoticeMap* SelectPointNoticeMap; // 0x2d0(0x08)
	struct TMap<struct FString, struct UMapSelectPointCellWidget*> WidgetInCells; // 0x2d8(0x50)
	char pad_328[0x50]; // 0x328(0x50)
	struct TMap<struct FString, struct FMapSelectPointCellData> AllCellsData; // 0x378(0x50)
	char pad_3C8[0x8]; // 0x3c8(0x08)

	void SetCellSelectionAccess(struct FMapSelectPointCellAddress& InCellAdr, enum class EMapCellSelectionAccess InNewState); // Function Solarland.SolarMapSelectPoint.SetCellSelectionAccess // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x214cbe0
	void ServerSetCellSelectionAccess(struct FString InAddress, enum class EMapCellSelectionAccess InNewState); // Function Solarland.SolarMapSelectPoint.ServerSetCellSelectionAccess // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x214caf0
	void OnNoticeMapInitialized(); // Function Solarland.SolarMapSelectPoint.OnNoticeMapInitialized // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnInitSelectPoint(int32_t InMapID); // Function Solarland.SolarMapSelectPoint.OnInitSelectPoint // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnCellBeSelected(struct FMapSelectPointCellAddress& CellAddress, bool IsSelected); // Function Solarland.SolarMapSelectPoint.OnCellBeSelected // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void InitSelectPointData(); // Function Solarland.SolarMapSelectPoint.InitSelectPointData // (Final|Native|Public|BlueprintCallable) // @ game+0x214c780
	struct UUserWidget* GetWidgetInCell(struct FMapSelectPointCellAddress& InCellAdr); // Function Solarland.SolarMapSelectPoint.GetWidgetInCell // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x214c650
	struct UUserWidget* GetSelectPointNoticeMapWidget(); // Function Solarland.SolarMapSelectPoint.GetSelectPointNoticeMapWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x214c600
	struct TArray<struct ASolarPlayerStart*> GetPlayerStartsInCell(struct FMapSelectPointCellAddress& InCellAdr, struct TArray<struct FString>& InTags); // Function Solarland.SolarMapSelectPoint.GetPlayerStartsInCell // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x214c2c0
	enum class EMapCellSelectionAccess GetCellSelectState(struct FMapSelectPointCellAddress& InCellAdr); // Function Solarland.SolarMapSelectPoint.GetCellSelectState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x214bd10
	bool GetCellPositionOnBigMap(struct FMapSelectPointCellAddress& InCellAdr, struct FVector2D& LU_Pos, struct FVector2D& RD_Pos); // Function Solarland.SolarMapSelectPoint.GetCellPositionOnBigMap // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x214bbe0
};

// Class Solarland.SolarMapVehicleObject
// Size: 0x50 (Inherited: 0x28)
struct USolarMapVehicleObject : UObject {
	struct TSoftObjectPtr<UTexture2D> SoftVehicleIcon; // 0x28(0x28)
};

// Class Solarland.SolarMapVehicleTabSlot
// Size: 0x358 (Inherited: 0x348)
struct USolarMapVehicleTabSlot : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)
	struct UImage* Img_Car; // 0x350(0x08)

	void SetEmpty(bool bEmpty); // Function Solarland.SolarMapVehicleTabSlot.SetEmpty // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarMapVehicleWidget
// Size: 0x3c0 (Inherited: 0x348)
struct USolarMapVehicleWidget : USolarUserWidget {
	struct UButton* Btn_EnableTaskPanel; // 0x348(0x08)
	struct UTileView* VehicleList; // 0x350(0x08)
	bool bExpand; // 0x358(0x01)
	char pad_359[0x7]; // 0x359(0x07)
	struct TMap<int32_t, struct TSoftObjectPtr<UTexture2D>> VehicleSpawnerTypeIcons; // 0x360(0x50)
	struct TArray<struct UObject*> MapVehicleObjects; // 0x3b0(0x10)

	void SetExpand(bool bInExpand); // Function Solarland.SolarMapVehicleWidget.SetExpand // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnBtnEnableTaskPanelClicked(); // Function Solarland.SolarMapVehicleWidget.OnBtnEnableTaskPanelClicked // (Final|Native|Public) // @ game+0x2150e40
	void InitVehicleList(); // Function Solarland.SolarMapVehicleWidget.InitVehicleList // (Final|Native|Public) // @ game+0x2150d10
};

// Class Solarland.SolarMath
// Size: 0x28 (Inherited: 0x28)
struct USolarMath : UObject {

	float Clamp01(float Value); // Function Solarland.SolarMath.Clamp01 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2150c40
};

// Class Solarland.SolarMetaAttributeSet
// Size: 0x50 (Inherited: 0x30)
struct USolarMetaAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData Damage; // 0x30(0x10)
	struct FGameplayAttributeData ShieldDamage; // 0x40(0x10)
};

// Class Solarland.MobilePlatform
// Size: 0x290 (Inherited: 0x228)
struct AMobilePlatform : AActor {
	struct USplineComponent* SplineComponent; // 0x228(0x08)
	struct UStaticMeshComponent* MeshComponent; // 0x230(0x08)
	struct TArray<struct FMobilePlatformSplinePoint> PointInfos; // 0x238(0x10)
	float ConfigDefaultSpeed; // 0x248(0x04)
	float ConfigDefaultDelayTime; // 0x24c(0x04)
	float CurrentSpeed; // 0x250(0x04)
	float CurrentDistance; // 0x254(0x04)
	float TotalDistance; // 0x258(0x04)
	float DelayTime; // 0x25c(0x04)
	int32_t PointNum; // 0x260(0x04)
	int32_t PointIndex; // 0x264(0x04)
	struct FVector MoveVecter; // 0x268(0x0c)
	struct FVector MeshExtend; // 0x274(0x0c)
	char pad_280[0x10]; // 0x280(0x10)

	void UpdateRotation(float DeltaSeconds); // Function Solarland.MobilePlatform.UpdateRotation // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x21518b0
	void UpdateOverlapActor(float DeltaSeconds, struct AActor* InActor); // Function Solarland.MobilePlatform.UpdateOverlapActor // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x21517d0
	void UpdateLocation(float DeltaSeconds); // Function Solarland.MobilePlatform.UpdateLocation // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2151740
	void UpdateCurrentDistance(float DeltSeconds); // Function Solarland.MobilePlatform.UpdateCurrentDistance // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x21516b0
	void OnEnterPoint(); // Function Solarland.MobilePlatform.OnEnterPoint // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1555e80
	void OnEndOverlap(struct AActor* ThisActor, struct AActor* OtherActor); // Function Solarland.MobilePlatform.OnEndOverlap // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2151380
	void OnBeginOverlap(struct AActor* ThisActor, struct AActor* OtherActor); // Function Solarland.MobilePlatform.OnBeginOverlap // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2150d50
	void Init(); // Function Solarland.MobilePlatform.Init // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x80de90
	struct UShapeComponent* GetCollisionComponent(); // Function Solarland.MobilePlatform.GetCollisionComponent // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	bool CheckNeedOverlap(float DeltaSeconds, struct AActor* InActor); // Function Solarland.MobilePlatform.CheckNeedOverlap // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2150b60
};

// Class Solarland.SolarModMagnitudeCalc
// Size: 0x68 (Inherited: 0x40)
struct USolarModMagnitudeCalc : UGameplayModMagnitudeCalculation {
	struct UModMagnitudeCalcProxy* CDOProxyClass; // 0x40(0x08)
	struct UModMagnitudeCalcProxy* CDOProxy; // 0x48(0x08)
	char pad_50[0x18]; // 0x50(0x18)
};

// Class Solarland.SolarMoveToCostSecAction
// Size: 0x98 (Inherited: 0x30)
struct USolarMoveToCostSecAction : UBlueprintAsyncActionBase {
	char pad_30[0x48]; // 0x30(0x48)
	struct FMulticastInlineDelegate OnCalcMoveToCostSuc; // 0x78(0x10)
	struct FMulticastInlineDelegate OnCalcMoveToCostFailed; // 0x88(0x10)

	struct USolarMoveToCostSecAction* CalcMoveToCostSec(struct UObject* WorldContextObject, struct ASolarBotAIController* BotController, struct FVector MoveToLocation, struct AActor* MoveToActor, float AcceptRadius, bool bAllowPartialPath, bool bProjectGoalLocation); // Function Solarland.SolarMoveToCostSecAction.CalcMoveToCostSec // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2150930
};

// Class Solarland.SolarNavArea_Jet
// Size: 0x48 (Inherited: 0x48)
struct USolarNavArea_Jet : UNavArea {
};

// Class Solarland.SolarNavArea_Vault
// Size: 0x48 (Inherited: 0x48)
struct USolarNavArea_Vault : UNavArea {
};

// Class Solarland.SolarNavArea_Water
// Size: 0x48 (Inherited: 0x48)
struct USolarNavArea_Water : UNavArea {
};

// Class Solarland.SolarNavLink_Jet
// Size: 0x290 (Inherited: 0x278)
struct ASolarNavLink_Jet : ANavLinkProxy {
	float JetTimeout; // 0x278(0x04)
	bool bNoFail; // 0x27c(0x01)
	bool bMarkInValidAfterFailedUse; // 0x27d(0x01)
	char pad_27E[0x12]; // 0x27e(0x12)
};

// Class Solarland.SolarNavLink_Vault
// Size: 0x2a0 (Inherited: 0x278)
struct ASolarNavLink_Vault : ANavLinkProxy {
	float VaultTimeOut; // 0x278(0x04)
	bool bNoFail; // 0x27c(0x01)
	bool bMarkInValidAfterFailedUse; // 0x27d(0x01)
	char pad_27E[0x2]; // 0x27e(0x02)
	float MaxDistancePrecision; // 0x280(0x04)
	char pad_284[0x1c]; // 0x284(0x1c)
};

// Class Solarland.SolarNavLinkCustomComponent
// Size: 0x1a0 (Inherited: 0x190)
struct USolarNavLinkCustomComponent : UNavLinkCustomComponent {
	char pad_190[0x10]; // 0x190(0x10)
};

// Class Solarland.SolarNavLinkManager
// Size: 0x290 (Inherited: 0x278)
struct ASolarNavLinkManager : ANavLinkProxy {
	struct USolarNavLinkRegisterComponent* SolarSmartLinkComp; // 0x278(0x08)
	char pad_280[0x10]; // 0x280(0x10)
};

// Class Solarland.SolarNavLinkRegisterComponent
// Size: 0x260 (Inherited: 0x190)
struct USolarNavLinkRegisterComponent : UNavLinkCustomComponent {
	struct TMap<uint32_t, struct FSmartLinkInstance> SmartLinkMap; // 0x190(0x50)
	char pad_1E0[0x50]; // 0x1e0(0x50)
	enum class ENavLinkType LinkType; // 0x230(0x01)
	char pad_231[0x3]; // 0x231(0x03)
	struct FVector VaultPoint; // 0x234(0x0c)
	struct FVector VaultDirect; // 0x240(0x0c)
	enum class EVaultType VaultAnimate; // 0x24c(0x01)
	char pad_24D[0x3]; // 0x24d(0x03)
	struct FVector VaultLandPoint; // 0x250(0x0c)
	char pad_25C[0x4]; // 0x25c(0x04)
};

// Class Solarland.SolarNavModifierComponent
// Size: 0x150 (Inherited: 0x140)
struct USolarNavModifierComponent : UNavModifierComponent {
	char pad_140[0x10]; // 0x140(0x10)

	void OnVehicleRootHit(struct UPrimitiveComponent* HitComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarNavModifierComponent.OnVehicleRootHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x21514d0
	void OnDriverGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarNavModifierComponent.OnDriverGetOnVehicle // (Final|Native|Protected) // @ game+0x21512b0
	void OnDriverGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarNavModifierComponent.OnDriverGetOffVehicle // (Final|Native|Protected) // @ game+0x21511e0
};

// Class Solarland.SolarNavQueryFilter
// Size: 0x50 (Inherited: 0x48)
struct USolarNavQueryFilter : UNavigationQueryFilter {
	uint32_t MaxSearchNode; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Solarland.SolarNavQueryFilter_ExcludeJet
// Size: 0x50 (Inherited: 0x50)
struct USolarNavQueryFilter_ExcludeJet : USolarNavQueryFilter {
};

// Class Solarland.SolarNavQueryFilter_JetInvalid
// Size: 0x50 (Inherited: 0x50)
struct USolarNavQueryFilter_JetInvalid : USolarNavQueryFilter {
};

// Class Solarland.SolarNavWeedActor
// Size: 0x248 (Inherited: 0x228)
struct ASolarNavWeedActor : ATargetPoint {
	char pad_228[0x20]; // 0x228(0x20)
};

// Class Solarland.SolarNetMovementComponent
// Size: 0x6a0 (Inherited: 0xb0)
struct USolarNetMovementComponent : UActorComponent {
	char pad_B0[0x34]; // 0xb0(0x34)
	float InterpolatedBackTime; // 0xe4(0x04)
	float ServerBufferCheckMinSpeed; // 0xe8(0x04)
	float ServerBufferIgnoreCheckTimer; // 0xec(0x04)
	float AtRestThresholdCount; // 0xf0(0x04)
	enum class EExtrapolationMode ExtrapolationMode; // 0xf4(0x01)
	bool bUseExtrapolationTimeLimit; // 0xf5(0x01)
	char pad_F6[0x2]; // 0xf6(0x02)
	float ExtrapolationTimeLimit; // 0xf8(0x04)
	bool bUseExtrapolationDistanceLimit; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	float ExtrapolationDistanceLimit; // 0x100(0x04)
	float SendPositionThreshold; // 0x104(0x04)
	float SendRotationThreshold; // 0x108(0x04)
	float SendVelocityThreshold; // 0x10c(0x04)
	float SendAngularVelocityThreshold; // 0x110(0x04)
	float ResetTimeOffsetsThreshold; // 0x114(0x04)
	float UsingRepLocationThreshold; // 0x118(0x04)
	float LinearVelcolityForPositionThreshold; // 0x11c(0x04)
	float ReceivedPositionThreshold; // 0x120(0x04)
	float AngularVelocityForRotationThreshold; // 0x124(0x04)
	float ReceivedRotationThreshold; // 0x128(0x04)
	float PositionSnapThreshold; // 0x12c(0x04)
	float RotationSnapThreshold; // 0x130(0x04)
	float PositionLerpSpeed; // 0x134(0x04)
	float RotationLerpSpeed; // 0x138(0x04)
	float SpeedOfLerp; // 0x13c(0x04)
	enum class ESyncMode SyncPosition; // 0x140(0x01)
	enum class ESyncMode SyncRotation; // 0x141(0x01)
	enum class ESyncMode SyncVelocity; // 0x142(0x01)
	enum class ESyncMode SyncAngularVelocity; // 0x143(0x01)
	bool bSyncDesiredYaw; // 0x144(0x01)
	bool isPositionCompressed; // 0x145(0x01)
	bool isRotationCompressed; // 0x146(0x01)
	bool isVelocityCompressed; // 0x147(0x01)
	bool isAngularVelocityCompressed; // 0x148(0x01)
	char pad_149[0x3]; // 0x149(0x03)
	float SendRate; // 0x14c(0x04)
	float TimeSmoothing; // 0x150(0x04)
	bool bUsingOriginRebasing; // 0x154(0x01)
	bool bAlwaysSendOrigin; // 0x155(0x01)
	char pad_156[0x3a]; // 0x156(0x3a)
	struct UPrimitiveComponent* PrimitiveComponent; // 0x190(0x08)
	struct USceneComponent* RelativeComponent; // 0x198(0x08)
	struct ASolarVehiclePawn* PreviousBaseVehicleActor; // 0x1a0(0x08)
	char pad_1A8[0x368]; // 0x1a8(0x368)
	float AtRestPositionThreshold; // 0x510(0x04)
	float AtRestRotationThreshold; // 0x514(0x04)
	char pad_518[0x10]; // 0x518(0x10)
	struct ASolarVehiclePawn* VehiclePawn; // 0x528(0x08)
	char pad_530[0x170]; // 0x530(0x170)
};

// Class Solarland.SolarNightComesActor
// Size: 0x578 (Inherited: 0x3e0)
struct ASolarNightComesActor : ASummonItemBase {
	float BeginEffectDuration; // 0x3e0(0x04)
	float OngoingEffectDuration; // 0x3e4(0x04)
	float OngoingEffectClearDelay; // 0x3e8(0x04)
	float EndEffectDuration; // 0x3ec(0x04)
	float VisualEffectBeginDelay_AfterBeginEffect; // 0x3f0(0x04)
	float VisualEffectEndDelay_AfterEndEffect; // 0x3f4(0x04)
	struct UParticleSystem* BeginEffect; // 0x3f8(0x08)
	struct UParticleSystem* OngoingEffect; // 0x400(0x08)
	struct UParticleSystem* EndEffect; // 0x408(0x08)
	struct UParticleSystem* ItemEffect; // 0x410(0x08)
	struct UParticleSystem* ItemExplodeEffect; // 0x418(0x08)
	struct UParticleSystem* ItemDisappearEffect; // 0x420(0x08)
	float EffectRadius; // 0x428(0x04)
	float NightfellRadius; // 0x42c(0x04)
	float NightFellRadius_WithBuff; // 0x430(0x04)
	float NightFellCapacity; // 0x434(0x04)
	float NightfellFadeness; // 0x438(0x04)
	char pad_43C[0x4]; // 0x43c(0x04)
	struct UCurveFloat* ItemFellRadiusCurve; // 0x440(0x08)
	bool bShowDebug; // 0x448(0x01)
	bool bOpenVisualFell; // 0x449(0x01)
	char pad_44A[0x2]; // 0x44a(0x02)
	float UpdateEffectingCharacterInterval; // 0x44c(0x04)
	struct UStaticMeshComponent* StaticMeshCollision; // 0x450(0x08)
	struct USkeletalMeshComponent* ItemSkeletalMesh; // 0x458(0x08)
	struct FVector EffectScale; // 0x460(0x0c)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct UAnimationAsset* StartAnim; // 0x470(0x08)
	struct FString StartLoopSound; // 0x478(0x10)
	struct FString EndLoopSound; // 0x488(0x10)
	struct FString EnterSound; // 0x498(0x10)
	struct FString ExitSound; // 0x4a8(0x10)
	struct FString ExplodeSound; // 0x4b8(0x10)
	struct FString HitBy1pSound; // 0x4c8(0x10)
	float MeshVisibleDelay; // 0x4d8(0x04)
	int32_t PerspectiveMeshSortPriority; // 0x4dc(0x04)
	struct UMaterialInterface* StencilMaterial; // 0x4e0(0x08)
	struct UGameplayEffect* NightComesContinousEffect; // 0x4e8(0x08)
	enum class ENightComesState CurrentState; // 0x4f0(0x01)
	char pad_4F1[0x37]; // 0x4f1(0x37)
	struct UParticleSystemComponent* BeginEffectHandle; // 0x528(0x08)
	struct UParticleSystemComponent* OngingEffectHandle; // 0x530(0x08)
	struct UParticleSystemComponent* EndEffectHandle; // 0x538(0x08)
	struct UParticleSystemComponent* ItemEffectHandle; // 0x540(0x08)
	struct ASolarCharacter* InstigatorCharacter; // 0x548(0x08)
	char pad_550[0x10]; // 0x550(0x10)
	struct TArray<struct AActor*> EffectingActors; // 0x560(0x10)
	char pad_570[0x8]; // 0x570(0x08)

	void OnRep_NightComesState(); // Function Solarland.SolarNightComesActor.OnRep_NightComesState // (Final|Native|Private) // @ game+0x21514b0
	void OnMeshVisible(); // Function Solarland.SolarNightComesActor.OnMeshVisible // (Final|Native|Protected) // @ game+0x2151490
	void OnGoingPhase(); // Function Solarland.SolarNightComesActor.OnGoingPhase // (Final|Native|Protected) // @ game+0x2151470
	void OnEndPhase(); // Function Solarland.SolarNightComesActor.OnEndPhase // (Final|Native|Public) // @ game+0x2151450
	void OnComponentEndOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarNightComesActor.OnComponentEndOverlap // (Final|Native|Protected) // @ game+0x2151080
	void OnComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarNightComesActor.OnComponentBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x2150e60
	void OnBeginPhase(); // Function Solarland.SolarNightComesActor.OnBeginPhase // (Final|Native|Protected) // @ game+0x2150e20
	void LocalRemoveSelf(); // Function Solarland.SolarNightComesActor.LocalRemoveSelf // (Final|Native|Public) // @ game+0x2150d30
	void EndVisualEffect(); // Function Solarland.SolarNightComesActor.EndVisualEffect // (Final|Native|Protected) // @ game+0x2150cd0
	void BeginVisualEffect(); // Function Solarland.SolarNightComesActor.BeginVisualEffect // (Final|Native|Protected) // @ game+0x2150910
};

// Class Solarland.SolarNoSpringCameraComponent
// Size: 0x9e0 (Inherited: 0x9c0)
struct USolarNoSpringCameraComponent : USolarCameraComponent {
	char pad_9C0[0x20]; // 0x9c0(0x20)
};

// Class Solarland.SolarNPC
// Size: 0x4e0 (Inherited: 0x4d0)
struct ASolarNPC : ACharacter {
	struct USphereComponent* InteractionCollision; // 0x4c8(0x08)
	struct ASolarCharacter* LookAtPlayer; // 0x4d0(0x08)
	float LookYaw; // 0x4d8(0x04)
};

// Class Solarland.SolarObjGameplayAbility
// Size: 0x418 (Inherited: 0x400)
struct USolarObjGameplayAbility : UGameplayAbility {
	struct UGameplayEffect* ActivateEffect; // 0x400(0x08)
	float CostEnergy; // 0x408(0x04)
	char pad_40C[0xc]; // 0x40c(0x0c)

	struct ASolarInteractableActor* GetAbilityInstigator(); // Function Solarland.SolarObjGameplayAbility.GetAbilityInstigator // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x21564c0
	struct AActor* GetAbilityEffectUser(); // Function Solarland.SolarObjGameplayAbility.GetAbilityEffectUser // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2156490
};

// Class Solarland.SolarObjAbilityRadar
// Size: 0x428 (Inherited: 0x418)
struct USolarObjAbilityRadar : USolarObjGameplayAbility {
	struct ASolarRadarBase* RadarClass; // 0x418(0x08)
	float LifeTime; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)

	void K2_ApplyRadarAbility(struct ASolarRadarBase* SpawnedRadar); // Function Solarland.SolarObjAbilityRadar.K2_ApplyRadarAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x2157060
};

// Class Solarland.SolarObjAbilitySystemComponent
// Size: 0x1348 (Inherited: 0x12f8)
struct USolarObjAbilitySystemComponent : UAbilitySystemComponent {
	char pad_12F8[0x10]; // 0x12f8(0x10)
	struct FGameplayTagContainer NotifyTags; // 0x1308(0x20)
	struct FGameplayTagContainer RepNotifiedTags; // 0x1328(0x20)

	void OnRep_RepNotifiedTags(struct FGameplayTagContainer& Previous); // Function Solarland.SolarObjAbilitySystemComponent.OnRep_RepNotifiedTags // (Native|Protected|HasOutParms) // @ game+0x21577d0
};

// Class Solarland.SolarObjectPoolManager
// Size: 0xd0 (Inherited: 0x30)
struct USolarObjectPoolManager : UGameInstanceSubsystem {
	struct TMap<struct FName, struct FObjectArray> CachedMap; // 0x30(0x50)
	char pad_80[0x50]; // 0x80(0x50)

	struct TArray<struct UObject*> PushObjectArray(struct TArray<struct UObject*> ObjectArray, struct FName Tag); // Function Solarland.SolarObjectPoolManager.PushObjectArray // (Final|Native|Public|BlueprintCallable) // @ game+0x2157f70
	bool PushObject(struct UObject* Object, struct FName Tag); // Function Solarland.SolarObjectPoolManager.PushObject // (Final|Native|Public|BlueprintCallable) // @ game+0x2157ea0
	struct UObject* PopObjectByTag(struct FName Tag); // Function Solarland.SolarObjectPoolManager.PopObjectByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x2157de0
	struct USolarObjectPoolManager* Get(struct UObject* WorldContextObject); // Function Solarland.SolarObjectPoolManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2156400
	void CleanUp(); // Function Solarland.SolarObjectPoolManager.CleanUp // (Final|Native|Public|BlueprintCallable) // @ game+0x1fbaa90
};

// Class Solarland.SolarOBUIModel
// Size: 0xe8 (Inherited: 0x28)
struct USolarOBUIModel : UObject {
	char pad_28[0x60]; // 0x28(0x60)
	struct FMulticastInlineDelegate OnAnyTeamKillCountChanged; // 0x88(0x10)
	char pad_98[0x50]; // 0x98(0x50)

	void SimpleDynamicMulticastDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarOBUIModel.SimpleDynamicMulticastDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void RegisterEvents(); // Function Solarland.SolarOBUIModel.RegisterEvents // (Final|Native|Public) // @ game+0x2158200
	void OnTeamSettled(struct ASolarTeamInfo* Team); // Function Solarland.SolarOBUIModel.OnTeamSettled // (Final|Native|Private) // @ game+0x21579f0
	void OnTeamKillCountChanged(struct ASolarTeamInfo* TeamInfo); // Function Solarland.SolarOBUIModel.OnTeamKillCountChanged // (Final|Native|Private) // @ game+0x2157960
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.SolarOBUIModel.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x2157890
	void OnRemainTeamsCountChanged(char TeamsCount); // Function Solarland.SolarOBUIModel.OnRemainTeamsCountChanged // (Final|Native|Private|Const) // @ game+0x2157750
	void OnRemainPlayersCountChanged(char PlayersCount); // Function Solarland.SolarOBUIModel.OnRemainPlayersCountChanged // (Final|Native|Private|Const) // @ game+0x21576d0
	void OnPlayingScrubCharactersCreated(); // Function Solarland.SolarOBUIModel.OnPlayingScrubCharactersCreated // (Final|Native|Public) // @ game+0x21576b0
	void OnPlayerLeaveTeam(struct ASolarTeamInfo* TeamInfo, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarOBUIModel.OnPlayerLeaveTeam // (Final|Native|Public) // @ game+0x2157550
	void OnPlayerKillCountChanged(struct ASolarPlayerState* InPlayerState); // Function Solarland.SolarOBUIModel.OnPlayerKillCountChanged // (Final|Native|Private) // @ game+0x2157620
	void OnPlayerJoinTeam(struct ASolarTeamInfo* TeamInfo, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarOBUIModel.OnPlayerJoinTeam // (Final|Native|Public) // @ game+0x2157550
	void OnCheatersPlayerIDChanged(); // Function Solarland.SolarOBUIModel.OnCheatersPlayerIDChanged // (Final|Native|Public) // @ game+0x21573b0
	void Init(); // Function Solarland.SolarOBUIModel.Init // (Final|Native|Public) // @ game+0x2156b90
};

// Class Solarland.SolarOperationUIElement
// Size: 0x68 (Inherited: 0x28)
struct USolarOperationUIElement : UObject {
	struct TArray<struct FOperationUIElement> CharacterOperationUI; // 0x28(0x10)
	struct TArray<struct FOperationUIElement> DirectionOperationUI; // 0x38(0x10)
	struct TArray<struct FOperationUIElement> SteeringOperationUI; // 0x48(0x10)
	struct TArray<struct FOperationUIElement> JoyStickOperationUI; // 0x58(0x10)
};

// Class Solarland.SolarOrnamentChildActor
// Size: 0x228 (Inherited: 0x228)
struct ASolarOrnamentChildActor : AActor {
};

// Class Solarland.SolarOrnamentHackerBall
// Size: 0x280 (Inherited: 0x228)
struct ASolarOrnamentHackerBall : ASolarOrnamentChildActor {
	struct ASolarCharacter* OwnerCharacter; // 0x228(0x08)
	struct USkeletalMeshComponent* OwnerMeshComp; // 0x230(0x08)
	struct FName SoftAttachBoneName; // 0x238(0x08)
	struct FName SoftAttachSecondBoneName; // 0x240(0x08)
	char pad_248[0x8]; // 0x248(0x08)
	struct FTransform AttachRelativeTransform; // 0x250(0x30)
};

// Class Solarland.SolarPawn
// Size: 0x28 (Inherited: 0x28)
struct USolarPawn : UInterface {
};

// Class Solarland.SolarPerceptionComponent
// Size: 0x330 (Inherited: 0x180)
struct USolarPerceptionComponent : UAIPerceptionComponent {
	struct FSolarBotThreatConfig DefaultThreatConfig; // 0x180(0x6c)
	char pad_1EC[0x4]; // 0x1ec(0x04)
	struct TMap<enum class EPerceivableEffectAreaType, struct AActor*> ConfigAreaTypeIdentifyMap; // 0x1f0(0x50)
	struct FPerceivableEAInfluenceConfig EffectAreasInfluenceConfig; // 0x240(0x60)
	float MaxInfluenceRadius; // 0x2a0(0x04)
	float SmokeGrenadeAffectRadius; // 0x2a4(0x04)
	float EnergyBubbleAffectRadius; // 0x2a8(0x04)
	float SummonWallAffectRadius; // 0x2ac(0x04)
	float UAVShieldAffectRadius; // 0x2b0(0x04)
	float UAVRescueAffectRadius; // 0x2b4(0x04)
	bool bTargetSelectEnabled; // 0x2b8(0x01)
	char pad_2B9[0x7]; // 0x2b9(0x07)
	struct TArray<struct FName> ForbiddenTags; // 0x2c0(0x10)
	char pad_2D0[0x38]; // 0x2d0(0x38)
	int32_t MaxNumCachedDamage; // 0x308(0x04)
	char pad_30C[0x24]; // 0x30c(0x24)

	void UpdateSenseConfig(float NewSightRadius); // Function Solarland.SolarPerceptionComponent.UpdateSenseConfig // (Final|Native|Public|BlueprintCallable) // @ game+0x21593f0
	void SetTargetSelectEnabled(bool bInEnable); // Function Solarland.SolarPerceptionComponent.SetTargetSelectEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x2158af0
	void SetForbiddenTags(struct TArray<struct FName>& Tags, bool bCleanExists); // Function Solarland.SolarPerceptionComponent.SetForbiddenTags // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21587b0
	void OnBotPerceptionUpdated(struct AActor* Actor, struct FAIStimulus Stimulus); // Function Solarland.SolarPerceptionComponent.OnBotPerceptionUpdated // (Final|Native|Protected) // @ game+0x2157200
	bool IsInEffectAreaOfType(enum class EPerceivableEffectAreaType Type, struct AActor* InTestActor); // Function Solarland.SolarPerceptionComponent.IsInEffectAreaOfType // (Final|Native|Public|BlueprintCallable) // @ game+0x2156da0
	bool IsInAnyEffectArea(struct TArray<struct FPerceivableEffectArea>& ActiveEffectAreas, struct AActor* InTestActor); // Function Solarland.SolarPerceptionComponent.IsInAnyEffectArea // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2156ca0
	float GetTargetCurrentThreatValue(struct ASolarCharacter* ThreatTarget); // Function Solarland.SolarPerceptionComponent.GetTargetCurrentThreatValue // (Final|Native|Public|BlueprintCallable) // @ game+0x21569a0
	void ClearCurrentThreat(bool bCleanBestTarget); // Function Solarland.SolarPerceptionComponent.ClearCurrentThreat // (Final|Native|Public|BlueprintCallable) // @ game+0x21562f0
};

// Class Solarland.SolarPickupComponent
// Size: 0xa50 (Inherited: 0x560)
struct USolarPickupComponent : UCapsuleComponent {
	struct ASolarCharacter* OwnerChar; // 0x560(0x08)
	char pad_568[0x8]; // 0x568(0x08)
	float PickUpHighlyThresholdFactor; // 0x570(0x04)
	char pad_574[0x1]; // 0x574(0x01)
	bool bWantedClearItemData; // 0x575(0x01)
	char pad_576[0x2]; // 0x576(0x02)
	struct TMap<enum class EPickupItemType, struct USolarPickupHandlerBase*> PickupHandlerMap; // 0x578(0x50)
	struct USolarPickupHandlerBase* NormalPickupHandler; // 0x5c8(0x08)
	bool GlobalPickup; // 0x5d0(0x01)
	char pad_5D1[0x3]; // 0x5d1(0x03)
	struct TWeakObjectPtr<struct AAirDropTreasureBox> TagetAirDropBox; // 0x5d4(0x08)
	char pad_5DC[0xc]; // 0x5dc(0x0c)
	struct FActorArrayMap NormalPickupItems; // 0x5e8(0x50)
	struct TArray<struct AActor*> ProccessedList; // 0x638(0x10)
	struct TArray<struct AActor*> SortedPickupActors; // 0x648(0x10)
	bool bPickupListVisible; // 0x658(0x01)
	bool bPickupListCollapsed; // 0x659(0x01)
	char pad_65A[0x6]; // 0x65a(0x06)
	struct UUIManager* UIManager; // 0x660(0x08)
	struct USolarItemManager* ItemManager; // 0x668(0x08)
	char pad_670[0x52]; // 0x670(0x52)
	bool GlobalAutoPickup; // 0x6c2(0x01)
	char pad_6C3[0x1]; // 0x6c3(0x01)
	float UnAutoPickupItemTime; // 0x6c4(0x04)
	float AutoPickupTime; // 0x6c8(0x04)
	char pad_6CC[0x4]; // 0x6cc(0x04)
	bool StopAutoPickupWhenClose; // 0x6d0(0x01)
	bool bReqPickItem; // 0x6d1(0x01)
	char pad_6D2[0x1a]; // 0x6d2(0x1a)
	bool bPickupCheckBoxOpen; // 0x6ec(0x01)
	char pad_6ED[0x3]; // 0x6ed(0x03)
	struct FTimerHandle AutoPickupTimer; // 0x6f0(0x08)
	char pad_6F8[0x30]; // 0x6f8(0x30)
	struct FMulticastInlineDelegate OnItemDataSet; // 0x728(0x10)
	struct FMulticastInlineDelegate UpdateCheckBoxesVisibility; // 0x738(0x10)
	struct FMulticastInlineDelegate OnUpdateCheckBoxesHighLight; // 0x748(0x10)
	struct FMulticastInlineDelegate OnUpdateCheckBoxesStates; // 0x758(0x10)
	struct FMulticastInlineDelegate OnPickupListClear; // 0x768(0x10)
	struct FMulticastInlineDelegate OnTogglePickupList; // 0x778(0x10)
	bool ListenFireReslutFlag; // 0x788(0x01)
	char pad_789[0x3]; // 0x789(0x03)
	float DelayedDisplayTime; // 0x78c(0x04)
	struct FTimerHandle AutoShowPickupListHandle; // 0x790(0x08)
	struct FTimerHandle DelayProcessFireResultHandle; // 0x798(0x08)
	struct FTimerHandle EnsuredAutoShowHandle; // 0x7a0(0x08)
	struct TArray<struct FString> FireResultMsgs; // 0x7a8(0x10)
	char pad_7B8[0x10]; // 0x7b8(0x10)
	struct TArray<struct TWeakObjectPtr<struct ADeathTreasureBox>> NearByDeathboxes; // 0x7c8(0x10)
	struct TWeakObjectPtr<struct ADeathTreasureBox> NearestResurrectBox; // 0x7d8(0x08)
	bool LastResurrecteBtnVisbile; // 0x7e0(0x01)
	char pad_7E1[0x3]; // 0x7e1(0x03)
	float CheckResurrectInterval; // 0x7e4(0x04)
	float TempResurrectInterval; // 0x7e8(0x04)
	float CheckStopResurrectInterval; // 0x7ec(0x04)
	float TempStopResurrectInterval; // 0x7f0(0x04)
	char pad_7F4[0x4]; // 0x7f4(0x04)
	int32_t PickupRecommendPriority; // 0x7f8(0x04)
	char pad_7FC[0x4]; // 0x7fc(0x04)
	struct TMap<enum class EItemType, int32_t> ItemPriorityMap; // 0x800(0x50)
	struct TMap<enum class EItemType, int32_t> ItemMutiPickupMap; // 0x850(0x50)
	struct TMap<enum class EWeaponPartType, int32_t> WeaponPartPriorityMap; // 0x8a0(0x50)
	struct TMap<int32_t, int32_t> WeaponPartIDPriorityMap; // 0x8f0(0x50)
	struct TWeakObjectPtr<struct AActor> PendingFirstItemActor; // 0x940(0x08)
	char pad_948[0x108]; // 0x948(0x108)

	void UpdateResurrection(float InDeltaTime); // Function Solarland.SolarPickupComponent.UpdateResurrection // (Final|Native|Protected) // @ game+0x2159370
	void UpdateItemUI(bool bForce); // Function Solarland.SolarPickupComponent.UpdateItemUI // (Final|Native|Public) // @ game+0x21592e0
	void UpdateCheckboxSwitches(bool InPickupOpen); // Function Solarland.SolarPickupComponent.UpdateCheckboxSwitches // (Final|Native|Public) // @ game+0x2159250
	void TryReqPickupItem(struct ASolarItemActor* ItemActor, bool IsAutoPickup, int32_t TargetIndex); // Function Solarland.SolarPickupComponent.TryReqPickupItem // (Final|Native|Public) // @ game+0x2159140
	void TryPickupTreasureItem(struct ASolarTreasureBoxActor* PickActor, struct FSolarItemData& ItemData); // Function Solarland.SolarPickupComponent.TryPickupTreasureItem // (Final|Native|Public|HasOutParms) // @ game+0x2159000
	void TryPickupItem(struct AActor* PickActor); // Function Solarland.SolarPickupComponent.TryPickupItem // (Final|Native|Public) // @ game+0x2158f70
	bool TryOpenAirDropTreasureBox(struct AAirDropTreasureBox* AirDropTreasureBox); // Function Solarland.SolarPickupComponent.TryOpenAirDropTreasureBox // (Final|Native|Public) // @ game+0x2158ed0
	void TryClearDirtyData(bool bForce); // Function Solarland.SolarPickupComponent.TryClearDirtyData // (Final|Native|Public) // @ game+0x2158e40
	bool TryCancelOpenAirDropTreasureBox(struct AAirDropTreasureBox* AirDropTreasureBox); // Function Solarland.SolarPickupComponent.TryCancelOpenAirDropTreasureBox // (Final|Native|Public) // @ game+0x2158da0
	void TogglePickupList(bool InVisibility); // Function Solarland.SolarPickupComponent.TogglePickupList // (Final|Native|Public) // @ game+0x2158d10
	void StopListenFireInput(bool bIsInstantlyStop); // Function Solarland.SolarPickupComponent.StopListenFireInput // (Final|Native|Public) // @ game+0x2158c80
	void StopAutoPickupTimer(); // Function Solarland.SolarPickupComponent.StopAutoPickupTimer // (Final|Native|Public) // @ game+0x2158c60
	void StartListenFireInput(); // Function Solarland.SolarPickupComponent.StartListenFireInput // (Final|Native|Public) // @ game+0x2158c40
	void StartAutoPickupTimer(); // Function Solarland.SolarPickupComponent.StartAutoPickupTimer // (Final|Native|Public) // @ game+0x2158c20
	bool ShouldPickupTreasureBoxItem(struct ASolarTreasureBoxActor* InTreasureBox); // Function Solarland.SolarPickupComponent.ShouldPickupTreasureBoxItem // (Final|Native|Public) // @ game+0x2158b80
	void SetStopAutoPickupWhenClose(bool InStopAutoPickupWhenClose); // Function Solarland.SolarPickupComponent.SetStopAutoPickupWhenClose // (Final|Native|Public) // @ game+0x2158a60
	void SetPickupSwitchInLua(bool IsOpen); // Function Solarland.SolarPickupComponent.SetPickupSwitchInLua // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetPickupSwitch(bool IsOpen); // Function Solarland.SolarPickupComponent.SetPickupSwitch // (Final|Native|Public) // @ game+0x21589d0
	void SetPickupListVisibility(bool InVisibility); // Function Solarland.SolarPickupComponent.SetPickupListVisibility // (Final|Native|Public) // @ game+0x2158940
	void SetPickupCapsuleSize(struct FVector& Size); // Function Solarland.SolarPickupComponent.SetPickupCapsuleSize // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x21588b0
	void SetAutoPickupSwitch(bool InCanAutoPickup); // Function Solarland.SolarPickupComponent.SetAutoPickupSwitch // (Final|Native|Public) // @ game+0x2158720
	void RestartPickupTimer(); // Function Solarland.SolarPickupComponent.RestartPickupTimer // (Final|Native|Public) // @ game+0x2158700
	void ReqPickupWeapon(struct AActor* WeaponData, bool IsAutoPickup); // Function Solarland.SolarPickupComponent.ReqPickupWeapon // (Final|Native|Public) // @ game+0x2158630
	void ReqPickupTreasureItem(struct ASolarTreasureBoxActor* TreasureBox, int64_t ItemThisID, bool IsAutoPickup, int32_t TargetIndex, enum class EItemType InItemType, bool bSorted); // Function Solarland.SolarPickupComponent.ReqPickupTreasureItem // (Final|Native|Public) // @ game+0x2158450
	void ReqPickupItem(struct ASolarItemActor* ItemActor, bool IsAutoPickup, int32_t TargetIndex); // Function Solarland.SolarPickupComponent.ReqPickupItem // (Final|Native|Public) // @ game+0x2158340
	void ReqOpenTreasureBox(struct ASolarTreasureBoxActor* TreasureBox); // Function Solarland.SolarPickupComponent.ReqOpenTreasureBox // (Final|Native|Public) // @ game+0x21582b0
	void RemoveNearbyDeathbox(struct ADeathTreasureBox* InDeathBox); // Function Solarland.SolarPickupComponent.RemoveNearbyDeathbox // (Final|Native|Public) // @ game+0x2158220
	void RefreshResurrectBtn(); // Function Solarland.SolarPickupComponent.RefreshResurrectBtn // (Final|Native|Public) // @ game+0x21581e0
	void RefreshPickupTimer(); // Function Solarland.SolarPickupComponent.RefreshPickupTimer // (Final|Native|Public) // @ game+0x21581c0
	void RefreshItemUI(); // Function Solarland.SolarPickupComponent.RefreshItemUI // (Final|Native|Public) // @ game+0x21581a0
	void RecheckPendingActors(); // Function Solarland.SolarPickupComponent.RecheckPendingActors // (Final|Native|Protected) // @ game+0x2158180
	void ReceiveFireResult(struct FString InFireResultMsg); // Function Solarland.SolarPickupComponent.ReceiveFireResult // (Final|Native|Public) // @ game+0x21580e0
	void ProcessFireResultMsgs(); // Function Solarland.SolarPickupComponent.ProcessFireResultMsgs // (Final|Native|Public) // @ game+0x2157e80
	void OnWeaponUpgrade(struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarPickupComponent.OnWeaponUpgrade // (Final|Native|Protected) // @ game+0x2157d50
	void OnWeaponSlotEquip(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarPickupComponent.OnWeaponSlotEquip // (Final|Native|Protected) // @ game+0x2157c80
	void OnUsingSkillStatusChanged(); // Function Solarland.SolarPickupComponent.OnUsingSkillStatusChanged // (Final|Native|Public) // @ game+0x2157c60
	void OnUpdateItemUIDataChanged(struct UObject* Object, int32_t OldItemID, int32_t NewItemID); // Function Solarland.SolarPickupComponent.OnUpdateItemUIDataChanged // (Final|Native|Protected) // @ game+0x2157b50
	void OnTreasureBoxStateChange(int64_t ThisID, enum class ETreasureBoxState State); // Function Solarland.SolarPickupComponent.OnTreasureBoxStateChange // (Final|Native|Public) // @ game+0x2157a80
	void OnPickupSettingChanged(); // Function Solarland.SolarPickupComponent.OnPickupSettingChanged // (Final|Native|Public) // @ game+0x2157530
	void OnPickupConfirmHandle(); // Function Solarland.SolarPickupComponent.OnPickupConfirmHandle // (Final|Native|Public) // @ game+0x2157510
	void OnPickupActorEnd(struct AActor* ItemActor); // Function Solarland.SolarPickupComponent.OnPickupActorEnd // (Final|Native|Protected) // @ game+0x2157480
	void OnPickupActorBegin(struct AActor* ItemActor); // Function Solarland.SolarPickupComponent.OnPickupActorBegin // (Final|Native|Protected) // @ game+0x21573f0
	void OnEquipChanged(); // Function Solarland.SolarPickupComponent.OnEquipChanged // (Final|Native|Protected) // @ game+0x21573d0
	void OnCharacterDeathBegin(); // Function Solarland.SolarPickupComponent.OnCharacterDeathBegin // (Final|Native|Public) // @ game+0x2157390
	void OnActorDestroyed(struct AActor* Actor); // Function Solarland.SolarPickupComponent.OnActorDestroyed // (Final|Native|Protected) // @ game+0x2157110
	void MarkDirtyForTick(); // Function Solarland.SolarPickupComponent.MarkDirtyForTick // (Final|Native|Public|BlueprintCallable) // @ game+0x21570f0
	bool IsValidItemActor(struct AActor* ItemActor); // Function Solarland.SolarPickupComponent.IsValidItemActor // (Final|Native|Public) // @ game+0x2156fc0
	bool IsNeedReplace(enum class EItemType InType, struct FSolarItemData& InItemData); // Function Solarland.SolarPickupComponent.IsNeedReplace // (Final|Native|Public|HasOutParms) // @ game+0x2156e70
	bool IsEquipItem(enum class EItemType InType); // Function Solarland.SolarPickupComponent.IsEquipItem // (Final|Native|Public) // @ game+0x2156c00
	bool IsCharacterInAir(); // Function Solarland.SolarPickupComponent.IsCharacterInAir // (Final|Native|Public) // @ game+0x2156bd0
	void InitPickupPriorityMaps(); // Function Solarland.SolarPickupComponent.InitPickupPriorityMaps // (Final|Native|Protected) // @ game+0x2156bb0
	struct FSolarItemData GetTreasureItemDataByThisID(struct ASolarTreasureBoxActor* TreasureBox, int64_t ItemThisID); // Function Solarland.SolarPickupComponent.GetTreasureItemDataByThisID // (Final|Native|Public) // @ game+0x2156a40
	int32_t GetPickupWeaponPartTypePriority(struct FSolarItemData& InItemData); // Function Solarland.SolarPickupComponent.GetPickupWeaponPartTypePriority // (Final|Native|Protected|HasOutParms|Const) // @ game+0x21568a0
	int32_t GetPickupTypePriority(enum class EItemType InItemType); // Function Solarland.SolarPickupComponent.GetPickupTypePriority // (Final|Native|Protected|Const) // @ game+0x2156800
	struct AActor* GetPickupTreasureBoxActor(); // Function Solarland.SolarPickupComponent.GetPickupTreasureBoxActor // (Final|Native|Public) // @ game+0x21567d0
	int32_t GetPickupPriority(struct FSolarItemData& InItemType); // Function Solarland.SolarPickupComponent.GetPickupPriority // (Final|Native|Protected|HasOutParms|Const) // @ game+0x21566d0
	struct ADeathTreasureBox* GetNearestResurrectBox(); // Function Solarland.SolarPickupComponent.GetNearestResurrectBox // (Final|Native|Public|Const) // @ game+0x21566a0
	struct TMap<int32_t, struct FActorArray> GetItemDataMap(); // Function Solarland.SolarPickupComponent.GetItemDataMap // (Final|Native|Protected) // @ game+0x21565b0
	int32_t GetItemDataCount(enum class EPickupItemType PickupItemType); // Function Solarland.SolarPickupComponent.GetItemDataCount // (Final|Native|Protected) // @ game+0x2156520
	bool GetIsGlobalPickup(); // Function Solarland.SolarPickupComponent.GetIsGlobalPickup // (Final|Native|Public) // @ game+0x21564f0
	bool GetIsAutoPickupHomeItems(); // Function Solarland.SolarPickupComponent.GetIsAutoPickupHomeItems // (Final|Native|Public) // @ game+0x20a96a0
	void DoStopOpeningAirDropBox(); // Function Solarland.SolarPickupComponent.DoStopOpeningAirDropBox // (Final|Native|Public) // @ game+0x21563e0
	void DoOpenAirDropBox(); // Function Solarland.SolarPickupComponent.DoOpenAirDropBox // (Final|Native|Public) // @ game+0x21563c0
	void DetectNearestResurrectTarget(); // Function Solarland.SolarPickupComponent.DetectNearestResurrectTarget // (Final|Native|Public) // @ game+0x21563a0
	void CloseItemUI(); // Function Solarland.SolarPickupComponent.CloseItemUI // (Final|Native|Public) // @ game+0x2156380
	void ClearAutoShowPickupListHandle(); // Function Solarland.SolarPickupComponent.ClearAutoShowPickupListHandle // (Final|Native|Public) // @ game+0x21562d0
	void ClearAllTimer(); // Function Solarland.SolarPickupComponent.ClearAllTimer // (Final|Native|Public) // @ game+0x21562b0
	void CheckToShowConfirm(struct FSolarItemData& ItemData); // Function Solarland.SolarPickupComponent.CheckToShowConfirm // (Final|Native|Public|HasOutParms) // @ game+0x21561c0
	bool CheckIsItemMaximizing(int32_t ItemID); // Function Solarland.SolarPickupComponent.CheckIsItemMaximizing // (Final|Native|Public) // @ game+0x2156120
	bool CanResurrectOwner(struct ADeathTreasureBox* InDeathBox, float& OutDistance); // Function Solarland.SolarPickupComponent.CanResurrectOwner // (Final|Native|Public|HasOutParms) // @ game+0x2156040
	bool CanMutiAutoPickup(enum class EItemType InItemType); // Function Solarland.SolarPickupComponent.CanMutiAutoPickup // (Final|Native|Protected|Const) // @ game+0x2155fa0
	void CallHUDSetTreasureBoxActor(struct AActor* InActor); // Function Solarland.SolarPickupComponent.CallHUDSetTreasureBoxActor // (Final|Native|Public) // @ game+0x2155f10
	void CallHUDSetAirdropBoxActor(struct AActor* InActor); // Function Solarland.SolarPickupComponent.CallHUDSetAirdropBoxActor // (Final|Native|Public) // @ game+0x2155e80
	void CallHUDSetActiveResurrectBtn(bool Inactive); // Function Solarland.SolarPickupComponent.CallHUDSetActiveResurrectBtn // (Final|Native|Public) // @ game+0x2155df0
	void CallHUDSetActiveOpenBoxProgress(bool Inactive); // Function Solarland.SolarPickupComponent.CallHUDSetActiveOpenBoxProgress // (Final|Native|Public) // @ game+0x2155d60
	void CallHUDSetActiveOpenBoxBtn(bool Inactive); // Function Solarland.SolarPickupComponent.CallHUDSetActiveOpenBoxBtn // (Final|Native|Public) // @ game+0x2155cd0
	void CallHUDHideOpenBoxUIByThisID(int64_t InThisID); // Function Solarland.SolarPickupComponent.CallHUDHideOpenBoxUIByThisID // (Final|Native|Public) // @ game+0x2155c40
	void CallHUDHideAirdropBoxUIByThisID(int64_t InThisID); // Function Solarland.SolarPickupComponent.CallHUDHideAirdropBoxUIByThisID // (Final|Native|Public) // @ game+0x2155bb0
	void AddNearbyDeathbox(struct ADeathTreasureBox* InDeathBox); // Function Solarland.SolarPickupComponent.AddNearbyDeathbox // (Final|Native|Public) // @ game+0x2155b20
};

// Class Solarland.SolarPickupHandlerBase
// Size: 0x48 (Inherited: 0x28)
struct USolarPickupHandlerBase : UObject {
	enum class EPickupItemType Type; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct USolarPickupComponent* OwnerComponent; // 0x30(0x08)
	struct USolarItemManager* ItemManager; // 0x38(0x08)
	char pad_40[0x8]; // 0x40(0x08)
};

// Class Solarland.SolarPickupHandlerNormal
// Size: 0x58 (Inherited: 0x48)
struct USolarPickupHandlerNormal : USolarPickupHandlerBase {
	char pad_48[0x10]; // 0x48(0x10)
};

// Class Solarland.SolarPingFpsManager
// Size: 0x40 (Inherited: 0x28)
struct USolarPingFpsManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	char GetPingDS; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float GetPingBackend; // 0x34(0x04)
	float FPS; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	char GetPingBattleServer(); // Function Solarland.SolarPingFpsManager.GetPingBattleServer // (Final|Native|Public|BlueprintCallable) // @ game+0x215c760
	float GetPacketsLossRate(); // Function Solarland.SolarPingFpsManager.GetPacketsLossRate // (Final|Native|Public|BlueprintCallable) // @ game+0x215c6b0
	float GetAverageFPS(); // Function Solarland.SolarPingFpsManager.GetAverageFPS // (Final|Native|Public|BlueprintCallable) // @ game+0x215bf90
};

// Class Solarland.SolarPingFpsWidget
// Size: 0x428 (Inherited: 0x348)
struct USolarPingFpsWidget : USolarUserWidget {
	struct UImage* Img_Ping; // 0x348(0x08)
	struct USolarTextBlock* Txt_Ping; // 0x350(0x08)
	struct USolarTextBlock* Txt_ms; // 0x358(0x08)
	struct USolarTextBlock* Txt_fps_2; // 0x360(0x08)
	char pad_368[0x10]; // 0x368(0x10)
	struct FLinearColor ImgLowDelayColor; // 0x378(0x10)
	struct FLinearColor ImgMediumDelayColor; // 0x388(0x10)
	struct FLinearColor ImgHighDelayColor; // 0x398(0x10)
	struct FSlateColor TxtLowDelayColor; // 0x3a8(0x28)
	struct FSlateColor TxtMediumDelayColor; // 0x3d0(0x28)
	struct FSlateColor TxtHighDelayColor; // 0x3f8(0x28)
	float RefreshFpsInterval; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)

	void UpdatePing(float InPing); // Function Solarland.SolarPingFpsWidget.UpdatePing // (Final|Native|Public) // @ game+0x215d380
	void CreateUpdateUIFpsTimer(); // Function Solarland.SolarPingFpsWidget.CreateUpdateUIFpsTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x215bdd0
	void ClearUpdateUIFpsTimer(); // Function Solarland.SolarPingFpsWidget.ClearUpdateUIFpsTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x215bd20
};

// Class Solarland.SolarPlatformHelper
// Size: 0xf0 (Inherited: 0x28)
struct USolarPlatformHelper : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USolarPlatformStats* SolarPlatformStats; // 0x30(0x08)
	struct USolarGameInstanceBase* SolarGameInstanceBase; // 0x38(0x08)
	char pad_40[0xb0]; // 0x40(0xb0)

	bool UseRenderThread(); // Function Solarland.SolarPlatformHelper.UseRenderThread // (Final|Native|Static|Public) // @ game+0x215d400
	bool SupportsMultithreading(); // Function Solarland.SolarPlatformHelper.SupportsMultithreading // (Final|Native|Static|Public) // @ game+0x215d2c0
	double Seconds(); // Function Solarland.SolarPlatformHelper.Seconds // (Final|Native|Static|Public) // @ game+0x215d290
	void ReceiveShutdown(); // Function Solarland.SolarPlatformHelper.ReceiveShutdown // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveInit(); // Function Solarland.SolarPlatformHelper.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	bool IsThisApplicationForeground(); // Function Solarland.SolarPlatformHelper.IsThisApplicationForeground // (Final|Native|Static|Public) // @ game+0x215cb90
	bool IsRunningOnBattery(); // Function Solarland.SolarPlatformHelper.IsRunningOnBattery // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x215cb60
	bool Is64bitOperatingSystem(); // Function Solarland.SolarPlatformHelper.Is64bitOperatingSystem // (Final|Native|Static|Public) // @ game+0x215ca60
	int64_t GetVideoMemory(); // Function Solarland.SolarPlatformHelper.GetVideoMemory // (Final|Native|Static|Public) // @ game+0x215ca30
	struct FString GetUniqueDeviceId(); // Function Solarland.SolarPlatformHelper.GetUniqueDeviceId // (Final|Native|Public|Const) // @ game+0x215c9f0
	struct FString GetTimeZoneId(); // Function Solarland.SolarPlatformHelper.GetTimeZoneId // (Final|Native|Static|Public) // @ game+0x9ceb90
	struct FString GetSuitableStringWithUnitOfBytes(uint64_t NumberOfBytes, struct FString ExtraUnit); // Function Solarland.SolarPlatformHelper.GetSuitableStringWithUnitOfBytes // (Final|Native|Static|Public) // @ game+0x215c8d0
	struct USolarPlatformStats* GetSolarPlatformStats(); // Function Solarland.SolarPlatformHelper.GetSolarPlatformStats // (Final|Native|Public|Const) // @ game+0x215c8a0
	int32_t GetSimultaneousInstanceId(); // Function Solarland.SolarPlatformHelper.GetSimultaneousInstanceId // (Final|Native|Public|Const) // @ game+0x215c870
	struct FString GetPrimaryGPUBrand(); // Function Solarland.SolarPlatformHelper.GetPrimaryGPUBrand // (Final|Native|Static|Public) // @ game+0x215c790
	struct FString GetPathVarDelimiter(); // Function Solarland.SolarPlatformHelper.GetPathVarDelimiter // (Final|Native|Static|Public) // @ game+0x215c6e0
	void GetOSVersions(struct FString& out_OSVersionLabel, struct FString& out_OSSubVersionLabel); // Function Solarland.SolarPlatformHelper.GetOSVersions // (Final|Native|Static|Public|HasOutParms) // @ game+0x215c5a0
	struct FString GetOSVersion(); // Function Solarland.SolarPlatformHelper.GetOSVersion // (Final|Native|Static|Public) // @ game+0x9ce800
	uint32_t GetMoniterWidth(); // Function Solarland.SolarPlatformHelper.GetMoniterWidth // (Final|Native|Static|Public) // @ game+0x215c540
	int32_t GetMoniterRefreshRate(); // Function Solarland.SolarPlatformHelper.GetMoniterRefreshRate // (Final|Native|Static|Public) // @ game+0x215c510
	uint32_t GetMoniterHeight(); // Function Solarland.SolarPlatformHelper.GetMoniterHeight // (Final|Native|Static|Public) // @ game+0x215c4e0
	int32_t GetMaxPathLength(); // Function Solarland.SolarPlatformHelper.GetMaxPathLength // (Final|Native|Static|Public) // @ game+0x215c4b0
	struct UGameUserSettings* GetGameUserSettings(); // Function Solarland.SolarPlatformHelper.GetGameUserSettings // (Final|Native|Public) // @ game+0x215c480
	struct FString GetEnvironmentVariable(struct FString VariableName); // Function Solarland.SolarPlatformHelper.GetEnvironmentVariable // (Final|Native|Static|Public) // @ game+0x215c370
	struct UEngine* GetEngine(); // Function Solarland.SolarPlatformHelper.GetEngine // (Final|Native|Public) // @ game+0x215c340
	bool GetDiskTotalAndFreeSpace(struct FString InPath, uint64_t& TotalNumberOfBytes, uint64_t& NumberOfFreeBytes); // Function Solarland.SolarPlatformHelper.GetDiskTotalAndFreeSpace // (Final|Native|Static|Public|HasOutParms) // @ game+0x215c200
	float GetDeviceTemperatureLevel(); // Function Solarland.SolarPlatformHelper.GetDeviceTemperatureLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x215c1d0
	struct FString GetDeviceMakeAndModel(); // Function Solarland.SolarPlatformHelper.GetDeviceMakeAndModel // (Final|Native|Static|Public) // @ game+0x9ce420
	struct FString GetDefaultDeviceProfileName(); // Function Solarland.SolarPlatformHelper.GetDefaultDeviceProfileName // (Final|Native|Static|Public) // @ game+0x215c150
	struct FString GetCPUVendor(); // Function Solarland.SolarPlatformHelper.GetCPUVendor // (Final|Native|Static|Public) // @ game+0x215c020
	uint32_t GetCPUInfo(); // Function Solarland.SolarPlatformHelper.GetCPUInfo // (Final|Native|Static|Public) // @ game+0x215bff0
	struct FString GetCPUChipset(); // Function Solarland.SolarPlatformHelper.GetCPUChipset // (Final|Native|Static|Public) // @ game+0x9ce160
	struct FString GetCPUBrand(); // Function Solarland.SolarPlatformHelper.GetCPUBrand // (Final|Native|Static|Public) // @ game+0x9ce320
	int32_t GetBatteryLevel(); // Function Solarland.SolarPlatformHelper.GetBatteryLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x215bfc0
	struct FString ClipboardPaste(); // Function Solarland.SolarPlatformHelper.ClipboardPaste // (Final|Native|Static|Public) // @ game+0x2145990
	void ClipboardCopy(struct FString str); // Function Solarland.SolarPlatformHelper.ClipboardCopy // (Final|Native|Static|Public) // @ game+0x2144360
};

// Class Solarland.SolarPlatformStats
// Size: 0x60 (Inherited: 0x28)
struct USolarPlatformStats : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	uint64_t MaxUsedPhysical; // 0x30(0x08)
	char pad_38[0x28]; // 0x38(0x28)

	void ReceiveWorldCleanup(struct UWorld* World, bool bSessionEnded, bool bCleanupResources); // Function Solarland.SolarPlatformStats.ReceiveWorldCleanup // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveShutdown(); // Function Solarland.SolarPlatformStats.ReceiveShutdown // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceivePostWorldInitialization(struct UWorld* World); // Function Solarland.SolarPlatformStats.ReceivePostWorldInitialization // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveInit(); // Function Solarland.SolarPlatformStats.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	uint64_t GetRHIUsedMemory(); // Function Solarland.SolarPlatformStats.GetRHIUsedMemory // (Final|Native|Public) // @ game+0x215c810
	float GetRenderThreadTime(); // Function Solarland.SolarPlatformStats.GetRenderThreadTime // (Final|Native|Public) // @ game+0x215c840
	int32_t GetNumDrawCalls(); // Function Solarland.SolarPlatformStats.GetNumDrawCalls // (Final|Native|Public) // @ game+0x215c570
	int32_t GetMinFPS(); // Function Solarland.SolarPlatformStats.GetMinFPS // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	float GetGameThreadTime(); // Function Solarland.SolarPlatformStats.GetGameThreadTime // (Final|Native|Public) // @ game+0x215c450
	int32_t GetAverageFPS(); // Function Solarland.SolarPlatformStats.GetAverageFPS // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarPlayerCameraManager
// Size: 0x2ff0 (Inherited: 0x2fc0)
struct ASolarPlayerCameraManager : APlayerCameraManager {
	struct TWeakObjectPtr<struct AActor> OldViewTarget; // 0x2fc0(0x08)
	struct UCameraModifier_CameraShakeWithCurve* CachedCameraShakeModWithCurve; // 0x2fc8(0x08)
	char pad_2FD0[0x20]; // 0x2fd0(0x20)

	void OnPlayerGetOnViewTargetVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarPlayerCameraManager.OnPlayerGetOnViewTargetVehicle // (Final|Native|Protected) // @ game+0x216ade0
	struct FMinimalViewInfo GetDebugPOV(); // Function Solarland.SolarPlayerCameraManager.GetDebugPOV // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21687e0
};

// Class Solarland.SinglePlayerHPModel
// Size: 0x58 (Inherited: 0x30)
struct USinglePlayerHPModel : USingleCharacterModelBase {
	char pad_30[0x28]; // 0x30(0x28)

	void OnRescueStateChanged(enum class ERescueState InRescueState); // Function Solarland.SinglePlayerHPModel.OnRescueStateChanged // (Final|Native|Private) // @ game+0x217df00
	void OnHPValueChanged(struct ASolarCharacter* Character); // Function Solarland.SinglePlayerHPModel.OnHPValueChanged // (Final|Native|Private) // @ game+0x217d3e0
};

// Class Solarland.SolarPlayersHPModel
// Size: 0x78 (Inherited: 0x78)
struct USolarPlayersHPModel : USolarCharactersModelBase {
};

// Class Solarland.SolarPlayerInput
// Size: 0x660 (Inherited: 0x600)
struct USolarPlayerInput : UEnhancedPlayerInput {
	char pad_600[0x60]; // 0x600(0x60)
};

// Class Solarland.SolarWeapon
// Size: 0xa90 (Inherited: 0x228)
struct ASolarWeapon : AActor {
	char pad_228[0x150]; // 0x228(0x150)
	struct FMulticastInlineDelegate OnWeaponUnhold; // 0x378(0x10)
	struct FWeaponMechanicalState WeaponState; // 0x388(0x50)
	char pad_3D8[0x1]; // 0x3d8(0x01)
	enum class EShootingOpt PrimaryShootingOption; // 0x3d9(0x01)
	char pad_3DA[0x2]; // 0x3da(0x02)
	struct FImpactDisplayInfo ImpactInfo; // 0x3dc(0x10)
	char pad_3EC[0xc]; // 0x3ec(0x0c)
	enum class ESCMDamageType DefaultDamageType; // 0x3f8(0x01)
	char pad_3F9[0x7]; // 0x3f9(0x07)
	struct USolarVirtualBulletCollector* VirtualBulletCollector; // 0x400(0x08)
	struct UWeaponFireLaserCollector* LaserCollector; // 0x408(0x08)
	char pad_410[0x4]; // 0x410(0x04)
	int32_t ExtraPoints; // 0x414(0x04)
	int32_t ExtraPointsForInit; // 0x418(0x04)
	bool bUseSkillStateMachine; // 0x41c(0x01)
	char pad_41D[0x3]; // 0x41d(0x03)
	int32_t ExtraPointsLimit; // 0x420(0x04)
	int32_t SecModeLimitTypeID; // 0x424(0x04)
	float RestoreProgressPerSec; // 0x428(0x04)
	char pad_42C[0xc]; // 0x42c(0x0c)
	float RestoreProgressPerKill; // 0x438(0x04)
	float RestoreProgressPerDmg; // 0x43c(0x04)
	float RestoreProgressAccumulation; // 0x440(0x04)
	float RestoreProgressAccumulationForInit; // 0x444(0x04)
	char pad_448[0x9]; // 0x448(0x09)
	char FireModeIndex; // 0x451(0x01)
	char pad_452[0x12]; // 0x452(0x12)
	enum class EWeaponOverloadState OverloadState; // 0x464(0x01)
	char pad_465[0x3]; // 0x465(0x03)
	float OverloadAccum; // 0x468(0x04)
	char pad_46C[0xc]; // 0x46c(0x0c)
	struct UCurveFloat* OverloadCurve; // 0x478(0x08)
	char pad_480[0x4]; // 0x480(0x04)
	float GatlingRollSpeed; // 0x484(0x04)
	float GatlingHoldTime; // 0x488(0x04)
	float GatlingRollSpeedInterp; // 0x48c(0x04)
	int32_t GatlingRepState; // 0x490(0x04)
	char pad_494[0x24]; // 0x494(0x24)
	float FireChargingTime; // 0x4b8(0x04)
	int32_t FireChargingPhase; // 0x4bc(0x04)
	float FireChargingSumTime; // 0x4c0(0x04)
	char pad_4C4[0x8]; // 0x4c4(0x08)
	float ChargeAnimationRate; // 0x4cc(0x04)
	struct UGameplayEffect* ChargingEffect; // 0x4d0(0x08)
	char pad_4D8[0x8]; // 0x4d8(0x08)
	struct TWeakObjectPtr<struct UAbilitySystemComponent> OwnerGAS; // 0x4e0(0x08)
	char pad_4E8[0x8]; // 0x4e8(0x08)
	struct UCurveFloat* NormalOverloadCoolingCurve; // 0x4f0(0x08)
	int32_t CurrentMode; // 0x4f8(0x04)
	char pad_4FC[0xc]; // 0x4fc(0x0c)
	struct TArray<struct FFireMode> FireModes; // 0x508(0x10)
	struct AActor* WeaponHolder; // 0x518(0x08)
	struct ASolarCharacterBase* ControlWeaponCharacter; // 0x520(0x08)
	struct TArray<struct FGameplayAbilitySpecHandle> EquippedAbilityHandles; // 0x528(0x10)
	bool bControlWeaponCharacterChanged; // 0x538(0x01)
	char pad_539[0x7]; // 0x539(0x07)
	struct AActor* AimTarget; // 0x540(0x08)
	struct ASolarWeaponProjectileSpline* ProjSplineClass; // 0x548(0x08)
	struct ASolarWeaponProjectileSpline* ProjSpline; // 0x550(0x08)
	struct TArray<enum class EShootingOpt> ShootingOptArray; // 0x558(0x10)
	bool bShowSpecialEffect; // 0x568(0x01)
	char pad_569[0x7]; // 0x569(0x07)
	struct USingleWeaponConfig* Config; // 0x570(0x08)
	struct UTexture2D* WeaponIcon; // 0x578(0x08)
	struct USlateWidgetStyleAsset* PrimaryFireBtnStyle; // 0x580(0x08)
	struct USlateWidgetStyleAsset* SecondaryFireBtnStyle; // 0x588(0x08)
	struct UGlobalWeaponConfig* WeaponsConfig; // 0x590(0x08)
	struct UWeaponRecoilComponent* RecoilComponent; // 0x598(0x08)
	int32_t weaponid; // 0x5a0(0x04)
	char pad_5A4[0x4]; // 0x5a4(0x04)
	struct UWeaponSpreadAndRecoil* SpreadAndRecoil; // 0x5a8(0x08)
	char pad_5B0[0xc]; // 0x5b0(0x0c)
	bool bTeamDamageEnable; // 0x5bc(0x01)
	bool bInfiniteAmmo; // 0x5bd(0x01)
	bool bInfinitePackageAmmo; // 0x5be(0x01)
	char pad_5BF[0x1]; // 0x5bf(0x01)
	int32_t ExtraAmmo; // 0x5c0(0x04)
	char pad_5C4[0x4]; // 0x5c4(0x04)
	struct TMap<struct TWeakObjectPtr<struct UParticleSystem>, struct UParticleLoopListener*> LoopParticlesMap; // 0x5c8(0x50)
	int32_t CurrentClipAmmo; // 0x618(0x04)
	char pad_61C[0x10c]; // 0x61c(0x10c)
	struct TMap<enum class ECharacterMontage, struct FWeaponAnimationInfo> WeaponAnimationMap; // 0x728(0x50)
	bool bResetMuzzleIndexWhenStopFire; // 0x778(0x01)
	char pad_779[0xf]; // 0x779(0x0f)
	struct TArray<struct FCameraShakeData> WeaponFireCameraShakes; // 0x788(0x10)
	struct TArray<struct FCameraShakeData> WeaponScopeFireCameraShakes; // 0x798(0x10)
	struct TArray<struct FCameraShakeData> UsingSkillCameraShakes; // 0x7a8(0x10)
	struct TArray<struct FCameraShakeData> WeaponChargingCameraShakes; // 0x7b8(0x10)
	bool bUseEmptyActor; // 0x7c8(0x01)
	char pad_7C9[0x7]; // 0x7c9(0x07)
	struct FSoftObjectPath FightMeshPath; // 0x7d0(0x18)
	struct USkeletalMeshComponent* Mesh; // 0x7e8(0x08)
	struct USkeletalMesh* OriginalMesh; // 0x7f0(0x08)
	struct UWeaponAnimInstance* OriginalAnimBP; // 0x7f8(0x08)
	struct UAkComponent* AkAudioComponent; // 0x800(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x808(0x08)
	int32_t SoundFireAutoCount; // 0x810(0x04)
	bool bTriggerSoundFireAuto; // 0x814(0x01)
	char pad_815[0x3]; // 0x815(0x03)
	int32_t OldSoundFireAutoCount; // 0x818(0x04)
	bool bTriggerSoundB9A04Skill; // 0x81c(0x01)
	bool bTriggerSoundFireBurst; // 0x81d(0x01)
	char pad_81E[0x2]; // 0x81e(0x02)
	int32_t SkillFireCount; // 0x820(0x04)
	int32_t SingleFireCount; // 0x824(0x04)
	int32_t FireOverloadCount; // 0x828(0x04)
	int32_t FireLastCount; // 0x82c(0x04)
	char pad_830[0x60]; // 0x830(0x60)
	struct FOverrideBulletStruct OverrideBullet; // 0x890(0x18)
	bool bLoadInitAssets; // 0x8a8(0x01)
	bool bLoadAllCfgAssets; // 0x8a9(0x01)
	char pad_8AA[0x6]; // 0x8aa(0x06)
	struct TMap<struct FFireUniqueID, float> FireHitVerifyMap; // 0x8b0(0x50)
	char pad_900[0x8]; // 0x900(0x08)
	bool bDetectedEnemy; // 0x908(0x01)
	char pad_909[0x7]; // 0x909(0x07)
	struct TArray<struct UParticleSystemComponent*> GatlingOverHeatPSCs; // 0x910(0x10)
	bool bTracingAimTarget; // 0x920(0x01)
	char pad_921[0xf]; // 0x921(0x0f)
	struct UMaterialInterface* SpecialFireChargeMaterial; // 0x930(0x08)
	struct TMap<int32_t, struct FColor> SpecialFireChargeColorMap; // 0x938(0x50)
	bool bPerspectiveForReplay; // 0x988(0x01)
	char pad_989[0x27]; // 0x989(0x27)
	enum class ESolarWeaponSpreadState CurrentSpreadState; // 0x9b0(0x01)
	char pad_9B1[0x3]; // 0x9b1(0x03)
	int32_t ContinuousAddSpreadByFireCount; // 0x9b4(0x04)
	bool bLastAddSpreadByFireIsHipFire; // 0x9b8(0x01)
	int8_t LastAddSpreadByFireFireMode; // 0x9b9(0x01)
	char pad_9BA[0x2]; // 0x9ba(0x02)
	float LastAddSpreadByFireTime; // 0x9bc(0x04)
	float SpreadPrepareTimer; // 0x9c0(0x04)
	float PendingBaseSpread; // 0x9c4(0x04)
	float TargetBaseSpread; // 0x9c8(0x04)
	float PendingAddSpread; // 0x9cc(0x04)
	float TargetAddSpread; // 0x9d0(0x04)
	char pad_9D4[0x2c]; // 0x9d4(0x2c)
	struct FHitResult AimHitResult; // 0xa00(0x88)
	char pad_A88[0x8]; // 0xa88(0x08)

	void WeaponStateOnRepReload(); // Function Solarland.SolarWeapon.WeaponStateOnRepReload // (Final|Native|Private) // @ game+0x2277560
	bool VerifyLastClipAmmo(int32_t InFireModeType, int32_t InLastClipAmmo); // Function Solarland.SolarWeapon.VerifyLastClipAmmo // (Final|Native|Protected) // @ game+0x2277490
	bool UseEnergy(int32_t Mode); // Function Solarland.SolarWeapon.UseEnergy // (Final|Native|Public|Const) // @ game+0x22773f0
	bool TryHitOperation(struct FFireUniqueID& FireUniqueID, int32_t FireMode, struct FVector& StartLocation, struct FVector& WeaponLocation, float ServerTime, float DamageScale, struct FBulletHitDetailData& HitDetailData, bool IsNotDelay); // Function Solarland.SolarWeapon.TryHitOperation // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2277150
	void StopSoundDelay(float DelayTime); // Function Solarland.SolarWeapon.StopSoundDelay // (Final|Native|Public) // @ game+0x22770d0
	void StopSound(enum class EShootingSoundOpt Opt, int32_t idx); // Function Solarland.SolarWeapon.StopSound // (Final|Native|Public) // @ game+0x2277000
	void StopLastValidFire(); // Function Solarland.SolarWeapon.StopLastValidFire // (Final|Native|Public) // @ game+0x2276fe0
	void StopGatlingSound(); // Function Solarland.SolarWeapon.StopGatlingSound // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void StartSound(enum class EShootingSoundOpt Opt, int32_t idx); // Function Solarland.SolarWeapon.StartSound // (Final|Native|Public) // @ game+0x2276f10
	void StartAsyncLoading(); // Function Solarland.SolarWeapon.StartAsyncLoading // (Final|Native|Public) // @ game+0x2276ef0
	struct ASolarProjBullet* SpawnProjWithFireID(struct FSpawnBulletParam& Param, struct FFireUniqueID& FireID, bool Local); // Function Solarland.SolarWeapon.SpawnProjWithFireID // (Final|Native|Protected|HasOutParms) // @ game+0x2276d60
	void ShowSpecialEffect(bool bShow); // Function Solarland.SolarWeapon.ShowSpecialEffect // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2276cd0
	void SetWeaponAnimState(enum class EWeaponAnimState InWeaponAnimState); // Function Solarland.SolarWeapon.SetWeaponAnimState // (Final|Native|Public|BlueprintCallable) // @ game+0x2276c50
	void SetReservedAmmoForce(int32_t InFireModeType, int32_t InAmount); // Function Solarland.SolarWeapon.SetReservedAmmoForce // (Final|Native|Public|BlueprintCallable) // @ game+0x2276b80
	void SetPrimaryShootingOption(enum class EShootingOpt Opt); // Function Solarland.SolarWeapon.SetPrimaryShootingOption // (Final|Native|Public|BlueprintCallable) // @ game+0x2276b00
	void SetLastFireTime(int32_t InFireModeType, float InFireTime); // Function Solarland.SolarWeapon.SetLastFireTime // (Final|Native|Public) // @ game+0x2276a30
	void SetHolder(struct AActor* InHolder); // Function Solarland.SolarWeapon.SetHolder // (Native|Public|BlueprintCallable) // @ game+0x22769a0
	void ServerWeaponSound(enum class EShootingSoundOpt Opt, bool TriggerSound); // Function Solarland.SolarWeapon.ServerWeaponSound // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x22768c0
	void ServerVirtualBulletShotHit(struct TArray<struct FSolarVirtualBulletHitParameter> AllHitParams, struct APawn* SourcePawn); // Function Solarland.SolarWeapon.ServerVirtualBulletShotHit // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x22767a0
	void ServerVirtualBulletShot(struct FSolarVirtualBulletSpawnParameter InParameter, float InTimestamp); // Function Solarland.SolarWeapon.ServerVirtualBulletShot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x22766a0
	void ServerUpdateMechanicalState(enum class EWeaponMechanicalUniqueState NewMechanicalState, enum class EWeaponMechanicalSideFlag NewSubFlags); // Function Solarland.SolarWeapon.ServerUpdateMechanicalState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x22765d0
	void ServerUpdateLaserInfo(struct FVector InTarget, struct AActor* InTargetActor); // Function Solarland.SolarWeapon.ServerUpdateLaserInfo // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x2276500
	void ServerUpdateGatlingRepState(int32_t InState); // Function Solarland.SolarWeapon.ServerUpdateGatlingRepState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xa7a710
	void ServerSpawnProjWithVelocity(struct FSpawnProjParam Param); // Function Solarland.SolarWeapon.ServerSpawnProjWithVelocity // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2276470
	void ServerSpawnProjWithFireID(struct FSpawnBulletParam Param, struct FFireUniqueID FireID); // Function Solarland.SolarWeapon.ServerSpawnProjWithFireID // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2276350
	void ServerSetTracingAimTarget(bool InbTracingAimTarget); // Function Solarland.SolarWeapon.ServerSetTracingAimTarget // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x22762c0
	void ServerSetPrimaryOption(enum class EShootingOpt Opt); // Function Solarland.SolarWeapon.ServerSetPrimaryOption // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2276240
	void ServerSetHipFire(bool InbHipFire); // Function Solarland.SolarWeapon.ServerSetHipFire // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x22761b0
	void ServerResetFireCount(); // Function Solarland.SolarWeapon.ServerResetFireCount // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1554ec0
	void ServerRequestDropWeapon(); // Function Solarland.SolarWeapon.ServerRequestDropWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x7d6190
	void ServerPlayAnimWithNetMulticast(enum class ECharacterMontage InMontageType, float ExpectAnimLength); // Function Solarland.SolarWeapon.ServerPlayAnimWithNetMulticast // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x22760e0
	void ServerModeState(char ModeIndex); // Function Solarland.SolarWeapon.ServerModeState // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2276060
	void ServerLaserHit(struct TArray<struct FHitResult> Hits, float InActivateTime); // Function Solarland.SolarWeapon.ServerLaserHit // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2275f70
	void ServerInterruptLaser(); // Function Solarland.SolarWeapon.ServerInterruptLaser // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1554780
	void ServerInstantLineShot(char ModeIndex, struct FVector_NetQuantize Start, struct FVector_NetQuantize End, float DamageScale, struct FMutiBulletHitData HitData); // Function Solarland.SolarWeapon.ServerInstantLineShot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2275d80
	void ServerFireChargeShoot(struct UAmmoConfig* InAmmo, int8_t InFireChargingPhase, int32_t InFireChargingTime); // Function Solarland.SolarWeapon.ServerFireChargeShoot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2275bf0
	void ServerFireChargePhaseChange(int8_t InFireChargingPhase); // Function Solarland.SolarWeapon.ServerFireChargePhaseChange // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2275b70
	void ServerFire_JustAbilitiesAmmo(char ModeIndex); // Function Solarland.SolarWeapon.ServerFire_JustAbilitiesAmmo // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2275d00
	void ServerChangeOverloadState(enum class EWeaponOverloadState InState); // Function Solarland.SolarWeapon.ServerChangeOverloadState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2275af0
	void ServerCanisterShot(struct FVector_NetQuantize Start, struct FVector_NetQuantize End, float RandomA, float RandomB, struct FMutiBulletHitData HitData); // Function Solarland.SolarWeapon.ServerCanisterShot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2275900
	void ServerAddExpWithReason(int32_t InExp, int32_t InReasonID); // Function Solarland.SolarWeapon.ServerAddExpWithReason // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2275830
	void ServerActivateLaserShot(struct FVector InTarget, struct AActor* InTargetActor); // Function Solarland.SolarWeapon.ServerActivateLaserShot // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x2275760
	void RuntimeUpdateData(int32_t Cmd, struct FString Params); // Function Solarland.SolarWeapon.RuntimeUpdateData // (Final|Native|Public) // @ game+0x2275680
	void ResetRecoilComponent(); // Function Solarland.SolarWeapon.ResetRecoilComponent // (Final|Native|Public) // @ game+0x2275660
	void ReceivePlayImpactPositionEffect(struct UParticleSystemComponent* PSC, struct FVector& Position, float Scale); // Function Solarland.SolarWeapon.ReceivePlayImpactPositionEffect // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveChargingState(int32_t Index, enum class EWeaponSkillChargedState State); // Function Solarland.SolarWeapon.ReceiveChargingState // (Native|Event|Protected|BlueprintEvent) // @ game+0x2275590
	void PrimaryCost(); // Function Solarland.SolarWeapon.PrimaryCost // (Native|Protected) // @ game+0x1554b80
	void PlayVibrate(enum class EWeaponVibrateType InType); // Function Solarland.SolarWeapon.PlayVibrate // (Final|Native|Private) // @ game+0x2275510
	void PlayReloadRestoreVibrate(); // Function Solarland.SolarWeapon.PlayReloadRestoreVibrate // (Final|Native|Public) // @ game+0x22754f0
	void PlayReloadGetOldVibrate(); // Function Solarland.SolarWeapon.PlayReloadGetOldVibrate // (Final|Native|Public) // @ game+0x22754d0
	void PlayFireVibrate(); // Function Solarland.SolarWeapon.PlayFireVibrate // (Final|Native|Public) // @ game+0x22754b0
	void PlayChargeVibrate(); // Function Solarland.SolarWeapon.PlayChargeVibrate // (Final|Native|Public) // @ game+0x2275490
	void PlayBulletHitEffect(struct FHitResult& HitResult, struct ASolarBullet* Bullet, bool bForce, struct APawn* HitCauser, float HitEffectScale); // Function Solarland.SolarWeapon.PlayBulletHitEffect // (Final|Native|Public|HasOutParms) // @ game+0x22752a0
	void PlayBoltVibrate(); // Function Solarland.SolarWeapon.PlayBoltVibrate // (Final|Native|Public) // @ game+0x2275280
	void PlayAutoSingleSound(); // Function Solarland.SolarWeapon.PlayAutoSingleSound // (Final|Native|Public) // @ game+0x2275260
	void PlayAnimWithNetMulticast(enum class ECharacterMontage InMontageType, float ExpectAnimLength, bool bNeedNetMulticast, int32_t AnimCount); // Function Solarland.SolarWeapon.PlayAnimWithNetMulticast // (Native|Public|BlueprintCallable) // @ game+0x22750f0
	void OverrideFireMode(int32_t InFireModeType, struct UAmmoConfig* InNewAmmoConfig); // Function Solarland.SolarWeapon.OverrideFireMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2275020
	void OnRep_WeaponState(); // Function Solarland.SolarWeapon.OnRep_WeaponState // (Final|Native|Public) // @ game+0x2275000
	void OnRep_TracingAimTarget(); // Function Solarland.SolarWeapon.OnRep_TracingAimTarget // (Final|Native|Public) // @ game+0x2274fe0
	void OnRep_SoundFireSkillCast(); // Function Solarland.SolarWeapon.OnRep_SoundFireSkillCast // (Final|Native|Public) // @ game+0x2274fc0
	void OnRep_SoundFireSingle(); // Function Solarland.SolarWeapon.OnRep_SoundFireSingle // (Final|Native|Public) // @ game+0x2274fa0
	void OnRep_SoundFireOverload(); // Function Solarland.SolarWeapon.OnRep_SoundFireOverload // (Final|Native|Public) // @ game+0x2274f80
	void OnRep_SoundFireLast(); // Function Solarland.SolarWeapon.OnRep_SoundFireLast // (Final|Native|Public) // @ game+0x2274f60
	void OnRep_SoundFireBurst(); // Function Solarland.SolarWeapon.OnRep_SoundFireBurst // (Final|Native|Public) // @ game+0x2274f40
	void OnRep_SoundFireAutoCount(); // Function Solarland.SolarWeapon.OnRep_SoundFireAutoCount // (Final|Native|Public) // @ game+0x2274f20
	void OnRep_SoundB9A04Skill(); // Function Solarland.SolarWeapon.OnRep_SoundB9A04Skill // (Final|Native|Public) // @ game+0x2274f00
	void OnRep_OverloadStateChange(enum class EWeaponOverloadState PreviousState); // Function Solarland.SolarWeapon.OnRep_OverloadStateChange // (Final|Native|Public) // @ game+0x2274e80
	void OnRep_ImpactPosition(); // Function Solarland.SolarWeapon.OnRep_ImpactPosition // (Final|Native|Protected) // @ game+0x2274e60
	void OnRep_FireModes(); // Function Solarland.SolarWeapon.OnRep_FireModes // (Native|Public) // @ game+0x1555520
	void OnRep_FireChargingPhase(int32_t InOldFireChargingPhase); // Function Solarland.SolarWeapon.OnRep_FireChargingPhase // (Final|Native|Public) // @ game+0x2274dd0
	void OnRep_ExtraAmmo(); // Function Solarland.SolarWeapon.OnRep_ExtraAmmo // (Final|Native|Public) // @ game+0x2274db0
	void OnRep_CurrentMode(); // Function Solarland.SolarWeapon.OnRep_CurrentMode // (Final|Native|Protected) // @ game+0x2274d90
	void OnRep_ControlWeaponCharacterChanged(); // Function Solarland.SolarWeapon.OnRep_ControlWeaponCharacterChanged // (Final|Native|Protected) // @ game+0x2274d70
	void OnPlayMuzzleEffect(); // Function Solarland.SolarWeapon.OnPlayMuzzleEffect // (Native|Event|Protected|BlueprintEvent) // @ game+0x80e1b0
	void OnLoadInitAssetComplete(); // Function Solarland.SolarWeapon.OnLoadInitAssetComplete // (Native|Protected) // @ game+0x1554c60
	void OnLoadCfgAssetsComplete(); // Function Solarland.SolarWeapon.OnLoadCfgAssetsComplete // (Native|Protected) // @ game+0x1555e20
	void OnInternalUnControlled(); // Function Solarland.SolarWeapon.OnInternalUnControlled // (Native|Protected) // @ game+0x15555e0
	void OnInternalControlled(struct ASolarCharacterBase* OwnerChar); // Function Solarland.SolarWeapon.OnInternalControlled // (Native|Protected) // @ game+0x2274c50
	void OnInstantLineShotHit(struct FHitResult& InHit, float DamageScale); // Function Solarland.SolarWeapon.OnInstantLineShotHit // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnInitFlowComplete(); // Function Solarland.SolarWeapon.OnInitFlowComplete // (Native|Protected) // @ game+0x15550a0
	void OnGatlingRollChange(bool bIncrease); // Function Solarland.SolarWeapon.OnGatlingRollChange // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnFireChargeBurstCountChange(int32_t BurstSum); // Function Solarland.SolarWeapon.OnFireChargeBurstCountChange // (Native|Event|Public|BlueprintEvent) // @ game+0x2274bc0
	enum class EShootingOpt NextShootingPrimaryOption(); // Function Solarland.SolarWeapon.NextShootingPrimaryOption // (Final|Native|Public) // @ game+0x2274810
	void LuaStopSoundWithParameters(enum class EShootingSoundOpt Opt, int32_t idx, struct FPlaySoundParams& Params); // Function Solarland.SolarWeapon.LuaStopSoundWithParameters // (Final|Native|Protected|HasOutParms) // @ game+0x22746e0
	void LuaStartSoundWithParameters(enum class EShootingSoundOpt Opt, int32_t idx, struct FPlaySoundParams& Params); // Function Solarland.SolarWeapon.LuaStartSoundWithParameters // (Final|Native|Protected|HasOutParms) // @ game+0x22745b0
	void LoadInitAsset(); // Function Solarland.SolarWeapon.LoadInitAsset // (Final|Native|Public|BlueprintCallable) // @ game+0x2274590
	void LoadAllCfgAssets(); // Function Solarland.SolarWeapon.LoadAllCfgAssets // (Final|Native|Public|BlueprintCallable) // @ game+0x2274570
	struct UAmmoConfig* K2_GetOverrideAmmoConfigBase(int32_t ModeIndex); // Function Solarland.SolarWeapon.K2_GetOverrideAmmoConfigBase // (Final|Native|Protected|BlueprintCallable) // @ game+0x22744d0
	struct USingleWeaponConfig* K2_GetCurrentConfig(); // Function Solarland.SolarWeapon.K2_GetCurrentConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22744a0
	bool IsVisible(); // Function Solarland.SolarWeapon.IsVisible // (Native|Public) // @ game+0x2274470
	bool IsShowCoolDownWidget(); // Function Solarland.SolarWeapon.IsShowCoolDownWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2274420
	bool IsShotAimEnemy(); // Function Solarland.SolarWeapon.IsShotAimEnemy // (Final|Native|Public|Const) // @ game+0x22743f0
	bool IsScopeOpen(); // Function Solarland.SolarWeapon.IsScopeOpen // (Native|Public|Const) // @ game+0x22743c0
	bool IsOpenedScope(); // Function Solarland.SolarWeapon.IsOpenedScope // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2274390
	bool IsHipFire(); // Function Solarland.SolarWeapon.IsHipFire // (Final|Native|Public|Const) // @ game+0x2274360
	bool IsEnergyID(int32_t BulletItemID); // Function Solarland.SolarWeapon.IsEnergyID // (Final|Native|Public|Const) // @ game+0x22742c0
	bool IsControlled(); // Function Solarland.SolarWeapon.IsControlled // (Final|Native|Public|Const) // @ game+0x2274280
	bool IsCanFire(); // Function Solarland.SolarWeapon.IsCanFire // (Final|Native|Public) // @ game+0x2274250
	struct UParticleSystemComponent* InternalPlayEffectAttached(struct UParticleSystem* PS, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FAttachedEffectParam Param); // Function Solarland.SolarWeapon.InternalPlayEffectAttached // (Final|Native|Protected) // @ game+0x22740b0
	struct UParticleSystemComponent* InternalPlayEffectAtLocation(struct UObject* WorldContext, struct UParticleSystem* PS, struct FVector& Location, struct FLocationEffectParam Param, bool bUseDistScale); // Function Solarland.SolarWeapon.InternalPlayEffectAtLocation // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2273eb0
	void InternalClientPlayFiringEffects(); // Function Solarland.SolarWeapon.InternalClientPlayFiringEffects // (Native|Protected) // @ game+0x15554a0
	bool InSameTeam(); // Function Solarland.SolarWeapon.InSameTeam // (Native|Protected) // @ game+0x2273e80
	void InitConfigs(); // Function Solarland.SolarWeapon.InitConfigs // (Native|Public|BlueprintCallable) // @ game+0x15552c0
	bool ImmediatelyFire(int32_t idx, bool bEnable); // Function Solarland.SolarWeapon.ImmediatelyFire // (Final|Native|Public) // @ game+0x2273db0
	bool HasLoadInitAsset(); // Function Solarland.SolarWeapon.HasLoadInitAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2273d90
	bool HasLoadAllCfgAssets(); // Function Solarland.SolarWeapon.HasLoadAllCfgAssets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2273d70
	bool HasInitFinish(); // Function Solarland.SolarWeapon.HasInitFinish // (Final|Native|Public|Const) // @ game+0x2169e90
	bool HasInitConfigs(); // Function Solarland.SolarWeapon.HasInitConfigs // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2273d40
	void HandFireModeInput(enum class EWeaponFireModeType WeaponFireModeType, bool Press); // Function Solarland.SolarWeapon.HandFireModeInput // (Final|Native|Public) // @ game+0x2273c70
	enum class EWeaponType GetWeaponType(); // Function Solarland.SolarWeapon.GetWeaponType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2273c40
	struct FString GetWeaponTextType(); // Function Solarland.SolarWeapon.GetWeaponTextType // (Final|Native|Public) // @ game+0x2273bc0
	uint32_t GetWeaponNoticeID(struct FName& InNoticeType); // Function Solarland.SolarWeapon.GetWeaponNoticeID // (Final|Native|Public|HasOutParms) // @ game+0x2273b20
	int32_t GetWeaponLevel(); // Function Solarland.SolarWeapon.GetWeaponLevel // (Native|Public|Const) // @ game+0x2273af0
	int32_t GetWeaponID(); // Function Solarland.SolarWeapon.GetWeaponID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2273aa0
	struct UTexture2D* GetWeaponIcon(); // Function Solarland.SolarWeapon.GetWeaponIcon // (Final|Native|Public) // @ game+0x2273ac0
	enum class ESolarWeaponBrand GetWeaponBrand(); // Function Solarland.SolarWeapon.GetWeaponBrand // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2273a70
	struct UAnimMontage* GetWeaponAnimSequence(enum class ECharacterMontage InMontageType); // Function Solarland.SolarWeapon.GetWeaponAnimSequence // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2273730
	struct FWeaponAnimationInfo GetWeaponAnimationInfo(enum class ECharacterMontage InMontageType); // Function Solarland.SolarWeapon.GetWeaponAnimationInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2273870
	struct FSlateBrush GetTriggerIcon(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetTriggerIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22735e0
	int32_t GetSpareAmmo(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetSpareAmmo // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2273540
	float GetSoundRTPCValue(); // Function Solarland.SolarWeapon.GetSoundRTPCValue // (Final|Native|Protected) // @ game+0x2273510
	int32_t GetSkinID(); // Function Solarland.SolarWeapon.GetSkinID // (Native|Public|Const) // @ game+0x22734e0
	float GetShotGunSpreadSeed(); // Function Solarland.SolarWeapon.GetShotGunSpreadSeed // (Native|Event|Protected|BlueprintEvent) // @ game+0x22734a0
	struct FVector GetShotDir(bool NeedSpread); // Function Solarland.SolarWeapon.GetShotDir // (Native|Protected|HasDefaults|Const) // @ game+0x22733f0
	struct FVector GetShootingTraceStartLocation(); // Function Solarland.SolarWeapon.GetShootingTraceStartLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x22733b0
	struct FString GetShootingPrimaryShootingOptionName(enum class EShootingOpt Opt); // Function Solarland.SolarWeapon.GetShootingPrimaryShootingOptionName // (Final|Native|Public) // @ game+0x22732d0
	float GetSecondModeValue(); // Function Solarland.SolarWeapon.GetSecondModeValue // (Final|Native|Public|Const) // @ game+0x22732a0
	int32_t GetReservedAmmo(int32_t idx); // Function Solarland.SolarWeapon.GetReservedAmmo // (Final|Native|Public|BlueprintCallable) // @ game+0x2273200
	float GetReloadProgress(); // Function Solarland.SolarWeapon.GetReloadProgress // (Final|Native|Public|Const) // @ game+0x22731d0
	struct UWeaponRecoilComponent* GetRecoilComponent(); // Function Solarland.SolarWeapon.GetRecoilComponent // (Final|Native|Public) // @ game+0x22731a0
	int32_t GetPrimaryShootingOptionIndex(); // Function Solarland.SolarWeapon.GetPrimaryShootingOptionIndex // (Final|Native|Public) // @ game+0x2273170
	float GetPostFireDuration(int32_t idx); // Function Solarland.SolarWeapon.GetPostFireDuration // (Final|Native|Public) // @ game+0x22730d0
	struct UWeaponPartsComponent* GetPartsComponent(); // Function Solarland.SolarWeapon.GetPartsComponent // (Native|Public|Const) // @ game+0x22730a0
	float GetOverloadPercent(); // Function Solarland.SolarWeapon.GetOverloadPercent // (Final|Native|Public) // @ game+0x2273070
	float GetOverloadMaxValue(); // Function Solarland.SolarWeapon.GetOverloadMaxValue // (Native|Protected|BlueprintCallable) // @ game+0x20b5b30
	struct ASolarWeaponProjectileSpline* GetOrCreateWeaponProjectileSpline(); // Function Solarland.SolarWeapon.GetOrCreateWeaponProjectileSpline // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2273040
	int32_t GetMaxAmmo(int32_t idx, bool bWithExtraAmmoByChaAbility); // Function Solarland.SolarWeapon.GetMaxAmmo // (Native|Public|BlueprintCallable) // @ game+0x2272f70
	float GetLastFireTime(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetLastFireTime // (Final|Native|Public|Const) // @ game+0x2272ed0
	bool GetIsVehicleMounted(); // Function Solarland.SolarWeapon.GetIsVehicleMounted // (Final|Native|Public|Const) // @ game+0x2272ea0
	bool GetIsSupportSecondaryFire(); // Function Solarland.SolarWeapon.GetIsSupportSecondaryFire // (Final|Native|Public) // @ game+0x2272e70
	bool GetIsSupportAutoFire(); // Function Solarland.SolarWeapon.GetIsSupportAutoFire // (Final|Native|Public|Const) // @ game+0x2272e40
	bool GetIsSupportAssistAim(); // Function Solarland.SolarWeapon.GetIsSupportAssistAim // (Final|Native|Public|Const) // @ game+0x2272e10
	bool GetIsQuickScope(); // Function Solarland.SolarWeapon.GetIsQuickScope // (Native|Public) // @ game+0x2272de0
	bool GetIsCoolDown(int32_t Mode); // Function Solarland.SolarWeapon.GetIsCoolDown // (Final|Native|Public) // @ game+0x2272d40
	struct UGlobalWeaponConfig* GetGlobalWeaponConfig(); // Function Solarland.SolarWeapon.GetGlobalWeaponConfig // (Final|Native|Public|Const) // @ game+0x2272d10
	int32_t GetFireModeNameLocalizationID(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetFireModeNameLocalizationID // (Final|Native|Public) // @ game+0x2272c70
	float GetFireIntervalProgress(int32_t idx); // Function Solarland.SolarWeapon.GetFireIntervalProgress // (Final|Native|Public) // @ game+0x2272bd0
	float GetFireInterval(int32_t idx); // Function Solarland.SolarWeapon.GetFireInterval // (Native|Public) // @ game+0x2272b30
	void GetFireChargeInfo(int32_t& OutChargingPhase, float& OutChargingTime, float& OutRate, struct FFireChargeData& OutChargeData); // Function Solarland.SolarWeapon.GetFireChargeInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x22728f0
	float GetFireCD(int32_t idx); // Function Solarland.SolarWeapon.GetFireCD // (Final|Native|Public) // @ game+0x2272850
	float GetExtraPointsPercent(); // Function Solarland.SolarWeapon.GetExtraPointsPercent // (Final|Native|Public|Const) // @ game+0x2272830
	int32_t GetExtraPoints(); // Function Solarland.SolarWeapon.GetExtraPoints // (Final|Native|Public|Const) // @ game+0x2272810
	struct UParticleSystem* GetDedicatedKillEffect(); // Function Solarland.SolarWeapon.GetDedicatedKillEffect // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22727e0
	struct FSoftObjectPath GetDedicatedDissolvedDeathFXPath(); // Function Solarland.SolarWeapon.GetDedicatedDissolvedDeathFXPath // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2272750
	struct UActorEffect* GetDedicatedDissolvedDeathActorEffectClass(); // Function Solarland.SolarWeapon.GetDedicatedDissolvedDeathActorEffectClass // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2272710
	struct FWeaponDebugFlag GetDebugFlag(); // Function Solarland.SolarWeapon.GetDebugFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x22726d0
	int32_t GetCurScopeType(); // Function Solarland.SolarWeapon.GetCurScopeType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2272130
	enum class EShootingOpt GetCurrentShootingPrimaryOption(); // Function Solarland.SolarWeapon.GetCurrentShootingPrimaryOption // (Final|Native|Public) // @ game+0x22726a0
	enum class EWeaponScopeType GetCurrentScopeType(); // Function Solarland.SolarWeapon.GetCurrentScopeType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2272670
	struct FFireChargeData GetCurrentFireChargeData(struct UAmmoConfig* InAmmo); // Function Solarland.SolarWeapon.GetCurrentFireChargeData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22723e0
	struct UAmmoConfig* GetCurrentFireChargeAmmoData(struct UAmmoConfig* InAmmo); // Function Solarland.SolarWeapon.GetCurrentFireChargeAmmoData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2272340
	int32_t GetCurrentClipAmmo(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetCurrentClipAmmo // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22722a0
	bool GetCurrentChargeModePercent(int32_t InFireModeType, int32_t& OutChargeMode, float& OutChargePercent); // Function Solarland.SolarWeapon.GetCurrentChargeModePercent // (Final|Native|Public|HasOutParms) // @ game+0x2272170
	int32_t GetCostPreAttack(int32_t idx); // Function Solarland.SolarWeapon.GetCostPreAttack // (Final|Native|Public|Const) // @ game+0x2272090
	struct ASolarCharacterBase* GetControlWeaponCharacter(); // Function Solarland.SolarWeapon.GetControlWeaponCharacter // (Final|Native|Public|Const) // @ game+0x2272060
	float GetChargingPercent(int32_t idx); // Function Solarland.SolarWeapon.GetChargingPercent // (Final|Native|Public) // @ game+0x2271fc0
	float GetBurstInterval(int32_t idx); // Function Solarland.SolarWeapon.GetBurstInterval // (Final|Native|Public) // @ game+0x2271f20
	float GetBurstInternalInterval(int32_t idx); // Function Solarland.SolarWeapon.GetBurstInternalInterval // (Final|Native|Public) // @ game+0x2271e80
	void GetBulletHitEffectRot(struct FHitResult& HitResult, struct ASolarBullet* Bullet, struct FRotator& TargetPos, bool bIsHittedShield); // Function Solarland.SolarWeapon.GetBulletHitEffectRot // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2271ce0
	void GetBulletHitEffectPos(struct FHitResult& HitResult, struct FVector& TargetRot, float Offset); // Function Solarland.SolarWeapon.GetBulletHitEffectPos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2271b60
	struct ASolarBullet* GetBulletDefaultObject(int32_t idx, struct UAmmoConfig* AmmoCfg); // Function Solarland.SolarWeapon.GetBulletDefaultObject // (Final|Native|Public) // @ game+0x2271a90
	struct ASolarBullet* GetBulletClass(int32_t idx, struct UAmmoConfig* AmmoCfg); // Function Solarland.SolarWeapon.GetBulletClass // (Final|Native|Public) // @ game+0x22719c0
	float GetBotAIDamageFactor(); // Function Solarland.SolarWeapon.GetBotAIDamageFactor // (Final|Native|Public) // @ game+0x2271990
	enum class ETriggerType GetAmmoTriggerType(int32_t fireModeType); // Function Solarland.SolarWeapon.GetAmmoTriggerType // (Final|Native|Public|Const) // @ game+0x22718f0
	int32_t GetAmmoItemID(int32_t idx); // Function Solarland.SolarWeapon.GetAmmoItemID // (Final|Native|Public) // @ game+0x2271850
	bool GetAllInitAssetPath(struct TArray<struct FSoftObjectPath>& PathArray); // Function Solarland.SolarWeapon.GetAllInitAssetPath // (Native|Protected|HasOutParms) // @ game+0x2271770
	bool GetAllCfgAssetsPath(struct TArray<struct FSoftObjectPath>& PathArray); // Function Solarland.SolarWeapon.GetAllCfgAssetsPath // (Native|Protected|HasOutParms) // @ game+0x2271690
	void GetAimStartEnd(struct UAmmoConfig* InAmmo, struct FVector& OutStart, struct FVector& OutEnd, struct AActor*& OutTargetActor, bool NeedSpread); // Function Solarland.SolarWeapon.GetAimStartEnd // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x22714b0
	bool FireVerify_Location(int32_t FireMode, struct FVector& StartLocation, struct FVector& WeaponLocation, float ServerTime, struct FBulletHitDetailData& HitDetailData); // Function Solarland.SolarWeapon.FireVerify_Location // (Final|Native|Protected|HasOutParms|HasDefaults|Const) // @ game+0x22712c0
	bool FireVerify_EffectRange(int32_t FireMode, struct FVector& StartLocation, struct FVector& WeaponLocation, float ServerTime, struct FBulletHitDetailData& HitDetailData); // Function Solarland.SolarWeapon.FireVerify_EffectRange // (Final|Native|Protected|HasOutParms|HasDefaults|Const) // @ game+0x22710d0
	bool FireVerify_Block(int32_t FireMode, struct FVector& StartLocation, struct FVector& WeaponLocation, float ServerTime, struct FBulletHitDetailData& HitDetailData); // Function Solarland.SolarWeapon.FireVerify_Block // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2270ee0
	bool FireValidate(int32_t idx, float InLastShootTime); // Function Solarland.SolarWeapon.FireValidate // (Final|Native|Protected) // @ game+0x2270e10
	enum class ECharacterMontage FindMontageKeyFromWeaponAnim(struct UAnimMontage* InAnimation); // Function Solarland.SolarWeapon.FindMontageKeyFromWeaponAnim // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2270ba0
	void EnterOverloadState(); // Function Solarland.SolarWeapon.EnterOverloadState // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void DestroyWeaponProjectileSpline(); // Function Solarland.SolarWeapon.DestroyWeaponProjectileSpline // (Final|Native|Protected|BlueprintCallable) // @ game+0x2270b80
	void ClientVirtualBulletShot(struct FSolarVirtualBulletSpawnParameter InParameter); // Function Solarland.SolarWeapon.ClientVirtualBulletShot // (Net|Native|Event|NetMulticast|Public) // @ game+0x2270ae0
	void ClientUpdateLaserInfo(struct FVector InTarget, struct AActor* InTargetActor); // Function Solarland.SolarWeapon.ClientUpdateLaserInfo // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x2270a10
	void ClientPlayHitEffect(struct FMultiHitResult InMultiHitResult); // Function Solarland.SolarWeapon.ClientPlayHitEffect // (Net|Native|Event|NetMulticast|Protected) // @ game+0x2270940
	void ClientPlayFiringEffects(); // Function Solarland.SolarWeapon.ClientPlayFiringEffects // (Net|Native|Event|NetMulticast|Protected|NetClient) // @ game+0x80e1d0
	void ClientPlayAnimWithNetMulticast(enum class ECharacterMontage InMontageType, float ExpectAnimLength); // Function Solarland.SolarWeapon.ClientPlayAnimWithNetMulticast // (Net|Native|Event|NetMulticast|Public) // @ game+0x2270870
	void ClientNotifyUpdateReservedAmmoForce(int32_t InFireModeType, int32_t InAmount); // Function Solarland.SolarWeapon.ClientNotifyUpdateReservedAmmoForce // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x22707a0
	void ClientLaserHit(struct TArray<struct FHitResult> Hits, float InActivateTime); // Function Solarland.SolarWeapon.ClientLaserHit // (Net|Native|Event|NetMulticast|Public) // @ game+0x22706b0
	void ClientInterruptLaser(); // Function Solarland.SolarWeapon.ClientInterruptLaser // (Net|Native|Event|NetMulticast|Public) // @ game+0x1554be0
	void ClientInstantLineShot(char ModeIndex, struct TArray<struct FHitResult> HitResults, struct FVector_NetQuantize End, float DamageScale); // Function Solarland.SolarWeapon.ClientInstantLineShot // (Net|Native|Event|NetMulticast|Public) // @ game+0x2270540
	void ClientFireChargeShoot(struct UAmmoConfig* InAmmo, int8_t InFireChargingPhase, int32_t InFireChargingTime); // Function Solarland.SolarWeapon.ClientFireChargeShoot // (Net|Native|Event|NetMulticast|Public) // @ game+0x2270430
	void ClientCanisterShot(struct FVector_NetQuantize Start, struct TArray<struct FWeaponShotHitResult> ValidHits, struct FVector_NetQuantize Target); // Function Solarland.SolarWeapon.ClientCanisterShot // (Net|Native|Event|NetMulticast|Public) // @ game+0x2270310
	void ClientActivateLaserShot(struct FVector InTarget, struct AActor* InTargetActor); // Function Solarland.SolarWeapon.ClientActivateLaserShot // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x2270240
	void ClearFireHitVerify(); // Function Solarland.SolarWeapon.ClearFireHitVerify // (Final|Native|Protected) // @ game+0x2270220
	bool CheckOpenParticleOptimization(int32_t Bias); // Function Solarland.SolarWeapon.CheckOpenParticleOptimization // (Final|Native|Public|BlueprintCallable) // @ game+0x2270180
	bool CanOverload(); // Function Solarland.SolarWeapon.CanOverload // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2270160
	bool CanCauseTeamDamage(); // Function Solarland.SolarWeapon.CanCauseTeamDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x2270130
	float CalcScale(struct FFireMode& Mode); // Function Solarland.SolarWeapon.CalcScale // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2270030
	int32_t CalcCost(struct FFireMode& Mode); // Function Solarland.SolarWeapon.CalcCost // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x226ff30
	void AddExtraPoints(enum class ESolarHitType InHitType, int32_t InDamage); // Function Solarland.SolarWeapon.AddExtraPoints // (Final|Native|Public) // @ game+0x226fe60
};

// Class Solarland.SolarPlayerWeapon
// Size: 0xdb0 (Inherited: 0xa90)
struct ASolarPlayerWeapon : ASolarWeapon {
	char pad_A90[0xc0]; // 0xa90(0xc0)
	float SpawnOffset; // 0xb50(0x04)
	char pad_B54[0x4]; // 0xb54(0x04)
	struct FSolarItemData ItemData; // 0xb58(0xb8)
	struct TArray<char> MarkedTeamIdList; // 0xc10(0x10)
	char bUseSceneActorOptimization; // 0xc20(0x01)
	char pad_C21[0x7]; // 0xc21(0x07)
	struct USphereComponent* SphereComponent; // 0xc28(0x08)
	struct FVector DroppedLocation; // 0xc30(0x0c)
	char pad_C3C[0x4]; // 0xc3c(0x04)
	struct ASolarCharacterBase* WeaponOwner; // 0xc40(0x08)
	struct UWeaponAnimationComponent* WeaponAnimationComponent; // 0xc48(0x08)
	enum class EItemDiscardState WeaponCurrentDiscardState; // 0xc50(0x01)
	enum class EItemState WeaponCurrentState; // 0xc51(0x01)
	char pad_C52[0x6]; // 0xc52(0x06)
	struct TArray<struct FSoftObjectPath> DiscardMatPath; // 0xc58(0x10)
	struct FSoftObjectPath HoldMeshMaterialPath; // 0xc68(0x18)
	struct UMaterialInterface* OutlineBaseMat; // 0xc80(0x08)
	char pad_C88[0x8]; // 0xc88(0x08)
	struct TArray<struct UParticleSystemComponent*> SkinExtraPSCArray; // 0xc90(0x10)
	struct UParticleSystemComponent* SkinSpecialEffect; // 0xca0(0x08)
	char pad_CA8[0x10]; // 0xca8(0x10)
	struct UMaterialInstanceDynamic* MeshSubpassMaterial; // 0xcb8(0x08)
	struct TArray<struct UMaterialInstanceDynamic*> MeshDiscardMaterialArray; // 0xcc0(0x10)
	struct UWeaponSkinData* WeaponSkinData; // 0xcd0(0x08)
	int32_t WeaponSkinID; // 0xcd8(0x04)
	int32_t ScopePartID; // 0xcdc(0x04)
	int32_t GripPartID; // 0xce0(0x04)
	int32_t StockPartID; // 0xce4(0x04)
	int32_t MuzzlePartID; // 0xce8(0x04)
	int32_t ClipPartID; // 0xcec(0x04)
	int32_t DefaultSkinID; // 0xcf0(0x04)
	char pad_CF4[0x5]; // 0xcf4(0x05)
	bool bIsAutoDrop; // 0xcf9(0x01)
	char pad_CFA[0x2]; // 0xcfa(0x02)
	float LifespanAfterAutoDrop; // 0xcfc(0x04)
	bool bUsed; // 0xd00(0x01)
	char pad_D01[0x7]; // 0xd01(0x07)
	struct UParticleSystem* SkinDedicatedKillEffect; // 0xd08(0x08)
	struct UParticleSystem* SkinDedicatedSpecialEffect; // 0xd10(0x08)
	char pad_D18[0x98]; // 0xd18(0x98)

	void UpdateCharacterState(enum class ECharacterStateForWeapon CharacterState, bool bIsOnGround, bool bResetState); // Function Solarland.SolarPlayerWeapon.UpdateCharacterState // (Final|Native|Public) // @ game+0x2183610
	void UpdateCharacterPosture(bool IsCrouch); // Function Solarland.SolarPlayerWeapon.UpdateCharacterPosture // (Final|Native|Public) // @ game+0x2183580
	void SetOpenScopeOnVehicle(bool InbOpenScope); // Function Solarland.SolarPlayerWeapon.SetOpenScopeOnVehicle // (Final|Native|Public) // @ game+0x2182be0
	void SetDedicatedSkinEffect(struct UWeaponSkinData* InSkinData); // Function Solarland.SolarPlayerWeapon.SetDedicatedSkinEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x2182b50
	void RequestUnlimitedAmmo(bool InEnable); // Function Solarland.SolarPlayerWeapon.RequestUnlimitedAmmo // (Final|Native|Public|BlueprintCallable) // @ game+0x2182ac0
	void PostUpdateAppearance(); // Function Solarland.SolarPlayerWeapon.PostUpdateAppearance // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnSetWeaponSkinMesh(struct USkeletalMesh* InMesh, struct UObject* InAnimClass); // Function Solarland.SolarPlayerWeapon.OnSetWeaponSkinMesh // (Final|Native|Public) // @ game+0x21829f0
	void OnRep_WeaponCurrentStateChanged(); // Function Solarland.SolarPlayerWeapon.OnRep_WeaponCurrentStateChanged // (Final|Native|Protected) // @ game+0x21829d0
	void OnRep_WeaponCurrentDiscardStateChanged(); // Function Solarland.SolarPlayerWeapon.OnRep_WeaponCurrentDiscardStateChanged // (Final|Native|Protected) // @ game+0x8e9ae0
	void OnClientMeshLodChanged(int32_t LOD); // Function Solarland.SolarPlayerWeapon.OnClientMeshLodChanged // (Native|Protected) // @ game+0x2182630
	void NotifyThisItemWasPickedUp(); // Function Solarland.SolarPlayerWeapon.NotifyThisItemWasPickedUp // (Final|Native|Protected) // @ game+0x2182550
	void K2_SwitchDrawDistance(bool Hold); // Function Solarland.SolarPlayerWeapon.K2_SwitchDrawDistance // (Native|Event|Protected|BlueprintEvent) // @ game+0x21824c0
	void K2_OnHold(bool bLocal); // Function Solarland.SolarPlayerWeapon.K2_OnHold // (Native|Event|Public|BlueprintEvent) // @ game+0x2182430
	void K2_OnDrop(); // Function Solarland.SolarPlayerWeapon.K2_OnDrop // (Native|Event|Public|BlueprintEvent) // @ game+0x15547a0
	bool IsOpenedScopeOnVehicle(); // Function Solarland.SolarPlayerWeapon.IsOpenedScopeOnVehicle // (Final|Native|Public|Const) // @ game+0x2182410
	bool IsItemWeapon(); // Function Solarland.SolarPlayerWeapon.IsItemWeapon // (Native|Public) // @ game+0x21823e0
	bool IsExistPart(enum class EWeaponPartType& PartType); // Function Solarland.SolarPlayerWeapon.IsExistPart // (Native|Public|HasOutParms|Const) // @ game+0x2182330
	void Hold(bool bInHold); // Function Solarland.SolarPlayerWeapon.Hold // (Native|Public) // @ game+0x21821d0
	bool HasScope(); // Function Solarland.SolarPlayerWeapon.HasScope // (Native|Public) // @ game+0x21821a0
	float GetWeaponSilencerMagnitude(); // Function Solarland.SolarPlayerWeapon.GetWeaponSilencerMagnitude // (Final|Native|Public) // @ game+0x2182170
	struct UPlayerWeaponRecoilComponent* GetRecoilComp(); // Function Solarland.SolarPlayerWeapon.GetRecoilComp // (Final|Native|Protected) // @ game+0x2182100
	int32_t GetQualityByLevel(int32_t Level); // Function Solarland.SolarPlayerWeapon.GetQualityByLevel // (Final|Native|Public) // @ game+0x2182060
	int32_t GetQuality(); // Function Solarland.SolarPlayerWeapon.GetQuality // (Native|Public) // @ game+0x2182020
	enum class EItemState GetItemCurrentState(); // Function Solarland.SolarPlayerWeapon.GetItemCurrentState // (Native|Public|BlueprintCallable) // @ game+0x2181fe0
	bool GetIsHolded(); // Function Solarland.SolarPlayerWeapon.GetIsHolded // (Final|Native|Public) // @ game+0x2181fc0
	struct FVector GetFPPLocation(); // Function Solarland.SolarPlayerWeapon.GetFPPLocation // (Native|Public|HasDefaults|Const) // @ game+0x2181f50
	float GetFire2AnimPlayRate(); // Function Solarland.SolarPlayerWeapon.GetFire2AnimPlayRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2181f90
	float GetDistanceToEyeWhenScope(); // Function Solarland.SolarPlayerWeapon.GetDistanceToEyeWhenScope // (Native|Public) // @ game+0x2181f10
	struct FVector GetCurrentScopeAimCenterPoint(); // Function Solarland.SolarPlayerWeapon.GetCurrentScopeAimCenterPoint // (Native|Public|HasDefaults) // @ game+0x2181e30
	struct UWeaponPartClipComp* GetCurrentClip(); // Function Solarland.SolarPlayerWeapon.GetCurrentClip // (Native|Public) // @ game+0x2181e00
	void ClearSkinExtraPSC(); // Function Solarland.SolarPlayerWeapon.ClearSkinExtraPSC // (Final|Native|Protected) // @ game+0x2181c80
	void ClearDedicatedSkinEffect(); // Function Solarland.SolarPlayerWeapon.ClearDedicatedSkinEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x2181c60
};

// Class Solarland.SolarPlayerItemWeapon
// Size: 0xdb0 (Inherited: 0xdb0)
struct ASolarPlayerItemWeapon : ASolarPlayerWeapon {
};

// Class Solarland.SolarPlayerNormalWeapon
// Size: 0xdb0 (Inherited: 0xdb0)
struct ASolarPlayerNormalWeapon : ASolarPlayerWeapon {
	struct UWeaponPartsComponent* WeaponPartsComponent; // 0xda8(0x08)

	bool QueryCanEquipPart(enum class EWeaponPartType Type, int32_t InWeaponID); // Function Solarland.SolarPlayerNormalWeapon.QueryCanEquipPart // (Final|Native|Public) // @ game+0x217e570
	bool GetEquippedScopeTypeAndLevel(enum class EWeaponPartType& Type, int32_t& Level); // Function Solarland.SolarPlayerNormalWeapon.GetEquippedScopeTypeAndLevel // (Native|Public|HasOutParms) // @ game+0x217b810
	int32_t GetEquippedPartLevel(enum class EWeaponPartType Type); // Function Solarland.SolarPlayerNormalWeapon.GetEquippedPartLevel // (Native|Public) // @ game+0x217b780
	void GameStatisticsWeaponAddExp(float newExp, float AddExp, int32_t OldLevel, int32_t NewLevel, int32_t reason); // Function Solarland.SolarPlayerNormalWeapon.GameStatisticsWeaponAddExp // (Final|Native|Protected) // @ game+0x217b3e0
	bool CanEquipPart(enum class EWeaponPartType Type); // Function Solarland.SolarPlayerNormalWeapon.CanEquipPart // (Native|Public) // @ game+0x217ac50
};

// Class Solarland.SolarPlayerSensitivitys
// Size: 0x70 (Inherited: 0x28)
struct USolarPlayerSensitivitys : UObject {
	char pad_28[0x48]; // 0x28(0x48)

	void InitPlayerSensitivity(); // Function Solarland.SolarPlayerSensitivitys.InitPlayerSensitivity // (Final|Native|Public|BlueprintCallable) // @ game+0x217c7c0
};

// Class Solarland.SinglePlayerShieldModel
// Size: 0xa0 (Inherited: 0x30)
struct USinglePlayerShieldModel : USingleCharacterModelBase {
	char pad_30[0x70]; // 0x30(0x70)

	void ShieldValueChanged(enum class EShieldWidgetState InWidgetState, float InCurValue, float InChangeValue, enum class EShieldRechargeState InRechargeState, bool bInFixPreAdd); // Function Solarland.SinglePlayerShieldModel.ShieldValueChanged // (Final|Native|Private) // @ game+0x217f1e0
	void ShieldChanged(bool bInAvailable, float InCurValue, float InMaxValue, int32_t InQualityColor, bool bInIsAdvancedShield); // Function Solarland.SinglePlayerShieldModel.ShieldChanged // (Final|Native|Private) // @ game+0x217f040
};

// Class Solarland.SolarPlayersShieldModel
// Size: 0x78 (Inherited: 0x78)
struct USolarPlayersShieldModel : USolarCharactersModelBase {
};

// Class Solarland.SolarPlayerStart
// Size: 0x2d0 (Inherited: 0x258)
struct ASolarPlayerStart : APlayerStart {
	char pad_258[0x8]; // 0x258(0x08)
	float Distance; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
	struct FString Side; // 0x268(0x10)
	struct FString Job; // 0x278(0x10)
	struct FString ElementID; // 0x288(0x10)
	enum class ESGameMode_ElementType Type; // 0x298(0x01)
	enum class EElementStateType State; // 0x299(0x01)
	enum class EElementVisibilityType Visibility; // 0x29a(0x01)
	char pad_29B[0x1]; // 0x29b(0x01)
	struct FName ElementTypeName; // 0x29c(0x08)
	char pad_2A4[0x4]; // 0x2a4(0x04)
	struct FString GroupKey; // 0x2a8(0x10)
	struct TArray<struct FVector> PlayerLocations; // 0x2b8(0x10)
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void SetElementVisibility(enum class EElementVisibilityType NewType); // Function Solarland.SolarPlayerStart.SetElementVisibility // (Native|Public|BlueprintCallable) // @ game+0x217ed00
	enum class EElementStateType SetElementState(enum class EElementStateType NewState); // Function Solarland.SolarPlayerStart.SetElementState // (Native|Public|BlueprintCallable) // @ game+0x203c690
	void OnElementVisibilityChanged(enum class EElementVisibilityType CurrentVisibility); // Function Solarland.SolarPlayerStart.OnElementVisibilityChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnElementStateChanged(enum class EElementStateType CurrentState); // Function Solarland.SolarPlayerStart.OnElementStateChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarPoolActorInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarPoolActorInterface : UInterface {
};

// Class Solarland.SolarPoolObjectInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarPoolObjectInterface : UInterface {

	void OnPreDestroy(); // Function Solarland.SolarPoolObjectInterface.OnPreDestroy // (Native|Event|Public|BlueprintEvent) // @ game+0x21829b0
	void OnDeactivated(); // Function Solarland.SolarPoolObjectInterface.OnDeactivated // (Native|Event|Public|BlueprintEvent) // @ game+0xc73c00
	void OnActivated(); // Function Solarland.SolarPoolObjectInterface.OnActivated // (Native|Event|Public|BlueprintEvent) // @ game+0x2182570
	int32_t GetDefaultPoolLimit(struct FName Tag); // Function Solarland.SolarPoolObjectInterface.GetDefaultPoolLimit // (Native|Event|Public|BlueprintEvent) // @ game+0x2181e70
};

// Class Solarland.SolarPopPanelManager
// Size: 0x38 (Inherited: 0x30)
struct USolarPopPanelManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarPreloadAssetCollection
// Size: 0x50 (Inherited: 0x30)
struct USolarPreloadAssetCollection : UPrimaryDataAsset {
	struct TArray<struct UObject*> PreloadRes; // 0x30(0x10)
	struct TArray<struct UObject*> PreloadClass; // 0x40(0x10)
};

// Class Solarland.SolarPreservedBotManager
// Size: 0x2d8 (Inherited: 0x28)
struct USolarPreservedBotManager : UObject {
	char pad_28[0x60]; // 0x28(0x60)
	struct TMap<int32_t, struct FVector> SilenceLocationInDiffMap; // 0x88(0x50)
	char pad_D8[0x4]; // 0xd8(0x04)
	float MinDetectDistance; // 0xdc(0x04)
	char pad_E0[0x20]; // 0xe0(0x20)
	struct TArray<struct USolarPreservedBotPopTask*> PopTasks; // 0x100(0x10)
	struct FEQSParametrizedQueryExecutionRequest DefaultPopQuery; // 0x110(0x48)
	struct TMap<enum class EPopLocationType, struct FEQSParametrizedQueryExecutionRequest> PopQueryMap; // 0x158(0x50)
	struct UEnvQuery* SeparateQuery; // 0x1a8(0x08)
	enum class EEnvQueryRunMode SeparateEQSRunMode; // 0x1b0(0x01)
	char pad_1B1[0x7]; // 0x1b1(0x07)
	struct FSolarBotTimelineAIItemSetting DefaultItemTemplate; // 0x1b8(0xf0)
	float TimeBetweenDyingAndDead; // 0x2a8(0x04)
	char pad_2AC[0xc]; // 0x2ac(0x0c)
	struct FMulticastInlineDelegate OnSendBotsSuccess; // 0x2b8(0x10)
	struct FMulticastInlineDelegate OnSendBotsFail; // 0x2c8(0x10)

	void TryUpdateEquipment(struct UObject* Context, struct FSolarBotTimelineAIItemSetting& ItemSetting); // Function Solarland.SolarPreservedBotManager.TryUpdateEquipment // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2183310
	bool TryPopBotByNum(struct UObject* Context, int32_t PopNum, struct FPopParameter& InPopParam); // Function Solarland.SolarPreservedBotManager.TryPopBotByNum // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2183190
	void TryPopAllBotByGuarantee(struct UObject* Context, struct FVector& PopLocation); // Function Solarland.SolarPreservedBotManager.TryPopAllBotByGuarantee // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21830d0
	void TryPopAllBot(struct UObject* Context, struct FPopParameter& InPopParam); // Function Solarland.SolarPreservedBotManager.TryPopAllBot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2182fb0
	void TryKillOneBot(); // Function Solarland.SolarPreservedBotManager.TryKillOneBot // (Final|Native|Public|BlueprintCallable) // @ game+0x2182f90
	void TryAddPreservedBot(struct ASolarPlayerState* InBot, float DelayTime); // Function Solarland.SolarPreservedBotManager.TryAddPreservedBot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2182ed0
	void OnPopSingleBotSuccess(struct USolarPreservedBotPopTask* InTask); // Function Solarland.SolarPreservedBotManager.OnPopSingleBotSuccess // (Final|Native|Protected) // @ game+0x2182920
	void OnPopBotsFinished(struct USolarPreservedBotPopTask* InTask); // Function Solarland.SolarPreservedBotManager.OnPopBotsFinished // (Final|Native|Protected) // @ game+0x2182890
	void OnGetFinalTeleportLocSuccess(struct USolarPreservedBotPopTask* InTask, struct ASolarPlayerState* BotPS, struct FVector& TeleportLoc); // Function Solarland.SolarPreservedBotManager.OnGetFinalTeleportLocSuccess // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x21826e0
	void OnGetFinalTeleportLocFail(struct USolarPreservedBotPopTask* InTask, struct ASolarPlayerState* BotPS); // Function Solarland.SolarPreservedBotManager.OnGetFinalTeleportLocFail // (Final|Native|Protected) // @ game+0x1fe9450
	void OnCharacterDeath(struct ASolarPlayerController* InPlayer); // Function Solarland.SolarPreservedBotManager.OnCharacterDeath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21825b0
	void InitBotPreservedManager(char InActivePlayerNum, int32_t GameModeId); // Function Solarland.SolarPreservedBotManager.InitBotPreservedManager // (Final|Native|Public|BlueprintCallable) // @ game+0x2182260
	struct USolarPreservedBotManager* Get(struct UObject* Context); // Function Solarland.SolarPreservedBotManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2181d70
};

// Class Solarland.SolarPreservedBotPopTask
// Size: 0xb0 (Inherited: 0x28)
struct USolarPreservedBotPopTask : UObject {
	int32_t CurrentTaskID; // 0x28(0x04)
	char pad_2C[0x14]; // 0x2c(0x14)
	struct TArray<struct FVector> PickedTeleportCenters; // 0x40(0x10)
	struct TArray<struct ASolarPlayerState*> FailedBots; // 0x50(0x10)
	struct TArray<struct ASolarBotAIController*> PendingSeparateBots; // 0x60(0x10)
	struct FMulticastInlineDelegate OnGetTeleportLocationSuccess; // 0x70(0x10)
	struct FMulticastInlineDelegate OnPopBotsFinished; // 0x80(0x10)
	struct FMulticastInlineDelegate OnGetFinalTeleportLocSuccess; // 0x90(0x10)
	struct FMulticastInlineDelegate OnGetFinalTeleportLocFail; // 0xa0(0x10)

	struct FVector GetWarmTargetLocation(); // Function Solarland.SolarPreservedBotPopTask.GetWarmTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2182130
};

// Class Solarland.SolarPrimaryAssetDirectoryLabel
// Size: 0x60 (Inherited: 0x30)
struct USolarPrimaryAssetDirectoryLabel : UPrimaryDataAsset {
	struct FPrimaryAssetRules Rules; // 0x30(0x0c)
	char bIsRuntimeLabel : 1; // 0x3c(0x01)
	char pad_3C_1 : 7; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	struct TArray<struct FDirectoryPath> ExplicitDirectories; // 0x40(0x10)
	struct TArray<struct TSoftObjectPtr<UObject>> ExplicitAssets; // 0x50(0x10)
};

// Class Solarland.SolarProgressiveInteractButton
// Size: 0x3e8 (Inherited: 0x348)
struct USolarProgressiveInteractButton : USolarUserWidget {
	struct FMulticastInlineDelegate OnCompleteDelegate; // 0x348(0x10)
	struct FMulticastInlineDelegate OnCancelDelegate; // 0x358(0x10)
	struct FMulticastInlineDelegate OnStartInteract; // 0x368(0x10)
	char pad_378[0x1c]; // 0x378(0x1c)
	char bIsInCD : 1; // 0x394(0x01)
	char pad_394_1 : 7; // 0x394(0x01)
	char pad_395[0xb]; // 0x395(0x0b)
	struct UGaugeImage* Image_GameProgressBar; // 0x3a0(0x08)
	struct USolarTextBlock* Text_GameProgressTime; // 0x3a8(0x08)
	struct UButton* BTN_GameProgressCancel; // 0x3b0(0x08)
	struct UTextBlock* Text_GameProgressTips; // 0x3b8(0x08)
	struct UHorizontalBox* HorizontalBox_Cancel; // 0x3c0(0x08)
	struct UHUDPassiveHeadWidget* Panel_PassiveBuff; // 0x3c8(0x08)
	struct UOverlay* Overlay_CD; // 0x3d0(0x08)
	struct UGaugeImage* Image_CD; // 0x3d8(0x08)
	struct USolarTextBlock* Txt_CDTime; // 0x3e0(0x08)

	void UpdateGameProgressTipsText(int32_t InTextId); // Function Solarland.SolarProgressiveInteractButton.UpdateGameProgressTipsText // (Final|Native|Protected) // @ game+0x2183850
	void UpdateGameProgressText(); // Function Solarland.SolarProgressiveInteractButton.UpdateGameProgressText // (Final|Native|Protected) // @ game+0x2183830
	void UpdateGameProgressBarPercent(float InPercent); // Function Solarland.SolarProgressiveInteractButton.UpdateGameProgressBarPercent // (Final|Native|Protected) // @ game+0x21837b0
	void UpdateGameProgress(float InAddition); // Function Solarland.SolarProgressiveInteractButton.UpdateGameProgress // (Final|Native|Protected) // @ game+0x2183730
	void TryCancelInteraction(); // Function Solarland.SolarProgressiveInteractButton.TryCancelInteraction // (Final|Native|Public|BlueprintCallable) // @ game+0x2182590
	void StopGameProgress(int32_t InActionID); // Function Solarland.SolarProgressiveInteractButton.StopGameProgress // (Final|Native|Protected) // @ game+0x2182e40
	void StopCountDownProgress(int32_t InActionID); // Function Solarland.SolarProgressiveInteractButton.StopCountDownProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x2182db0
	void StartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarProgressiveInteractButton.StartCountDownProgress // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2182c70
	void SimpleDynamicMulticastDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarProgressiveInteractButton.SimpleDynamicMulticastDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void ShowPassiveBuff(int32_t CharacterId, int32_t LocalTextId); // Function Solarland.SolarProgressiveInteractButton.ShowPassiveBuff // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshToPreInteract(); // Function Solarland.SolarProgressiveInteractButton.RefreshToPreInteract // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshToNonCancellableInteracting(); // Function Solarland.SolarProgressiveInteractButton.RefreshToNonCancellableInteracting // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshToCancellableInteracting(); // Function Solarland.SolarProgressiveInteractButton.RefreshToCancellableInteracting // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnSteamCancelCountDown(); // Function Solarland.SolarProgressiveInteractButton.OnSteamCancelCountDown // (Final|Native|Protected) // @ game+0x8e9ae0
	void OnParentVisibilityChanged(bool bVisible); // Function Solarland.SolarProgressiveInteractButton.OnParentVisibilityChanged // (Final|Native|Public) // @ game+0x2182800
	void OnCompleteInternal(); // Function Solarland.SolarProgressiveInteractButton.OnCompleteInternal // (Final|Native|Protected) // @ game+0x21826c0
	void OnCancelButtonClicked(); // Function Solarland.SolarProgressiveInteractButton.OnCancelButtonClicked // (Final|Native|Protected) // @ game+0x2182590
	void HidePassiveBuff(); // Function Solarland.SolarProgressiveInteractButton.HidePassiveBuff // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void EnterCD(float TotalTime, float StartTime); // Function Solarland.SolarProgressiveInteractButton.EnterCD // (Final|Native|Public|BlueprintCallable) // @ game+0x2181ca0
	void BP_UpdateStateView(enum class ECountDownState InState); // Function Solarland.SolarProgressiveInteractButton.BP_UpdateStateView // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarProjBullet
// Size: 0x508 (Inherited: 0x378)
struct ASolarProjBullet : ASolarBullet {
	char pad_378[0x18]; // 0x378(0x18)
	struct UShapeComponent* CollisionComp; // 0x390(0x08)
	struct UProjectileMovementComponent* MovementComp; // 0x398(0x08)
	char pad_3A0[0xa0]; // 0x3a0(0xa0)
	struct FVector SpawnedLocation; // 0x440(0x0c)
	char pad_44C[0x5c]; // 0x44c(0x5c)
	struct UAkComponent* AkAudioComponent; // 0x4a8(0x08)
	struct UParticleSystemComponent* CurrentTrajectoryParticle; // 0x4b0(0x08)
	bool bAttachToActorOnStop; // 0x4b8(0x01)
	char pad_4B9[0x3]; // 0x4b9(0x03)
	float DeferExplodeTime; // 0x4bc(0x04)
	float FlySoundPlayDistance; // 0x4c0(0x04)
	bool bForceExplodeOnLifeSpanExpired; // 0x4c4(0x01)
	char pad_4C5[0x3]; // 0x4c5(0x03)
	struct TArray<struct AActor*> HitActorImmediateExplodeArray; // 0x4c8(0x10)
	struct UParticleSystem* ExplosionParticle; // 0x4d8(0x08)
	struct FString ExplosionSoundName; // 0x4e0(0x10)
	float ServerWaitClientTime; // 0x4f0(0x04)
	char pad_4F4[0x4]; // 0x4f4(0x04)
	struct UGameplayAbility* BulletGameplayAbilityClass; // 0x4f8(0x08)
	char pad_500[0x8]; // 0x500(0x08)

	void StopSound(enum class EShootingSoundOpt Opt); // Function Solarland.SolarProjBullet.StopSound // (Final|Native|Protected|BlueprintCallable) // @ game+0x218a0b0
	void StartSound(enum class EShootingSoundOpt Opt); // Function Solarland.SolarProjBullet.StartSound // (Final|Native|Protected|BlueprintCallable) // @ game+0x218a030
	void OnTeamIgnoreCollisionActorChange(bool bAdd, struct AActor* InActor, char TeamID); // Function Solarland.SolarProjBullet.OnTeamIgnoreCollisionActorChange // (Final|Native|Protected) // @ game+0x2189b00
	void OnStop(struct FHitResult& HitResult); // Function Solarland.SolarProjBullet.OnStop // (Final|Native|Protected|HasOutParms) // @ game+0x2189a20
	void OnAttachedActorDestroyed(struct AActor* Other); // Function Solarland.SolarProjBullet.OnAttachedActorDestroyed // (Final|Native|Protected) // @ game+0x2189380
	void K2_OnExplode(); // Function Solarland.SolarProjBullet.K2_OnExplode // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarProjBoxBullet
// Size: 0x510 (Inherited: 0x508)
struct ASolarProjBoxBullet : ASolarProjBullet {
	int32_t BoxBulletIndex; // 0x508(0x04)
	char pad_50C[0x4]; // 0x50c(0x04)
};

// Class Solarland.SolarProjectileMovementComponent
// Size: 0x1d0 (Inherited: 0x1d0)
struct USolarProjectileMovementComponent : UProjectileMovementComponent {
};

// Class Solarland.SolarQuickSummonProxy
// Size: 0x28 (Inherited: 0x28)
struct USolarQuickSummonProxy : UObject {

	bool TryGetSummonHitResult(struct FHitResult& OutHitResult, struct AActor* InSummoner, struct USolarSummonDetectionConfig* InSummonConfig); // Function Solarland.SolarQuickSummonProxy.TryGetSummonHitResult // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x218a200
	bool CanSummonForward(struct FHitResult& OutHitResult, struct AActor* InSummoner, struct USolarSummonDetectionConfig* InSummonConfig, struct TArray<float> InDistanceArray, float InUpHeight, float InDownHeight); // Function Solarland.SolarQuickSummonProxy.CanSummonForward // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2188f20
	bool CanSummonFootDown(struct FHitResult& OutHitResult, struct AActor* InSummoner, struct USolarSummonDetectionConfig* InSummonConfig, float InUpHeight, float InDownHeight); // Function Solarland.SolarQuickSummonProxy.CanSummonFootDown // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2188d30
	bool CanSummonAround(struct FHitResult& OutHitResult, struct AActor* InSummoner, struct USolarSummonDetectionConfig* InSummonConfig, int32_t InCheckNum, float InRadius, float InUpHeight, float InDownHeight); // Function Solarland.SolarQuickSummonProxy.CanSummonAround // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2188ac0
};

// Class Solarland.SolarRadarBase
// Size: 0x3a0 (Inherited: 0x228)
struct ASolarRadarBase : AActor {
	enum class ERadarType RadarType; // 0x228(0x01)
	bool bSuperRadar; // 0x229(0x01)
	char SuperRadarMaxCount; // 0x22a(0x01)
	char pad_22B[0x1]; // 0x22b(0x01)
	float EffectRadius; // 0x22c(0x04)
	struct FVector2D EffectSize; // 0x230(0x08)
	bool bTeamShare; // 0x238(0x01)
	bool bNotifyEnemy; // 0x239(0x01)
	char pad_23A[0x2]; // 0x23a(0x02)
	struct FGameplayTag RadarImmunityTag; // 0x23c(0x08)
	bool bUniqueExist; // 0x244(0x01)
	bool bDisplayOnMap; // 0x245(0x01)
	char pad_246[0x2]; // 0x246(0x02)
	struct TArray<enum class EActorRegisterType> ScanTargetTypes; // 0x248(0x10)
	bool bShowTowards; // 0x258(0x01)
	bool bMarkPlayer; // 0x259(0x01)
	char pad_25A[0x2]; // 0x25a(0x02)
	float DisplayTime; // 0x25c(0x04)
	float ScanFrequency; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
	struct TMap<struct AActor*, struct FRadarDelegateHandle> ProcessingActorsImmunityTagsHandleMap; // 0x268(0x50)
	char pad_2B8[0x48]; // 0x2b8(0x48)
	struct FGameplayAbilitySpecHandle RadarHandle; // 0x300(0x04)
	char pad_304[0x4]; // 0x304(0x04)
	bool bPerspectiveInScene; // 0x308(0x01)
	bool bAddWorldMark; // 0x309(0x01)
	char pad_30A[0x2]; // 0x30a(0x02)
	struct FGameplayCueTag CharacterPerspectiveCueTag; // 0x30c(0x08)
	struct FGameplayCueTag CharacterPerspectiveInSmokeCueTag; // 0x314(0x08)
	char pad_31C[0x4]; // 0x31c(0x04)
	struct TArray<struct AActor*> PerspectiveedActors; // 0x320(0x10)
	struct TMap<struct AActor*, struct FPerspectiveActorInfo> ProcessingActors; // 0x330(0x50)
	struct TArray<struct FString> OneTimeScannedPlayerIDs; // 0x380(0x10)
	struct TArray<struct ASolarCharacter*> ScanNotifiedPlayers; // 0x390(0x10)

	void UpdatePerspectiveActor(); // Function Solarland.SolarRadarBase.UpdatePerspectiveActor // (Final|Native|Private) // @ game+0x218a430
	void ToggleWorldMarkByActor(struct AActor* InTargetActor, bool bInAdd); // Function Solarland.SolarRadarBase.ToggleWorldMarkByActor // (Final|Native|Private) // @ game+0x218a130
	struct FTransform ServerSpawningRadar(struct APawn* RadarOwner, struct ASolarCharacter* RadarInstigator, struct FGameplayAbilitySpecHandle& InRadarHandle, float InLifeTime); // Function Solarland.SolarRadarBase.ServerSpawningRadar // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2189e00
	void ServerOneTimeScanStart(); // Function Solarland.SolarRadarBase.ServerOneTimeScanStart // (Final|Native|Private) // @ game+0x2189de0
	void RemovePerspectivedCharacter(struct ASolarCharacter* InTargetCharacter); // Function Solarland.SolarRadarBase.RemovePerspectivedCharacter // (Final|Native|Private) // @ game+0x2189d30
	void PerspectOneTimeScannedActor(struct AActor* InActor); // Function Solarland.SolarRadarBase.PerspectOneTimeScannedActor // (Final|Native|Private) // @ game+0x2189c10
	void PerspectiveTargetCharacter(struct ASolarCharacter* InTargetCharacter); // Function Solarland.SolarRadarBase.PerspectiveTargetCharacter // (Final|Native|Private) // @ game+0x2189ca0
	void OnRep_OneTimeScannedPlayerIDs(); // Function Solarland.SolarRadarBase.OnRep_OneTimeScannedPlayerIDs // (Final|Native|Private) // @ game+0x21899e0
	void AddPerspectiveDatas(struct AActor* InActor, struct UMeshComponent* InMesh); // Function Solarland.SolarRadarBase.AddPerspectiveDatas // (Final|Native|Private) // @ game+0x21889c0
};

// Class Solarland.SolarRadarComponent
// Size: 0x1a0 (Inherited: 0xb0)
struct USolarRadarComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct URadarScanSoundDataAsset* RadarScanSoundDataAsset; // 0xb8(0x08)
	struct UUserWidget* ScannedScreenUIClass; // 0xc0(0x08)
	struct FName ScannedEffectID; // 0xc8(0x08)
	char pad_D0[0x18]; // 0xd0(0x18)
	struct UUserWidget* CreatedScreenUI; // 0xe8(0x08)
	struct FTimerHandle DetectedTimerHandle; // 0xf0(0x08)
	int32_t TimerHandleCounter; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct TMap<int32_t, struct FTimerHandle> DetectedTimerHandles; // 0x100(0x50)
	struct ASolarCharacter* CharacterOwner; // 0x150(0x08)
	struct TArray<struct FScannedInfo> CurrentScanResults; // 0x158(0x10)
	float CurrentSpanTimer; // 0x168(0x04)
	char pad_16C[0x4]; // 0x16c(0x04)
	struct TArray<struct FName> ActivedRadarTags; // 0x170(0x10)
	struct FMaterialChangeHandle DetectedMaterialHandle; // 0x180(0x08)
	char pad_188[0x18]; // 0x188(0x18)

	void WarningByRadarNotifation(float InRemainingTime); // Function Solarland.SolarRadarComponent.WarningByRadarNotifation // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnRecivedScanResults(); // Function Solarland.SolarRadarComponent.OnRecivedScanResults // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnRecieveOnceScanStart(int32_t ScanedNum, bool bSuperRader); // Function Solarland.SolarRadarComponent.OnRecieveOnceScanStart // (Final|Native|Public) // @ game+0x21898d0
	void OnRadarScanStart(struct FRadarDataSpec& RadarDataSpec); // Function Solarland.SolarRadarComponent.OnRadarScanStart // (Final|Native|Public|HasOutParms) // @ game+0x21897f0
	void OnRadarScanEnd(struct FRadarDataSpec& RadarDataSpec); // Function Solarland.SolarRadarComponent.OnRadarScanEnd // (Final|Native|Public|HasOutParms) // @ game+0x2189730
	void OnRadarImmunityTagChanged(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarRadarComponent.OnRadarImmunityTagChanged // (Final|Native|Public) // @ game+0x2189660
	void OnDetectedByRadar(bool bOnceScan, float InDetectedTime, struct FGameplayTag& InRadarImmunityTag, bool bSuperRader); // Function Solarland.SolarRadarComponent.OnDetectedByRadar // (Final|Native|Public|HasOutParms) // @ game+0x2189410
	void OnceScanSuccessNotifation(int32_t ScanedNum); // Function Solarland.SolarRadarComponent.OnceScanSuccessNotifation // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnceScanFailedNotifation(); // Function Solarland.SolarRadarComponent.OnceScanFailedNotifation // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void MarkedByOnceScanNotifation(); // Function Solarland.SolarRadarComponent.MarkedByOnceScanNotifation // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct FString GetModuleName_Implementation(); // Function Solarland.SolarRadarComponent.GetModuleName_Implementation // (Native|Public|Const) // @ game+0x21892d0
	void ExposedByRadarNotifation(); // Function Solarland.SolarRadarComponent.ExposedByRadarNotifation // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ChangeDetectedMaterial(bool bInDetected); // Function Solarland.SolarRadarComponent.ChangeDetectedMaterial // (Final|Native|Public) // @ game+0x21891b0
};

// Class Solarland.RadarScanSoundDataAsset
// Size: 0x90 (Inherited: 0x30)
struct URadarScanSoundDataAsset : UDataAsset {
	struct FString RadarScan_Loop_Start; // 0x30(0x10)
	struct FString RadarScan_Loop_End; // 0x40(0x10)
	struct FString RadarScan_Once_Success; // 0x50(0x10)
	struct FString RadarScan_Once_Failed; // 0x60(0x10)
	struct FString SuperRadarScan_FoundEnemy; // 0x70(0x10)
	struct FString SuperRadarScan_FoundByEnemy; // 0x80(0x10)
};

// Class Solarland.SolarRadarStation
// Size: 0x290 (Inherited: 0x238)
struct ASolarRadarStation : ASolarInteractableActor {
	bool bEnable; // 0x238(0x01)
	char pad_239[0x3]; // 0x239(0x03)
	int32_t Zone; // 0x23c(0x04)
	float MaxTirggerDistance; // 0x240(0x04)
	float MaxTirggerAngle; // 0x244(0x04)
	struct FGameplayTag CDTag; // 0x248(0x08)
	bool bBroken; // 0x250(0x01)
	bool bInCD; // 0x251(0x01)
	char pad_252[0x2]; // 0x252(0x02)
	float CoolDownTime; // 0x254(0x04)
	float CostEnergy; // 0x258(0x04)
	float RemainCDTime; // 0x25c(0x04)
	struct USphereComponent* CollisionComp; // 0x260(0x08)
	struct UStaticMeshComponent* NormalMesh; // 0x268(0x08)
	struct USolarObjAbilitySystemComponent* ObjAbilitySystemComp; // 0x270(0x08)
	struct USolarObjGameplayAbility* ObjAbilityClass; // 0x278(0x08)
	struct FGameplayAbilitySpecHandle ObjAbilityHandle; // 0x280(0x04)
	char pad_284[0xc]; // 0x284(0x0c)

	bool TryTriggerRadarStation(struct ASolarCharacter* InUser); // Function Solarland.SolarRadarStation.TryTriggerRadarStation // (Final|Native|Public) // @ game+0x218a390
	void ServerInitailizeAbility(); // Function Solarland.SolarRadarStation.ServerInitailizeAbility // (Final|Native|Protected) // @ game+0x2189dc0
	void OnResetCD(); // Function Solarland.SolarRadarStation.OnResetCD // (Final|Native|Protected) // @ game+0x2189a00
	void OnRep_Broken(); // Function Solarland.SolarRadarStation.OnRep_Broken // (Final|Native|Protected) // @ game+0x21899c0
	void OnRep_BInCD(); // Function Solarland.SolarRadarStation.OnRep_BInCD // (Final|Native|Protected) // @ game+0x21899a0
	void OnRadarStationCDChanged(); // Function Solarland.SolarRadarStation.OnRadarStationCDChanged // (Final|Native|Protected) // @ game+0x21898b0
	void OnPlayStartScanEffect(); // Function Solarland.SolarRadarStation.OnPlayStartScanEffect // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnGameplayTagChanged(struct FGameplayTag Tag, bool bAdd); // Function Solarland.SolarRadarStation.OnGameplayTagChanged // (Final|Native|Protected) // @ game+0x2189590
	void OnClientStartScan(); // Function Solarland.SolarRadarStation.OnClientStartScan // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1554600
	void OnBrokenChanged(bool InBroken); // Function Solarland.SolarRadarStation.OnBrokenChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void InitailizeAbilityParams(); // Function Solarland.SolarRadarStation.InitailizeAbilityParams // (Final|Native|Protected) // @ game+0x2189360
	float GetAbilityReaminingCD(); // Function Solarland.SolarRadarStation.GetAbilityReaminingCD // (Final|Native|Public) // @ game+0x21892a0
	float GetAbilityCostEnergy(); // Function Solarland.SolarRadarStation.GetAbilityCostEnergy // (Final|Native|Public) // @ game+0x2189270
	float GetAbilityCooldown(); // Function Solarland.SolarRadarStation.GetAbilityCooldown // (Final|Native|Public) // @ game+0x2189240
	bool CanActivateNow(); // Function Solarland.SolarRadarStation.CanActivateNow // (Final|Native|Public) // @ game+0x2188a90
};

// Class Solarland.SolarRedHintManager
// Size: 0x38 (Inherited: 0x30)
struct USolarRedHintManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarRenderParametersBasedOnDifferentStates
// Size: 0x230 (Inherited: 0x228)
struct ASolarRenderParametersBasedOnDifferentStates : AActor {
	struct UDataTable* StreamingDistanceDataTable; // 0x228(0x08)

	void SetRelativeStreamingDistanceScale(enum class ECharacterSkydivingState InCharacterSkydivingState); // Function Solarland.SolarRenderParametersBasedOnDifferentStates.SetRelativeStreamingDistanceScale // (Final|Native|Public|BlueprintCallable) // @ game+0x2189fb0
};

// Class Solarland.SolarReplayCameraControlComp
// Size: 0x140 (Inherited: 0xb0)
struct USolarReplayCameraControlComp : UActorComponent {
	struct FMulticastInlineDelegate OnReplayCameraModeChanged; // 0xb0(0x10)
	float DefaultSpeed; // 0xc0(0x04)
	float MoveSpeedChangeStep; // 0xc4(0x04)
	float MoveSpeedMin; // 0xc8(0x04)
	float MoveSpeedMax; // 0xcc(0x04)
	float SpeedUpScale; // 0xd0(0x04)
	float DefaultTurnRate; // 0xd4(0x04)
	float TurnRateChangeStep; // 0xd8(0x04)
	float TurnSpeedMin; // 0xdc(0x04)
	float TurnSpeedMax; // 0xe0(0x04)
	float DistanceChangeStep; // 0xe4(0x04)
	struct ASolarPlayerState* CurrentTarget; // 0xe8(0x08)
	char pad_F0[0x10]; // 0xf0(0x10)
	struct ASolarSpectateInfo* ReplayPCSpectateInfo; // 0x100(0x08)
	char pad_108[0x38]; // 0x108(0x38)

	void OnStreamingReadied(); // Function Solarland.SolarReplayCameraControlComp.OnStreamingReadied // (Final|Native|Private) // @ game+0x218e070
	void OnSpectateInfoRep(struct ASolarSpectateInfo* InSpecInfo); // Function Solarland.SolarReplayCameraControlComp.OnSpectateInfoRep // (Final|Native|Private) // @ game+0x218dfe0
	void OnReplayCameraModeChanged__DelegateSignature(enum class EReplayCameraMode OldMode, enum class EReplayCameraMode CurMode); // DelegateFunction Solarland.SolarReplayCameraControlComp.OnReplayCameraModeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnPlayingScrubStart(); // Function Solarland.SolarReplayCameraControlComp.OnPlayingScrubStart // (Final|Native|Private) // @ game+0x218df80
	void OnPlayingScrubCharactersCreated(); // Function Solarland.SolarReplayCameraControlComp.OnPlayingScrubCharactersCreated // (Final|Native|Private) // @ game+0x218df60
	void OnPlayingFirstScrubFinished(); // Function Solarland.SolarReplayCameraControlComp.OnPlayingFirstScrubFinished // (Final|Native|Private) // @ game+0x218df40
	enum class EReplayCameraMode GetReplayCameraMode(); // Function Solarland.SolarReplayCameraControlComp.GetReplayCameraMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218d680
};

// Class Solarland.SolarReplayHighlightComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USolarReplayHighlightComponent : UActorComponent {
};

// Class Solarland.SolarReplayManager
// Size: 0x490 (Inherited: 0x28)
struct USolarReplayManager : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	struct FSoftObjectPath WaitingOBMap; // 0x40(0x18)
	struct FSoftClassPath WaitingReplayStartUIClass; // 0x58(0x18)
	struct FSoftClassPath OBModeSpectatorPawnClass; // 0x70(0x18)
	struct FSoftClassPath OBModeHUDClass; // 0x88(0x18)
	struct FSoftClassPath OBHeadInfoWidgetClass; // 0xa0(0x18)
	struct FGameplayCueTag PerspectiveCueTag; // 0xb8(0x08)
	struct FGameplayCueTag PerspectiveInSmokeCueTag; // 0xc0(0x08)
	struct FSoftObjectPath PerspectiveMaterial; // 0xc8(0x18)
	struct FAddMultiplePassMaterialChangeParams PerspectiveMaterialParams; // 0xe0(0x40)
	struct FSoftClassPath DirectorModeSpectatorPawnClass; // 0x120(0x18)
	struct FName DirectorModeInputModeName; // 0x138(0x08)
	float UpdateDistanceInterval; // 0x140(0x04)
	float OBTeamListNearbyDistance; // 0x144(0x04)
	float OBHeadInfoNearDistance; // 0x148(0x04)
	float OBHeadInfoFarDistance; // 0x14c(0x04)
	float OBDamageTextHideDistance; // 0x150(0x04)
	float OBDelayTimeForTournament; // 0x154(0x04)
	float OBLivePreDownloadTime; // 0x158(0x04)
	float OBSkipBeginningTime; // 0x15c(0x04)
	struct TArray<float> OBPlaybackSpeedList; // 0x160(0x10)
	char OBPlaybackSpeedDefaultIndex; // 0x170(0x01)
	char OBLiveDelayChunkCount; // 0x171(0x01)
	char pad_172[0x2]; // 0x172(0x02)
	struct FName OBLockCameraBindBoneName; // 0x174(0x08)
	struct FVector OBLockCameraBindBoneOffset; // 0x17c(0x0c)
	float OBInitLockDistance; // 0x188(0x04)
	float OBMinLockDistance; // 0x18c(0x04)
	float OBMaxLockDistance; // 0x190(0x04)
	float OBMinLockPitch; // 0x194(0x04)
	float OBMaxLockPitch; // 0x198(0x04)
	float OBPitchAdjustTriggerFloor; // 0x19c(0x04)
	float OBPitchAdjustValue; // 0x1a0(0x04)
	int32_t ReplayCacheFileRetentionTimeInSeconds; // 0x1a4(0x04)
	char pad_1A8[0x8]; // 0x1a8(0x08)
	struct FMulticastInlineDelegate OnPlayingStartedDelegate; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnPlayingLoadLevelsStartedDelegate; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnPlayingLevelLoadedDelegate; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnPlayingStreamReadiedDelegate; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnPlayingAtEndDelegate; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnPlayingFinishedDelegate; // 0x200(0x10)
	struct FMulticastInlineDelegate OnRecordingStartedDelegate; // 0x210(0x10)
	struct FMulticastInlineDelegate OnRecordingStartFailedDelegate; // 0x220(0x10)
	struct FMulticastInlineDelegate OnRecordingFinishedDelegate; // 0x230(0x10)
	struct FMulticastInlineDelegate OnPlayingScrubStartDelegate; // 0x240(0x10)
	struct FMulticastInlineDelegate OnPlayingPreScrubDelegate; // 0x250(0x10)
	struct FMulticastInlineDelegate OnPlayingFirstScrubFinishedDelegate; // 0x260(0x10)
	struct FMulticastInlineDelegate OnPlayingScrubFailedDelegate; // 0x270(0x10)
	struct FMulticastInlineDelegate OnPlayingScrubCharactersCreatedDelegate; // 0x280(0x10)
	struct FMulticastInlineDelegate OnPlayingPauseDelegate; // 0x290(0x10)
	struct FMulticastInlineDelegate OnPlayingContinueDelegate; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnPlaybackSpeedChangedDelegate; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnCheatersPlayerIDChanged; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnAutoPlaybackSpeedUpStart; // 0x2d0(0x10)
	struct FMulticastInlineDelegate OnAutoPlaybackSpeedUpStop; // 0x2e0(0x10)
	char pad_2F0[0x58]; // 0x2f0(0x58)
	struct UUserWidget* WaitingReplayStartUI; // 0x348(0x08)
	char pad_350[0x140]; // 0x350(0x140)

	void WriteHeaderData(struct TArray<struct FString>& OutHeaderData); // Function Solarland.SolarReplayManager.WriteHeaderData // (Native|Protected|HasOutParms) // @ game+0x218eca0
	void StopRecording(); // Function Solarland.SolarReplayManager.StopRecording // (Final|Native|Public|BlueprintCallable) // @ game+0x218ec40
	void StopPlayReplay(); // Function Solarland.SolarReplayManager.StopPlayReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x218ec20
	void StartRecording(struct FString SessionName, struct FString UploadUrl, enum class ERecordingType ForceRecordingType); // Function Solarland.SolarReplayManager.StartRecording // (Final|Native|Public|BlueprintCallable) // @ game+0x218eac0
	void StartLocalRecordingCurrentBattle(); // Function Solarland.SolarReplayManager.StartLocalRecordingCurrentBattle // (Final|Native|Public|BlueprintCallable) // @ game+0x218eaa0
	void SpeedUpTimeDilation(); // Function Solarland.SolarReplayManager.SpeedUpTimeDilation // (Final|Native|Public|BlueprintCallable) // @ game+0x218ea80
	void SlowDownTimeDilation(); // Function Solarland.SolarReplayManager.SlowDownTimeDilation // (Final|Native|Public|BlueprintCallable) // @ game+0x218e980
	bool ShouldShowProgressBar(); // Function Solarland.SolarReplayManager.ShouldShowProgressBar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218e860
	void SetTimeDilation(float Dilation); // Function Solarland.SolarReplayManager.SetTimeDilation // (Final|Native|Public|BlueprintCallable) // @ game+0x218e750
	void SetStartSpectateTournamentTime(); // Function Solarland.SolarReplayManager.SetStartSpectateTournamentTime // (Final|Native|Public|BlueprintCallable) // @ game+0x218e730
	void SetRequestTryStrategy(float Interval, int32_t Times); // Function Solarland.SolarReplayManager.SetRequestTryStrategy // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetRecordingType(enum class ERecordingType InRecordingType); // Function Solarland.SolarReplayManager.SetRecordingType // (Final|Native|Private|BlueprintCallable) // @ game+0x218e6b0
	void SetReadyToRecord(bool bIsReady, struct TArray<struct FString>& OBPlayerIDs); // Function Solarland.SolarReplayManager.SetReadyToRecord // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetLiveWatchingPlayerForPlaying(struct FString BeWatchingPlayerID); // Function Solarland.SolarReplayManager.SetLiveWatchingPlayerForPlaying // (Final|Native|Protected|BlueprintCallable) // @ game+0x218e610
	void SetEnableCompressForHttpReplay(bool bEnable); // Function Solarland.SolarReplayManager.SetEnableCompressForHttpReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x218e580
	void RetryPlayReplayFromServer(); // Function Solarland.SolarReplayManager.RetryPlayReplayFromServer // (Final|Native|Public|BlueprintCallable) // @ game+0x218e440
	void RequestWatchingLiveOfPlayer(struct FString SolarPlayerID); // Function Solarland.SolarReplayManager.RequestWatchingLiveOfPlayer // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RequestPlayReplayOfCurrentBattle(); // Function Solarland.SolarReplayManager.RequestPlayReplayOfCurrentBattle // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RequestPlayReplay(struct FString InBattleID, bool IsLive); // Function Solarland.SolarReplayManager.RequestPlayReplay // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RequestBattleList(int32_t PageIndex, int32_t PageSize); // Function Solarland.SolarReplayManager.RequestBattleList // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReplayManagerNoParamDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarReplayManager.ReplayManagerNoParamDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void RecordReplayInfosOnRecordingStarted(); // Function Solarland.SolarReplayManager.RecordReplayInfosOnRecordingStarted // (Final|Native|Private|BlueprintCallable) // @ game+0x218e420
	void ReceivePlayingStartFailed(); // Function Solarland.SolarReplayManager.ReceivePlayingStartFailed // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool ReceivePlayingFinished(enum class EReplayPlayingFinishReason reason, char StreamerErrorCode, struct FString StreamerErrorMsg); // Function Solarland.SolarReplayManager.ReceivePlayingFinished // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ProcessHeaderData(struct TArray<struct FString>& HeaderData, struct FString& Error); // Function Solarland.SolarReplayManager.ProcessHeaderData // (Native|Protected|HasOutParms) // @ game+0x218e2e0
	void PlayReplayFromServer(struct FString SessionName, struct FString DownloadUrl); // Function Solarland.SolarReplayManager.PlayReplayFromServer // (Final|Native|Public|BlueprintCallable) // @ game+0x218e1c0
	void PlayReplayFromLocal(struct FString ReplayFileName); // Function Solarland.SolarReplayManager.PlayReplayFromLocal // (Final|Native|Public|BlueprintCallable) // @ game+0x218e0d0
	void PlayingFinishedInternal(); // Function Solarland.SolarReplayManager.PlayingFinishedInternal // (Final|Native|Private|BlueprintCallable) // @ game+0x218e2c0
	void PausePlayReplay(); // Function Solarland.SolarReplayManager.PausePlayReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x218e090
	void OnPlayingFinished(struct UWorld* World); // Function Solarland.SolarReplayManager.OnPlayingFinished // (Final|Native|Private) // @ game+0x218deb0
	void OnPlayingAtEnd(struct UWorld* World); // Function Solarland.SolarReplayManager.OnPlayingAtEnd // (Final|Native|Private) // @ game+0x218de20
	void OnPlayerStopWatchingLive(struct FString StopWatchingPlayerID); // Function Solarland.SolarReplayManager.OnPlayerStopWatchingLive // (Final|Native|Protected|BlueprintCallable) // @ game+0x218dd80
	void OnPlayerStartWatchingLive(struct FString RequestWatchingPlayerID, struct FString BeWatchingPlayerID); // Function Solarland.SolarReplayManager.OnPlayerStartWatchingLive // (Final|Native|Protected|BlueprintCallable) // @ game+0x218dc80
	void OnLiveWatchTargetLost(); // Function Solarland.SolarReplayManager.OnLiveWatchTargetLost // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyTournamentSpectate(bool bIsInLiveReplay); // Function Solarland.SolarReplayManager.NotifyTournamentSpectate // (Final|Native|Public|BlueprintCallable) // @ game+0x218db60
	bool NotifyBackendPlayReplayFinished(); // Function Solarland.SolarReplayManager.NotifyBackendPlayReplayFinished // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void LuaOnPostLoadMapWithWorld(struct FString LevelName); // Function Solarland.SolarReplayManager.LuaOnPostLoadMapWithWorld // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void LuaBindDelegates(); // Function Solarland.SolarReplayManager.LuaBindDelegates // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool IsTournament(); // Function Solarland.SolarReplayManager.IsTournament // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218db30
	bool IsScrubing(); // Function Solarland.SolarReplayManager.IsScrubing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218dad0
	bool IsReplayLive(); // Function Solarland.SolarReplayManager.IsReplayLive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218daa0
	bool IsRecording(); // Function Solarland.SolarReplayManager.IsRecording // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218da70
	bool IsReady(); // Function Solarland.SolarReplayManager.IsReady // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool IsPlaying(); // Function Solarland.SolarReplayManager.IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218da40
	bool IsPlayerBeWatching(struct FString SolarPlayerID); // Function Solarland.SolarReplayManager.IsPlayerBeWatching // (Final|Native|Public|BlueprintCallable) // @ game+0x218d990
	bool IsPausing(); // Function Solarland.SolarReplayManager.IsPausing // (Final|Native|Public|BlueprintCallable) // @ game+0x218d960
	bool IsLocal(); // Function Solarland.SolarReplayManager.IsLocal // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218d930
	bool IsLiveWatchOnly(); // Function Solarland.SolarReplayManager.IsLiveWatchOnly // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218d900
	bool IsInState(enum class EReplayManagerState CheckState); // Function Solarland.SolarReplayManager.IsInState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218d870
	bool IsACheater(struct FString PlayerId); // Function Solarland.SolarReplayManager.IsACheater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218d7c0
	void GotoTimeInSecond(float Second); // Function Solarland.SolarReplayManager.GotoTimeInSecond // (Final|Native|Public|BlueprintCallable) // @ game+0x218d740
	float GetTotalSessionTimeInSecond(); // Function Solarland.SolarReplayManager.GetTotalSessionTimeInSecond // (Final|Native|Public|BlueprintCallable) // @ game+0x218d6e0
	float GetTimeDilation(); // Function Solarland.SolarReplayManager.GetTimeDilation // (Final|Native|Public|BlueprintCallable) // @ game+0x218d6b0
	void GetStartRecordingParams(struct FStartRecordingParams& OutParams); // Function Solarland.SolarReplayManager.GetStartRecordingParams // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	enum class ERecordingType GetRecordingType(); // Function Solarland.SolarReplayManager.GetRecordingType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218d660
	float GetCurrentSessionTimeInSecond(); // Function Solarland.SolarReplayManager.GetCurrentSessionTimeInSecond // (Final|Native|Public|BlueprintCallable) // @ game+0x218d510
	struct FString GetCurrentSessionName(); // Function Solarland.SolarReplayManager.GetCurrentSessionName // (Final|Native|Public|BlueprintCallable) // @ game+0x218d450
	struct FString GetBeWatchingPlayerID(); // Function Solarland.SolarReplayManager.GetBeWatchingPlayerID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218d410
	struct FString GetBattleIDByIndex(int32_t Index); // Function Solarland.SolarReplayManager.GetBattleIDByIndex // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void EnterSettlementStage(); // Function Solarland.SolarReplayManager.EnterSettlementStage // (Final|Native|Public|BlueprintCallable) // @ game+0x218d3a0
	void DestroyWaitingOBStartUI(); // Function Solarland.SolarReplayManager.DestroyWaitingOBStartUI // (Final|Native|Private|BlueprintCallable) // @ game+0x218d360
	void DebugAllPlayerIsBeWatching(bool bAllPlayerIsBeWatching); // Function Solarland.SolarReplayManager.DebugAllPlayerIsBeWatching // (Final|Native|Protected|BlueprintCallable) // @ game+0x218d2d0
	void CreateWaitingOBStartUI(); // Function Solarland.SolarReplayManager.CreateWaitingOBStartUI // (Final|Native|Private|BlueprintCallable) // @ game+0x218d2b0
	void ContinuePlayReplay(); // Function Solarland.SolarReplayManager.ContinuePlayReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x218d270
	void AppendCheatersPlayerID(struct TArray<struct FString>& InCheatersPlayerID); // Function Solarland.SolarReplayManager.AppendCheatersPlayerID // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x218d1a0
};

// Class Solarland.SolarReplayPerspectiveEffect
// Size: 0x1a8 (Inherited: 0x160)
struct USolarReplayPerspectiveEffect : UMaterialEffectBase {
	char pad_160[0x48]; // 0x160(0x48)
};

// Class Solarland.SolarReplayPerspectiveInSmokeEffect
// Size: 0x1a8 (Inherited: 0x1a8)
struct USolarReplayPerspectiveInSmokeEffect : USolarReplayPerspectiveEffect {
};

// Class Solarland.SolarReplayPlayerController
// Size: 0xf48 (Inherited: 0xe58)
struct ASolarReplayPlayerController : ASolarPlayerController {
	float WaitFirstTeamNumberInputTime; // 0xe58(0x04)
	float WaitTeamNumberInputTime; // 0xe5c(0x04)
	struct USolarReplayCameraControlComp* SolarReplayCameraControlComp; // 0xe60(0x08)
	struct FMulticastInlineDelegate OnEmitBulletDelegate; // 0xe68(0x10)
	struct TMap<struct FString, float> HorizontalDistanceBetweenPlayerAndOBCamera; // 0xe78(0x50)
	struct USolarReplayManager* ReplayManager; // 0xec8(0x08)
	struct UDemoNetDriver* DemoNetDriver; // 0xed0(0x08)
	char pad_ED8[0x20]; // 0xed8(0x20)
	struct TMap<char, struct UMaterialInstanceDynamic*> TeamNumToPerspectiveMaterialMap; // 0xef8(0x50)

	void UpdateDistanceBetweenOBCamAndPlayer(); // Function Solarland.SolarReplayPlayerController.UpdateDistanceBetweenOBCamAndPlayer // (Final|Native|Private) // @ game+0x218ec80
	void StopSpectatePlayer(); // Function Solarland.SolarReplayPlayerController.StopSpectatePlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x218ec60
	void StopPlayReplay(); // Function Solarland.SolarReplayPlayerController.StopPlayReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x218ec00
	void SpectateVictim(); // Function Solarland.SolarReplayPlayerController.SpectateVictim // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x218ea60
	void SpectatePlayerByPlayerID(struct FString SolarPlayerID); // Function Solarland.SolarReplayPlayerController.SpectatePlayerByPlayerID // (Final|Native|Public|BlueprintCallable) // @ game+0x218e9c0
	void SpectateAttacker(); // Function Solarland.SolarReplayPlayerController.SpectateAttacker // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x218e9a0
	void SolarGM_ToggleProgressControlButton(); // Function Solarland.SolarReplayPlayerController.SolarGM_ToggleProgressControlButton // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void SolarGM_SetWatchingLiveTarget(struct FString InPlayerID); // Function Solarland.SolarReplayPlayerController.SolarGM_SetWatchingLiveTarget // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x20a3480
	void SolarGM_ReplayDebugLog(bool bOpenDebugLog); // Function Solarland.SolarReplayPlayerController.SolarGM_ReplayDebugLog // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1f99610
	bool ShowDamageText(struct FSolarDamageText& InDamageText); // Function Solarland.SolarReplayPlayerController.ShowDamageText // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x218e890
	void SetUISettingHeadInfoStyle(enum class EOBPlayerHeadInfoWidgetStyle& InType); // Function Solarland.SolarReplayPlayerController.SetUISettingHeadInfoStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x218e7d0
	void SetDamageTextVisible(bool bIsVisible); // Function Solarland.SolarReplayPlayerController.SetDamageTextVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x218e4f0
	void SetBattleOBHUDType(enum class EBattleOBHUDType& Type); // Function Solarland.SolarReplayPlayerController.SetBattleOBHUDType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x218e460
	void PauseReplay(); // Function Solarland.SolarReplayPlayerController.PauseReplay // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x218e0b0
	void OnReplayPlayingLevelLoaded(); // Function Solarland.SolarReplayPlayerController.OnReplayPlayingLevelLoaded // (Final|Native|Private) // @ game+0x218dfc0
	void OnReplayPlayingFirstScrubFinished(); // Function Solarland.SolarReplayPlayerController.OnReplayPlayingFirstScrubFinished // (Final|Native|Private) // @ game+0x218dfa0
	void OnPlayingFinished(); // Function Solarland.SolarReplayPlayerController.OnPlayingFinished // (Final|Native|Private) // @ game+0x8e9ae0
	void OnEmitBulletDelegate__DelegateSignature(struct FVector StartLoc, struct FVector AimLoc, struct FString SolarPlayerID); // DelegateFunction Solarland.SolarReplayPlayerController.OnEmitBulletDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasDefaults) // @ game+0x25d85b0
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.SolarReplayPlayerController.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x218dbf0
	bool IsSpectatingPlayer(); // Function Solarland.SolarReplayPlayerController.IsSpectatingPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218db00
	struct ASolarPlayerState* GetWatchingLiveTarget(); // Function Solarland.SolarReplayPlayerController.GetWatchingLiveTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218d710
	struct TMap<struct FString, float> GetHorizontalDistanceBetweenPlayerAndOBCamera(); // Function Solarland.SolarReplayPlayerController.GetHorizontalDistanceBetweenPlayerAndOBCamera // (Final|Native|Public|BlueprintCallable) // @ game+0x218d5c0
	struct FString GetCurrentSpectatePlayerID(); // Function Solarland.SolarReplayPlayerController.GetCurrentSpectatePlayerID // (Final|Native|Public|BlueprintCallable) // @ game+0x218d540
	enum class EBattleOBHUDType GetBattleOBHUDType(); // Function Solarland.SolarReplayPlayerController.GetBattleOBHUDType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x218d3e0
	void ExitDirectorMode(); // Function Solarland.SolarReplayPlayerController.ExitDirectorMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x218d3c0
	void EnterDirectorMode(); // Function Solarland.SolarReplayPlayerController.EnterDirectorMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x218d380
	void ContinueReplay(); // Function Solarland.SolarReplayPlayerController.ContinueReplay // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x218d290
};

// Class Solarland.SolarReplicationGraph
// Size: 0x6d0 (Inherited: 0x500)
struct USolarReplicationGraph : UReplicationGraph {
	struct TArray<struct UObject*> SpatializedClasses; // 0x4f8(0x10)
	struct TArray<struct UObject*> NonSpatializedChildClasses; // 0x508(0x10)
	struct TArray<struct UObject*> AlwaysRelevantClasses; // 0x518(0x10)
	struct USolarReplicationGraphNode_ForceNetUpdate_ForRejoinConnection* RejoinNode; // 0x528(0x08)
	struct USolarReplicationGraphNode_GridSpatialization2D* GridNode; // 0x530(0x08)
	struct UReplicationGraphNode_ActorList* AlwaysRelevantNode; // 0x538(0x08)
	struct USolarReplicationGraphNode_CustomRelevancy* CustomRelevancyNode; // 0x540(0x08)
	char pad_550[0x48]; // 0x550(0x48)
	struct TMap<char, struct USolarReplicationGraphNode_AlwaysRelevant_ForTeam*> AlwaysRelevantForTeamNodes; // 0x598(0x50)
	char pad_5E8[0xe8]; // 0x5e8(0xe8)

	void UnbindActorToCharacterTeam(struct ASolarCharacter* Character, struct AActor* Actor); // Function Solarland.SolarReplicationGraph.UnbindActorToCharacterTeam // (Final|Native|Public) // @ game+0x2194ea0
	void BindActorToCharacterTeam(struct ASolarCharacter* Character, struct AActor* Actor); // Function Solarland.SolarReplicationGraph.BindActorToCharacterTeam // (Final|Native|Public) // @ game+0x2193320
};

// Class Solarland.SolarReplicationGraphNode_ForceNetUpdate_ForRejoinConnection
// Size: 0x178 (Inherited: 0xd0)
struct USolarReplicationGraphNode_ForceNetUpdate_ForRejoinConnection : UReplicationGraphNode_ActorList {
	struct TSet<struct UNetConnection*> PendingForceNetUpdateConnections; // 0xd0(0x50)
	struct TSet<struct AActor*> PendingForceNetUpdateActors; // 0x120(0x50)
	char pad_170[0x8]; // 0x170(0x08)
};

// Class Solarland.SolarReplicationGraphNode_CustomRelevancy
// Size: 0xe0 (Inherited: 0xd0)
struct USolarReplicationGraphNode_CustomRelevancy : UReplicationGraphNode_ActorList {
	char pad_D0[0x10]; // 0xd0(0x10)
};

// Class Solarland.SolarReplicationGraphNode_AlwaysRelevant_ForConnection
// Size: 0x298 (Inherited: 0x50)
struct USolarReplicationGraphNode_AlwaysRelevant_ForConnection : UReplicationGraphNode {
	char pad_50[0x228]; // 0x50(0x228)
	struct AActor* LastPawn; // 0x278(0x08)
	struct TArray<struct FAlwaysRelevantActorInfo> PastRelevantActors; // 0x280(0x10)
	char pad_290[0x8]; // 0x290(0x08)
};

// Class Solarland.SolarReplicationGraphNode_AlwaysRelevant_ForTeam
// Size: 0xc8 (Inherited: 0x50)
struct USolarReplicationGraphNode_AlwaysRelevant_ForTeam : UReplicationGraphNode {
	struct TArray<struct AActor*> TeamActors; // 0x50(0x10)
	char pad_60[0x10]; // 0x60(0x10)
	struct TSet<struct ASolarCharacter*> LastReplicationActors; // 0x70(0x50)
	struct AActor* LastPawn; // 0xc0(0x08)
};

// Class Solarland.SolarReplicationGraphNode_PlayerStateFrequencyLimiter
// Size: 0x78 (Inherited: 0x50)
struct USolarReplicationGraphNode_PlayerStateFrequencyLimiter : UReplicationGraphNode {
	char pad_50[0x28]; // 0x50(0x28)
};

// Class Solarland.SolarReplicationGraphNode_GridSpatialization2D
// Size: 0x2d0 (Inherited: 0x230)
struct USolarReplicationGraphNode_GridSpatialization2D : UReplicationGraphNode_GridSpatialization2D {
	struct TSet<struct AActor*> PendingForceNetUpdateActors; // 0x228(0x50)
	char pad_280[0x50]; // 0x280(0x50)
};

// Class Solarland.SolarReplicationGraphNode_GridCell
// Size: 0x130 (Inherited: 0x120)
struct USolarReplicationGraphNode_GridCell : UReplicationGraphNode_GridCell {
	struct UReplicationGraphNode_ActorList* ForceNetUpdateNode; // 0x120(0x08)
	char pad_128[0x8]; // 0x128(0x08)
};

// Class Solarland.SolarReplicationGraphDebugActor
// Size: 0x238 (Inherited: 0x238)
struct ASolarReplicationGraphDebugActor : AReplicationGraphDebugActor {

	void ServerSetClassNetCullDistance(struct UObject* Class, float CullDistance); // Function Solarland.SolarReplicationGraphDebugActor.ServerSetClassNetCullDistance // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x21941f0
};

// Class Solarland.SolarResolutionSettings
// Size: 0x28 (Inherited: 0x28)
struct USolarResolutionSettings : UObject {

	void SetScreenModeByNum(int32_t InScreenMode); // Function Solarland.SolarResolutionSettings.SetScreenModeByNum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2194b10
	void SetScreenMode(enum class EWindowMode InScreenMode); // Function Solarland.SolarResolutionSettings.SetScreenMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2194aa0
	enum class EWindowMode GetScreenMode(); // Function Solarland.SolarResolutionSettings.GetScreenMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2193d90
	bool CanViewportSetWindowedMode(); // Function Solarland.SolarResolutionSettings.CanViewportSetWindowedMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21933f0
};

// Class Solarland.SolarResurrectionComponent
// Size: 0x138 (Inherited: 0xb0)
struct USolarResurrectionComponent : UActorComponent {
	char bEnableResurrection; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct ADeathTreasureBox* DeathBox; // 0xb8(0x08)
	struct FVector DeathBoxLoc; // 0xc0(0x0c)
	enum class EResurrectionState ResurrectionState; // 0xcc(0x01)
	char pad_CD[0x3]; // 0xcd(0x03)
	struct FMulticastInlineDelegate OnResurrectionStateChanged; // 0xd0(0x10)
	float CurrentCountDownStartTime; // 0xe0(0x04)
	float CountDownAccTime; // 0xe4(0x04)
	char pad_E8[0x8]; // 0xe8(0x08)
	float ConfigCountDownTime; // 0xf0(0x04)
	float ResurrectionClutchTime; // 0xf4(0x04)
	char pad_F8[0x8]; // 0xf8(0x08)
	char bIsTimeoutCountDownPaused : 1; // 0x100(0x01)
	char pad_100_1 : 7; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
	struct FMulticastInlineDelegate OnTimeoutCountDownStateChanged; // 0x108(0x10)
	struct TWeakObjectPtr<struct UWorldMark_ReviveTeammates> DeathBoxMark; // 0x118(0x08)
	struct UWorldMark_ReviveTeammates* DeathBoxMarkClass; // 0x120(0x08)
	struct TWeakObjectPtr<struct AActor> RebornLine; // 0x128(0x08)
	struct AActor* RebornLineClass; // 0x130(0x08)

	void TryContinueTimeoutCountDown(); // Function Solarland.SolarResurrectionComponent.TryContinueTimeoutCountDown // (Final|Native|Public|BlueprintCallable) // @ game+0x2194e80
	void SetResurrectionState(enum class EResurrectionState NewState, bool bShouldNotifyOnServer); // Function Solarland.SolarResurrectionComponent.SetResurrectionState // (Final|Native|Public|BlueprintCallable) // @ game+0x21949d0
	void SetDeathBox(struct ADeathTreasureBox* InDeathBox); // Function Solarland.SolarResurrectionComponent.SetDeathBox // (Final|Native|Public|BlueprintCallable) // @ game+0x2194360
	void ServerNotifyTeammatesHelp(); // Function Solarland.SolarResurrectionComponent.ServerNotifyTeammatesHelp // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0xc28eb0
	void OnTimeoutCountDownStateChanged__DelegateSignature(bool bPaused); // DelegateFunction Solarland.SolarResurrectionComponent.OnTimeoutCountDownStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnResurrectionStateChanged__DelegateSignature(enum class EResurrectionState NewState); // DelegateFunction Solarland.SolarResurrectionComponent.OnResurrectionStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRep_ResurrectionState(enum class EResurrectionState LastState); // Function Solarland.SolarResurrectionComponent.OnRep_ResurrectionState // (Final|Native|Public) // @ game+0x2194150
	void OnRep_bIsTimeoutCountDownPaused(); // Function Solarland.SolarResurrectionComponent.OnRep_bIsTimeoutCountDownPaused // (Final|Native|Protected) // @ game+0x21941d0
	void MulticastPlayMarkNotify(); // Function Solarland.SolarResurrectionComponent.MulticastPlayMarkNotify // (Net|Native|Event|NetMulticast|Public) // @ game+0xc28e70
	void LazyPauseTimeoutCountDownByClutchTime(); // Function Solarland.SolarResurrectionComponent.LazyPauseTimeoutCountDownByClutchTime // (Final|Native|Public|BlueprintCallable) // @ game+0x2194110
	float GetWaitTimeRemaining(); // Function Solarland.SolarResurrectionComponent.GetWaitTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2193ea0
	struct FVector GetDeathBoxLoc(); // Function Solarland.SolarResurrectionComponent.GetDeathBoxLoc // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2193560
	void Event_OnRevivingComplete(struct FString PlayerId); // Function Solarland.SolarResurrectionComponent.Event_OnRevivingComplete // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void Event_OnRevivedComplete(); // Function Solarland.SolarResurrectionComponent.Event_OnRevivedComplete // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void Event_OnResurrectionStateChanged(enum class EResurrectionState LastState); // Function Solarland.SolarResurrectionComponent.Event_OnResurrectionStateChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void EnterBuyResurrectionProcess(); // Function Solarland.SolarResurrectionComponent.EnterBuyResurrectionProcess // (Final|Native|Public|BlueprintCallable) // @ game+0x2193440
};

// Class Solarland.SolarRichTextBlock
// Size: 0x750 (Inherited: 0x160)
struct USolarRichTextBlock : UTextLayoutWidget {
	bool bEnableLocText; // 0x160(0x01)
	char pad_161[0x7]; // 0x161(0x07)
	struct FText Text; // 0x168(0x18)
	int32_t LocTextID; // 0x180(0x04)
	enum class ESolarSupportLanguages PreviewLang; // 0x184(0x01)
	char pad_185[0x3]; // 0x185(0x03)
	struct UDataTable* TextStyleSet; // 0x188(0x08)
	struct TArray<struct URichTextBlockDecorator*> DecoratorClasses; // 0x190(0x10)
	bool bOverrideDefaultStyle; // 0x1a0(0x01)
	char pad_1A1[0x7]; // 0x1a1(0x07)
	struct FTextBlockStyle DefaultTextStyleOverride; // 0x1a8(0x2a8)
	float MinDesiredWidth; // 0x450(0x04)
	bool bUsingAccurateScale; // 0x454(0x01)
	char pad_455[0x2ab]; // 0x455(0x2ab)
	struct TArray<struct URichTextBlockDecorator*> InstanceDecorators; // 0x700(0x10)
	char pad_710[0x40]; // 0x710(0x40)

	void SetWrapTextAt(float InWrapTextAt); // Function Solarland.SolarRichTextBlock.SetWrapTextAt // (Final|Native|Public|BlueprintCallable) // @ game+0x2194cf0
	void SetWrappingPolicy(enum class ETextWrappingPolicy InWrappingPolicy); // Function Solarland.SolarRichTextBlock.SetWrappingPolicy // (Final|Native|Public|BlueprintCallable) // @ game+0x2194d70
	void SetTextStyleSet(struct UDataTable* NewTextStyleSet); // Function Solarland.SolarRichTextBlock.SetTextStyleSet // (Final|Native|Public|BlueprintCallable) // @ game+0x2194c60
	void SetText(struct FText& InText); // Function Solarland.SolarRichTextBlock.SetText // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2194b90
	void SetMinDesiredWidth(float InMinDesiredWidth); // Function Solarland.SolarRichTextBlock.SetMinDesiredWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x2194950
	void SetDefaultTextStyle(struct FTextBlockStyle& InDefaultTextStyle); // Function Solarland.SolarRichTextBlock.SetDefaultTextStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21948a0
	void SetDefaultStrikeBrush(struct FSlateBrush& InStrikeBrush); // Function Solarland.SolarRichTextBlock.SetDefaultStrikeBrush // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2194710
	void SetDefaultShadowOffset(struct FVector2D InShadowOffset); // Function Solarland.SolarRichTextBlock.SetDefaultShadowOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2194690
	void SetDefaultShadowColorAndOpacity(struct FLinearColor InShadowColorAndOpacity); // Function Solarland.SolarRichTextBlock.SetDefaultShadowColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2194600
	void SetDefaultFont(struct FSlateFontInfo InFontInfo); // Function Solarland.SolarRichTextBlock.SetDefaultFont // (Final|Native|Public|BlueprintCallable) // @ game+0x21944e0
	void SetDefaultColorAndOpacity(struct FSlateColor InColorAndOpacity); // Function Solarland.SolarRichTextBlock.SetDefaultColorAndOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x21943f0
	void SetAutoWrapText(bool InAutoTextWrap); // Function Solarland.SolarRichTextBlock.SetAutoWrapText // (Final|Native|Public|BlueprintCallable) // @ game+0x21942d0
	enum class ETextWrappingPolicy GetWrappingPolicy(); // Function Solarland.SolarRichTextBlock.GetWrappingPolicy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2193ed0
	struct UDataTable* GetTextStyleSet(); // Function Solarland.SolarRichTextBlock.GetTextStyleSet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2193e70
	struct FText GetText(); // Function Solarland.SolarRichTextBlock.GetText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2193dd0
	struct URichTextBlockDecorator* GetDecoratorByClass(struct URichTextBlockDecorator* DecoratorClass); // Function Solarland.SolarRichTextBlock.GetDecoratorByClass // (Final|Native|Public|BlueprintCallable) // @ game+0x21935a0
	void ClearAllDefaultStyleOverrides(); // Function Solarland.SolarRichTextBlock.ClearAllDefaultStyleOverrides // (Final|Native|Public) // @ game+0x2193420
};

// Class Solarland.SolarRocketVehicleAnimInstance
// Size: 0x480 (Inherited: 0x3f0)
struct USolarRocketVehicleAnimInstance : USolarLeggedVehicleAnimInstance {
	bool bInEquipState; // 0x3e8(0x01)
	float FootTargetTraceLength; // 0x3ec(0x04)
	struct TArray<struct FVector> FootTargetTraceStartLocations; // 0x3f0(0x10)
	float FootTraceRadius; // 0x400(0x04)
	float FootTargetBlendSpeed; // 0x404(0x04)
	struct TArray<float> FootTargetOffsets; // 0x408(0x10)
	struct UAnimMontage* VehicleWeapoReloadMontage; // 0x418(0x08)
	bool bWeaponFiring; // 0x420(0x01)
	bool bInPrecisionShoot; // 0x421(0x01)
	float RocketBoneAlpha; // 0x424(0x04)
	struct TMap<struct FName, struct FVector> RocketBoneScales; // 0x428(0x50)
	char pad_47B[0x5]; // 0x47b(0x05)

	void AnimNotify_EnterOpen(); // Function Solarland.SolarRocketVehicleAnimInstance.AnimNotify_EnterOpen // (Final|Native|Protected) // @ game+0x2193300
};

// Class Solarland.SolarRoleSkillDataConfig
// Size: 0x1f0 (Inherited: 0x30)
struct USolarRoleSkillDataConfig : UDataAsset {
	struct TSoftObjectPtr<UPassiveSkillDataAsset> ClassCommonPassiveSkill; // 0x30(0x28)
	struct TMap<enum class EClassType, struct FHeroClassConfig> HeroClassConfigs; // 0x58(0x50)
	struct UDataTable* RoleSkillDataTable; // 0xa8(0x08)
	struct UDataTable* BattleUpgradeEffectTypeDataTable; // 0xb0(0x08)
	int32_t RoleSkillCannotActiveNoticeID; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct FSoftClassPath UniqueSkillForbiddenGameplayEffect; // 0xc0(0x18)
	struct FSoftClassPath TacticalSkillForbiddenGameplayEffect; // 0xd8(0x18)
	struct FSoftClassPath InitCDValueGameplayEffect; // 0xf0(0x18)
	struct FSoftClassPath SuperSkillBlockGameplayEffect; // 0x108(0x18)
	struct FSoftClassPath TacticalSkillBlockGameplayEffect; // 0x120(0x18)
	struct UGameplayEffect* UsingContinuousSkillStatusEffect; // 0x138(0x08)
	struct UGameplayEffect* HoldingSkillStatusEffect; // 0x140(0x08)
	struct UDataTable* WeaponUIStyleDataTable; // 0x148(0x08)
	struct TMap<int32_t, struct FString> CharacterUpgradeEffects; // 0x150(0x50)
	char pad_1A0[0x50]; // 0x1a0(0x50)

	enum class EClassLevelUpRewardType GetLevelUpRewardType(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpRewardType // (Final|Native|Public|BlueprintCallable) // @ game+0x2193c60
	struct FSoftObjectPath GetLevelUpInnerIconPath(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpInnerIconPath // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2193b30
	struct FString GetLevelUpInnerDescription(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpInnerDescription // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2193a10
	struct TArray<struct FSoftObjectPath> GetLevelUpAllInnerIconPath(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpAllInnerIconPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2193890
	struct TArray<struct FString> GetLevelUpAllInnerDescription(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpAllInnerDescription // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2193720
	struct FString GetEffectIdForCharacterUpgrade(int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetEffectIdForCharacterUpgrade // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2193640
	enum class EClassType GetClassTypeForCharacter(int32_t CharacterId); // Function Solarland.SolarRoleSkillDataConfig.GetClassTypeForCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2193480
};

// Class Solarland.SolarRuntimeAssetsCollection
// Size: 0x38 (Inherited: 0x28)
struct USolarRuntimeAssetsCollection : URuntimeAssetsCollectionBase {
	struct TArray<struct FFilteredData> AssetFilters; // 0x28(0x10)
};

// Class Solarland.SolarPattern
// Size: 0x30 (Inherited: 0x28)
struct USolarPattern : UObject {
	bool bEnabled; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class Solarland.SolarPatternRuntime
// Size: 0x30 (Inherited: 0x28)
struct USolarPatternRuntime : UObject {
	struct USolarPattern* PattenData; // 0x28(0x08)
};

// Class Solarland.SolarIncreaseAndDecreasePattern
// Size: 0x38 (Inherited: 0x30)
struct USolarIncreaseAndDecreasePattern : USolarPattern {
	enum class EIncreaseAndDecreaseTransitionMode TransitionMode; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Solarland.SolarIncreaseAndDecreasePatternRuntime
// Size: 0x50 (Inherited: 0x30)
struct USolarIncreaseAndDecreasePatternRuntime : USolarPatternRuntime {
	char pad_30[0x20]; // 0x30(0x20)
};

// Class Solarland.SolarSaveGame
// Size: 0xb0 (Inherited: 0x28)
struct USolarSaveGame : USaveGame {
	bool HasShowNewPlayerGuide; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	int32_t EditorGameModeId; // 0x2c(0x04)
	struct TArray<struct FNeverShowCheckWindow> NeverShowCheckWindowList; // 0x30(0x10)
	bool HasReadSurvey; // 0x40(0x01)
	bool HasReadSurvey2; // 0x41(0x01)
	bool HasPlayedHuntMode; // 0x42(0x01)
	char MatchTimes; // 0x43(0x01)
	bool HasCompleteTeamUp; // 0x44(0x01)
	bool IsMorrowPlayer; // 0x45(0x01)
	bool bClickSocialEntranceBtnDiscord; // 0x46(0x01)
	bool bClickSocialEntranceBtnFacebook; // 0x47(0x01)
	bool bClickSocialEntranceBtnYouTube; // 0x48(0x01)
	bool bClickSocialEntranceBtnTikTok; // 0x49(0x01)
	bool bClickSocialEntranceBtnInstagram; // 0x4a(0x01)
	bool bClickSocialTip; // 0x4b(0x01)
	bool bClickLiveBroadcast; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	int64_t SocialLinkLastClickTime; // 0x50(0x08)
	bool bHasReportedOnline15min; // 0x58(0x01)
	bool bHasReportedOnline30min; // 0x59(0x01)
	bool bHasPlayedPackEnterAnimation; // 0x5a(0x01)
	bool bHasClickClanPermission; // 0x5b(0x01)
	bool bHasClickVipCard; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	int32_t BattlePassID; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct TArray<int32_t> MarkingPassTaskID; // 0x68(0x10)
	struct TArray<int32_t> DisplayedProductIDs; // 0x78(0x10)
	struct TArray<int32_t> ClickedPosterRecIDs; // 0x88(0x10)
	char pad_98[0x8]; // 0x98(0x08)
	struct TArray<uint32_t> ReadMailIds; // 0xa0(0x10)

	bool ValidateNeverShowCheckWindow(int32_t TargetConfirmID); // Function Solarland.SolarSaveGame.ValidateNeverShowCheckWindow // (Final|Native|Public) // @ game+0x2198f80
	void UpdateNeverShowCheckWindow(int32_t TargetConfirmID, enum class ENeverShowDuration NewDuration); // Function Solarland.SolarSaveGame.UpdateNeverShowCheckWindow // (Final|Native|Public) // @ game+0x2198eb0
	void UpdateMarkTask(int32_t InBattlePassID, int32_t TaskID, bool Add); // Function Solarland.SolarSaveGame.UpdateMarkTask // (Final|Native|Public) // @ game+0x2198da0
	void UpdateDisplayedIDs(struct TArray<int32_t>& InIDs); // Function Solarland.SolarSaveGame.UpdateDisplayedIDs // (Final|Native|Public|HasOutParms) // @ game+0x2198cf0
	void UpdateClickedPosterRecIDs(int32_t InID); // Function Solarland.SolarSaveGame.UpdateClickedPosterRecIDs // (Final|Native|Public) // @ game+0x2198be0
	void SetMarkingTask(int32_t InBattlePassID, struct TArray<int32_t>& InTaskID); // Function Solarland.SolarSaveGame.SetMarkingTask // (Final|Native|Public|HasOutParms) // @ game+0x2198a20
	void PrintTwiceConfirmCheckWindowList(); // Function Solarland.SolarSaveGame.PrintTwiceConfirmCheckWindowList // (Final|Native|Public) // @ game+0x8e9ae0
	void GetMarkingTask(int32_t InBattlePassID, struct TArray<int32_t>& OutTaskID); // Function Solarland.SolarSaveGame.GetMarkingTask // (Final|Native|Public|HasOutParms) // @ game+0x2197a60
	bool DeleteNeverShowCheckWindow(int32_t TargetConfirmID); // Function Solarland.SolarSaveGame.DeleteNeverShowCheckWindow // (Final|Native|Public) // @ game+0x2197840
	void ClearDisplayIDs(); // Function Solarland.SolarSaveGame.ClearDisplayIDs // (Final|Native|Public) // @ game+0x2197820
};

// Class Solarland.SolarSceneConfig
// Size: 0x60 (Inherited: 0x30)
struct USolarSceneConfig : UDataAsset {
	struct FSoftObjectPath MeshMapPath; // 0x30(0x18)
	struct FSoftObjectPath LightmapPath; // 0x48(0x18)
};

// Class Solarland.SolarScreenEffectWidget
// Size: 0x350 (Inherited: 0x348)
struct USolarScreenEffectWidget : USolarUserWidget {
	char pad_348[0x4]; // 0x348(0x04)
	bool bCanBeReused; // 0x34c(0x01)
	char pad_34D[0x3]; // 0x34d(0x03)

	void StopPlayScreenEffect(); // Function Solarland.SolarScreenEffectWidget.StopPlayScreenEffect // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void StartPlayScreenEffect(); // Function Solarland.SolarScreenEffectWidget.StartPlayScreenEffect // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	bool ShouldEnablePoisonEffect(); // Function Solarland.SolarScreenEffectWidget.ShouldEnablePoisonEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x2198bb0
	void PreAddToReuseCache(); // Function Solarland.SolarScreenEffectWidget.PreAddToReuseCache // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1547f70
	void PostRemoveFromReuseCache(); // Function Solarland.SolarScreenEffectWidget.PostRemoveFromReuseCache // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x15480b0
	void NotifyScreenEffectComplete(); // Function Solarland.SolarScreenEffectWidget.NotifyScreenEffectComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x2197f00
	bool IsInstantEffectComplete(); // Function Solarland.SolarScreenEffectWidget.IsInstantEffectComplete // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2197df0
	bool IsFadeOutFinished(); // Function Solarland.SolarScreenEffectWidget.IsFadeOutFinished // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2197dc0
	void FadeOutScreenEffect(); // Function Solarland.SolarScreenEffectWidget.FadeOutScreenEffect // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xb9afb0
};

// Class Solarland.SolarShieldDamageEffect
// Size: 0x1a0 (Inherited: 0x198)
struct USolarShieldDamageEffect : USolarAbilityEffect {
	float ShieldDamage; // 0x198(0x04)
	char pad_19C[0x4]; // 0x19c(0x04)

	float GetShieldDamage(); // Function Solarland.SolarShieldDamageEffect.GetShieldDamage // (Final|Native|Public|Const) // @ game+0x2197b50
};

// Class Solarland.SolarShieldProgressBoard
// Size: 0x2f0 (Inherited: 0x2b8)
struct USolarShieldProgressBoard : USolarAdvProgressBoard {
	float AutoRechargeSpeed; // 0x2b8(0x04)
	float RechargeTime; // 0x2bc(0x04)
	float PreChangeSpeed; // 0x2c0(0x04)
	char pad_2C4[0x2c]; // 0x2c4(0x2c)

	void UpdateCurrentValue(float Current); // Function Solarland.SolarShieldProgressBoard.UpdateCurrentValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2198c70
	void SetSpeed(float NewSpeed); // Function Solarland.SolarShieldProgressBoard.SetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x2198b30
	void SetProgressColorByID(struct FLinearColor& InColor, int32_t InID); // Function Solarland.SolarShieldProgressBoard.SetProgressColorByID // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
	void SetPreAddColor(); // Function Solarland.SolarShieldProgressBoard.SetPreAddColor // (Final|Native|Public|BlueprintCallable) // @ game+0x2198b10
	void PreAddValue(float InCurrentValue, float InChangeValue, enum class EShieldRechargeState RechargeState, bool bInFixPreAdd); // Function Solarland.SolarShieldProgressBoard.PreAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x21988b0
	void InitProgressBoard(float Current, float Max, int32_t Fragment); // Function Solarland.SolarShieldProgressBoard.InitProgressBoard // (Final|Native|Public|BlueprintCallable) // @ game+0x2197bd0
	void InitProgress(); // Function Solarland.SolarShieldProgressBoard.InitProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x2197bb0
	float GetSpeed(); // Function Solarland.SolarShieldProgressBoard.GetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x2197b80
	void DoMinusValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarShieldProgressBoard.DoMinusValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2197960
	void DoAddValue(float InCurrentValue); // Function Solarland.SolarShieldProgressBoard.DoAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x21978e0
	void CancelAddValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarShieldProgressBoard.CancelAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2197750
};

// Class Solarland.SolarShieldUpgradeItemShop
// Size: 0x438 (Inherited: 0x238)
struct ASolarShieldUpgradeItemShop : ASolarInteractableActor {
	int32_t groupid; // 0x238(0x04)
	int32_t ServerActiveGroupID; // 0x23c(0x04)
	struct USkeletalMeshComponent* BodyMesh; // 0x240(0x08)
	struct USphereComponent* CollisionComp; // 0x248(0x08)
	struct UStaticMeshComponent* HeadUpIconMesh; // 0x250(0x08)
	struct UStaticMeshComponent* BodyScreenMesh; // 0x258(0x08)
	char pad_260[0x18]; // 0x260(0x18)
	int32_t UpgradeItemNum; // 0x278(0x04)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct TSoftObjectPtr<UParticleSystem> InteractionTriggeredEffect; // 0x280(0x28)
	struct FSolarIntArray InteractedPlayerIDList; // 0x2a8(0x130)
	int32_t Uid; // 0x3d8(0x04)
	char pad_3DC[0x1c]; // 0x3dc(0x1c)
	struct USphereComponent* AudioTriggerComp; // 0x3f8(0x08)
	struct UAkComponent* AkAudioComponent; // 0x400(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x408(0x08)
	struct FString SNameHint; // 0x410(0x10)
	struct FString SNameStopHint; // 0x420(0x10)
	char pad_430[0x8]; // 0x430(0x08)

	void OnRep_UID(); // Function Solarland.SolarShieldUpgradeItemShop.OnRep_UID // (Final|Native|Public) // @ game+0x21987c0
	void OnRep_InteractedPlayerIDList(); // Function Solarland.SolarShieldUpgradeItemShop.OnRep_InteractedPlayerIDList // (Final|Native|Public) // @ game+0x21987c0
	void OnRep_ActiveGroupID(); // Function Solarland.SolarShieldUpgradeItemShop.OnRep_ActiveGroupID // (Final|Native|Public) // @ game+0x21987a0
	void OnOtherPlayerInteracted(); // Function Solarland.SolarShieldUpgradeItemShop.OnOtherPlayerInteracted // (Final|Native|Protected) // @ game+0x2198780
	void OnLocalPlayerSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarShieldUpgradeItemShop.OnLocalPlayerSpectateTargetChanged // (Final|Native|Protected) // @ game+0x21986b0
	void OnBindLocalPlayerSpectateTargetChanged(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.SolarShieldUpgradeItemShop.OnBindLocalPlayerSpectateTargetChanged // (Final|Native|Protected) // @ game+0x2198620
	void OnActorEndOverlapAudioSphere(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarShieldUpgradeItemShop.OnActorEndOverlapAudioSphere // (Final|Native|Protected) // @ game+0x21984c0
	void OnActorEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarShieldUpgradeItemShop.OnActorEndOverlap // (Final|Native|Protected) // @ game+0x2198360
	void OnActorBeginOverlapAudioSphere(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarShieldUpgradeItemShop.OnActorBeginOverlapAudioSphere // (Final|Native|Protected|HasOutParms) // @ game+0x2198140
	void OnActorBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarShieldUpgradeItemShop.OnActorBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x2197f20
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarShieldUpgradeItemShop.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x2197cf0
};

// Class Solarland.SolarWheeledVehicle
// Size: 0x13b0 (Inherited: 0x1380)
struct ASolarWheeledVehicle : ASolarVehiclePawn {
	char pad_1380[0x8]; // 0x1380(0x08)
	struct USolarWheeledVehicleMovement* VehicleMovement; // 0x1388(0x08)
	bool bReplicatedDrift; // 0x1390(0x01)
	bool bReplicatedIsBurnout; // 0x1391(0x01)
	char pad_1392[0x2]; // 0x1392(0x02)
	float PlatformDetachImpulse; // 0x1394(0x04)
	char pad_1398[0x18]; // 0x1398(0x18)

	void StatVehicleAutoSteering(bool bInSameDirection); // Function Solarland.SolarWheeledVehicle.StatVehicleAutoSteering // (Net|Native|Event|Protected|NetServer) // @ game+0x2249360
	void ServerSetIsDrift(bool bInDrift, char InDriveType); // Function Solarland.SolarWheeledVehicle.ServerSetIsDrift // (Net|Native|Event|Protected|NetServer) // @ game+0x2248560
	void ServerSetIsBurnout(bool bInBurnout); // Function Solarland.SolarWheeledVehicle.ServerSetIsBurnout // (Net|Native|Event|Public|NetServer) // @ game+0x2285f00
	void OnRep_IsBurnout(); // Function Solarland.SolarWheeledVehicle.OnRep_IsBurnout // (Final|Native|Protected) // @ game+0x2285c30
	void OnRep_Drift(); // Function Solarland.SolarWheeledVehicle.OnRep_Drift // (Final|Native|Protected) // @ game+0x2285c10
};

// Class Solarland.SolarSiegeVehicle
// Size: 0x1410 (Inherited: 0x13b0)
struct ASolarSiegeVehicle : ASolarWheeledVehicle {
	struct TArray<struct FSiegeVehicleOpenTraceData> CheckOpenTraceBox; // 0x13a8(0x10)
	struct TArray<struct FSiegeVehicleOpenCapsuleData> CheckOpenTraceCap; // 0x13b8(0x10)
	float CheckOffsetZ; // 0x13c8(0x04)
	struct USolarSiegeVehicleAnimInstance* SolarVehicleAnimInstance; // 0x13d0(0x08)
	struct TArray<struct FName> HolerBoneNames; // 0x13d8(0x10)
	struct UParticleSystem* SiegeWeaponFire; // 0x13e8(0x08)
	char pad_13F4[0x4]; // 0x13f4(0x04)
	struct UCameraShake* OpenCameraShake; // 0x13f8(0x08)
	float OpenCameraShakeSpeed; // 0x1400(0x04)
	char pad_1404[0x4]; // 0x1404(0x04)
	struct UParticleSystemComponent* MuzzlePSC; // 0x1408(0x08)

	bool IsSiegeWeaponOpened(); // Function Solarland.SolarSiegeVehicle.IsSiegeWeaponOpened // (Final|Native|Public) // @ game+0x2197e20
	char GetCurrentVehicleAnimation(); // Function Solarland.SolarSiegeVehicle.GetCurrentVehicleAnimation // (Final|Native|Public) // @ game+0x2197a30
};

// Class Solarland.SolarWheeledVehicleAnimInstance
// Size: 0x410 (Inherited: 0x330)
struct USolarWheeledVehicleAnimInstance : USolarVehicleAnimInstance {
	struct FVector FLWheelBoneScale; // 0x330(0x0c)
	struct FVector FRWheelBoneScale; // 0x33c(0x0c)
	struct FVector MLWheelBoneScale; // 0x348(0x0c)
	struct FVector MRWheelBoneScale; // 0x354(0x0c)
	struct FVector BLWheelBoneScale; // 0x360(0x0c)
	struct FVector BRWheelBoneScale; // 0x36c(0x0c)
	struct FVector FLWheelBoneLocation; // 0x378(0x0c)
	struct FVector FRWheelBoneLocation; // 0x384(0x0c)
	struct FVector MLWheelBoneLocation; // 0x390(0x0c)
	struct FVector MRWheelBoneLocation; // 0x39c(0x0c)
	struct FVector BLWheelBoneLocation; // 0x3a8(0x0c)
	struct FVector BRWheelBoneLocation; // 0x3b4(0x0c)
	struct FRotator FLWheelBoneRotation; // 0x3c0(0x0c)
	struct FRotator FRWheelBoneRotation; // 0x3cc(0x0c)
	struct FRotator MLWheelBoneRotation; // 0x3d8(0x0c)
	struct FRotator MRWheelBoneRotation; // 0x3e4(0x0c)
	struct FRotator BLWheelBoneRotation; // 0x3f0(0x0c)
	struct FRotator BRWheelBoneRotation; // 0x3fc(0x0c)
	char pad_408[0x8]; // 0x408(0x08)

	void AnimNotify_EnablePlatform(); // Function Solarland.SolarWheeledVehicleAnimInstance.AnimNotify_EnablePlatform // (Final|Native|Public) // @ game+0x2285a60
	void AnimNotify_DisablePlatform(); // Function Solarland.SolarWheeledVehicleAnimInstance.AnimNotify_DisablePlatform // (Final|Native|Public) // @ game+0x2285a40
	void AnimNotify_ClosePlatform(); // Function Solarland.SolarWheeledVehicleAnimInstance.AnimNotify_ClosePlatform // (Final|Native|Public) // @ game+0x2285a20
};

// Class Solarland.SolarSiegeVehicleAnimInstance
// Size: 0x440 (Inherited: 0x410)
struct USolarSiegeVehicleAnimInstance : USolarWheeledVehicleAnimInstance {
	struct TArray<struct FVector> SiegeHolderLocations; // 0x410(0x10)
	char pad_420[0x4]; // 0x420(0x04)
	float PreStopSpeed; // 0x424(0x04)
	float WeaponFireAlphaF; // 0x428(0x04)
	float WeaponFireAlphaB; // 0x42c(0x04)
	float WeaponFireAlphaR; // 0x430(0x04)
	float WeaponFireAlphaL; // 0x434(0x04)
	float StopSoundMinSpeed; // 0x438(0x04)
	char pad_43C[0x4]; // 0x43c(0x04)

	void AnimNotify_StopLeft(); // Function Solarland.SolarSiegeVehicleAnimInstance.AnimNotify_StopLeft // (Final|Native|Public) // @ game+0x2197730
	void AnimNotify_CloseIdleLeft(); // Function Solarland.SolarSiegeVehicleAnimInstance.AnimNotify_CloseIdleLeft // (Final|Native|Public) // @ game+0x2197710
	void AnimNotify_CloseIdleEnter(); // Function Solarland.SolarSiegeVehicleAnimInstance.AnimNotify_CloseIdleEnter // (Final|Native|Public) // @ game+0x21976f0
};

// Class Solarland.SolarSignificanceInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarSignificanceInterface : UInterface {

	void PostGroupIDChangedFunction(int32_t OldGroup, int32_t NewGroup); // Function Solarland.SolarSignificanceInterface.PostGroupIDChangedFunction // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x21987e0
};

// Class Solarland.SolarSignificanceManager
// Size: 0x1c0 (Inherited: 0x138)
struct USolarSignificanceManager : USignificanceManager {
	float CalculateSceneActorTickInterval; // 0x138(0x04)
	char pad_13C[0x1c]; // 0x13c(0x1c)
	struct TArray<struct AActor*> ManagedSceneActors; // 0x158(0x10)
	struct TSet<struct AActor*> ManagedSceneActorSet; // 0x168(0x50)
	char pad_1B8[0x8]; // 0x1b8(0x08)
};

// Class Solarland.SolarSkeletalMeshMergeUtil
// Size: 0x28 (Inherited: 0x28)
struct USolarSkeletalMeshMergeUtil : UBlueprintFunctionLibrary {

	struct USkeletalMesh* MergeMeshes(struct FSkeletalMeshMergeParams& Params); // Function Solarland.SolarSkeletalMeshMergeUtil.MergeMeshes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2197e50
};

// Class Solarland.SummonItemTurret
// Size: 0x498 (Inherited: 0x3e0)
struct ASummonItemTurret : ASummonItemBase {
	float DetectableRadius; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)
	struct TArray<enum class EObjectTypeQuery> DetectableCollisionTypes; // 0x3e8(0x10)
	float TurretYawRotateSpeed; // 0x3f8(0x04)
	char pad_3FC[0x4]; // 0x3fc(0x04)
	struct ASolarSummonWeapon* TurretWeaponBP; // 0x400(0x08)
	struct UParticleSystem* BoomEffect; // 0x408(0x08)
	float AimMaxAngle; // 0x410(0x04)
	char pad_414[0x4]; // 0x414(0x04)
	struct TArray<enum class EObjectTypeQuery> BlockShotObjectTypes; // 0x418(0x10)
	float BlockShotCheckRadius; // 0x428(0x04)
	float TestEnemyHeight; // 0x42c(0x04)
	struct TArray<struct FName> PrioritizeTargetingBoneNames; // 0x430(0x10)
	float TurretTransformTime; // 0x440(0x04)
	float ForceResearchTargetTime; // 0x444(0x04)
	struct ASolarSummonWeapon* CurrentWeapon; // 0x448(0x08)
	struct FRotator LookAtTargetRotator; // 0x450(0x0c)
	char AnimationIndex; // 0x45c(0x01)
	char pad_45D[0x3]; // 0x45d(0x03)
	struct USkeletalMeshComponentBudgeted* TurretMesh; // 0x460(0x08)
	char pad_468[0x4]; // 0x468(0x04)
	struct FSpawnedActorHandle CachedTurretHandle; // 0x46c(0x04)
	char pad_470[0x28]; // 0x470(0x28)

	void OnTurretStandby(); // Function Solarland.SummonItemTurret.OnTurretStandby // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnTurretLocked(); // Function Solarland.SummonItemTurret.OnTurretLocked // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnTurretFire(); // Function Solarland.SummonItemTurret.OnTurretFire // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnTurretDead(); // Function Solarland.SummonItemTurret.OnTurretDead // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnTurretAppear(); // Function Solarland.SummonItemTurret.OnTurretAppear // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnRep_LookAtTargetRotator(); // Function Solarland.SummonItemTurret.OnRep_LookAtTargetRotator // (Final|Native|Protected) // @ game+0x2290310
	void OnRep_AnimationIndex(); // Function Solarland.SummonItemTurret.OnRep_AnimationIndex // (Final|Native|Protected) // @ game+0x22902d0
	void NetMulticastDrawAimLine(struct FVector InStartLocation, struct TArray<struct FVector4> InEndLocationArray); // Function Solarland.SummonItemTurret.NetMulticastDrawAimLine // (Final|Net|Native|Event|NetMulticast|Private|HasDefaults) // @ game+0x22900a0
};

// Class Solarland.SolarSkill_AutomaticTurret
// Size: 0x4b0 (Inherited: 0x498)
struct ASolarSkill_AutomaticTurret : ASummonItemTurret {
	int32_t TestOverlapDestroyInterval; // 0x498(0x04)
	struct FVector TestOverlapDestroyBoxExtent; // 0x49c(0x0c)
	int32_t TestOverlapDestroyTimer; // 0x4a8(0x04)
	char pad_4AC[0x4]; // 0x4ac(0x04)
};

// Class Solarland.SolarSkill_Projectile
// Size: 0x560 (Inherited: 0x228)
struct ASolarSkill_Projectile : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct UProjectileMovementComponent* ProjectileMovementComponent; // 0x230(0x08)
	struct UPrimitiveComponent* DefaultUpdateComponent; // 0x238(0x08)
	struct FVector ProjectileVelocity; // 0x240(0x0c)
	char pad_24C[0x4]; // 0x24c(0x04)
	struct FGameplayEffectSpecHandle ToSelfGameplayEffectHandle; // 0x250(0x10)
	struct FGameplayEffectSpecHandle ToTargetGameplayEffectHandle; // 0x260(0x10)
	struct FHitResult ProjectileStopResult; // 0x270(0x88)
	bool bDebug; // 0x2f8(0x01)
	bool bInstantStop; // 0x2f9(0x01)
	char pad_2FA[0x2]; // 0x2fa(0x02)
	float ForceStopTime; // 0x2fc(0x04)
	float DeferExplodeTime; // 0x300(0x04)
	char pad_304[0x4]; // 0x304(0x04)
	struct FSoftObjectPath ProjectileStopEffectPath; // 0x308(0x18)
	struct FTransform ProjectileStopEffectTransform; // 0x320(0x30)
	struct FSoftObjectPath ProjectileExplosionEffectPath; // 0x350(0x18)
	char pad_368[0x8]; // 0x368(0x08)
	struct FTransform ProjectileExplosionEffectTransform; // 0x370(0x30)
	struct FSoftObjectPath ProjectileTrajectoryEffectPath; // 0x3a0(0x18)
	bool bAttachToHitActorOnStop; // 0x3b8(0x01)
	bool bDestroyOnExplode; // 0x3b9(0x01)
	char pad_3BA[0x2]; // 0x3ba(0x02)
	float DeferDestroyTime; // 0x3bc(0x04)
	bool bHiddenOnStop; // 0x3c0(0x01)
	bool bHiddenOnExplode; // 0x3c1(0x01)
	char pad_3C2[0x6]; // 0x3c2(0x06)
	struct AActor* SpawnActorClassOnStop; // 0x3c8(0x08)
	struct AActor* SpawnActorClassOnExplode; // 0x3d0(0x08)
	bool bForbidSpawnActorOnHitSomeActor; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
	struct TArray<struct AActor*> ForbidSpawnActorArray; // 0x3e0(0x10)
	char pad_3F0[0xa0]; // 0x3f0(0xa0)
	struct UAkComponent* AkAudioComponent; // 0x490(0x08)
	struct FString SetProjectileVelocitySoundEvent1P; // 0x498(0x10)
	struct FString SetProjectileVelocitySoundEvent3P; // 0x4a8(0x10)
	struct FString SetProjectileVelocitySoundEvent3PEnemy; // 0x4b8(0x10)
	struct FString OnProjectileMovementStopSoundEvent1P; // 0x4c8(0x10)
	struct FString OnProjectileMovementStopSoundEvent3P; // 0x4d8(0x10)
	struct FString OnProjectileMovementStopSoundEvent3PEnemy; // 0x4e8(0x10)
	struct FString CommonHitSound1P; // 0x4f8(0x10)
	struct FString CommonHitSound3P; // 0x508(0x10)
	struct FString CommonHitSound3PEnemy; // 0x518(0x10)
	struct FString ExplosionSound1P; // 0x528(0x10)
	struct FString ExplosionSound3P; // 0x538(0x10)
	struct FString ExplosionSound3PEnemy; // 0x548(0x10)
	char pad_558[0x8]; // 0x558(0x08)

	void ReceiveSetProjectileMovement(); // Function Solarland.SolarSkill_Projectile.ReceiveSetProjectileMovement // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveProjectileMovementStop(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.ReceiveProjectileMovementStop // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveExplosion(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.ReceiveExplosion // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnTeamIgnoreCollisionActorChange(bool bAdd, struct AActor* InActor, char TeamID); // Function Solarland.SolarSkill_Projectile.OnTeamIgnoreCollisionActorChange // (Final|Native|Protected) // @ game+0x219c890
	void OnRep_ProjectileVelocity(); // Function Solarland.SolarSkill_Projectile.OnRep_ProjectileVelocity // (Final|Native|Protected) // @ game+0x219c180
	void OnRep_ProjectileStopResult(); // Function Solarland.SolarSkill_Projectile.OnRep_ProjectileStopResult // (Final|Native|Protected) // @ game+0x219c160
	void OnProjectileMovementStopInternal(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.OnProjectileMovementStopInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x219c060
	void OnProjectileMovementStop(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.OnProjectileMovementStop // (Final|Native|Protected|HasOutParms) // @ game+0x219bf80
	void OnProjectileBounce(struct FHitResult& InImpactResult, struct FVector& InImpactVelocity); // Function Solarland.SolarSkill_Projectile.OnProjectileBounce // (Native|Protected|HasOutParms|HasDefaults) // @ game+0x219be50
	void OnChangeOwnerCharacterInternal(); // Function Solarland.SolarSkill_Projectile.OnChangeOwnerCharacterInternal // (Native|Event|Protected|BlueprintEvent) // @ game+0x1554600
	void OnChangeOwnerCharacter(); // Function Solarland.SolarSkill_Projectile.OnChangeOwnerCharacter // (Final|Native|Protected) // @ game+0x219bda0
	void K2_PlaySound(struct FString InControlledOrSpectatedSoundName, struct FString InTeammateSoundName, struct FString InEnemySoundName); // Function Solarland.SolarSkill_Projectile.K2_PlaySound // (Final|Native|Protected|BlueprintCallable) // @ game+0x219bbc0
	struct ASolarCharacter* GetOwnerCharacter(); // Function Solarland.SolarSkill_Projectile.GetOwnerCharacter // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x219bb90
	void ExplodeInternal(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.ExplodeInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x219ba80
};

// Class Solarland.SolarSkill_ClusterGrenade
// Size: 0x640 (Inherited: 0x560)
struct ASolarSkill_ClusterGrenade : ASolarSkill_Projectile {
	float Speed; // 0x558(0x04)
	float ThrowAngleOffset; // 0x55c(0x04)
	float ExplosionRadius; // 0x560(0x04)
	struct UStaticMeshComponent* ClusterGrenadeMesh; // 0x568(0x08)
	bool bIsLeader; // 0x570(0x01)
	float Damage; // 0x574(0x04)
	struct FRuntimeFloatCurve DamageScaleByDistanceCurve; // 0x578(0x88)
	struct TArray<enum class EObjectTypeQuery> CanDamageObjectTypes; // 0x600(0x10)
	float DelayDestroyTime; // 0x610(0x04)
	char pad_615[0x3]; // 0x615(0x03)
	struct TArray<struct FSolarSubClusterGrenadeData> SubClusterGrenades; // 0x618(0x10)
	bool bTeammateDamage; // 0x628(0x01)
	char pad_629[0x7]; // 0x629(0x07)
	struct TArray<struct TWeakObjectPtr<struct ASolarSkill_ClusterGrenade>> ClusterGrenadeIgnoreArray; // 0x630(0x10)
};

// Class Solarland.SolarSkill_EMP
// Size: 0x5a0 (Inherited: 0x560)
struct ASolarSkill_EMP : ASolarSkill_Projectile {
	float TestRadius; // 0x558(0x04)
	float DamageToShield; // 0x55c(0x04)
	float DamageToSummon; // 0x560(0x04)
	struct TArray<enum class EObjectTypeQuery> TestObjectTypes; // 0x568(0x10)
	float DelayDestroyTime; // 0x578(0x04)
	struct AActor* PerformActorClass; // 0x580(0x08)
	struct AActor* EnemyPerformActorClass; // 0x588(0x08)
	float PerformActorLifeTime; // 0x590(0x04)
	bool bSpawndPerformActor; // 0x594(0x01)
	char pad_595[0xb]; // 0x595(0x0b)
};

// Class Solarland.SolarSkill_EMPForceField
// Size: 0x560 (Inherited: 0x3e0)
struct ASolarSkill_EMPForceField : ASummonItemBase {
	struct TArray<enum class EActorRegisterType> TestTypes; // 0x3e0(0x10)
	struct FVector2D TestRange; // 0x3f0(0x08)
	struct FName CoreName; // 0x3f8(0x08)
	struct TMap<enum class ESolarEMPParticleType, struct FSolarEMPParticleInfo> EMPParticleTable; // 0x400(0x50)
	float ForceFieldReadyTime; // 0x450(0x04)
	float ForceFieldActiveTime; // 0x454(0x04)
	float ForceFieldEndTime; // 0x458(0x04)
	char pad_45C[0x4]; // 0x45c(0x04)
	struct FString EMPStartSoundName; // 0x460(0x10)
	struct FString EMPEndSoundName; // 0x470(0x10)
	struct FString DamageShiledSoundName; // 0x480(0x10)
	struct FSoftClassPath EffectActorClassPathForTeammate; // 0x490(0x18)
	struct FSoftClassPath EffectActorClassPathForEnemy; // 0x4a8(0x18)
	float DamageValueToCharacterShield; // 0x4c0(0x04)
	float DamageCharacterShieldInterval; // 0x4c4(0x04)
	float FixedDamageValueToCharacterShield; // 0x4c8(0x04)
	char pad_4CC[0x4]; // 0x4cc(0x04)
	struct TMap<struct TWeakObjectPtr<struct AActor>, struct FActiveGameplayEffectHandle> TestActorMap; // 0x4d0(0x50)
	struct TWeakObjectPtr<struct UShapeComponent> CoreComponent; // 0x520(0x08)
	struct TArray<struct UParticleSystemComponent*> ManualReleaseEmitterArray; // 0x528(0x10)
	char pad_538[0x1]; // 0x538(0x01)
	enum class ESolarEMPForceFieldState CurrentEMPState; // 0x539(0x01)
	char pad_53A[0x6]; // 0x53a(0x06)
	struct ASolarSkill_ForceFieldEffect* EffectActor; // 0x540(0x08)
	char pad_548[0x18]; // 0x548(0x18)

	void OnTestActorEndPlay(struct AActor* InActor, enum class EEndPlayReason InEndPlayReason); // Function Solarland.SolarSkill_EMPForceField.OnTestActorEndPlay // (Final|Native|Protected) // @ game+0x219c9a0
	void OnRep_CurrentState(); // Function Solarland.SolarSkill_EMPForceField.OnRep_CurrentState // (Final|Native|Protected) // @ game+0x219c140
	void MulticastOnDamagedCharacterShield(struct ASolarCharacter* InCharacter); // Function Solarland.SolarSkill_EMPForceField.MulticastOnDamagedCharacterShield // (Net|Native|Event|NetMulticast|Protected) // @ game+0x219bd10
	void K2_OnDamagedCharacterShield(struct ASolarCharacter* InCharacter); // Function Solarland.SolarSkill_EMPForceField.K2_OnDamagedCharacterShield // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarSkill_ForceFieldEffect
// Size: 0x228 (Inherited: 0x228)
struct ASolarSkill_ForceFieldEffect : AActor {

	void PlayLoopAnimation(); // Function Solarland.SolarSkill_ForceFieldEffect.PlayLoopAnimation // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void PlayFadeOutAnimation(); // Function Solarland.SolarSkill_ForceFieldEffect.PlayFadeOutAnimation // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void PlayFadeInAnimation(); // Function Solarland.SolarSkill_ForceFieldEffect.PlayFadeInAnimation // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarSkill_Grenade
// Size: 0x5f0 (Inherited: 0x560)
struct ASolarSkill_Grenade : ASolarSkill_Projectile {
	struct FRuntimeFloatCurve DamageCurve; // 0x558(0x88)
	char pad_5E8[0x8]; // 0x5e8(0x08)
};

// Class Solarland.SolarSkill_Incendiary
// Size: 0x6e0 (Inherited: 0x560)
struct ASolarSkill_Incendiary : ASolarSkill_Projectile {
	struct FVector FireDecalSize; // 0x558(0x0c)
	struct TSoftObjectPtr<UParticleSystem> FireParticle; // 0x568(0x28)
	struct TSoftObjectPtr<UMaterialInterface> FireDecalMaterial; // 0x590(0x28)
	struct TSoftObjectPtr<UParticleSystem> BuffParticle; // 0x5b8(0x28)
	struct FName BuffAttachPointName; // 0x5e0(0x08)
	float DelayDestroyTime; // 0x5e8(0x04)
	int32_t FireEffectCountMax; // 0x5ec(0x04)
	float BurnRamainTime; // 0x5f0(0x04)
	struct TArray<enum class EObjectTypeQuery> DetectableObjectTypes; // 0x5f8(0x10)
	struct FName FireDecalFadeOutName; // 0x608(0x08)
	bool bTeammateDamage; // 0x610(0x01)
	bool bOnlyOne; // 0x611(0x01)
	char pad_612[0x6]; // 0x612(0x06)
	struct TArray<struct UParticleSystemComponent*> FireParticleSystemComponents; // 0x618(0x10)
	struct UDecalComponent* FireDecalComponent; // 0x628(0x08)
	struct UStaticMeshComponent* IncendiaryMesh; // 0x630(0x08)
	struct UAkComponent* AkComponent; // 0x638(0x08)
	bool bInBuring; // 0x640(0x01)
	char pad_641[0x3]; // 0x641(0x03)
	int32_t CurrentFireEffectCount; // 0x644(0x04)
	char pad_648[0x8]; // 0x648(0x08)
	struct UMaterialInstanceDynamic* FireDecalDynamicMaterial; // 0x650(0x08)
	float FireDecalFadeOutTimer; // 0x658(0x04)
	float BurnRadius; // 0x65c(0x04)
	float BurnHeight; // 0x660(0x04)
	char pad_664[0x4]; // 0x664(0x04)
	struct TArray<enum class EObjectTypeQuery> QueryObjectTypeArray; // 0x668(0x10)
	struct TMap<struct AActor*, float> ClassTypeDamageValueMap; // 0x678(0x50)
	float DamageTimeInternal; // 0x6c8(0x04)
	char pad_6CC[0x14]; // 0x6cc(0x14)

	void ReceviceExplodeEvent(); // Function Solarland.SolarSkill_Incendiary.ReceviceExplodeEvent // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceviceDestroyEvent(); // Function Solarland.SolarSkill_Incendiary.ReceviceDestroyEvent // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceviceDamageActorEvent(struct AActor* InActor); // Function Solarland.SolarSkill_Incendiary.ReceviceDamageActorEvent // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void PostSoundEvent(struct FString InSoundEvent, bool InbHasCamp, struct AActor* InTarget); // Function Solarland.SolarSkill_Incendiary.PostSoundEvent // (Final|Native|Protected|BlueprintCallable) // @ game+0x219ccb0
	void MulticastOnDamagedActor(struct AActor* InActor); // Function Solarland.SolarSkill_Incendiary.MulticastOnDamagedActor // (Net|Native|Event|NetMulticast|Protected) // @ game+0x157d670
	struct UObject* GetClassType(); // Function Solarland.SolarSkill_Incendiary.GetClassType // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x219bb60
};

// Class Solarland.SolarSkill_SkeletealMeshProjectile
// Size: 0x560 (Inherited: 0x560)
struct ASolarSkill_SkeletealMeshProjectile : ASolarSkill_Projectile {
};

// Class Solarland.SolarSkill_PenetrateGrenade
// Size: 0x610 (Inherited: 0x560)
struct ASolarSkill_PenetrateGrenade : ASolarSkill_SkeletealMeshProjectile {
	float DamageInterval; // 0x558(0x04)
	float DefaultDamage; // 0x55c(0x04)
	struct TMap<struct AActor*, float> ClassTypeDamageMap; // 0x560(0x50)
	bool bCanDamageTeamate; // 0x5b0(0x01)
	float OnStopDestroyTime; // 0x5b4(0x04)
	float TraceTestDistance; // 0x5b8(0x04)
	float DamageSphereRadius; // 0x5bc(0x04)
	struct FVector DamageBoxExtent; // 0x5c0(0x0c)
	struct TArray<enum class EObjectTypeQuery> DamageObjectTypeArray; // 0x5d0(0x10)
	char pad_5E1[0x2f]; // 0x5e1(0x2f)

	void OnPenetrateGrenadeReady(float InDeltaDistance); // Function Solarland.SolarSkill_PenetrateGrenade.OnPenetrateGrenadeReady // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarSkill_CapsuleProjectile
// Size: 0x560 (Inherited: 0x560)
struct ASolarSkill_CapsuleProjectile : ASolarSkill_Projectile {
};

// Class Solarland.SolarSkill_SphereProjectile
// Size: 0x560 (Inherited: 0x560)
struct ASolarSkill_SphereProjectile : ASolarSkill_Projectile {
};

// Class Solarland.SolarSkill_BoxProjectile
// Size: 0x560 (Inherited: 0x560)
struct ASolarSkill_BoxProjectile : ASolarSkill_Projectile {
};

// Class Solarland.SolarSkill_StaticMeshProjectile
// Size: 0x560 (Inherited: 0x560)
struct ASolarSkill_StaticMeshProjectile : ASolarSkill_Projectile {
};

// Class Solarland.SolarSkill_ProjectileInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarSkill_ProjectileInterface : UInterface {

	void SetStartAndTargetTransform(struct FTransform& InStartTransform, struct FTransform& InTargetTransform); // Function Solarland.SolarSkill_ProjectileInterface.SetStartAndTargetTransform // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x219d160
	void SetProjectileVelocity(struct UProjectileMovementComponent* InProjectileMovementComponent, struct FVector& InVelocity, bool bCalculateVelocity, float InSpeed, float InVelocityPitchOffset); // Function Solarland.SolarSkill_ProjectileInterface.SetProjectileVelocity // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x219cf90
	void SetGameplayEffectHandle(struct FGameplayEffectSpecHandle InGameplayEffectHandleToSelf, struct FGameplayEffectSpecHandle InGameplayEffectHandleToTarget); // Function Solarland.SolarSkill_ProjectileInterface.SetGameplayEffectHandle // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x219ce30
	struct UProjectileMovementComponent* GetProjectileMovementComponent(); // Function Solarland.SolarSkill_ProjectileInterface.GetProjectileMovementComponent // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2069450
};

// Class Solarland.SolarSkillAndBuffDurationWidget
// Size: 0x3d8 (Inherited: 0x348)
struct USolarSkillAndBuffDurationWidget : USolarUserWidget {
	struct USolarSkillSubDurationWidget* UI_Skill_Duration_Super; // 0x348(0x08)
	struct USolarSkillSubDurationWidget* UI_Skill_Duration_Tactical; // 0x350(0x08)
	struct USolarSkillSubDurationWidget* UI_Skill_Duration_Tactical_2; // 0x358(0x08)
	struct USolarSkillSubDurationWidget* UI_Skill_Duration_Tactical_3; // 0x360(0x08)
	struct FBuffDurationInfo MainBuffInfo; // 0x368(0x60)
	struct TArray<struct FBuffDurationInfo> SubBuffInfo; // 0x3c8(0x10)

	void UpdateSubWidget(); // Function Solarland.SolarSkillAndBuffDurationWidget.UpdateSubWidget // (Final|Native|Private) // @ game+0x219d2d0
	void OnRoleAbilityBuffUpdate(struct FActiveGameplayEffectHandle& ActiveEffectHandle, float Duration, float RemainTime, bool bInPrePhase, float PreDuration, float PreRemainTime); // Function Solarland.SolarSkillAndBuffDurationWidget.OnRoleAbilityBuffUpdate // (Final|Native|Private|HasOutParms) // @ game+0x219c6a0
	void OnRoleAbilityBuffResume(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex); // Function Solarland.SolarSkillAndBuffDurationWidget.OnRoleAbilityBuffResume // (Final|Native|Private) // @ game+0x219c590
	void OnRoleAbilityBuffRemoved(bool bIsMainDuration, struct FActiveGameplayEffectHandle& ActiveEffectHandle); // Function Solarland.SolarSkillAndBuffDurationWidget.OnRoleAbilityBuffRemoved // (Final|Native|Private|HasOutParms) // @ game+0x219c4b0
	void OnRoleAbilityBuffPause(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex); // Function Solarland.SolarSkillAndBuffDurationWidget.OnRoleAbilityBuffPause // (Final|Native|Private) // @ game+0x219c3a0
	void OnRoleAbilityBuffApplied(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex, float Duration, float PreDuration, struct FActiveGameplayEffectHandle& ActiveEffectHandle); // Function Solarland.SolarSkillAndBuffDurationWidget.OnRoleAbilityBuffApplied // (Final|Native|Private|HasOutParms) // @ game+0x219c1a0
	void OnCharacterChange(int32_t InCharacterId); // Function Solarland.SolarSkillAndBuffDurationWidget.OnCharacterChange // (Final|Native|Private) // @ game+0x219bdc0
};

// Class Solarland.SolarSkillGA_SuperEMP
// Size: 0x630 (Inherited: 0x620)
struct USolarSkillGA_SuperEMP : USolarSkillGA_Summon {
	struct FString LocalActiveAbilityAudioName; // 0x618(0x10)
	int32_t EMPLevel; // 0x628(0x04)
};

// Class Solarland.SolarSkillGATA_ChaSocketLoc
// Size: 0x340 (Inherited: 0x340)
struct ASolarSkillGATA_ChaSocketLoc : AGameplayAbilityTargetActor {
	struct FName SocketName; // 0x338(0x08)
};

// Class Solarland.SolarSkillGATA_MissileSwarm
// Size: 0x560 (Inherited: 0x340)
struct ASolarSkillGATA_MissileSwarm : AGameplayAbilityTargetActor {
	struct ASolarCharacter* SourceCharacter; // 0x338(0x08)
	struct TArray<struct UStaticMeshComponent*> PreviewMeshes; // 0x340(0x10)
	struct UStaticMesh* PreviewMeshTemplate; // 0x350(0x08)
	struct UMaterialInterface* PreviewMaterial; // 0x358(0x08)
	char pad_368[0x1f8]; // 0x368(0x1f8)
};

// Class Solarland.SolarSkillGATA_Projectile
// Size: 0x430 (Inherited: 0x340)
struct ASolarSkillGATA_Projectile : AGameplayAbilityTargetActor {
	struct FSolarSkillProjectileData PredictData; // 0x340(0xd0)
	char pad_410[0x20]; // 0x410(0x20)
};

// Class Solarland.SolarSkillGATA_Spline
// Size: 0x460 (Inherited: 0x430)
struct ASolarSkillGATA_Spline : ASolarSkillGATA_Projectile {
	struct USceneComponent* SplineRoot; // 0x430(0x08)
	struct TArray<struct UStaticMeshComponent*> HitPointMeshes; // 0x438(0x10)
	struct TArray<struct USplineMeshComponent*> SplineMeshComponents; // 0x448(0x10)
	bool bVisibilityPropagateToChildren; // 0x458(0x01)
	char pad_459[0x7]; // 0x459(0x07)
};

// Class Solarland.SolarSkillGATA_Summon
// Size: 0x510 (Inherited: 0x430)
struct ASolarSkillGATA_Summon : ASolarSkillGATA_Projectile {
	struct USceneComponent* PreviewRoot; // 0x430(0x08)
	struct USkeletalMeshComponent* PreviewSkeletalMeshComponent; // 0x438(0x08)
	struct UStaticMeshComponent* PreviewStaticMeshComponent; // 0x440(0x08)
	struct UStaticMeshComponent* PreviewCheckMeshComponent; // 0x448(0x08)
	struct FSoftObjectPath SummonConfigPath; // 0x450(0x18)
	struct USolarSummonDetectionConfig* SummonConfig; // 0x468(0x08)
	struct AActor* SummonActorClass; // 0x470(0x08)
	float KeyDownTime; // 0x478(0x04)
	bool bStopUpdatePreview; // 0x47c(0x01)
	char pad_47D[0x3]; // 0x47d(0x03)
	struct FHitResult StopPreviewHitResult; // 0x480(0x88)
	struct USplineMeshComponent* SplineComponent; // 0x508(0x08)

	void K2_UpdatePreview(bool bInCanPlace, struct FPredictProjectilePathResult& InPredictPathResult, int32_t InIndex); // Function Solarland.SolarSkillGATA_Summon.K2_UpdatePreview // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarSkillGC_Burning
// Size: 0x2b0 (Inherited: 0x298)
struct ASolarSkillGC_Burning : AGameplayCueNotify_Actor {
	struct FName BurningActorEffectID; // 0x298(0x08)
	struct FName BurningScreenEffectID; // 0x2a0(0x08)
	char pad_2A8[0x8]; // 0x2a8(0x08)
};

// Class Solarland.SolarSkillGC_Freeze
// Size: 0x360 (Inherited: 0x298)
struct ASolarSkillGC_Freeze : AGameplayCueNotify_Actor {
	struct UParticleSystem* IceSmokeParticle; // 0x298(0x08)
	struct FName IceSmokeAttachPointName; // 0x2a0(0x08)
	char pad_2A8[0x8]; // 0x2a8(0x08)
	struct FTransform IceSmokeTransform; // 0x2b0(0x30)
	struct UParticleSystemComponent* IceSmokeParticleHandle; // 0x2e0(0x08)
	struct FString FreezeStartSoundName1P; // 0x2e8(0x10)
	struct FString FreezeStartSoundName3P; // 0x2f8(0x10)
	struct FString FreezeStartSoundName3PEnemy; // 0x308(0x10)
	struct FString FreezeEndSoundName1P; // 0x318(0x10)
	struct FString FreezeEndSoundName3P; // 0x328(0x10)
	struct FString FreezeEndSoundName3PEnemy; // 0x338(0x10)
	struct UMaterialSimpleEffect* FreezeMatEffectClass; // 0x348(0x08)
	char pad_350[0x10]; // 0x350(0x10)
};

// Class Solarland.SolarSkillGC_RapidBoost
// Size: 0x2b8 (Inherited: 0x298)
struct ASolarSkillGC_RapidBoost : AGameplayCueNotify_Actor {
	struct USolarAbilitySystemComponent* CachedAbilitySystemComponent; // 0x298(0x08)
	int32_t InBackpackFXHandle; // 0x2a0(0x04)
	struct FGameplayTag EffectTag; // 0x2a4(0x08)
	struct FName EffectName; // 0x2ac(0x08)
	char pad_2B4[0x4]; // 0x2b4(0x04)
};

// Class Solarland.SolarSkillGC_SurroundLightning
// Size: 0x2f8 (Inherited: 0x298)
struct ASolarSkillGC_SurroundLightning : AGameplayCueNotify_Actor {
	struct TMap<enum class ESolarSurroundLightningApplyType, struct FSolarSurroundLightningConfig> SurroundLightningApplyTypeConfigs; // 0x298(0x50)
	struct FName EMPEffectID; // 0x2e8(0x08)
	int32_t CharacterEffectHandle; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
};

// Class Solarland.SolarSkillSubDurationWidget
// Size: 0x418 (Inherited: 0x348)
struct USolarSkillSubDurationWidget : USolarUserWidget {
	struct USolarImage* Img_Skill; // 0x348(0x08)
	struct UProgressBar* Progress_Duration_L; // 0x350(0x08)
	struct UProgressBar* Progress_Duration_R; // 0x358(0x08)
	struct UProgressBar* Progress_Recharge; // 0x360(0x08)
	struct USolarInputButton* Btn_Cancel; // 0x368(0x08)
	struct UWidget* Panel_CancelAbility_KeyMapping; // 0x370(0x08)
	struct UWidgetAnimation* Enter_Anim; // 0x378(0x08)
	struct UWidgetAnimation* Exit_Anim; // 0x380(0x08)
	struct UWidgetAnimation* Prompt_Anim; // 0x388(0x08)
	struct UWidgetAnimation* Anim_Skill_Start; // 0x390(0x08)
	float ProgressUpdateInterval; // 0x398(0x04)
	float MainProgressDisableOpacity; // 0x39c(0x04)
	char pad_3A0[0x78]; // 0x3a0(0x78)

	void UpdateWidget(); // Function Solarland.SolarSkillSubDurationWidget.UpdateWidget // (Final|Native|Private) // @ game+0x21a46b0
	void OnRoleAbilityBuffEnd(); // Function Solarland.SolarSkillSubDurationWidget.OnRoleAbilityBuffEnd // (Final|Native|Public) // @ game+0x21a3a90
	void OnRoleAbilityBuffContinous(struct FBuffDurationInfo& Info); // Function Solarland.SolarSkillSubDurationWidget.OnRoleAbilityBuffContinous // (Final|Native|Public|HasOutParms) // @ game+0x21a39b0
};

// Class Solarland.SolarSkillSubsystem
// Size: 0xc0 (Inherited: 0x30)
struct USolarSkillSubsystem : UWorldSubsystem {
	char pad_30[0x20]; // 0x30(0x20)
	struct TArray<struct TWeakObjectPtr<struct UUserWidget>> FullScreenWidgetArray; // 0x50(0x10)
	char pad_60[0x60]; // 0x60(0x60)

	bool TryGetGeneralSummonHitResult(struct FHitResult& OutHitResult, struct AActor* InSummoner, struct USolarSummonDetectionConfig* InSummonConfig); // Function Solarland.SolarSkillSubsystem.TryGetGeneralSummonHitResult // (Final|Native|Public|HasOutParms) // @ game+0x21a4520
	bool IsWithinQuickSummonTime(struct USolarSummonDetectionConfig* InSummonConfig, float InStartTime); // Function Solarland.SolarSkillSubsystem.IsWithinQuickSummonTime // (Final|Native|Public|BlueprintCallable) // @ game+0x21a3070
	void HideSkillFullScreenWidget(struct UObject* InWidgetClass, enum class ESlateVisibility InSlateVisibility); // Function Solarland.SolarSkillSubsystem.HideSkillFullScreenWidget // (Final|Native|Public) // @ game+0x21a2de0
	struct FRotator GetSummonPlaceOrientation(struct FVector& InPlaceLocation, struct FVector& InPlaceNormal); // Function Solarland.SolarSkillSubsystem.GetSummonPlaceOrientation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21a2cd0
	struct UUserWidget* GetSkillFullScreenWidget(struct UObject* InWidgetClass); // Function Solarland.SolarSkillSubsystem.GetSkillFullScreenWidget // (Final|Native|Public) // @ game+0x21a28d0
	bool CanSummonPlaceSpace(struct FSolarSummonCondition& InCondition, struct FVector& InPlaceLocation, struct FVector& InPlaceNormal, struct FRotator& InPlaceOrientation); // Function Solarland.SolarSkillSubsystem.CanSummonPlaceSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21a18d0
	bool CanSummonPlaceAngle(struct FSolarSummonCondition& InCondition, struct FVector& InPlaceNormal); // Function Solarland.SolarSkillSubsystem.CanSummonPlaceAngle // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21a1760
	struct UUserWidget* AddSkillFullScreenWidgetToBattlePanel(struct UObject* InWidgetClass); // Function Solarland.SolarSkillSubsystem.AddSkillFullScreenWidgetToBattlePanel // (Final|Native|Public) // @ game+0x21a1620
};

// Class Solarland.SolarSoundPlayer
// Size: 0x240 (Inherited: 0x228)
struct ASolarSoundPlayer : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct UAkComponent* AkAudioComponent; // 0x230(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x238(0x08)

	struct ASolarSoundPlayer* PostSoundEventAtLocation(struct UObject* WorldContextObject, struct FString EventName, struct FVector& Location, bool bAutoDestroy); // Function Solarland.SolarSoundPlayer.PostSoundEventAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x21a3c20
	void PostSoundEvent(struct FString EventName); // Function Solarland.SolarSoundPlayer.PostSoundEvent // (Final|Native|Public) // @ game+0x21a3b80
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarSoundPlayer.InitSolarAkGameObject // (Final|Native|Public) // @ game+0x21a2f50
};

// Class Solarland.SolarSpawnAdjustConfig
// Size: 0x90 (Inherited: 0x30)
struct USolarSpawnAdjustConfig : UDataAsset {
	bool bDrawDebug; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<enum class EObjectTypeQuery> AdjustBlockTypes; // 0x38(0x10)
	struct FVector AdjustDetectBoxExtent; // 0x48(0x0c)
	struct FVector AdjustDetectBoxOffset; // 0x54(0x0c)
	bool bUseActorRotation; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	float AdjustVerticalDist; // 0x64(0x04)
	float AdjustHorizonDist; // 0x68(0x04)
	float AdjustFindStep; // 0x6c(0x04)
	float TraceUpLength; // 0x70(0x04)
	float TraceDownLength; // 0x74(0x04)
	float TraceZOffset; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct TArray<enum class EObjectTypeQuery> AdjustPlaceTypes; // 0x80(0x10)
};

// Class Solarland.SolarSpecABP_Skill
// Size: 0x2c0 (Inherited: 0x270)
struct USolarSpecABP_Skill : UAnimInstance {
	struct ASolarCharacter* SolarCharacterOwner; // 0x268(0x08)
	float ViewPitch; // 0x270(0x04)
	float ViewYaw; // 0x274(0x04)
	char pad_280[0x4]; // 0x280(0x04)
	float InputDirection; // 0x284(0x04)
	float Speed; // 0x288(0x04)
	char bIsWalking : 1; // 0x28c(0x01)
	char bIsCrouching : 1; // 0x28c(0x01)
	char bIsSixDirRunForward : 1; // 0x28c(0x01)
	char pad_28C_3 : 5; // 0x28c(0x01)
	enum class EWalkMode CurrentWalkMode; // 0x28d(0x01)
	enum class EIdleTurnType IdleTurnType; // 0x28e(0x01)
	char pad_28F[0x1]; // 0x28f(0x01)
	float TurnExplicitTime; // 0x290(0x04)
	float DamageDirection; // 0x294(0x04)
	float DamageReactionAlpha; // 0x298(0x04)
	float DamageNormalizedTime; // 0x29c(0x04)
	enum class EAirMoveMode CurrentAirMoveMode; // 0x2a0(0x01)
	enum class EAirMoveMode LastAirMoveMode; // 0x2a1(0x01)
	char pad_2A2[0xf]; // 0x2a2(0x0f)
	bool bNewJet; // 0x2b1(0x01)
	enum class ESkillAnimType CurrentSkillAnimType; // 0x2b2(0x01)
	enum class ESkillAnimRightHandType CurrentSkillAnimRightHandType; // 0x2b3(0x01)
	char pad_2B4[0xc]; // 0x2b4(0x0c)

	void SetLeftHandIKTransform(struct FTransform& RelativeTrans); // Function Solarland.SolarSpecABP_Skill.SetLeftHandIKTransform // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
	struct FVector GetJetPackDashAnimationBlend(); // Function Solarland.SolarSpecABP_Skill.GetJetPackDashAnimationBlend // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x21a2890
	struct FVector GetInputVector(); // Function Solarland.SolarSpecABP_Skill.GetInputVector // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x21a26f0
	float GenJumpDirection(float InInputDirection); // Function Solarland.SolarSpecABP_Skill.GenJumpDirection // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x21a2430
	bool CheckNewJetAndReset(); // Function Solarland.SolarSpecABP_Skill.CheckNewJetAndReset // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x21a1b10
};

// Class Solarland.SolarSpecABP_Vehicle
// Size: 0x2f0 (Inherited: 0x270)
struct USolarSpecABP_Vehicle : UAnimInstance {
	struct ASolarCharacter* SolarCharacterOwner; // 0x268(0x08)
	float ViewPitch; // 0x270(0x04)
	float ViewYaw; // 0x274(0x04)
	enum class EInVehicleState InVehicleState; // 0x278(0x01)
	enum class EVehicleAnimationType CurrentVehicleAnimationType; // 0x279(0x01)
	float CurrentVehicleRotationValue; // 0x27c(0x04)
	struct FVector2D CurrentInputOnVehicle; // 0x280(0x08)
	float LeanTowardRightValue; // 0x288(0x04)
	bool bVehicleInAir; // 0x28c(0x01)
	float AngleBetweenViewAndVehicle; // 0x290(0x04)
	float RotateThreshold; // 0x294(0x04)
	float RotateSpeed; // 0x298(0x04)
	float RotateSpeedForAiming; // 0x29c(0x04)
	struct FRotator CurrentRotateOffset; // 0x2a0(0x0c)
	char pad_2AF[0x6]; // 0x2af(0x06)
	bool bIronManCanFlyFlight; // 0x2b5(0x01)
	bool bIronManForceOutInVehicleState; // 0x2b6(0x01)
	bool bHasPassenger; // 0x2b7(0x01)
	float VehicleSpeed; // 0x2b8(0x04)
	bool bIronManUseIK; // 0x2bc(0x01)
	enum class EDriveTurnType DriveIdleTurnType; // 0x2bd(0x01)
	char pad_2BE[0x2]; // 0x2be(0x02)
	float SteeringRoatingratio; // 0x2c0(0x04)
	struct FVector LeftHandOnRudderLocation; // 0x2c4(0x0c)
	struct FVector RightHandOnRudderLocation; // 0x2d0(0x0c)
	struct FVector IronManHandRIKLocation; // 0x2dc(0x0c)
	enum class EWeaponStatus WeaponStatus; // 0x2e8(0x01)
	char pad_2E9[0x7]; // 0x2e9(0x07)
};

// Class Solarland.SolarSpecialEffectsMgr
// Size: 0x30 (Inherited: 0x28)
struct USolarSpecialEffectsMgr : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Solarland.SolarSpectateInfo
// Size: 0x578 (Inherited: 0x228)
struct ASolarSpectateInfo : AActor {
	struct FMulticastInlineDelegate OnBeginUpdateSpectateInfo; // 0x228(0x10)
	struct FMulticastInlineDelegate OnStopUpdateSpectateInfo; // 0x238(0x10)
	struct FMulticastInlineDelegate OnOtherPlayerBeginSpectateMe; // 0x248(0x10)
	struct FMulticastInlineDelegate OnOtherPlayerStopSpectateMe; // 0x258(0x10)
	struct FMulticastInlineDelegate OnBeforeSpectateTargetChange; // 0x268(0x10)
	struct FMulticastInlineDelegate OnSpectateTargetChanged; // 0x278(0x10)
	struct FMulticastInlineDelegate OnSpectatePhaseChanged; // 0x288(0x10)
	struct FMulticastInlineDelegate OnSwitchSpectateTargetFailed; // 0x298(0x10)
	struct FMulticastInlineDelegate OnSpectatorOfMyTargetChanged; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnSpectateCharacterOfMyTargetReadied; // 0x2b8(0x10)
	enum class ESpectatePhase SpectatePhase; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)
	struct ASolarPlayerState* SpectateTargetPlayerState; // 0x2d0(0x08)
	char pad_2D8[0x10]; // 0x2d8(0x10)
	struct TArray<struct ASolarPlayerState*> PlayersSpectatingMyTarget; // 0x2e8(0x10)
	struct TArray<struct ASolarPlayerState*> PlayersSpectatingMe; // 0x2f8(0x10)
	char pad_308[0x10]; // 0x308(0x10)
	bool bIsServerRecording; // 0x318(0x01)
	char pad_319[0x7]; // 0x319(0x07)
	struct USolarReplayManager* ReplayManager; // 0x320(0x08)
	struct FSpectateConditions SpectateConditions; // 0x328(0x20)
	char pad_348[0x80]; // 0x348(0x80)
	struct TArray<struct FGiftSenderInfo> SendGiftPlayerInfo; // 0x3c8(0x10)
	struct FInteractiveTaskStatus TaskStatus; // 0x3d8(0x78)
	struct UDataTable* InteractiveTaskTable; // 0x450(0x08)
	struct FString TaskTablePath; // 0x458(0x10)
	struct ASolarPlayerState* LatestAttacker; // 0x468(0x08)
	struct ASolarPlayerState* LatestVictim; // 0x470(0x08)
	char pad_478[0x10]; // 0x478(0x10)
	float TotalCausedDamage; // 0x488(0x04)
	struct FRotator PlayerCameraRotation; // 0x48c(0x0c)
	struct TArray<struct FReplicateItemData> CharacterBackpackItems; // 0x498(0x10)
	struct TArray<struct FReplicateMaxPileData> CharacterBackpackItemMaxPiles; // 0x4a8(0x10)
	float CharacterVJetChargeTime; // 0x4b8(0x04)
	int32_t CharacterVJetTotalTimes; // 0x4bc(0x04)
	int32_t CharacterVJetRestTimes; // 0x4c0(0x04)
	int32_t CharacterVJetModuleLevel; // 0x4c4(0x04)
	float CharacterVJetStartChargeTime; // 0x4c8(0x04)
	float CharacterHJetChargeTime; // 0x4cc(0x04)
	int32_t CharacterHJetTotalTimes; // 0x4d0(0x04)
	int32_t CharacterHJetRestTimes; // 0x4d4(0x04)
	int32_t CharacterHJetModuleLevel; // 0x4d8(0x04)
	float CharacterHJetStartChargeTime; // 0x4dc(0x04)
	struct TArray<struct FCharacterRoleAbilityInfo> CharacterRoleAbilitiesInfo; // 0x4e0(0x10)
	struct FRepCountdownData SpectateCountdownData; // 0x4f0(0x2c)
	char pad_51C[0x4]; // 0x51c(0x04)
	struct TArray<struct FBattleUpgradeEffectParamData> BattleUpgradeEffectData; // 0x520(0x10)
	int32_t ExtraARMag; // 0x530(0x04)
	int32_t ExtraSGMag; // 0x534(0x04)
	bool bExposedByRadar; // 0x538(0x01)
	char pad_539[0x7]; // 0x539(0x07)
	struct FVehicleSpectateInfo VehicleSpectateInfo; // 0x540(0x30)
	char bShowBattlePrompt : 1; // 0x570(0x01)
	char pad_570_1 : 7; // 0x570(0x01)
	char pad_571[0x7]; // 0x571(0x07)

	void SetSpectateTargetForPlayingReplay(struct ASolarPlayerState* TargetPlayerState); // Function Solarland.SolarSpectateInfo.SetSpectateTargetForPlayingReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x21a4490
	void ServerStopSpectateOtherPlayer_Internal(); // Function Solarland.SolarSpectateInfo.ServerStopSpectateOtherPlayer_Internal // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1554560
	void ServerStopSpectateOtherPlayer(); // Function Solarland.SolarSpectateInfo.ServerStopSpectateOtherPlayer // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x21a4470
	void ServerSpectatePreviousPlayer(); // Function Solarland.SolarSpectateInfo.ServerSpectatePreviousPlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1554fe0
	void ServerSpectateNextPlayer(); // Function Solarland.SolarSpectateInfo.ServerSpectateNextPlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x7b9eb0
	void ServerSetSpectateConditions_Internal(struct FSpectateConditions InSpectateConditions); // Function Solarland.SolarSpectateInfo.ServerSetSpectateConditions_Internal // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x21a4360
	void ServerSetSpectateConditions(struct FSpectateConditions& InSpectateConditions); // Function Solarland.SolarSpectateInfo.ServerSetSpectateConditions // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21a4250
	void ServerSendGiftAction(int32_t GiftID, int32_t Num); // Function Solarland.SolarSpectateInfo.ServerSendGiftAction // (Net|Native|Event|Public|NetServer) // @ game+0x21a4180
	void ServerRequestSendTask(int32_t InTaskID); // Function Solarland.SolarSpectateInfo.ServerRequestSendTask // (Net|Native|Event|Public|NetServer) // @ game+0x21a40f0
	void ServerRequestIncreaseTargetTaskLevel(); // Function Solarland.SolarSpectateInfo.ServerRequestIncreaseTargetTaskLevel // (Net|Native|Event|Public|NetServer) // @ game+0x1555e80
	void ServerRequestAvailableTask(); // Function Solarland.SolarSpectateInfo.ServerRequestAvailableTask // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1554400
	void ServerChangeLikeValue(int32_t Value, int32_t AddInteractValue, enum class ESocialActionType ActionType); // Function Solarland.SolarSpectateInfo.ServerChangeLikeValue // (Net|Native|Event|Public|NetServer) // @ game+0x21a3ff0
	void ServerBeginSpectateOtherPlayer_Internal(); // Function Solarland.SolarSpectateInfo.ServerBeginSpectateOtherPlayer_Internal // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x7dd5a0
	void ServerBeginSpectateOtherPlayer(); // Function Solarland.SolarSpectateInfo.ServerBeginSpectateOtherPlayer // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x21a3fd0
	bool SendTask(int32_t InTaskID); // Function Solarland.SolarSpectateInfo.SendTask // (Final|Native|Public) // @ game+0x21a3f30
	void SendGift(int32_t GiftID, int32_t Num); // Function Solarland.SolarSpectateInfo.SendGift // (Final|Native|Public) // @ game+0x21a3e60
	void RequestSendTask(int32_t InTaskID); // Function Solarland.SolarSpectateInfo.RequestSendTask // (Final|Native|Public) // @ game+0x21a3dd0
	void RequestIncreaseTargetTaskLevel(); // Function Solarland.SolarSpectateInfo.RequestIncreaseTargetTaskLevel // (Final|Native|Public) // @ game+0x21a3db0
	void RequestAvailableTask(); // Function Solarland.SolarSpectateInfo.RequestAvailableTask // (Final|Native|Public) // @ game+0x21a3d90
	void OnTargetSpecInfoSetToItsPlayerState(struct ASolarSpectateInfo* TargetSpecInfo); // Function Solarland.SolarSpectateInfo.OnTargetSpecInfoSetToItsPlayerState // (Final|Native|Private) // @ game+0x21a3af0
	void OnSwitchSpectateTargetFailed__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnSwitchSpectateTargetFailed__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnStopUpdateSpectateInfo__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnStopUpdateSpectateInfo__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnStopRecordingReplay(); // Function Solarland.SolarSpectateInfo.OnStopRecordingReplay // (Final|Native|Public) // @ game+0x21a3ad0
	void OnStartRecordingReplay(); // Function Solarland.SolarSpectateInfo.OnStartRecordingReplay // (Final|Native|Public) // @ game+0x21a3ab0
	void OnSpectatorOfMyTargetChanged__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnSpectatorOfMyTargetChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSpectateTargetChanged__DelegateSignature(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnSpectateTargetChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSpectatePhaseChanged__DelegateSignature(enum class ESpectatePhase CurrentPhase); // DelegateFunction Solarland.SolarSpectateInfo.OnSpectatePhaseChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnSpectateCharacterOfMyTargetReadied__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnSpectateCharacterOfMyTargetReadied__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnRep_VehicleSpectateInfo(struct FVehicleSpectateInfo PreviousVehicleSpectateInfo); // Function Solarland.SolarSpectateInfo.OnRep_VehicleSpectateInfo // (Final|Native|Protected) // @ game+0x21a3850
	void OnRep_TotalCausedDamage(); // Function Solarland.SolarSpectateInfo.OnRep_TotalCausedDamage // (Final|Native|Public) // @ game+0x21a3830
	void OnRep_TaskStatus(); // Function Solarland.SolarSpectateInfo.OnRep_TaskStatus // (Final|Native|Public) // @ game+0x21a3810
	void OnRep_SpectateTargetPlayerState(struct ASolarPlayerState* LastTarget); // Function Solarland.SolarSpectateInfo.OnRep_SpectateTargetPlayerState // (Final|Native|Private) // @ game+0x21a3780
	void OnRep_SpectatePhase(); // Function Solarland.SolarSpectateInfo.OnRep_SpectatePhase // (Final|Native|Private) // @ game+0x21a3760
	void OnRep_SpectateCountdownData(); // Function Solarland.SolarSpectateInfo.OnRep_SpectateCountdownData // (Final|Native|Protected) // @ game+0x21a3740
	void OnRep_PlayersSpectatingMyTarget(); // Function Solarland.SolarSpectateInfo.OnRep_PlayersSpectatingMyTarget // (Final|Native|Private) // @ game+0x21a3720
	void OnRep_PlayersSpectatingMe(); // Function Solarland.SolarSpectateInfo.OnRep_PlayersSpectatingMe // (Final|Native|Private) // @ game+0x21a3700
	void OnRep_ExposedByRadar(); // Function Solarland.SolarSpectateInfo.OnRep_ExposedByRadar // (Final|Native|Protected) // @ game+0x21a36e0
	void OnRep_CharacterVJetTotalTimes(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterVJetTotalTimes // (Final|Native|Protected) // @ game+0x21a36c0
	void OnRep_CharacterVJetRestTimes(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterVJetRestTimes // (Final|Native|Protected) // @ game+0x21a36a0
	void OnRep_CharacterVJetModuleLevel(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterVJetModuleLevel // (Final|Native|Protected) // @ game+0x21a3680
	void OnRep_CharacterRoleAbilitiesInfo(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterRoleAbilitiesInfo // (Final|Native|Private) // @ game+0x21a3660
	void OnRep_CharacterHJetTotalTimes(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterHJetTotalTimes // (Final|Native|Protected) // @ game+0x21a3640
	void OnRep_CharacterHJetRestTimes(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterHJetRestTimes // (Final|Native|Protected) // @ game+0x21a3620
	void OnRep_CharacterHJetModuleLevel(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterHJetModuleLevel // (Final|Native|Protected) // @ game+0x21a3600
	void OnRep_CharacterBackpackItems(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterBackpackItems // (Final|Native|Private) // @ game+0x21a35e0
	void OnRep_bIsServerRecording(); // Function Solarland.SolarSpectateInfo.OnRep_bIsServerRecording // (Final|Native|Private) // @ game+0x21a3990
	void OnRep_BattleUpgradeEffectData(); // Function Solarland.SolarSpectateInfo.OnRep_BattleUpgradeEffectData // (Final|Native|Protected) // @ game+0x21a35c0
	void OnOtherPlayerStopSpectateMe__DelegateSignature(struct ASolarPlayerState* SpectatorPlayerState, struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnOtherPlayerStopSpectateMe__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnOtherPlayerBeginSpectateMe__DelegateSignature(struct ASolarPlayerState* SpectatorPlayerState, struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnOtherPlayerBeginSpectateMe__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnOpenAirBoxNum(enum class EStatisticsType InStatType); // Function Solarland.SolarSpectateInfo.OnOpenAirBoxNum // (Final|Native|Public) // @ game+0x21a3540
	void OnLikeActionCalled(int32_t Value, int32_t AddInteractValue, enum class ESocialActionType ActionType); // Function Solarland.SolarSpectateInfo.OnLikeActionCalled // (Final|Native|Public) // @ game+0x21a3430
	void OnIncreaseKillNumWithWeaponType(enum class EStatisticsType InStatType, int32_t InWeaponID); // Function Solarland.SolarSpectateInfo.OnIncreaseKillNumWithWeaponType // (Final|Native|Public) // @ game+0x21a3360
	void OnIncreaseKillNumWithPunch(enum class EStatisticsType InStatType); // Function Solarland.SolarSpectateInfo.OnIncreaseKillNumWithPunch // (Final|Native|Public) // @ game+0x21a32e0
	void OnIncreaseKillNumWithAnyVehicle(enum class EStatisticsType InStatType); // Function Solarland.SolarSpectateInfo.OnIncreaseKillNumWithAnyVehicle // (Final|Native|Public) // @ game+0x21a3260
	void OnGiftActionCalled(int32_t GiftID, int32_t Num); // Function Solarland.SolarSpectateInfo.OnGiftActionCalled // (Final|Native|Public) // @ game+0x21a3190
	void OnDamageChanged__DelegateSignature(float Damage); // DelegateFunction Solarland.SolarSpectateInfo.OnDamageChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnCurrentPlayerCountChanged(); // Function Solarland.SolarSpectateInfo.OnCurrentPlayerCountChanged // (Final|Native|Public) // @ game+0x21a3170
	void OnBeginUpdateSpectateInfo__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnBeginUpdateSpectateInfo__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnBeforeSpectateTargetChange__DelegateSignature(struct ASolarPlayerState* NewTarget, struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnBeforeSpectateTargetChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnAvailableAirDropsNumChanged(); // Function Solarland.SolarSpectateInfo.OnAvailableAirDropsNumChanged // (Final|Native|Public) // @ game+0x21a3170
	bool NeedUpdateSpectateInfo(); // Function Solarland.SolarSpectateInfo.NeedUpdateSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21a3140
	bool IsSpectatingOtherPlayer(); // Function Solarland.SolarSpectateInfo.IsSpectatingOtherPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21a3040
	bool IsRecordingReplay(); // Function Solarland.SolarSpectateInfo.IsRecordingReplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21a3020
	bool IncreaseTaskLevel(struct ASolarPlayerState* SendPlayer); // Function Solarland.SolarSpectateInfo.IncreaseTaskLevel // (Final|Native|Public) // @ game+0x21a2eb0
	struct TArray<struct ASolarPlayerState*> GetSpectatorsOfMyTarget(); // Function Solarland.SolarSpectateInfo.GetSpectatorsOfMyTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x21a2c90
	struct TArray<struct ASolarPlayerState*> GetSpectatingMePlayerStates(); // Function Solarland.SolarSpectateInfo.GetSpectatingMePlayerStates // (Final|Native|Public|BlueprintCallable) // @ game+0x21a2c50
	struct ASolarPlayerState* GetSpectateTargetPlayerState(); // Function Solarland.SolarSpectateInfo.GetSpectateTargetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x214c600
	struct ASolarCharacter* GetSpectateTargetCharacter(); // Function Solarland.SolarSpectateInfo.GetSpectateTargetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21a2c10
	void GetSpectateReportInfo(struct FSpectateReportInfo& SpectateReportInfo, bool HasNextTarget); // Function Solarland.SolarSpectateInfo.GetSpectateReportInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21a2b10
	struct ASolarSpectateInfo* GetSpectateInfoOfMyTarget(); // Function Solarland.SolarSpectateInfo.GetSpectateInfoOfMyTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21a2ae0
	struct FSpectateConditions GetSpectateConditions(); // Function Solarland.SolarSpectateInfo.GetSpectateConditions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21a29a0
	struct ASolarPlayerState* GetSolarPlayerState(); // Function Solarland.SolarSpectateInfo.GetSolarPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21a2970
	bool GetInteractiveTaskConfigByID(int32_t InTaskID, struct FInteractiveTaskConfig& OutConfig); // Function Solarland.SolarSpectateInfo.GetInteractiveTaskConfigByID // (Final|Native|Public|HasOutParms) // @ game+0x21a2730
	struct TArray<int32_t> GetAvailableTaskByRandom(); // Function Solarland.SolarSpectateInfo.GetAvailableTaskByRandom // (Final|Native|Public) // @ game+0x21a2670
	void GetAllInteractiveTaskConfigFromTable(struct TArray<struct FInteractiveTaskConfig>& OutAllConfig); // Function Solarland.SolarSpectateInfo.GetAllInteractiveTaskConfigFromTable // (Final|Native|Public|HasOutParms) // @ game+0x21a2550
	struct TArray<struct ASolarPlayerState*> GetAllAlivePlayers(); // Function Solarland.SolarSpectateInfo.GetAllAlivePlayers // (Final|Native|Public) // @ game+0x21a24d0
	bool CostCurrencyByTaskAction(int32_t InTaskID, int32_t CurTasklevel); // Function Solarland.SolarSpectateInfo.CostCurrencyByTaskAction // (Final|Native|Public) // @ game+0x21a2360
	void ClientNotifyTaskActionResult(enum class ESocialActionType ActionType, int32_t InTaskID, int32_t CurTasklevel, struct ASolarPlayerState* SendPlayer, struct ASolarPlayerState* ReceivePlayer, int32_t NowLikeValue); // Function Solarland.SolarSpectateInfo.ClientNotifyTaskActionResult // (Net|Native|Event|Public|NetClient) // @ game+0x21a2180
	void ClientNotifySelfTaskActionResult(enum class ESocialActionType ActionType, int32_t InTaskID, int32_t CurTasklevel, struct ASolarPlayerState* SendPlayer, struct ASolarPlayerState* ReceivePlayer, int32_t NowLikeValue); // Function Solarland.SolarSpectateInfo.ClientNotifySelfTaskActionResult // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x21a1fa0
	void ClientNotifySelfLikeValueChanged(enum class ESocialActionType ActionType, int32_t DeltaValue, int32_t NowValue, struct ASolarPlayerState* SendPlayer, struct ASolarPlayerState* ReceivePlayer, int32_t GiftID); // Function Solarland.SolarSpectateInfo.ClientNotifySelfLikeValueChanged // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x21a1dc0
	void ClientNotifyLikeValueChanged(enum class ESocialActionType ActionType, int32_t DeltaValue, int32_t NowValue, struct ASolarPlayerState* SendPlayer, struct ASolarPlayerState* ReceivePlayer, int32_t GiftID); // Function Solarland.SolarSpectateInfo.ClientNotifyLikeValueChanged // (Net|Native|Event|Public|NetClient) // @ game+0x21a1be0
	void ClientNotifyAvailableTaskResult(struct TArray<int32_t> AvailableTask); // Function Solarland.SolarSpectateInfo.ClientNotifyAvailableTaskResult // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x21a1b40
	bool CheckIsCanSpectateOthers(); // Function Solarland.SolarSpectateInfo.CheckIsCanSpectateOthers // (Final|Native|Public) // @ game+0x21a1ae0
	bool CanISpectate(struct ASolarPlayerState* Target); // Function Solarland.SolarSpectateInfo.CanISpectate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21a16c0
};

// Class Solarland.TickWhenPauseCineCameraActor
// Size: 0x860 (Inherited: 0x860)
struct ATickWhenPauseCineCameraActor : ACineCameraActor {
};

// Class Solarland.SolarSpectateLevelSequenceActor
// Size: 0x350 (Inherited: 0x2b8)
struct ASolarSpectateLevelSequenceActor : ALevelSequenceActor {
	struct FSoftObjectPath SwitchTargetSequencePath; // 0x2b8(0x18)
	struct FString AtLeastPlayToMark; // 0x2d0(0x10)
	char pad_2E0[0x18]; // 0x2e0(0x18)
	struct ULevelSequence* SwitchTargetSequence; // 0x2f8(0x08)
	struct ACineCameraActor* SequenceCamera; // 0x300(0x08)
	struct ACameraRig_Crane* SequenceCameraRigCrane; // 0x308(0x08)
	char pad_310[0x40]; // 0x310(0x40)

	void OnSequenceStoped(); // Function Solarland.SolarSpectateLevelSequenceActor.OnSequenceStoped // (Final|Native|Private) // @ game+0x21a7e20
	void OnSequenceFinished(); // Function Solarland.SolarSpectateLevelSequenceActor.OnSequenceFinished // (Final|Native|Private) // @ game+0x21a7e00
};

// Class Solarland.SolarSpectatorPawn
// Size: 0x2c8 (Inherited: 0x2b0)
struct ASolarSpectatorPawn : ASpectatorPawn {
	struct USpringArmComponent* SpringArmComponent; // 0x2b0(0x08)
	struct UCameraComponent* CameraComponent; // 0x2b8(0x08)
	struct USolarInputActionContext* InputActionContext; // 0x2c0(0x08)
};

// Class Solarland.SolarSplineMovementComponent
// Size: 0x128 (Inherited: 0xf0)
struct USolarSplineMovementComponent : UMovementComponent {
	struct USplineComponent* SplineComponent; // 0xf0(0x08)
	struct FMulticastInlineDelegate OnSolarSplineMovementComponentStop; // 0xf8(0x10)
	float SplineLengthRatio; // 0x108(0x04)
	struct FRotator SplineRotation; // 0x10c(0x0c)
	char pad_118[0x10]; // 0x118(0x10)
};

// Class Solarland.SolarState
// Size: 0x40 (Inherited: 0x28)
struct USolarState : UObject {
	struct UObject* StateMachineOwner; // 0x28(0x08)
	struct USolarStateMachine* OwnerStateMachine; // 0x30(0x08)
	char pad_38[0x8]; // 0x38(0x08)

	void ReceiveUpdateState(float DeltaTime); // Function Solarland.SolarState.ReceiveUpdateState // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveInitializeState(); // Function Solarland.SolarState.ReceiveInitializeState // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveEndState(struct USolarState* NextState); // Function Solarland.SolarState.ReceiveEndState // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveBeginState(); // Function Solarland.SolarState.ReceiveBeginState // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct USolarState* K2_CreateSolarState(struct USolarStateMachine* StateMachine, struct USolarState* StateClass, struct FName Name); // Function Solarland.SolarState.K2_CreateSolarState // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x21a7c10
	void GotoState(); // Function Solarland.SolarState.GotoState // (Native|Public|BlueprintCallable) // @ game+0x21a7a70
	struct USolarState* GetState(struct FName& StateClassName); // Function Solarland.SolarState.GetState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21a79d0
};

// Class Solarland.SolarStateMachine
// Size: 0x98 (Inherited: 0x28)
struct USolarStateMachine : UObject {
	struct TMap<struct FName, struct USolarState*> StateMap; // 0x28(0x50)
	struct USolarState* CurrentState; // 0x78(0x08)
	struct USolarState* PreviousState; // 0x80(0x08)
	char pad_88[0x10]; // 0x88(0x10)

	bool IsInState(struct FName& StateName); // Function Solarland.SolarStateMachine.IsInState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21a7b70
	void AddState(struct USolarState* NewState, struct FName& StateName); // Function Solarland.SolarStateMachine.AddState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21a7750
};

// Class Solarland.SolarSummonDetectionConfig
// Size: 0xb0 (Inherited: 0x30)
struct USolarSummonDetectionConfig : UDataAsset {
	struct FSolarSummonPreview SummonPreview; // 0x30(0x18)
	bool bEnableQuickSummon; // 0x48(0x01)
	bool bEnableQuickSummonInAir; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
	struct USolarQuickSummonProxy* QuickSummonClass; // 0x50(0x08)
	float QuickSummonTime; // 0x58(0x04)
	bool bEnableCheckCondition; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	struct FSolarSummonCondition SummonCondition; // 0x60(0x50)
};

// Class Solarland.SolarSummonEnergyWall
// Size: 0x440 (Inherited: 0x3e0)
struct ASolarSummonEnergyWall : ASummonItemBase {
	char pad_3E0[0x8]; // 0x3e0(0x08)
	float HitLocationLifeTime; // 0x3e8(0x04)
	char pad_3EC[0x4]; // 0x3ec(0x04)
	struct TMap<struct FName, struct FSolarSummonTimer> HitLocations; // 0x3f0(0x50)

	void OnReceiveHitResult(bool InbVisible, struct FName InHitLocationName, struct FHitResult& InHitResult); // Function Solarland.SolarSummonEnergyWall.OnReceiveHitResult // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void HandleHitResult(struct FHitResult& InHitResult); // Function Solarland.SolarSummonEnergyWall.HandleHitResult // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x21a7a90
};

// Class Solarland.SolarSummonJumpPad
// Size: 0x4b8 (Inherited: 0x3e0)
struct ASolarSummonJumpPad : ASummonItemBase {
	char pad_3E0[0x58]; // 0x3e0(0x58)
	struct USkeletalMeshComponent* Mesh; // 0x438(0x08)
	struct UAnimSequence* SpawnAnim; // 0x440(0x08)
	struct UAnimSequence* LaunchAnim; // 0x448(0x08)
	float HorizantalSpeedMultipleFac; // 0x450(0x04)
	float MaxHorizantalSpeed; // 0x454(0x04)
	float VerticalSpeed; // 0x458(0x04)
	char pad_45C[0x4]; // 0x45c(0x04)
	struct UGameplayEffect* LaunchCDEffect; // 0x460(0x08)
	struct FName SpawnSound; // 0x468(0x08)
	struct FName DestroySound; // 0x470(0x08)
	struct FName HitSoundAttacker2D; // 0x478(0x08)
	struct FName HitSound; // 0x480(0x08)
	struct FName LaunchSound; // 0x488(0x08)
	struct UParticleSystem* SmokeFX; // 0x490(0x08)
	struct UParticleSystem* DestroyFX; // 0x498(0x08)
	int32_t LaunchCount; // 0x4a0(0x04)
	int32_t HitCount; // 0x4a4(0x04)
	float VehicleHitCheckInterval; // 0x4a8(0x04)
	char pad_4AC[0x4]; // 0x4ac(0x04)
	struct TWeakObjectPtr<struct UShapeComponent> VehicleCheckShape; // 0x4b0(0x08)

	void OnRep_LaunchCount(); // Function Solarland.SolarSummonJumpPad.OnRep_LaunchCount // (Final|Native|Protected) // @ game+0x21a7de0
	void OnRep_HitCount(); // Function Solarland.SolarSummonJumpPad.OnRep_HitCount // (Final|Native|Protected) // @ game+0x21a7dc0
	void OnCharacterEndOverlap(struct ASolarCharacter* OtherCharacter); // Function Solarland.SolarSummonJumpPad.OnCharacterEndOverlap // (Native|Protected|BlueprintCallable) // @ game+0x21a7d30
	void OnCharacterBeginOverlap(struct ASolarCharacter* OtherCharacter); // Function Solarland.SolarSummonJumpPad.OnCharacterBeginOverlap // (Native|Protected|BlueprintCallable) // @ game+0x219bd10
};

// Class Solarland.SolarSummonLifeCycleComponent
// Size: 0xc8 (Inherited: 0xb0)
struct USolarSummonLifeCycleComponent : UActorComponent {
	struct FMulticastSparseDelegate OnLifeCycleEnd; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	float AliveTimeMax; // 0xb4(0x04)
	float AliveTimer; // 0xb8(0x04)
	float HealthPointsMax; // 0xbc(0x04)
	float HealthPoints; // 0xc0(0x04)
	float HealthPointsDwindle; // 0xc4(0x04)

	void UpdateDwindleHealthPoints(float InDeltaTime); // Function Solarland.SolarSummonLifeCycleComponent.UpdateDwindleHealthPoints // (Final|Native|Protected|BlueprintCallable) // @ game+0x21a8160
	void UpdateAliveTime(float InDeltaTime); // Function Solarland.SolarSummonLifeCycleComponent.UpdateAliveTime // (Final|Native|Protected|BlueprintCallable) // @ game+0x21a80e0
	void SetHealthPointsMax(float InMaxHealthPoints); // Function Solarland.SolarSummonLifeCycleComponent.SetHealthPointsMax // (Final|Native|Public|BlueprintCallable) // @ game+0x21a8040
	void SetHealthPointsDwindle(float InDwindleHealthPoints); // Function Solarland.SolarSummonLifeCycleComponent.SetHealthPointsDwindle // (Final|Native|Public|BlueprintCallable) // @ game+0x21a7fc0
	void SetHealthPoints(float InHealthPoints); // Function Solarland.SolarSummonLifeCycleComponent.SetHealthPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x21a7f40
	void SetAliveTimeMax(float InMaxAliveTime); // Function Solarland.SolarSummonLifeCycleComponent.SetAliveTimeMax // (Final|Native|Public|BlueprintCallable) // @ game+0x21a7ec0
	void SetAliveTime(float InAliveTime); // Function Solarland.SolarSummonLifeCycleComponent.SetAliveTime // (Final|Native|Public|BlueprintCallable) // @ game+0x21a7e40
	void LifeCycleEnd(); // Function Solarland.SolarSummonLifeCycleComponent.LifeCycleEnd // (Final|Native|Protected|BlueprintCallable) // @ game+0x21a7d10
	float GetHealthPointsMax(); // Function Solarland.SolarSummonLifeCycleComponent.GetHealthPointsMax // (Final|Native|Public|BlueprintCallable) // @ game+0x21a7910
	float GetHealthPointsDwindle(); // Function Solarland.SolarSummonLifeCycleComponent.GetHealthPointsDwindle // (Final|Native|Public|BlueprintCallable) // @ game+0x21a78e0
	float GetHealthPoints(); // Function Solarland.SolarSummonLifeCycleComponent.GetHealthPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x21a78b0
	float GetAliveTimeMax(); // Function Solarland.SolarSummonLifeCycleComponent.GetAliveTimeMax // (Final|Native|Public|BlueprintCallable) // @ game+0x21a7880
	float GetAliveTime(); // Function Solarland.SolarSummonLifeCycleComponent.GetAliveTime // (Final|Native|Public|BlueprintCallable) // @ game+0x21a7850
	void DestroyOwner(); // Function Solarland.SolarSummonLifeCycleComponent.DestroyOwner // (Final|Native|Public|BlueprintCallable) // @ game+0x21a7830
	void AddHealthPoints(float InExtraHealthPoints); // Function Solarland.SolarSummonLifeCycleComponent.AddHealthPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x21a76d0
	void AddAliveTime(float InExtraAliveTime); // Function Solarland.SolarSummonLifeCycleComponent.AddAliveTime // (Final|Native|Public|BlueprintCallable) // @ game+0x21a7650
};

// Class Solarland.SolarSummonVehicleSpawner
// Size: 0x2b8 (Inherited: 0x228)
struct ASolarSummonVehicleSpawner : AActor {
	int32_t VehicleID; // 0x228(0x04)
	struct FName EffectMeshTagName; // 0x22c(0x08)
	struct FName EffectMaterialParameterName; // 0x234(0x08)
	float EffectDuration; // 0x23c(0x04)
	struct FString SpawnSoundName1P; // 0x240(0x10)
	struct FString SpawnSoundName3P; // 0x250(0x10)
	struct FString SpawnSoundName3PEnemy; // 0x260(0x10)
	struct UAkComponent* AkComponent; // 0x270(0x08)
	struct TArray<struct UStaticMeshComponent*> EffectMeshComponentArray; // 0x278(0x10)
	char pad_288[0x30]; // 0x288(0x30)
};

// Class Solarland.SolarSummonWall
// Size: 0x410 (Inherited: 0x3e0)
struct ASolarSummonWall : ASummonItemBase {
	struct FSoftClassPath EnergyBarrierClassPath; // 0x3e0(0x18)
	struct FVector EnergyBarrierLocationOffset; // 0x3f8(0x0c)
	char pad_404[0x4]; // 0x404(0x04)
	struct ASummonItemBase* EnergyBarrier; // 0x408(0x08)

	void SpawnEnergyBarrier(); // Function Solarland.SolarSummonWall.SpawnEnergyBarrier // (Final|Native|Public|BlueprintCallable) // @ game+0x21a80c0
};

// Class Solarland.SolarSummonWeapon
// Size: 0xad0 (Inherited: 0xa90)
struct ASolarSummonWeapon : ASolarWeapon {
	char pad_A90[0x10]; // 0xa90(0x10)
	struct TWeakObjectPtr<struct ASolarCharacter> SummonWeaponHolder; // 0xaa0(0x08)
	struct TWeakObjectPtr<struct ASummonItemTurret> SummonWeaponOwner; // 0xaa8(0x08)
	struct FVector ShotDirection; // 0xab0(0x0c)
	char pad_ABC[0x4]; // 0xabc(0x04)
	struct UGameplayEffect* WeaponCanUseEffect; // 0xac0(0x08)
	char pad_AC8[0x8]; // 0xac8(0x08)
};

// Class Solarland.SolarSummonWeapon_Vehicle
// Size: 0xe30 (Inherited: 0xdb0)
struct ASolarSummonWeapon_Vehicle : ASolarPlayerItemWeapon {
	struct FSoftObjectPath SummonConfigPath; // 0xda8(0x18)
	struct ASolarSummonVehicleSpawner* SummonVehicleSpawnerClass; // 0xdc0(0x08)
	struct FVector VehicleSpawnOffset; // 0xdc8(0x0c)
	char pad_DDC[0x54]; // 0xddc(0x54)

	void ServerRequestSummon(struct FVector InLocation, struct FVector InNormal, struct FRotator InOrientation); // Function Solarland.SolarSummonWeapon_Vehicle.ServerRequestSummon // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults) // @ game+0x21abde0
	void ClientResponseSummonResult(bool bInSuccess); // Function Solarland.SolarSummonWeapon_Vehicle.ClientResponseSummonResult // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x21aa9e0
};

// Class Solarland.SolarSwitchTargetCameraControlComp
// Size: 0x140 (Inherited: 0xb0)
struct USolarSwitchTargetCameraControlComp : UActorComponent {
	struct ASolarSpectateLevelSequenceActor* SpectateLevelSequenceActorClass; // 0xb0(0x08)
	float CameraBlendCurveHeightScale; // 0xb8(0x04)
	float CameraBlendSpeed; // 0xbc(0x04)
	float MinCameraBlendDistanceBetweenTargets; // 0xc0(0x04)
	char pad_C4[0x3c]; // 0xc4(0x3c)
	struct ASolarSpectateLevelSequenceActor* SpectateLevelSequenceActor; // 0x100(0x08)
	char pad_108[0x10]; // 0x108(0x10)
	struct ACameraActor* IntermediatePointCameraActor; // 0x118(0x08)
	char pad_120[0x10]; // 0x120(0x10)
	struct TWeakObjectPtr<struct AActor> IntermediateEndTarget; // 0x130(0x08)
	struct TWeakObjectPtr<struct UCameraComponent> EndTargetCameraCache; // 0x138(0x08)

	void OnViewTargetBlendComplete(); // Function Solarland.SolarSwitchTargetCameraControlComp.OnViewTargetBlendComplete // (Final|Native|Private) // @ game+0x21abdc0
	void OnScoutPlayerWorkComplete(); // Function Solarland.SolarSwitchTargetCameraControlComp.OnScoutPlayerWorkComplete // (Final|Native|Private) // @ game+0x21abda0
};

// Class Solarland.SolarSyncComponent
// Size: 0xb8 (Inherited: 0xb0)
struct USolarSyncComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)

	void SendSyncAxisRotMessage(struct FString Type, struct FRotator& Value); // Function Solarland.SolarSyncComponent.SendSyncAxisRotMessage // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
	void SendSyncAxisMoveMessage(struct FString Type, float Value, struct FVector& Location); // Function Solarland.SolarSyncComponent.SendSyncAxisMoveMessage // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
	void SendSyncAxisMessage(struct FString Type, float Value); // Function Solarland.SolarSyncComponent.SendSyncAxisMessage // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SendPlayerMoveMessage(struct FServerMoveData& MoveData); // Function Solarland.SolarSyncComponent.SendPlayerMoveMessage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void SendActionMessage(struct FString Type, struct FString Value); // Function Solarland.SolarSyncComponent.SendActionMessage // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RegisterActor(struct AActor* AC); // Function Solarland.SolarSyncComponent.RegisterActor // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarSyncPlayerControllerComponent
// Size: 0x108 (Inherited: 0xb8)
struct USolarSyncPlayerControllerComponent : USolarSyncComponent {
	char pad_B8[0x50]; // 0xb8(0x50)

	void InputTurnRate(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputTurnRate // (Final|Native|Public|BlueprintCallable) // @ game+0xb28b80
	void InputTurn(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputTurn // (Final|Native|Public|BlueprintCallable) // @ game+0xb28b80
	void InputSecondWeaponReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputSecondWeaponReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab7e0
	void InputSecondWeaponPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputSecondWeaponPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab7a0
	void InputReloadReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputReloadReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab760
	void InputReloadPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputReloadPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab720
	void InputPrimaryWeaponReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputPrimaryWeaponReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab6e0
	void InputPrimaryWeaponPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputPrimaryWeaponPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab6a0
	void InputOutVehicleReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputOutVehicleReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab660
	void InputOutVehiclePressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputOutVehiclePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab620
	void InputMoveRight(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputMoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0xb28b80
	void InputMoveForward(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputMoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0xb28b80
	void InputMapReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputMapReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab4c0
	void InputMapPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputMapPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab480
	void InputLookUpRate(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputLookUpRate // (Final|Native|Public|BlueprintCallable) // @ game+0xb28b80
	void InputLookUp(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputLookUp // (Final|Native|Public|BlueprintCallable) // @ game+0xb28b80
	void InputJumpReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJumpReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void InputJumpPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJumpPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void InputJetVerticalReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJetVerticalReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void InputJetVerticalPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJetVerticalPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void InputJetHorizontalReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJetHorizontalReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void InputJetHorizontalPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJetHorizontalPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void InputInteractReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputInteractReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab2f0
	void InputInteractPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputInteractPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab2b0
	void InputInteractAlternativeReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputInteractAlternativeReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab270
	void InputInteractAlternativePressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputInteractAlternativePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab230
	void InputGunsightReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputGunsightReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab1f0
	void InputGunsightPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputGunsightPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab1b0
	void InputFreeLookReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputFreeLookReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void InputFreeLookPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputFreeLookPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void InputFireReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab130
	void InputFirePressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab0f0
	void InputEquip2Released(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEquip2Released // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab0b0
	void InputEquip2Pressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEquip2Pressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab070
	void InputEquip1Released(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEquip1Released // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab030
	void InputEquip1Pressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEquip1Pressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21aaff0
	void InputEjectReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEjectReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void InputEjectPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEjectPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void InputCrouchReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputCrouchReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void InputCrouchPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputCrouchPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void InputAltFireReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputAltFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21aaf30
	void InputAltFirePressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputAltFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21aaef0
};

// Class Solarland.SolarSyncRemoteController
// Size: 0x380 (Inherited: 0x348)
struct ASolarSyncRemoteController : AAIController {
	char pad_348[0x38]; // 0x348(0x38)

	void TakeWeapon(struct FString Cmd); // Function Solarland.SolarSyncRemoteController.TakeWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x21ac060
	void OnReceivedServerMoveData(struct FServerMoveData& MoveData); // Function Solarland.SolarSyncRemoteController.OnReceivedServerMoveData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21abd10
	void InputTurnRate(struct FRotator& Rot); // Function Solarland.SolarSyncRemoteController.InputTurnRate // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21ab800
	void InputTurn(struct FRotator& Rot); // Function Solarland.SolarSyncRemoteController.InputTurn // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21ab800
	void InputSecondWeaponReleased(); // Function Solarland.SolarSyncRemoteController.InputSecondWeaponReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab7c0
	void InputSecondWeaponPressed(); // Function Solarland.SolarSyncRemoteController.InputSecondWeaponPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab780
	void InputReloadReleased(); // Function Solarland.SolarSyncRemoteController.InputReloadReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab740
	void InputReloadPressed(); // Function Solarland.SolarSyncRemoteController.InputReloadPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab700
	void InputPrimaryWeaponReleased(); // Function Solarland.SolarSyncRemoteController.InputPrimaryWeaponReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab6c0
	void InputPrimaryWeaponPressed(); // Function Solarland.SolarSyncRemoteController.InputPrimaryWeaponPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab680
	void InputOutVehicleReleased(); // Function Solarland.SolarSyncRemoteController.InputOutVehicleReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab640
	void InputOutVehiclePressed(); // Function Solarland.SolarSyncRemoteController.InputOutVehiclePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab600
	void InputMoveRight(struct FSolarSyncMoveMessageParams& Params); // Function Solarland.SolarSyncRemoteController.InputMoveRight // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21ab570
	void InputMoveForward(struct FSolarSyncMoveMessageParams& Params); // Function Solarland.SolarSyncRemoteController.InputMoveForward // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21ab4e0
	void InputMapReleased(); // Function Solarland.SolarSyncRemoteController.InputMapReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab4a0
	void InputMapPressed(); // Function Solarland.SolarSyncRemoteController.InputMapPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab460
	void InputLookUpRate(struct FRotator& Rot); // Function Solarland.SolarSyncRemoteController.InputLookUpRate // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21ab3d0
	void InputLookUp(struct FRotator& Rot); // Function Solarland.SolarSyncRemoteController.InputLookUp // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x21ab3d0
	void InputJumpReleased(); // Function Solarland.SolarSyncRemoteController.InputJumpReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab3b0
	void InputJumpPressed(); // Function Solarland.SolarSyncRemoteController.InputJumpPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab390
	void InputJetVerticalReleased(); // Function Solarland.SolarSyncRemoteController.InputJetVerticalReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab370
	void InputJetVerticalPressed(); // Function Solarland.SolarSyncRemoteController.InputJetVerticalPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab350
	void InputJetHorizontalReleased(); // Function Solarland.SolarSyncRemoteController.InputJetHorizontalReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab330
	void InputJetHorizontalPressed(); // Function Solarland.SolarSyncRemoteController.InputJetHorizontalPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab310
	void InputInteractReleased(); // Function Solarland.SolarSyncRemoteController.InputInteractReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab2d0
	void InputInteractPressed(); // Function Solarland.SolarSyncRemoteController.InputInteractPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab290
	void InputInteractAlternativeReleased(); // Function Solarland.SolarSyncRemoteController.InputInteractAlternativeReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab250
	void InputInteractAlternativePressed(); // Function Solarland.SolarSyncRemoteController.InputInteractAlternativePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab210
	void InputGunsightReleased(); // Function Solarland.SolarSyncRemoteController.InputGunsightReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab1d0
	void InputGunsightPressed(); // Function Solarland.SolarSyncRemoteController.InputGunsightPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab190
	void InputFreeLookReleased(); // Function Solarland.SolarSyncRemoteController.InputFreeLookReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab170
	void InputFreeLookPressed(); // Function Solarland.SolarSyncRemoteController.InputFreeLookPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab150
	void InputFireReleased(); // Function Solarland.SolarSyncRemoteController.InputFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab110
	void InputFirePressed(); // Function Solarland.SolarSyncRemoteController.InputFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab0d0
	void InputEquip2Released(); // Function Solarland.SolarSyncRemoteController.InputEquip2Released // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab090
	void InputEquip2Pressed(); // Function Solarland.SolarSyncRemoteController.InputEquip2Pressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab050
	void InputEquip1Released(); // Function Solarland.SolarSyncRemoteController.InputEquip1Released // (Final|Native|Public|BlueprintCallable) // @ game+0x21ab010
	void InputEquip1Pressed(); // Function Solarland.SolarSyncRemoteController.InputEquip1Pressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21aafd0
	void InputEjectReleased(); // Function Solarland.SolarSyncRemoteController.InputEjectReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21aafb0
	void InputEjectPressed(); // Function Solarland.SolarSyncRemoteController.InputEjectPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21aaf90
	void InputCrouchReleased(); // Function Solarland.SolarSyncRemoteController.InputCrouchReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21aaf70
	void InputCrouchPressed(); // Function Solarland.SolarSyncRemoteController.InputCrouchPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21aaf50
	void InputAltFireReleased(); // Function Solarland.SolarSyncRemoteController.InputAltFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x21aaf10
	void InputAltFirePressed(); // Function Solarland.SolarSyncRemoteController.InputAltFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x21aaed0
	void Fire(bool Activate); // Function Solarland.SolarSyncRemoteController.Fire // (Final|Native|Public|BlueprintCallable) // @ game+0x21aab10
};

// Class Solarland.SolarTabControlList
// Size: 0x358 (Inherited: 0x348)
struct USolarTabControlList : USolarUserWidget {
	struct USolarTreeView* TabList; // 0x348(0x08)
	int32_t CompoundStyleFlags; // 0x350(0x04)
	int32_t LeafStyleFlags; // 0x354(0x04)

	bool IsMatchStyle(int32_t InStyleFlags, int32_t BitMask); // Function Solarland.SolarTabControlList.IsMatchStyle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21ab920
};

// Class Solarland.SolarTabControlListSlot
// Size: 0x350 (Inherited: 0x348)
struct USolarTabControlListSlot : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)

	bool BP_IsItemSelectableChanged(); // Function Solarland.SolarTabControlListSlot.BP_IsItemSelectableChanged // (Event|Protected|BlueprintEvent|Const) // @ game+0x25d85b0
};

// Class Solarland.SolarTableManager
// Size: 0x40 (Inherited: 0x28)
struct USolarTableManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	enum class ESolarSupportLanguages SystemLang; // 0x30(0x01)
	char pad_31[0xf]; // 0x31(0x0f)

	void SetIMInitFlag(bool Flag); // Function Solarland.SolarTableManager.SetIMInitFlag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21abfe0
	void SetCurrentLangEnum(enum class ESolarSupportLanguages InLang); // Function Solarland.SolarTableManager.SetCurrentLangEnum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21abf70
	void SetCurrentLang(struct FString InLang); // Function Solarland.SolarTableManager.SetCurrentLang // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21abee0
	void ReceiveInit(); // Function Solarland.SolarTableManager.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnSetCurrentLang(struct FString InLang); // Function Solarland.SolarTableManager.OnSetCurrentLang // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void MakeUpperLocalTextWithLang(struct FString& OutLocalText, enum class ESolarSupportLanguages InLang); // Function Solarland.SolarTableManager.MakeUpperLocalTextWithLang // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x21abc20
	void MakeUpperLocalText(struct FString& OutLocalText); // Function Solarland.SolarTableManager.MakeUpperLocalText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x21abb80
	void MakeLowerLocalTextWithLang(struct FString& OutLocalText, enum class ESolarSupportLanguages InLang); // Function Solarland.SolarTableManager.MakeLowerLocalTextWithLang // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x21aba90
	void MakeLowerLocalText(struct FString& OutLocalText); // Function Solarland.SolarTableManager.MakeLowerLocalText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x21ab9f0
	bool IsLocalTextIDValid(int32_t ID); // Function Solarland.SolarTableManager.IsLocalTextIDValid // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21ab890
	struct FString GetLocalTextWithLang(int32_t ID, enum class ESolarSupportLanguages InLang, bool bMakeUpperText); // Function Solarland.SolarTableManager.GetLocalTextWithLang // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21aad90
	struct FString GetLocalText(int32_t ID, bool bMakeUpperText); // Function Solarland.SolarTableManager.GetLocalText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x21aac80
	bool GetIMInitFlag(); // Function Solarland.SolarTableManager.GetIMInitFlag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21aac50
	enum class ESolarSupportLanguages GetCurrentLangEnum(); // Function Solarland.SolarTableManager.GetCurrentLangEnum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21aac20
	struct FString GetCurrentLang(); // Function Solarland.SolarTableManager.GetCurrentLang // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21aaba0
	enum class ESolarSupportLanguages ConvertLangNameToEnum(struct FString LangName); // Function Solarland.SolarTableManager.ConvertLangNameToEnum // (Final|Native|Static|Public) // @ game+0x21aaa70
};

// Class Solarland.SolarTables
// Size: 0x2940 (Inherited: 0x28)
struct USolarTables : UObject {
	struct FSolarTables_Tables Tables; // 0x28(0x28e8)
	struct USolarTables_TablesReader* TablesReader; // 0x2910(0x08)
	struct FMulticastInlineDelegate OnJsonTableReloadComplete; // 0x2918(0x10)
	char pad_2928[0x18]; // 0x2928(0x18)

	void UnloadTables(); // Function Solarland.SolarTables.UnloadTables // (Final|Native|Public|BlueprintCallable) // @ game+0x21b5420
	void UnitTest(); // Function Solarland.SolarTables.UnitTest // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void ReloadTablesAsync_Internal(); // Function Solarland.SolarTables.ReloadTablesAsync_Internal // (Final|Native|Public|BlueprintCallable) // @ game+0x21b4b90
	void ReloadTablesAsync(); // Function Solarland.SolarTables.ReloadTablesAsync // (Final|Native|Public|BlueprintCallable) // @ game+0x21b4b70
	void ReloadTables(); // Function Solarland.SolarTables.ReloadTables // (Final|Native|Public|BlueprintCallable) // @ game+0x21b4b50
	void LoadTables(); // Function Solarland.SolarTables.LoadTables // (Final|Native|Public|BlueprintCallable) // @ game+0x21b4b30
	bool IsReloadTablesComplete(); // Function Solarland.SolarTables.IsReloadTablesComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x21b4b00
	bool IsInstanceValid(); // Function Solarland.SolarTables.IsInstanceValid // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21b4ad0
	bool Hotfix_FixValue(struct FString TableName, struct FString RowKey, struct FString ColKey, struct FString NewValue, struct FString& ErrorMsg); // Function Solarland.SolarTables.Hotfix_FixValue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21b48b0
	bool Hotfix_FixRow(struct FString TableName, struct FString RowKey, struct FString NewRowValue, struct FString& ErrorMsg); // Function Solarland.SolarTables.Hotfix_FixRow // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x21b46f0
	bool HasTableName(struct FString TableName); // Function Solarland.SolarTables.HasTableName // (Final|Native|Public|BlueprintCallable) // @ game+0x21b4640
	struct USolarTables* GetInstance(); // Function Solarland.SolarTables.GetInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21b2fa0
	void DestroyInstance(); // Function Solarland.SolarTables.DestroyInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x21b2da0
};

// Class Solarland.SolarTableReaderBase
// Size: 0x30 (Inherited: 0x28)
struct USolarTableReaderBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	int32_t RandomRangeInt(struct FSolarTablesRangeInt& InData); // Function Solarland.SolarTableReaderBase.RandomRangeInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x223f930
	float RandomRangeFloat(struct FSolarTablesRangeFloat& InData); // Function Solarland.SolarTableReaderBase.RandomRangeFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x223f890
	bool IsReaderValid(); // Function Solarland.SolarTableReaderBase.IsReaderValid // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x223f800
	struct FString GetLocText(struct FSolarTablesLocalText& InData); // Function Solarland.SolarTableReaderBase.GetLocText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x223edd0
	struct FString GetDeviceRes(struct FSolarTablesDeviceRes& InData); // Function Solarland.SolarTableReaderBase.GetDeviceRes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x223ece0
	bool ContainsRangeInt(struct FSolarTablesRangeInt& InData, int32_t In, bool bEqualMin, bool bEqualMax); // Function Solarland.SolarTableReaderBase.ContainsRangeInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x223e960
	bool ContainsRangeFloat(struct FSolarTablesRangeFloat& InData, float In, bool bEqualMin, bool bEqualMax); // Function Solarland.SolarTableReaderBase.ContainsRangeFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x223e7f0
};

// Class Solarland.SolarTables_Reader_AccountFixedExp
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_AccountFixedExp : USolarTableReaderBase {

	struct FSolarTablesData_AccountFixedExp TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_AccountFixedExp.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4bb0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_AccountFixedExp.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4070
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_AccountFixedExp.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3ad0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b35c0
	struct FSolarTablesData_AccountFixedExp GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3000
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2df0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_AccountFlag
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_AccountFlag : USolarTableReaderBase {

	struct FSolarTablesData_AccountFlag TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_AccountFlag.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4d90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_AccountFlag.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4160
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_AccountFlag.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3bc0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_AccountFlag.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_AccountFlag.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3680
	struct FSolarTablesData_AccountFlag GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_AccountFlag.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b30f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_AccountFlag.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_AccountFlag.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_AccountFlag.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2e30
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_AccountFlag.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Achievement
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Achievement : USolarTableReaderBase {

	struct FSolarTablesData_Achievement TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Achievement.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4ee0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Achievement.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4250
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Achievement.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3cb0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Achievement.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Achievement.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3740
	struct FSolarTablesData_Achievement GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Achievement.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3200
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Achievement.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Achievement.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Achievement.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2e70
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Achievement.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Airline
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Airline : USolarTableReaderBase {

	struct FSolarTablesData_Airline TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Airline.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b5030
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Airline.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4350
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Airline.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3da0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Airline.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Airline.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3800
	struct FSolarTablesData_Airline GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Airline.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b32f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Airline.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Airline.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Airline.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2eb0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Airline.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_ArmorProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ArmorProperty : USolarTableReaderBase {

	struct FSolarTablesData_ArmorProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ArmorProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b5180
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ArmorProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4440
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ArmorProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3e90
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ArmorProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b38c0
	struct FSolarTablesData_ArmorProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ArmorProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b33e0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2ef0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Armory
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Armory : USolarTableReaderBase {

	struct FSolarTablesData_Armory TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Armory.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b52d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Armory.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4540
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Armory.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3f80
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Armory.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Armory.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3980
	struct FSolarTablesData_Armory GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Armory.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b34d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Armory.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Armory.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Armory.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f30
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Armory.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_BackpackProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BackpackProperty : USolarTableReaderBase {

	struct FSolarTablesData_BackpackProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BackpackProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd300
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BackpackProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bcd60
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BackpackProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc7c0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BackpackProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc340
	struct FSolarTablesData_BackpackProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BackpackProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bbd60
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bbbe0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_BackpackTrailProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BackpackTrailProperty : USolarTableReaderBase {

	struct FSolarTablesData_BackpackTrailProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd440
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bce50
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc8b0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc400
	struct FSolarTablesData_BackpackTrailProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bbe50
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bbc20
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_BattleEndRankSettlement
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleEndRankSettlement : USolarTableReaderBase {

	struct FSolarTablesData_BattleEndRankSettlement TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd580
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bcf40
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc9a0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc4c0
	struct FSolarTablesData_BattleEndRankSettlement GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bbf40
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bbc60
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_BattleRoyaleMode
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleRoyaleMode : USolarTableReaderBase {

	struct FSolarTablesData_BattleRoyaleMode TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd7e0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd030
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bca90
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc580
	struct FSolarTablesData_BattleRoyaleMode GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc040
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bbca0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_BattleUpgradeContent
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleUpgradeContent : USolarTableReaderBase {

	struct FSolarTablesData_BattleUpgradeContent TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bdbd0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd120
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bcb80
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc640
	struct FSolarTablesData_BattleUpgradeContent GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc130
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bbce0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_BattleUpgradeEffect
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleUpgradeEffect : USolarTableReaderBase {

	struct FSolarTablesData_BattleUpgradeEffect TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bdd20
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd210
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bcc70
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc700
	struct FSolarTablesData_BattleUpgradeEffect GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc240
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bbd20
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_BattleUpgradeEffectPool
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleUpgradeEffectPool : USolarTableReaderBase {

	struct FSolarTablesData_BattleUpgradeEffectPool TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c44d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c41f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3c50
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3a10
	struct FSolarTablesData_BattleUpgradeEffectPool GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c34f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3370
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Behavior
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Behavior : USolarTableReaderBase {

	struct FSolarTablesData_Behavior TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Behavior.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c4750
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Behavior.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4160
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Behavior.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3d40
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Behavior.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Behavior.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3680
	struct FSolarTablesData_Behavior GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Behavior.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c35f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Behavior.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Behavior.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Behavior.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c33b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Behavior.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_BpAward
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BpAward : USolarTableReaderBase {

	struct FSolarTablesData_BpAward TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BpAward.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c4970
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BpAward.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c42e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BpAward.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3e30
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BpAward.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BpAward.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3ad0
	struct FSolarTablesData_BpAward GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BpAward.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3710
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BpAward.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BpAward.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BpAward.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c33f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BpAward.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_CapsuleProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CapsuleProperty : USolarTableReaderBase {

	struct FSolarTablesData_CapsuleProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CapsuleProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c4ad0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CapsuleProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bce50
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CapsuleProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3f20
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc400
	struct FSolarTablesData_CapsuleProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bbe50
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3430
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_CaseToggleAlphabet
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CaseToggleAlphabet : USolarTableReaderBase {

	struct FSolarTablesData_CaseToggleAlphabet TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c4c10
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c43d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c4010
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3b90
	struct FSolarTablesData_CaseToggleAlphabet GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3830
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3470
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_CharacterAbility
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CharacterAbility : USolarTableReaderBase {

	struct FSolarTablesData_CharacterAbility TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CharacterAbility.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c5120
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterAbility.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bce50
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CharacterAbility.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c4100
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CharacterAbility.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc400
	struct FSolarTablesData_CharacterAbility GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterAbility.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3920
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c34b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_CharacterPassiveAbility
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CharacterPassiveAbility : USolarTableReaderBase {

	struct FSolarTablesData_CharacterPassiveAbility TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cbc80
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c41f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cb5f0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3a10
	struct FSolarTablesData_CharacterPassiveAbility GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21caf00
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cad40
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_CharacterVoiceover
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CharacterVoiceover : USolarTableReaderBase {

	struct FSolarTablesData_CharacterVoiceover TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CharacterVoiceover.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cbf00
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterVoiceover.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4160
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CharacterVoiceover.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cb6e0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3680
	struct FSolarTablesData_CharacterVoiceover GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cb000
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cad80
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Chest
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Chest : USolarTableReaderBase {

	struct FSolarTablesData_Chest TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Chest.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cc180
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Chest.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4540
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Chest.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cb7d0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Chest.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Chest.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cb530
	struct FSolarTablesData_Chest GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Chest.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cb110
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Chest.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Chest.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Chest.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cadc0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Chest.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_ChestSpawn
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ChestSpawn : USolarTableReaderBase {

	struct FSolarTablesData_ChestSpawn TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ChestSpawn.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cc2d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ChestSpawn.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd120
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ChestSpawn.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cb8c0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ChestSpawn.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc640
	struct FSolarTablesData_ChestSpawn GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ChestSpawn.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cb200
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cae00
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_ChestSpawnGroup
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ChestSpawnGroup : USolarTableReaderBase {

	struct FSolarTablesData_ChestSpawnGroup TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cc420
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c41f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cb9b0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3a10
	struct FSolarTablesData_ChestSpawnGroup GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c34f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cae40
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_ClanFlag
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ClanFlag : USolarTableReaderBase {

	struct FSolarTablesData_ClanFlag TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ClanFlag.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cc6a0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ClanFlag.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4160
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ClanFlag.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cbaa0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ClanFlag.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ClanFlag.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3680
	struct FSolarTablesData_ClanFlag GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ClanFlag.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cb320
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ClanFlag.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ClanFlag.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ClanFlag.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cae80
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ClanFlag.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_DayAndNight
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_DayAndNight : USolarTableReaderBase {

	struct FSolarTablesData_DayAndNight TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_DayAndNight.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cc7f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_DayAndNight.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd210
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_DayAndNight.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cbb90
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_DayAndNight.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_DayAndNight.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc700
	struct FSolarTablesData_DayAndNight GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_DayAndNight.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cb430
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_DayAndNight.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_DayAndNight.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_DayAndNight.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21caec0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_DayAndNight.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_DsVariableRange
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_DsVariableRange : USolarTableReaderBase {

	struct FSolarTablesData_DsVariableRange TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_DsVariableRange.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d2070
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_DsVariableRange.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd120
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_DsVariableRange.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1cb0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_DsVariableRange.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc640
	struct FSolarTablesData_DsVariableRange GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_DsVariableRange.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1710
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1610
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Emote
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Emote : USolarTableReaderBase {

	struct FSolarTablesData_Emote TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Emote.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d21c0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Emote.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4440
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Emote.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1da0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Emote.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Emote.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1b30
	struct FSolarTablesData_Emote GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Emote.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1830
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Emote.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Emote.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Emote.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1650
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Emote.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_EnergyProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EnergyProperty : USolarTableReaderBase {

	struct FSolarTablesData_EnergyProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EnergyProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d2430
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EnergyProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4250
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EnergyProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1e90
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EnergyProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1bf0
	struct FSolarTablesData_EnergyProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EnergyProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1920
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1690
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_EscapeExp
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EscapeExp : USolarTableReaderBase {

	struct FSolarTablesData_EscapeExp TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EscapeExp.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d2580
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EscapeExp.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4160
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EscapeExp.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1f80
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EscapeExp.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EscapeExp.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3680
	struct FSolarTablesData_EscapeExp GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EscapeExp.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1a10
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EscapeExp.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EscapeExp.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EscapeExp.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d16d0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EscapeExp.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_EShop
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShop : USolarTableReaderBase {

	struct FSolarTablesData_EShop TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShop.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21da3d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShop.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd120
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShop.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d9b40
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShop.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShop.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc640
	struct FSolarTablesData_EShop GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShop.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d94d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShop.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShop.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShop.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d9310
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShop.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_EShopDemoModel
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShopDemoModel : USolarTableReaderBase {

	struct FSolarTablesData_EShopDemoModel TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShopDemoModel.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21da520
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShopDemoModel.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4070
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShopDemoModel.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d9c30
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b35c0
	struct FSolarTablesData_EShopDemoModel GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3000
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d9350
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_EShopGoodsPool
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShopGoodsPool : USolarTableReaderBase {

	struct FSolarTablesData_EShopGoodsPool TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShopGoodsPool.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21da700
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShopGoodsPool.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bce50
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShopGoodsPool.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d9d20
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc400
	struct FSolarTablesData_EShopGoodsPool GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d95e0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d9390
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_EShopGoodsPoolGroup
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShopGoodsPoolGroup : USolarTableReaderBase {

	struct FSolarTablesData_EShopGoodsPoolGroup TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21da850
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c41f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d9e10
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3a10
	struct FSolarTablesData_EShopGoodsPoolGroup GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c34f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d93d0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_EShopSpawn
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShopSpawn : USolarTableReaderBase {

	struct FSolarTablesData_EShopSpawn TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShopSpawn.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21daad0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShopSpawn.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4160
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShopSpawn.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d9f00
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShopSpawn.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3680
	struct FSolarTablesData_EShopSpawn GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShopSpawn.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d96d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d9410
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_ExtraEnergyProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ExtraEnergyProperty : USolarTableReaderBase {

	struct FSolarTablesData_ExtraEnergyProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21dac20
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21da1d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d9ff0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d99c0
	struct FSolarTablesData_ExtraEnergyProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d97e0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d9450
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_GameMap
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GameMap : USolarTableReaderBase {

	struct FSolarTablesData_GameMap TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GameMap.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21dae90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GameMap.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21da2d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GameMap.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21da0e0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GameMap.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GameMap.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d9a80
	struct FSolarTablesData_GameMap GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GameMap.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d98d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GameMap.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GameMap.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GameMap.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d9490
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GameMap.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_GameModeGroup
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GameModeGroup : USolarTableReaderBase {

	struct FSolarTablesData_GameModeGroup TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GameModeGroup.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3620
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GameModeGroup.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3230
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GameModeGroup.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2c90
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GameModeGroup.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2990
	struct FSolarTablesData_GameModeGroup GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GameModeGroup.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2470
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e22f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_GameModeMain
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GameModeMain : USolarTableReaderBase {

	struct FSolarTablesData_GameModeMain TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GameModeMain.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3780
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GameModeMain.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3330
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GameModeMain.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2d80
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GameModeMain.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GameModeMain.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2a50
	struct FSolarTablesData_GameModeMain GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GameModeMain.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2560
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GameModeMain.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GameModeMain.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GameModeMain.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2330
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GameModeMain.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_GameTimeLine
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GameTimeLine : USolarTableReaderBase {

	struct FSolarTablesData_GameTimeLine TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GameTimeLine.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3970
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GameTimeLine.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd030
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GameTimeLine.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2e70
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GameTimeLine.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc580
	struct FSolarTablesData_GameTimeLine GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GameTimeLine.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2650
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2370
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_GetPoint
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GetPoint : USolarTableReaderBase {

	struct FSolarTablesData_GetPoint TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GetPoint.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3c70
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GetPoint.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd210
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GetPoint.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2f60
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GetPoint.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GetPoint.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc700
	struct FSolarTablesData_GetPoint GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GetPoint.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cb430
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GetPoint.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GetPoint.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GetPoint.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e23b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GetPoint.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_GlobalOutcome
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GlobalOutcome : USolarTableReaderBase {

	struct FSolarTablesData_GlobalOutcome TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GlobalOutcome.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3e80
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GlobalOutcome.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3430
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GlobalOutcome.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3050
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2b10
	struct FSolarTablesData_GlobalOutcome GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2780
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e23f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_GlobalSensitivity
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GlobalSensitivity : USolarTableReaderBase {

	struct FSolarTablesData_GlobalSensitivity TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GlobalSensitivity.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e4000
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GlobalSensitivity.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3520
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GlobalSensitivity.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3140
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2bd0
	struct FSolarTablesData_GlobalSensitivity GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e28a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2430
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_GunProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GunProperty : USolarTableReaderBase {

	struct FSolarTablesData_GunProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GunProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21eb560
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GunProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21eb180
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GunProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21eabe0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GunProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GunProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ea960
	struct FSolarTablesData_GunProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GunProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ea240
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GunProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GunProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GunProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ea0c0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GunProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_InputAction
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_InputAction : USolarTableReaderBase {

	struct FSolarTablesData_InputAction TryGetRowData(struct FString Key, bool& HasKey); // Function Solarland.SolarTables_Reader_InputAction.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21eb7d0
	bool HasRowKey(struct FString Key); // Function Solarland.SolarTables_Reader_InputAction.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21eb280
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_InputAction.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21eacd0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_InputAction.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<struct FString>& OutKeys); // Function Solarland.SolarTables_Reader_InputAction.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21eaa20
	struct FSolarTablesData_InputAction GetRowData(struct FString Key); // Function Solarland.SolarTables_Reader_InputAction.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ea330
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_InputAction.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_InputAction.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_InputAction.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ea100
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_InputAction.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_InputMapping
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_InputMapping : USolarTableReaderBase {

	struct FSolarTablesData_InputMapping TryGetRowData(struct FString Key, bool& HasKey); // Function Solarland.SolarTables_Reader_InputMapping.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ebb40
	bool HasRowKey(struct FString Key); // Function Solarland.SolarTables_Reader_InputMapping.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21eb3f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_InputMapping.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21eadc0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_InputMapping.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<struct FString>& OutKeys); // Function Solarland.SolarTables_Reader_InputMapping.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21eab00
	struct FSolarTablesData_InputMapping GetRowData(struct FString Key); // Function Solarland.SolarTables_Reader_InputMapping.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ea500
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_InputMapping.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_InputMapping.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_InputMapping.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ea140
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_InputMapping.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Item
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Item : USolarTableReaderBase {

	struct FSolarTablesData_Item TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Item.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ebeb0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Item.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd120
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Item.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21eaeb0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Item.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Item.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc640
	struct FSolarTablesData_Item GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Item.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ea690
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Item.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Item.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Item.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ea180
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Item.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_ItemBehavior
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemBehavior : USolarTableReaderBase {

	struct FSolarTablesData_ItemBehavior TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemBehavior.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ebfd0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemBehavior.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3230
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemBehavior.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21eafa0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemBehavior.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2990
	struct FSolarTablesData_ItemBehavior GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemBehavior.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ea780
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ea1c0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_ItemCustomType
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemCustomType : USolarTableReaderBase {

	struct FSolarTablesData_ItemCustomType TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemCustomType.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ec120
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemCustomType.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c41f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemCustomType.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21eb090
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemCustomType.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3a10
	struct FSolarTablesData_ItemCustomType GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemCustomType.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ea870
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ea200
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_ItemInBattle
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemInBattle : USolarTableReaderBase {

	struct FSolarTablesData_ItemInBattle TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemInBattle.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f3380
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemInBattle.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3230
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemInBattle.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f2b70
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemInBattle.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemInBattle.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2990
	struct FSolarTablesData_ItemInBattle GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemInBattle.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f2420
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemInBattle.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemInBattle.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemInBattle.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f22a0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemInBattle.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_ItemQuality
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemQuality : USolarTableReaderBase {

	struct FSolarTablesData_ItemQuality TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemQuality.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f34d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemQuality.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f3110
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemQuality.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f2c60
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemQuality.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemQuality.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f29d0
	struct FSolarTablesData_ItemQuality GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemQuality.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f2510
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemQuality.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemQuality.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemQuality.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f22e0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemQuality.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_ItemSound
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemSound : USolarTableReaderBase {

	struct FSolarTablesData_ItemSound TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemSound.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f36c0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemSound.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c42e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemSound.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f2d50
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemSound.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemSound.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3ad0
	struct FSolarTablesData_ItemSound GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemSound.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f2600
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemSound.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemSound.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemSound.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f2320
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemSound.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_ItemWeaponParts
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemWeaponParts : USolarTableReaderBase {

	struct FSolarTablesData_ItemWeaponParts TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemWeaponParts.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f3820
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemWeaponParts.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4440
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemWeaponParts.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f2e40
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1b30
	struct FSolarTablesData_ItemWeaponParts GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f2710
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f2360
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_JetPackModuleProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_JetPackModuleProperty : USolarTableReaderBase {

	struct FSolarTablesData_JetPackModuleProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f3a90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21da1d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f2f30
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d99c0
	struct FSolarTablesData_JetPackModuleProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d97e0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f23a0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_LanguageSwitcher
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_LanguageSwitcher : USolarTableReaderBase {

	struct FSolarTablesData_LanguageSwitcher TryGetRowData(struct FString Key, bool& HasKey); // Function Solarland.SolarTables_Reader_LanguageSwitcher.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f3d00
	bool HasRowKey(struct FString Key); // Function Solarland.SolarTables_Reader_LanguageSwitcher.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f3210
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_LanguageSwitcher.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f3020
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<struct FString>& OutKeys); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f2a90
	struct FSolarTablesData_LanguageSwitcher GetRowData(struct FString Key); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f2800
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f23e0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_LobbyAutoDownload
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_LobbyAutoDownload : USolarTableReaderBase {

	struct FSolarTablesData_LobbyAutoDownload TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8d90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd210
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f87f0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc700
	struct FSolarTablesData_LobbyAutoDownload GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f85f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8470
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Localization
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization : USolarTableReaderBase {

	struct FSolarTablesData_Localization TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8f90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3330
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f88e0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2a50
	struct FSolarTablesData_Localization GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8700
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f84b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Localization_BattleUI
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_BattleUI : USolarTableReaderBase {

	struct FSolarTablesData_Localization_BattleUI TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_BattleUI.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f9180
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_BattleUI.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3330
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_BattleUI.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f89d0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2a50
	struct FSolarTablesData_Localization_BattleUI GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8700
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f84f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Localization_EventSystem
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_EventSystem : USolarTableReaderBase {

	struct FSolarTablesData_Localization_EventSystem TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_EventSystem.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f9370
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_EventSystem.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3330
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_EventSystem.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8ac0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2a50
	struct FSolarTablesData_Localization_EventSystem GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8700
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8530
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Localization_General
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_General : USolarTableReaderBase {

	struct FSolarTablesData_Localization_General TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_General.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f9560
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_General.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3330
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_General.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8bb0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_General.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_General.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2a50
	struct FSolarTablesData_Localization_General GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_General.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8700
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_General.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_General.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_General.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8570
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_General.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Localization_Heroes
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_Heroes : USolarTableReaderBase {

	struct FSolarTablesData_Localization_Heroes TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_Heroes.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f9750
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Heroes.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3330
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_Heroes.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8ca0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2a50
	struct FSolarTablesData_Localization_Heroes GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8700
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f85b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Localization_Item
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_Item : USolarTableReaderBase {

	struct FSolarTablesData_Localization_Item TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_Item.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ff2a0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Item.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3330
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_Item.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21fed00
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_Item.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_Item.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2a50
	struct FSolarTablesData_Localization_Item GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Item.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8700
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_Item.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_Item.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_Item.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21fe8b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_Item.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Localization_Tournament
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_Tournament : USolarTableReaderBase {

	struct FSolarTablesData_Localization_Tournament TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_Tournament.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ff490
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Tournament.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3330
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_Tournament.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21fedf0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2a50
	struct FSolarTablesData_Localization_Tournament GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8700
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21fe8f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Localization_Uncategorized
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_Uncategorized : USolarTableReaderBase {

	struct FSolarTablesData_Localization_Uncategorized TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ff680
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3330
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21feee0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2a50
	struct FSolarTablesData_Localization_Uncategorized GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f8700
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21fe930
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_MapMarkIcon
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_MapMarkIcon : USolarTableReaderBase {

	struct FSolarTablesData_MapMarkIcon TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_MapMarkIcon.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ff870
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_MapMarkIcon.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4160
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_MapMarkIcon.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21fefd0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3680
	struct FSolarTablesData_MapMarkIcon GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21fea30
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21fe970
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_MatchRule
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_MatchRule : USolarTableReaderBase {

	struct FSolarTablesData_MatchRule TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_MatchRule.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ffb60
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_MatchRule.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4350
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_MatchRule.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ff0c0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_MatchRule.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_MatchRule.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3800
	struct FSolarTablesData_MatchRule GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_MatchRule.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21feb20
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_MatchRule.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_MatchRule.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_MatchRule.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21fe9b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_MatchRule.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_MaterialProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_MaterialProperty : USolarTableReaderBase {

	struct FSolarTablesData_MaterialProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_MaterialProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ffd50
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_MaterialProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd030
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_MaterialProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ff1b0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_MaterialProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc580
	struct FSolarTablesData_MaterialProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_MaterialProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21fec10
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21fe9f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_NameCardBackground
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_NameCardBackground : USolarTableReaderBase {

	struct FSolarTablesData_NameCardBackground TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_NameCardBackground.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2207060
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_NameCardBackground.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c42e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_NameCardBackground.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22069d0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_NameCardBackground.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206850
	struct FSolarTablesData_NameCardBackground GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_NameCardBackground.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206240
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206080
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_NameCardPose
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_NameCardPose : USolarTableReaderBase {

	struct FSolarTablesData_NameCardPose TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_NameCardPose.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2207370
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_NameCardPose.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3230
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_NameCardPose.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206ac0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_NameCardPose.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_NameCardPose.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2990
	struct FSolarTablesData_NameCardPose GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_NameCardPose.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206360
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_NameCardPose.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_NameCardPose.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_NameCardPose.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22060c0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_NameCardPose.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_ObGift
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ObGift : USolarTableReaderBase {

	struct FSolarTablesData_ObGift TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ObGift.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x22074d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ObGift.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bcd60
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ObGift.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206bb0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ObGift.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ObGift.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc340
	struct FSolarTablesData_ObGift GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ObGift.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206450
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ObGift.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ObGift.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ObGift.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206100
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ObGift.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Outcome
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Outcome : USolarTableReaderBase {

	struct FSolarTablesData_Outcome TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Outcome.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2207610
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Outcome.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bcd60
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Outcome.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206ca0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Outcome.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Outcome.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc340
	struct FSolarTablesData_Outcome GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Outcome.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206540
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Outcome.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Outcome.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Outcome.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206140
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Outcome.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_OutcomeContent
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_OutcomeContent : USolarTableReaderBase {

	struct FSolarTablesData_OutcomeContent TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_OutcomeContent.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2207770
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_OutcomeContent.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd120
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_OutcomeContent.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206d90
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_OutcomeContent.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc640
	struct FSolarTablesData_OutcomeContent GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_OutcomeContent.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206630
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206180
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_OutcomeSet
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_OutcomeSet : USolarTableReaderBase {

	struct FSolarTablesData_OutcomeSet TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_OutcomeSet.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x22078c0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_OutcomeSet.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4160
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_OutcomeSet.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206e80
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_OutcomeSet.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3680
	struct FSolarTablesData_OutcomeSet GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_OutcomeSet.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d96d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22061c0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_PickupPriorityItem
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_PickupPriorityItem : USolarTableReaderBase {

	struct FSolarTablesData_PickupPriorityItem TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_PickupPriorityItem.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2207a10
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_PickupPriorityItem.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd210
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_PickupPriorityItem.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206f70
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206910
	struct FSolarTablesData_PickupPriorityItem GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206750
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206200
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_PickupPriorityWeaponPart
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_PickupPriorityWeaponPart : USolarTableReaderBase {

	struct FSolarTablesData_PickupPriorityWeaponPart TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x220e550
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4070
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220deb0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x220dd30
	struct FSolarTablesData_PickupPriorityWeaponPart GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3000
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220d6d0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_PlayerOperationListLayout
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_PlayerOperationListLayout : USolarTableReaderBase {

	struct FSolarTablesData_PlayerOperationListLayout TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x220e730
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c42e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220dfa0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3ad0
	struct FSolarTablesData_PlayerOperationListLayout GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220d850
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220d710
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_QuickChat
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_QuickChat : USolarTableReaderBase {

	struct FSolarTablesData_QuickChat TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_QuickChat.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x220e9e0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_QuickChat.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220e450
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_QuickChat.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220e090
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_QuickChat.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_QuickChat.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x220ddf0
	struct FSolarTablesData_QuickChat GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_QuickChat.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220d970
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_QuickChat.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_QuickChat.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_QuickChat.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220d750
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_QuickChat.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_QuickVoice
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_QuickVoice : USolarTableReaderBase {

	struct FSolarTablesData_QuickVoice TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_QuickVoice.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x220ebd0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_QuickVoice.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bcd60
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_QuickVoice.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220e180
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_QuickVoice.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_QuickVoice.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc340
	struct FSolarTablesData_QuickVoice GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_QuickVoice.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220da60
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_QuickVoice.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_QuickVoice.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_QuickVoice.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220d790
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_QuickVoice.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_RankLevel
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_RankLevel : USolarTableReaderBase {

	struct FSolarTablesData_RankLevel TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_RankLevel.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x220ed20
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_RankLevel.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4250
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_RankLevel.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220e270
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_RankLevel.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_RankLevel.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1bf0
	struct FSolarTablesData_RankLevel GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_RankLevel.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220db50
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_RankLevel.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_RankLevel.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_RankLevel.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220d7d0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_RankLevel.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_RankMatch
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_RankMatch : USolarTableReaderBase {

	struct FSolarTablesData_RankMatch TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_RankMatch.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x220ee70
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_RankMatch.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bce50
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_RankMatch.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220e360
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_RankMatch.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_RankMatch.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc400
	struct FSolarTablesData_RankMatch GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_RankMatch.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220dc40
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_RankMatch.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_RankMatch.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_RankMatch.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220d810
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_RankMatch.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Rescue
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Rescue : USolarTableReaderBase {

	struct FSolarTablesData_Rescue TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Rescue.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x221ca10
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Rescue.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3430
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Rescue.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x221c550
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Rescue.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Rescue.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2b10
	struct FSolarTablesData_Rescue GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Rescue.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x221c0c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Rescue.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Rescue.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Rescue.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x221bfc0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Rescue.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_SecondMode
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_SecondMode : USolarTableReaderBase {

	struct FSolarTablesData_SecondMode TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_SecondMode.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x221cd50
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_SecondMode.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c41f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_SecondMode.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x221c640
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_SecondMode.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_SecondMode.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3a10
	struct FSolarTablesData_SecondMode GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_SecondMode.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x221c1b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_SecondMode.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_SecondMode.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_SecondMode.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x221c000
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_SecondMode.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_ShieldProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ShieldProperty : USolarTableReaderBase {

	struct FSolarTablesData_ShieldProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ShieldProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x221cf70
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ShieldProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x221c910
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ShieldProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x221c730
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ShieldProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x221c490
	struct FSolarTablesData_ShieldProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ShieldProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x221c2b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x221c040
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Skin
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Skin : USolarTableReaderBase {

	struct FSolarTablesData_Skin TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Skin.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x221d1e0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Skin.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f3110
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Skin.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x221c820
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Skin.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Skin.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21f29d0
	struct FSolarTablesData_Skin GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Skin.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x221c3a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Skin.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Skin.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Skin.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x221c080
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Skin.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_TablesReader
// Size: 0x390 (Inherited: 0x28)
struct USolarTables_TablesReader : UObject {
	struct USolarTables_Reader_AccountFixedExp* AccountFixedExp; // 0x28(0x08)
	struct USolarTables_Reader_AccountFlag* AccountFlag; // 0x30(0x08)
	struct USolarTables_Reader_Airline* Airline; // 0x38(0x08)
	struct USolarTables_Reader_Armory* Armory; // 0x40(0x08)
	struct USolarTables_Reader_BattleUpgradeContent* BattleUpgradeContent; // 0x48(0x08)
	struct USolarTables_Reader_BattleUpgradeEffect* BattleUpgradeEffect; // 0x50(0x08)
	struct USolarTables_Reader_BattleUpgradeEffectPool* BattleUpgradeEffectPool; // 0x58(0x08)
	struct USolarTables_Reader_BattleEndRankSettlement* BattleEndRankSettlement; // 0x60(0x08)
	struct USolarTables_Reader_BpAward* BpAward; // 0x68(0x08)
	struct USolarTables_Reader_Behavior* Behavior; // 0x70(0x08)
	struct USolarTables_Reader_EscapeExp* EscapeExp; // 0x78(0x08)
	struct USolarTables_Reader_CaseToggleAlphabet* CaseToggleAlphabet; // 0x80(0x08)
	struct USolarTables_Reader_UnitCharacter* UnitCharacter; // 0x88(0x08)
	struct USolarTables_Reader_CharacterAbility* CharacterAbility; // 0x90(0x08)
	struct USolarTables_Reader_CharacterPassiveAbility* CharacterPassiveAbility; // 0x98(0x08)
	struct USolarTables_Reader_GetPoint* GetPoint; // 0xa0(0x08)
	struct USolarTables_Reader_ChestSpawn* ChestSpawn; // 0xa8(0x08)
	struct USolarTables_Reader_ChestSpawnGroup* ChestSpawnGroup; // 0xb0(0x08)
	struct USolarTables_Reader_ClanFlag* ClanFlag; // 0xb8(0x08)
	struct USolarTables_Reader_DayAndNight* DayAndNight; // 0xc0(0x08)
	struct USolarTables_Reader_DsVariableRange* DsVariableRange; // 0xc8(0x08)
	struct USolarTables_Reader_EShop* EShop; // 0xd0(0x08)
	struct USolarTables_Reader_EShopDemoModel* EShopDemoModel; // 0xd8(0x08)
	struct USolarTables_Reader_EShopGoodsPool* EShopGoodsPool; // 0xe0(0x08)
	struct USolarTables_Reader_EShopGoodsPoolGroup* EShopGoodsPoolGroup; // 0xe8(0x08)
	struct USolarTables_Reader_EShopSpawn* EShopSpawn; // 0xf0(0x08)
	struct USolarTables_Reader_BattleRoyaleMode* BattleRoyaleMode; // 0xf8(0x08)
	struct USolarTables_Reader_GameModeGroup* GameModeGroup; // 0x100(0x08)
	struct USolarTables_Reader_GameModeMain* GameModeMain; // 0x108(0x08)
	struct USolarTables_Reader_OutcomeSet* OutcomeSet; // 0x110(0x08)
	struct USolarTables_Reader_GameTimeLine* GameTimeLine; // 0x118(0x08)
	struct USolarTables_Reader_GlobalOutcome* GlobalOutcome; // 0x120(0x08)
	struct USolarTables_Reader_GlobalSensitivity* GlobalSensitivity; // 0x128(0x08)
	struct USolarTables_Reader_InputAction* InputAction; // 0x130(0x08)
	struct USolarTables_Reader_InputMapping* InputMapping; // 0x138(0x08)
	struct USolarTables_Reader_Item* Item; // 0x140(0x08)
	struct USolarTables_Reader_BackpackProperty* BackpackProperty; // 0x148(0x08)
	struct USolarTables_Reader_BackpackTrailProperty* BackpackTrailProperty; // 0x150(0x08)
	struct USolarTables_Reader_CapsuleProperty* CapsuleProperty; // 0x158(0x08)
	struct USolarTables_Reader_Emote* Emote; // 0x160(0x08)
	struct USolarTables_Reader_MaterialProperty* MaterialProperty; // 0x168(0x08)
	struct USolarTables_Reader_VehicleSkinProperty* VehicleSkinProperty; // 0x170(0x08)
	struct USolarTables_Reader_WeaponSkinProperty* WeaponSkinProperty; // 0x178(0x08)
	struct USolarTables_Reader_ItemCustomType* ItemCustomType; // 0x180(0x08)
	struct USolarTables_Reader_ItemInBattle* ItemInBattle; // 0x188(0x08)
	struct USolarTables_Reader_ArmorProperty* ArmorProperty; // 0x190(0x08)
	struct USolarTables_Reader_Chest* Chest; // 0x198(0x08)
	struct USolarTables_Reader_EnergyProperty* EnergyProperty; // 0x1a0(0x08)
	struct USolarTables_Reader_ExtraEnergyProperty* ExtraEnergyProperty; // 0x1a8(0x08)
	struct USolarTables_Reader_GunProperty* GunProperty; // 0x1b0(0x08)
	struct USolarTables_Reader_ItemBehavior* ItemBehavior; // 0x1b8(0x08)
	struct USolarTables_Reader_ItemWeaponParts* ItemWeaponParts; // 0x1c0(0x08)
	struct USolarTables_Reader_JetPackModuleProperty* JetPackModuleProperty; // 0x1c8(0x08)
	struct USolarTables_Reader_ShieldProperty* ShieldProperty; // 0x1d0(0x08)
	struct USolarTables_Reader_ItemQuality* ItemQuality; // 0x1d8(0x08)
	struct USolarTables_Reader_ItemSound* ItemSound; // 0x1e0(0x08)
	struct USolarTables_Reader_LobbyAutoDownload* LobbyAutoDownload; // 0x1e8(0x08)
	struct USolarTables_Reader_LanguageSwitcher* LanguageSwitcher; // 0x1f0(0x08)
	struct USolarTables_Reader_Localization* Localization; // 0x1f8(0x08)
	struct USolarTables_Reader_Localization_BattleUI* Localization_BattleUI; // 0x200(0x08)
	struct USolarTables_Reader_Localization_EventSystem* Localization_EventSystem; // 0x208(0x08)
	struct USolarTables_Reader_Localization_General* Localization_General; // 0x210(0x08)
	struct USolarTables_Reader_Localization_Heroes* Localization_Heroes; // 0x218(0x08)
	struct USolarTables_Reader_Localization_Item* Localization_Item; // 0x220(0x08)
	struct USolarTables_Reader_Localization_Tournament* Localization_Tournament; // 0x228(0x08)
	struct USolarTables_Reader_Localization_Uncategorized* Localization_Uncategorized; // 0x230(0x08)
	struct USolarTables_Reader_GameMap* GameMap; // 0x238(0x08)
	struct USolarTables_Reader_MapMarkIcon* MapMarkIcon; // 0x240(0x08)
	struct USolarTables_Reader_MatchRule* MatchRule; // 0x248(0x08)
	struct USolarTables_Reader_RankMatch* RankMatch; // 0x250(0x08)
	struct USolarTables_Reader_NameCardBackground* NameCardBackground; // 0x258(0x08)
	struct USolarTables_Reader_NameCardPose* NameCardPose; // 0x260(0x08)
	struct USolarTables_Reader_ObGift* ObGift; // 0x268(0x08)
	struct USolarTables_Reader_Outcome* Outcome; // 0x270(0x08)
	struct USolarTables_Reader_OutcomeContent* OutcomeContent; // 0x278(0x08)
	struct USolarTables_Reader_PickupPriorityItem* PickupPriorityItem; // 0x280(0x08)
	struct USolarTables_Reader_PickupPriorityWeaponPart* PickupPriorityWeaponPart; // 0x288(0x08)
	struct USolarTables_Reader_CharacterVoiceover* CharacterVoiceover; // 0x290(0x08)
	struct USolarTables_Reader_QuickChat* QuickChat; // 0x298(0x08)
	struct USolarTables_Reader_QuickVoice* QuickVoice; // 0x2a0(0x08)
	struct USolarTables_Reader_VODownload* VODownload; // 0x2a8(0x08)
	struct USolarTables_Reader_RankLevel* RankLevel; // 0x2b0(0x08)
	struct USolarTables_Reader_Rescue* Rescue; // 0x2b8(0x08)
	struct USolarTables_Reader_Skin* Skin; // 0x2c0(0x08)
	struct USolarTables_Reader_Achievement* Achievement; // 0x2c8(0x08)
	struct USolarTables_Reader_TaskProgress* TaskProgress; // 0x2d0(0x08)
	struct USolarTables_Reader_TaskSystem* TaskSystem; // 0x2d8(0x08)
	struct USolarTables_Reader_PlayerOperationListLayout* PlayerOperationListLayout; // 0x2e0(0x08)
	struct USolarTables_Reader_Variables* Variables; // 0x2e8(0x08)
	struct USolarTables_Reader_Vehicle* Vehicle; // 0x2f0(0x08)
	struct USolarTables_Reader_VehicleSkin* VehicleSkin; // 0x2f8(0x08)
	struct USolarTables_Reader_VehicleType* VehicleType; // 0x300(0x08)
	struct USolarTables_Reader_VehicleSpawn* VehicleSpawn; // 0x308(0x08)
	struct USolarTables_Reader_VehicleSpawnGroup* VehicleSpawnGroup; // 0x310(0x08)
	struct USolarTables_Reader_WarmGame* WarmGame; // 0x318(0x08)
	struct USolarTables_Reader_WarmGameMode* WarmGameMode; // 0x320(0x08)
	struct USolarTables_Reader_WeaponDamage* WeaponDamage; // 0x328(0x08)
	struct USolarTables_Reader_Weapon* Weapon; // 0x330(0x08)
	struct USolarTables_Reader_WeaponAmmo* WeaponAmmo; // 0x338(0x08)
	struct USolarTables_Reader_WeaponBattleUpgrade* WeaponBattleUpgrade; // 0x340(0x08)
	struct USolarTables_Reader_WeaponDefault* WeaponDefault; // 0x348(0x08)
	struct USolarTables_Reader_WeaponKillTip* WeaponKillTip; // 0x350(0x08)
	struct USolarTables_Reader_WeaponParts* WeaponParts; // 0x358(0x08)
	struct USolarTables_Reader_WeaponPartsOp* WeaponPartsOp; // 0x360(0x08)
	struct USolarTables_Reader_WeaponQuality* WeaponQuality; // 0x368(0x08)
	struct USolarTables_Reader_SecondMode* SecondMode; // 0x370(0x08)
	struct USolarTables_Reader_WeaponSkin* WeaponSkin; // 0x378(0x08)
	struct USolarTables_Reader_WeaponSound* WeaponSound; // 0x380(0x08)
	struct USolarTables_Reader_WeaponStatu* WeaponStatu; // 0x388(0x08)
};

// Class Solarland.SolarTables_Reader_TaskProgress
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_TaskProgress : USolarTableReaderBase {

	struct FSolarTablesData_TaskProgress TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_TaskProgress.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2223dd0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_TaskProgress.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4070
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_TaskProgress.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22235b0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_TaskProgress.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_TaskProgress.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b35c0
	struct FSolarTablesData_TaskProgress GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_TaskProgress.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3000
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_TaskProgress.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_TaskProgress.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_TaskProgress.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2222c40
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_TaskProgress.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_TaskSystem
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_TaskSystem : USolarTableReaderBase {

	struct FSolarTablesData_TaskSystem TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_TaskSystem.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2223fb0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_TaskSystem.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21da1d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_TaskSystem.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22236a0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_TaskSystem.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_TaskSystem.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d99c0
	struct FSolarTablesData_TaskSystem GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_TaskSystem.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2222dc0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_TaskSystem.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_TaskSystem.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_TaskSystem.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2222c80
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_TaskSystem.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_UnitCharacter
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_UnitCharacter : USolarTableReaderBase {

	struct FSolarTablesData_UnitCharacter TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_UnitCharacter.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2224120
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_UnitCharacter.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2223b50
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_UnitCharacter.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2223790
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_UnitCharacter.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2223350
	struct FSolarTablesData_UnitCharacter GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_UnitCharacter.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2222eb0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2222cc0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Variables
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Variables : USolarTableReaderBase {

	struct FSolarTablesData_Variables TryGetRowData(struct FString Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Variables.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2224310
	bool HasRowKey(struct FString Key); // Function Solarland.SolarTables_Reader_Variables.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2223c50
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Variables.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2223880
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Variables.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<struct FString>& OutKeys); // Function Solarland.SolarTables_Reader_Variables.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2223410
	struct FSolarTablesData_Variables GetRowData(struct FString Key); // Function Solarland.SolarTables_Reader_Variables.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2222fa0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Variables.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Variables.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Variables.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2222d00
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Variables.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Vehicle
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Vehicle : USolarTableReaderBase {

	struct FSolarTablesData_Vehicle TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Vehicle.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x22246a0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Vehicle.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bcf40
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Vehicle.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2223970
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Vehicle.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Vehicle.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x22234f0
	struct FSolarTablesData_Vehicle GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Vehicle.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2223150
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Vehicle.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Vehicle.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Vehicle.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2222d40
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Vehicle.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_VehicleSkin
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleSkin : USolarTableReaderBase {

	struct FSolarTablesData_VehicleSkin TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleSkin.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2224910
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSkin.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4440
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleSkin.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2223a60
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleSkin.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b38c0
	struct FSolarTablesData_VehicleSkin GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSkin.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2223260
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2222d80
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_VehicleSkinProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleSkinProperty : USolarTableReaderBase {

	struct FSolarTablesData_VehicleSkinProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x222a6f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bce50
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2229fe0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc400
	struct FSolarTablesData_VehicleSkinProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2229a70
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2229810
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_VehicleSpawn
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleSpawn : USolarTableReaderBase {

	struct FSolarTablesData_VehicleSpawn TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleSpawn.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x222a820
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSpawn.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4160
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleSpawn.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x222a0d0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3680
	struct FSolarTablesData_VehicleSpawn GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d96d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2229850
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_VehicleSpawnGroup
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleSpawnGroup : USolarTableReaderBase {

	struct FSolarTablesData_VehicleSpawnGroup TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x222a970
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c43d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x222a1c0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c3b90
	struct FSolarTablesData_VehicleSpawnGroup GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2229b60
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2229890
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_VehicleType
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleType : USolarTableReaderBase {

	struct FSolarTablesData_VehicleType TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleType.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x222aee0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleType.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x222a490
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleType.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x222a2b0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleType.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleType.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2229e30
	struct FSolarTablesData_VehicleType GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleType.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2229c50
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleType.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleType.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleType.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22298d0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleType.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_VODownload
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VODownload : USolarTableReaderBase {

	struct FSolarTablesData_VODownload TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VODownload.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x222a590
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VODownload.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21c42e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VODownload.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2229ef0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VODownload.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VODownload.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206850
	struct FSolarTablesData_VODownload GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VODownload.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2229950
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VODownload.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VODownload.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VODownload.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22297d0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VODownload.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_WarmGame
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WarmGame : USolarTableReaderBase {

	struct FSolarTablesData_WarmGame TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WarmGame.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x222b0d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WarmGame.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4250
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WarmGame.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x222a3a0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WarmGame.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WarmGame.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21d1bf0
	struct FSolarTablesData_WarmGame GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WarmGame.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2229d40
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WarmGame.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WarmGame.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WarmGame.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2229910
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WarmGame.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_WarmGameMode
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WarmGameMode : USolarTableReaderBase {

	struct FSolarTablesData_WarmGameMode TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WarmGameMode.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2231ae0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WarmGameMode.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4350
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WarmGameMode.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2231630
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WarmGameMode.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3800
	struct FSolarTablesData_WarmGameMode GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WarmGameMode.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22312a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22311a0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_Weapon
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Weapon : USolarTableReaderBase {

	struct FSolarTablesData_Weapon TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Weapon.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2231d80
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Weapon.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22319f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Weapon.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2231720
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Weapon.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Weapon.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2231570
	struct FSolarTablesData_Weapon GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Weapon.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2231390
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Weapon.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Weapon.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Weapon.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22311e0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Weapon.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_WeaponAmmo
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponAmmo : USolarTableReaderBase {

	struct FSolarTablesData_WeaponAmmo TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponAmmo.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2231f50
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponAmmo.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3330
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponAmmo.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2231810
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e2a50
	struct FSolarTablesData_WeaponAmmo GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2231480
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2231220
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_WeaponBattleUpgrade
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponBattleUpgrade : USolarTableReaderBase {

	struct FSolarTablesData_WeaponBattleUpgrade TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2232170
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd210
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2231900
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc700
	struct FSolarTablesData_WeaponBattleUpgrade GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21cb430
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2231260
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_WeaponDamage
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponDamage : USolarTableReaderBase {

	struct FSolarTablesData_WeaponDamage TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponDamage.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2238570
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponDamage.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd210
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponDamage.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2237de0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponDamage.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc700
	struct FSolarTablesData_WeaponDamage GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponDamage.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2206750
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22376c0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_WeaponDefault
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponDefault : USolarTableReaderBase {

	struct FSolarTablesData_WeaponDefault TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponDefault.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2238770
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponDefault.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4440
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponDefault.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2237ed0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponDefault.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b38c0
	struct FSolarTablesData_WeaponDefault GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponDefault.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2237880
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2237700
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_WeaponKillTip
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponKillTip : USolarTableReaderBase {

	struct FSolarTablesData_WeaponKillTip TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponKillTip.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x22388d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponKillTip.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4160
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponKillTip.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2237fc0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3680
	struct FSolarTablesData_WeaponKillTip GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2237970
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2237740
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_WeaponParts
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponParts : USolarTableReaderBase {

	struct FSolarTablesData_WeaponParts TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponParts.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2238a10
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponParts.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2238470
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponParts.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22380b0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponParts.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponParts.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2237c60
	struct FSolarTablesData_WeaponParts GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponParts.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2237a80
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponParts.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponParts.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponParts.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2237780
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponParts.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_WeaponPartsOp
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponPartsOp : USolarTableReaderBase {

	struct FSolarTablesData_WeaponPartsOp TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponPartsOp.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2238c00
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponPartsOp.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4070
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponPartsOp.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22381a0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b35c0
	struct FSolarTablesData_WeaponPartsOp GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3000
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22377c0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_WeaponQuality
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponQuality : USolarTableReaderBase {

	struct FSolarTablesData_WeaponQuality TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponQuality.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2238de0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponQuality.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b4070
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponQuality.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2238290
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponQuality.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b35c0
	struct FSolarTablesData_WeaponQuality GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponQuality.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3000
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2237800
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_WeaponSkin
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponSkin : USolarTableReaderBase {

	struct FSolarTablesData_WeaponSkin TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponSkin.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2238fc0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSkin.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21e3230
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponSkin.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2238380
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponSkin.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2237d20
	struct FSolarTablesData_WeaponSkin GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSkin.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2237b70
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2237840
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_WeaponSkinProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponSkinProperty : USolarTableReaderBase {

	struct FSolarTablesData_WeaponSkinProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x223fbb0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bd120
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x223f330
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc640
	struct FSolarTablesData_WeaponSkinProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x223eeb0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x223ec20
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_WeaponSound
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponSound : USolarTableReaderBase {

	struct FSolarTablesData_WeaponSound TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponSound.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x223fcd0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSound.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x223f600
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponSound.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x223f420
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponSound.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponSound.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x223f1a0
	struct FSolarTablesData_WeaponSound GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSound.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x223efa0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponSound.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponSound.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponSound.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x223ec60
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponSound.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.SolarTables_Reader_WeaponStatu
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponStatu : USolarTableReaderBase {

	struct FSolarTablesData_WeaponStatu TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponStatu.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x223fec0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponStatu.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bcf40
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponStatu.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x223f510
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b3a40
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponStatu.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x21bc4c0
	struct FSolarTablesData_WeaponStatu GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponStatu.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x223f090
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2fd0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2f70
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x223eca0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21b2dc0
};

// Class Solarland.TaskFormula
// Size: 0x230 (Inherited: 0x228)
struct ATaskFormula : AInfo {
	struct USolarTaskComponent* TaskSystem; // 0x228(0x08)

	void SetTaskProgress(int64_t InTaskID, int64_t ProgressValue, bool bOverrideLastMatch); // Function Solarland.TaskFormula.SetTaskProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x223faa0
	void IncreaseTaskProgress(int64_t InTaskID, int64_t ProgressValue); // Function Solarland.TaskFormula.IncreaseTaskProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x223f700
	int32_t GetTaskConditionValue(int64_t InTaskID, int64_t Index); // Function Solarland.TaskFormula.GetTaskConditionValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x223f260
};

// Class Solarland.SolarTaskComponent
// Size: 0x1a8 (Inherited: 0xb0)
struct USolarTaskComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FMulticastInlineDelegate TaskUpdateDelegate; // 0xb8(0x10)
	struct FMulticastInlineDelegate TaskCompoleteDelegate; // 0xc8(0x10)
	struct FMulticastInlineDelegate MarkingTaskChangedDelegate; // 0xd8(0x10)
	struct FMulticastInlineDelegate ClientTaskUpdatedDelegate; // 0xe8(0x10)
	struct FMulticastInlineDelegate ClientBattlePassTimeInfoDelegate; // 0xf8(0x10)
	struct UDataTable* TaskTypeHandleConfig; // 0x108(0x08)
	struct ATaskFormula* TaskFormula; // 0x110(0x08)
	struct ATaskFormula* FormulaInst; // 0x118(0x08)
	struct TArray<int64_t> MarkingTask; // 0x120(0x10)
	struct FBattlePassTimeInfo BattlePassTimeInfo; // 0x130(0x18)
	struct TArray<struct FTaskBriefData> tasks; // 0x148(0x10)
	char pad_158[0x50]; // 0x158(0x50)

	void ServerEnableMarkTask(int64_t InTaskID, bool bMarking); // Function Solarland.SolarTaskComponent.ServerEnableMarkTask // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x223f9d0
	void OnRep_Tasks(); // Function Solarland.SolarTaskComponent.OnRep_Tasks // (Final|Native|Public) // @ game+0x223f870
	void OnRep_MarkingTask(); // Function Solarland.SolarTaskComponent.OnRep_MarkingTask // (Final|Native|Public) // @ game+0x223f850
	void OnRep_BattlePassTimeInfo(); // Function Solarland.SolarTaskComponent.OnRep_BattlePassTimeInfo // (Final|Native|Public) // @ game+0x223f830
	bool IsMaxLevel(); // Function Solarland.SolarTaskComponent.IsMaxLevel // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool IsEnable(); // Function Solarland.SolarTaskComponent.IsEnable // (Final|BlueprintCosmetic|Native|Public) // @ game+0x223f7d0
	struct FBattlePassTimeInfo GetBattlePassTimeInfo(); // Function Solarland.SolarTaskComponent.GetBattlePassTimeInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x223ebf0
	struct TArray<struct FTaskBriefData> GetAllTaskBriefData(); // Function Solarland.SolarTaskComponent.GetAllTaskBriefData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x223ebc0
	struct TArray<int64_t> GetAllMarkTask(); // Function Solarland.SolarTaskComponent.GetAllMarkTask // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x223eb90
	void EnableMarkTask(int64_t InTaskID, bool bMarking); // Function Solarland.SolarTaskComponent.EnableMarkTask // (Final|Native|Public|BlueprintCallable) // @ game+0x223eac0
	void ClientNotifyTaskComplete(struct FTaskBriefData InTaskInfo); // Function Solarland.SolarTaskComponent.ClientNotifyTaskComplete // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x223e750
};

// Class Solarland.SolarTcpNetworkManager
// Size: 0x508 (Inherited: 0x28)
struct USolarTcpNetworkManager : UObject {
	char pad_28[0x21]; // 0x28(0x21)
	bool bIsSsmMatchEnd; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
	struct ASolarTCPSocketClient* SocketClient; // 0x50(0x08)
	struct USCMMatchChannelAction* MatchChannelAction; // 0x58(0x08)
	bool IsSsm; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct FString EncryptKeyClientTCPDynamic; // 0x68(0x10)
	bool bEncrypt; // 0x78(0x01)
	bool bCompression; // 0x79(0x01)
	char pad_7A[0x2]; // 0x7a(0x02)
	struct FDelegate DisconnectedDelegate; // 0x7c(0x10)
	struct FDelegate ConnectedDelegate; // 0x8c(0x10)
	struct FDelegate MessageReceivedDelegate; // 0x9c(0x10)
	char pad_AC[0x4]; // 0xac(0x04)
	struct FSolarPlayerReport MyReport; // 0xb0(0x428)
	char pad_4D8[0x30]; // 0x4d8(0x30)

	void UpdateTeamRank(char TeamID, int32_t Rank); // Function Solarland.SolarTcpNetworkManager.UpdateTeamRank // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UpdateTeamMVPPlayer(char TeamID, struct FString InPlayerID); // Function Solarland.SolarTcpNetworkManager.UpdateTeamMVPPlayer // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UpdatePlayerData(struct FString PlayerId, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarTcpNetworkManager.UpdatePlayerData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UpdatePlayerBattleInfo(struct ASolarPlayerState* PS); // Function Solarland.SolarTcpNetworkManager.UpdatePlayerBattleInfo // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool UpdateBotAIData(int32_t AIIndex, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarTcpNetworkManager.UpdateBotAIData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void TryEndBattle(); // Function Solarland.SolarTcpNetworkManager.TryEndBattle // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SyncSsmDataToGameState(); // Function Solarland.SolarTcpNetworkManager.SyncSsmDataToGameState // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SsmDSSendGiftRequest(int32_t GiftID, int32_t Num, struct FString SendPlayerId, struct FString RecivePlayerId, struct ASolarPlayerState* SendPlayer); // Function Solarland.SolarTcpNetworkManager.SsmDSSendGiftRequest // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SsmDSChangeRoleIDRequest(struct FString InPlayerID, int32_t InRoleID); // Function Solarland.SolarTcpNetworkManager.SsmDSChangeRoleIDRequest // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetKnockoutPoints(struct FString InClanId, int32_t InKnockoutPoints); // Function Solarland.SolarTcpNetworkManager.SetKnockoutPoints // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SendSceenshot2Server(struct FString UserId, struct FString PlayerId, struct FString BattleID, int64_t ScreenshotTime, int32_t ImageSize, int32_t ImageWidth, int32_t ImageHeight, struct FString ImageType, struct FString ImageBuffer); // Function Solarland.SolarTcpNetworkManager.SendSceenshot2Server // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RequestOpenMatchChannel(int32_t InMatchType, struct TArray<int32_t>& InPlayerStructure, int32_t InMaxMatchTime); // Function Solarland.SolarTcpNetworkManager.RequestOpenMatchChannel // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void ReportTournamentSpectate(struct TMap<struct FString, struct FString>& TournamentSpectateData); // Function Solarland.SolarTcpNetworkManager.ReportTournamentSpectate // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void ReportPlayerBattleInfo(struct ASolarPlayerState* PS); // Function Solarland.SolarTcpNetworkManager.ReportPlayerBattleInfo // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RecordLastUsedVehicle(); // Function Solarland.SolarTcpNetworkManager.RecordLastUsedVehicle // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void PlayerRequireToChangeGold(int32_t InChangedGoldType, int32_t InGoldNum, struct FString InPlayerID, struct ASolarPlayerState* InPlayer); // Function Solarland.SolarTcpNetworkManager.PlayerRequireToChangeGold // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void PlayerCancelJoinRequest(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.PlayerCancelJoinRequest // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void PlayerCancelJoin(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.PlayerCancelJoin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OpenSupplement(int32_t MaxSecond); // Function Solarland.SolarTcpNetworkManager.OpenSupplement // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnStartBattleResponse(); // Function Solarland.SolarTcpNetworkManager.OnStartBattleResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x2244b00
	void OnRecvData(struct TArray<char>& Data); // Function Solarland.SolarTcpNetworkManager.OnRecvData // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	bool OnReceivedTeamPreJoinRequest(struct TArray<struct FString>& PlayerIds, int32_t TeamID); // Function Solarland.SolarTcpNetworkManager.OnReceivedTeamPreJoinRequest // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x22449e0
	void OnReceivedPlayerJoinData(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.OnReceivedPlayerJoinData // (Final|Native|Public|BlueprintCallable) // @ game+0x2244940
	void OnReceivedPlayerCancelJoin(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.OnReceivedPlayerCancelJoin // (Final|Native|Public|BlueprintCallable) // @ game+0x22448a0
	void OnPostLoadMapWithWorld(struct UWorld* World); // Function Solarland.SolarTcpNetworkManager.OnPostLoadMapWithWorld // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnPlayerLogin(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.OnPlayerLogin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnMessageReceived(int32_t ConnId, struct TArray<char>& Message); // Function Solarland.SolarTcpNetworkManager.OnMessageReceived // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x22446e0
	void OnDisconnected(int32_t ConnId); // Function Solarland.SolarTcpNetworkManager.OnDisconnected // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnConnected(int32_t ConnId); // Function Solarland.SolarTcpNetworkManager.OnConnected // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyTournamentSpectateState(bool bIsEnterReplay, struct FString& BattleID); // Function Solarland.SolarTcpNetworkManager.NotifyTournamentSpectateState // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void NotifyRoomDataChanged(struct FCustomRoomData& CustomRoomData); // Function Solarland.SolarTcpNetworkManager.NotifyRoomDataChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void NotifyPlayerReward_CustomMode(struct FSCustomMode_PlayerReport& Report); // Function Solarland.SolarTcpNetworkManager.NotifyPlayerReward_CustomMode // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void NotifyPlayerReward(); // Function Solarland.SolarTcpNetworkManager.NotifyPlayerReward // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyPlayerOffline(struct ASolarPlayerController* PC); // Function Solarland.SolarTcpNetworkManager.NotifyPlayerOffline // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyPlayerEnterBattle(struct ASolarPlayerController* PC); // Function Solarland.SolarTcpNetworkManager.NotifyPlayerEnterBattle // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyOBPlayersChanged(struct TArray<struct FString>& PlayerIds); // Function Solarland.SolarTcpNetworkManager.NotifyOBPlayersChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void NotifyEquipCharacterSkinRequest(struct FString PlayerId, int32_t CharacterId, int32_t SkinId); // Function Solarland.SolarTcpNetworkManager.NotifyEquipCharacterSkinRequest // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyClientBattleStateFish(); // Function Solarland.SolarTcpNetworkManager.NotifyClientBattleStateFish // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void NotifyBattleGroupResultRequest(char TeamID, int32_t Rank); // Function Solarland.SolarTcpNetworkManager.NotifyBattleGroupResultRequest // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool IsEnableAITeamManager(); // Function Solarland.SolarTcpNetworkManager.IsEnableAITeamManager // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool IsAllowReconnectGame(); // Function Solarland.SolarTcpNetworkManager.IsAllowReconnectGame // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void HandlePlayerLogoutInPreparatoryPhase(struct AController* PC); // Function Solarland.SolarTcpNetworkManager.HandlePlayerLogoutInPreparatoryPhase // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void HandlePlayerLogoutInBattlePhase(struct AController* PC); // Function Solarland.SolarTcpNetworkManager.HandlePlayerLogoutInBattlePhase // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void GetWeaponUpgradeSlotByWeaponID(struct TArray<struct FUpgradeSlotStruct>& outData, struct FString PlayerId, int32_t weaponid); // Function Solarland.SolarTcpNetworkManager.GetWeaponUpgradeSlotByWeaponID // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetWeaponSkinIDByWeaponID(struct FString PlayerId, int32_t weaponid); // Function Solarland.SolarTcpNetworkManager.GetWeaponSkinIDByWeaponID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetWarmGameType(); // Function Solarland.SolarTcpNetworkManager.GetWarmGameType // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetTournamentID(); // Function Solarland.SolarTcpNetworkManager.GetTournamentID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void GetStartBattleRequestInfo(struct FStartBattleRequestInfo& OutResult); // Function Solarland.SolarTcpNetworkManager.GetStartBattleRequestInfo // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	struct FSolarGameModeInfo GetSolarGameModeInfo(); // Function Solarland.SolarTcpNetworkManager.GetSolarGameModeInfo // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetRuleID(); // Function Solarland.SolarTcpNetworkManager.GetRuleID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void GetReportWeaponExpIds(struct TArray<int32_t>& OutWeaponExpIds); // Function Solarland.SolarTcpNetworkManager.GetReportWeaponExpIds // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2244370
	int32_t GetRankMatchID(); // Function Solarland.SolarTcpNetworkManager.GetRankMatchID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<int32_t> GetPlayerUsableTailFlameIds(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.GetPlayerUsableTailFlameIds // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<int32_t> GetPlayerUsableJetpackIds(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.GetPlayerUsableJetpackIds // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<char> GetPlayerTeamIDs(); // Function Solarland.SolarTcpNetworkManager.GetPlayerTeamIDs // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<struct FString> GetPlayerRoleAndOpenIDs(); // Function Solarland.SolarTcpNetworkManager.GetPlayerRoleAndOpenIDs // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetPlayerCount(); // Function Solarland.SolarTcpNetworkManager.GetPlayerCount // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FString GetPlayerClanID(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.GetPlayerClanID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void GetPlayerBattleRequestInfo(struct FString InSolarPlayerID, struct FPlayerBattleRequestInfo& OutResult); // Function Solarland.SolarTcpNetworkManager.GetPlayerBattleRequestInfo // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetNumMode(); // Function Solarland.SolarTcpNetworkManager.GetNumMode // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<int32_t> GetMLRelatedAIDataMLRatio(); // Function Solarland.SolarTcpNetworkManager.GetMLRelatedAIDataMLRatio // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<int32_t> GetMLRelatedAIDataMLFeature(); // Function Solarland.SolarTcpNetworkManager.GetMLRelatedAIDataMLFeature // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool GetMLRelatedAIDataMLClosed(); // Function Solarland.SolarTcpNetworkManager.GetMLRelatedAIDataMLClosed // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetMaxPlayerNum(); // Function Solarland.SolarTcpNetworkManager.GetMaxPlayerNum // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FString GetLocalPlayerID(); // Function Solarland.SolarTcpNetworkManager.GetLocalPlayerID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FString GetLocalIPAddress(); // Function Solarland.SolarTcpNetworkManager.GetLocalIPAddress // (Final|Native|Public|BlueprintCallable) // @ game+0x22442f0
	struct FKnockoutParams GetKnockoutPointParams(); // Function Solarland.SolarTcpNetworkManager.GetKnockoutPointParams // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool GetIsCloseMatch(); // Function Solarland.SolarTcpNetworkManager.GetIsCloseMatch // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool GetHasMonster(); // Function Solarland.SolarTcpNetworkManager.GetHasMonster // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool GetHasMachineLearning(); // Function Solarland.SolarTcpNetworkManager.GetHasMachineLearning // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetGameModeGroupId(); // Function Solarland.SolarTcpNetworkManager.GetGameModeGroupId // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetEntryID(); // Function Solarland.SolarTcpNetworkManager.GetEntryID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetCurrentMatchBotTeamPresetID(); // Function Solarland.SolarTcpNetworkManager.GetCurrentMatchBotTeamPresetID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<int32_t> GetClientMatchingMapIds(); // Function Solarland.SolarTcpNetworkManager.GetClientMatchingMapIds // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	float GetBotShootSimulatorRatio(); // Function Solarland.SolarTcpNetworkManager.GetBotShootSimulatorRatio // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FString GetBattleID(); // Function Solarland.SolarTcpNetworkManager.GetBattleID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct TMap<int32_t, int32_t> GetAILevelConfig(); // Function Solarland.SolarTcpNetworkManager.GetAILevelConfig // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetAIAccompanyTimelineID(); // Function Solarland.SolarTcpNetworkManager.GetAIAccompanyTimelineID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetAboutToEnterPlayerCount(); // Function Solarland.SolarTcpNetworkManager.GetAboutToEnterPlayerCount // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void FakePlayerJoin(struct FString PlayerId, int32_t TeamID); // Function Solarland.SolarTcpNetworkManager.FakePlayerJoin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void CloseSupplement(); // Function Solarland.SolarTcpNetworkManager.CloseSupplement // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	bool CheckPlayerLeave(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.CheckPlayerLeave // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool CheckJoinToken(struct FString Token, struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.CheckJoinToken // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool CheckIfPlayerHasJoined(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.CheckIfPlayerHasJoined // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void CheckBattleOver(); // Function Solarland.SolarTcpNetworkManager.CheckBattleOver // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarTeamInfo
// Size: 0x2f8 (Inherited: 0x228)
struct ASolarTeamInfo : AInfo {
	char pad_228[0x18]; // 0x228(0x18)
	char TeamID; // 0x240(0x01)
	char TeamRank; // 0x241(0x01)
	char KillCount; // 0x242(0x01)
	char MemberLimit; // 0x243(0x01)
	char pad_244[0x4]; // 0x244(0x04)
	struct FText TeamName; // 0x248(0x18)
	char MatchCount; // 0x260(0x01)
	char bHasSettled : 1; // 0x261(0x01)
	char pad_261_1 : 7; // 0x261(0x01)
	struct FMulticastSparseDelegate OnJoinTeam; // 0x262(0x01)
	struct FMulticastSparseDelegate OnLeaveTeam; // 0x263(0x01)
	char pad_264[0x4]; // 0x264(0x04)
	struct TArray<struct ASolarPlayerState*> BotMembers; // 0x268(0x10)
	struct TArray<struct ASolarPlayerState*> PlayerMembers; // 0x278(0x10)
	struct TArray<struct ASolarPlayerState*> TeamMembers; // 0x288(0x10)
	char pad_298[0x50]; // 0x298(0x50)
	struct USolarTeamInfoComponent* TeamInfoDetails; // 0x2e8(0x08)
	char pad_2F0[0x8]; // 0x2f0(0x08)

	void Settle(char Rank); // Function Solarland.SolarTeamInfo.Settle // (Final|Native|Public|BlueprintCallable) // @ game+0x2244b40
	void RemoveFromTeam(struct ASolarPlayerState* PS); // Function Solarland.SolarTeamInfo.RemoveFromTeam // (Native|Public|BlueprintCallable) // @ game+0x20d4590
	void ReceivedTeamID(); // Function Solarland.SolarTeamInfo.ReceivedTeamID // (Native|Public) // @ game+0x1555e80
	void ReceivedKillCount(); // Function Solarland.SolarTeamInfo.ReceivedKillCount // (Native|Public) // @ game+0x7d61b0
	void ReceivedHasSettled(); // Function Solarland.SolarTeamInfo.ReceivedHasSettled // (Native|Public) // @ game+0x7d6190
	void RearrangeMembersPos(); // Function Solarland.SolarTeamInfo.RearrangeMembersPos // (Final|Native|Public|BlueprintCallable) // @ game+0x2244b20
	void OnPlayerStateEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarTeamInfo.OnPlayerStateEndPlay // (Final|Native|Private) // @ game+0x22447d0
	bool IsAPlayerTeam(); // Function Solarland.SolarTeamInfo.IsAPlayerTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22446b0
	bool IsAOnlyPlayerTeam(); // Function Solarland.SolarTeamInfo.IsAOnlyPlayerTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2244680
	bool IsAOnlyBotTeam(); // Function Solarland.SolarTeamInfo.IsAOnlyBotTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2244650
	bool IsA(enum class ETeamType TeamType); // Function Solarland.SolarTeamInfo.IsA // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22445c0
	void InitFromGameModeConfig(); // Function Solarland.SolarTeamInfo.InitFromGameModeConfig // (Native|Public) // @ game+0x1554400
	bool HasBeenEliminated(); // Function Solarland.SolarTeamInfo.HasBeenEliminated // (Final|Native|Public|BlueprintCallable) // @ game+0x2244590
	struct ASolarPlayerState* GetTeammatePlayerByPosInTeam(int32_t InPosInTeam); // Function Solarland.SolarTeamInfo.GetTeammatePlayerByPosInTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x22444f0
	int32_t GetSize(); // Function Solarland.SolarTeamInfo.GetSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22444d0
	void GetSCMPlayerStateTeamMembers(struct TArray<struct ASCMPlayerState*>& OutTeamMembers); // Function Solarland.SolarTeamInfo.GetSCMPlayerStateTeamMembers // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2244420
	int32_t GetAliveTeammateNum(); // Function Solarland.SolarTeamInfo.GetAliveTeammateNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22442c0
	void AddToTeam(struct ASolarPlayerState* PS); // Function Solarland.SolarTeamInfo.AddToTeam // (Native|Public|BlueprintCallable) // @ game+0x2244230
};

// Class Solarland.SolarTeamInfoComponent
// Size: 0xc0 (Inherited: 0xb0)
struct USolarTeamInfoComponent : UActorComponent {
	int32_t KillDownCount; // 0xb0(0x04)
	int32_t AssistCount; // 0xb4(0x04)
	int32_t DeathCount; // 0xb8(0x04)
	int32_t SaveCount; // 0xbc(0x04)
};

// Class Solarland.SolarTeamInfoModel
// Size: 0x50 (Inherited: 0x28)
struct USolarTeamInfoModel : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	struct FMulticastInlineDelegate OnTeamInfoReplicated; // 0x40(0x10)

	void SimpleTeamInfoDelegate__DelegateSignature(struct ASolarTeamInfo* PreTeamInfo, struct ASolarTeamInfo* NowTeamInfo); // DelegateFunction Solarland.SolarTeamInfoModel.SimpleTeamInfoDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnMyTeamInfoReplicated(struct ASolarTeamInfo* InPreTeamInfo, struct ASolarTeamInfo* InMyTeamInfo); // Function Solarland.SolarTeamInfoModel.OnMyTeamInfoReplicated // (Final|Native|Public) // @ game+0x2248160
};

// Class Solarland.SolarTeammateHUDWidgetComponent
// Size: 0x6f0 (Inherited: 0x6a0)
struct USolarTeammateHUDWidgetComponent : UWidgetComponent {
	float CheckHUDDistanceToCenter; // 0x698(0x04)
	float HUDTranslucentValue; // 0x69c(0x04)
	float LocationUpdateTolerance; // 0x6a0(0x04)
	float InterpolationTimeRatio; // 0x6a4(0x04)
	float InterpolationSpeed; // 0x6a8(0x04)
	float InterpolationEaseInOutExp; // 0x6ac(0x04)
	struct UCurveFloat* DistanceToScaleCurve; // 0x6b0(0x08)
	bool bUseDistanceToCharacterForScale; // 0x6b8(0x01)
	struct FVector TargetWorldLocation; // 0x6c0(0x0c)
	char pad_6CD[0x23]; // 0x6cd(0x23)
};

// Class Solarland.SolarTeamRescueComponent
// Size: 0xf8 (Inherited: 0xb0)
struct USolarTeamRescueComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct ASolarCharacter* OwnerChara; // 0xb8(0x08)
	char pad_C0[0x14]; // 0xc0(0x14)
	float TempReqTime; // 0xd4(0x04)
	float RequestTimeout; // 0xd8(0x04)
	bool bSendRequest; // 0xdc(0x01)
	bool bLastRescueBtnVisibility; // 0xdd(0x01)
	char pad_DE[0x2]; // 0xde(0x02)
	struct ASolarCharacter* ClosestTarget; // 0xe0(0x08)
	struct TArray<struct TWeakObjectPtr<struct ASolarCharacter>> NearByDeathVergeTeamMates; // 0xe8(0x10)

	void TryRescueClosestTeammateLuaCall(); // Function Solarland.SolarTeamRescueComponent.TryRescueClosestTeammateLuaCall // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void TryRescueClosestTeammate(); // Function Solarland.SolarTeamRescueComponent.TryRescueClosestTeammate // (Final|Native|Public) // @ game+0x22493f0
	void ShowTeamRescueToUI(bool IsShow); // Function Solarland.SolarTeamRescueComponent.ShowTeamRescueToUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetRescueBtnVisibility(bool bIsVisible); // Function Solarland.SolarTeamRescueComponent.SetRescueBtnVisibility // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x2248de0
	void ReqStartTeamRescue(struct ASolarCharacter* TargetCharacter); // Function Solarland.SolarTeamRescueComponent.ReqStartTeamRescue // (Final|Native|Public) // @ game+0x2248400
	void ReqCancelTeamRescure(); // Function Solarland.SolarTeamRescueComponent.ReqCancelTeamRescure // (Final|Native|Public) // @ game+0x22483e0
	void OnRescueStateChangeInternal(); // Function Solarland.SolarTeamRescueComponent.OnRescueStateChangeInternal // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnRescueStateChange(); // Function Solarland.SolarTeamRescueComponent.OnRescueStateChange // (Final|Native|Public) // @ game+0x2248330
	void DetectRescueTeammate(float DeltaTime); // Function Solarland.SolarTeamRescueComponent.DetectRescueTeammate // (Final|Native|Protected) // @ game+0x2247920
	bool CanRescue(struct ASolarCharacter* Player, bool bStart); // Function Solarland.SolarTeamRescueComponent.CanRescue // (Final|Native|Public) // @ game+0x22477c0
};

// Class Solarland.SolarTestActor
// Size: 0x228 (Inherited: 0x228)
struct ASolarTestActor : AActor {
};

// Class Solarland.SolarTextBlock
// Size: 0x350 (Inherited: 0x160)
struct USolarTextBlock : UTextLayoutWidget {
	bool bEnableLocText; // 0x160(0x01)
	char pad_161[0x7]; // 0x161(0x07)
	struct FText Text; // 0x168(0x18)
	int32_t LocTextID; // 0x180(0x04)
	enum class ESolarSupportLanguages PreviewLang; // 0x184(0x01)
	bool bCapitalsLock; // 0x185(0x01)
	char pad_186[0x2]; // 0x186(0x02)
	struct FVector2D CalcSize; // 0x188(0x08)
	struct FDelegate TextDelegate; // 0x190(0x10)
	struct FSlateColor ColorAndOpacity; // 0x1a0(0x28)
	struct FDelegate ColorAndOpacityDelegate; // 0x1c8(0x10)
	struct FSlateFontInfo Font; // 0x1d8(0x60)
	struct FSlateFontSizeForLang SpecialLangFont; // 0x238(0x18)
	struct FSlateBrush StrikeBrush; // 0x250(0x98)
	struct FVector2D ShadowOffset; // 0x2e8(0x08)
	struct FLinearColor ShadowColorAndOpacity; // 0x2f0(0x10)
	struct FDelegate ShadowColorAndOpacityDelegate; // 0x300(0x10)
	float MinDesiredWidth; // 0x310(0x04)
	bool bWrapWithInvalidationPanel; // 0x314(0x01)
	bool bAutoWrapText; // 0x315(0x01)
	bool bUsingAccurateScale; // 0x316(0x01)
	bool bEnableCacheSize; // 0x317(0x01)
	bool bSimpleTextMode; // 0x318(0x01)
	bool bNeverResize; // 0x319(0x01)
	char pad_31A[0x36]; // 0x31a(0x36)

	void SetWrapTextAt(float InWrapTextAt); // Function Solarland.SolarTextBlock.SetWrapTextAt // (Native|Public|BlueprintCallable) // @ game+0x1547c70
	void SetWrappingPolicy(enum class ETextWrappingPolicy InWrappingPolicy); // Function Solarland.SolarTextBlock.SetWrappingPolicy // (Native|Public|BlueprintCallable) // @ game+0x22492e0
	void SetText(struct FText InText); // Function Solarland.SolarTextBlock.SetText // (Native|Public|BlueprintCallable) // @ game+0x2249130
	void SetStrikeBrush(struct FSlateBrush InStrikeBrush); // Function Solarland.SolarTextBlock.SetStrikeBrush // (Native|Public|BlueprintCallable) // @ game+0x2248f80
	void SetShadowOffset(struct FVector2D InShadowOffset); // Function Solarland.SolarTextBlock.SetShadowOffset // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2248f00
	void SetShadowColorAndOpacity(struct FLinearColor InShadowColorAndOpacity); // Function Solarland.SolarTextBlock.SetShadowColorAndOpacity // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2248e70
	void SetOpacity(float InOpacity); // Function Solarland.SolarTextBlock.SetOpacity // (Native|Public|BlueprintCallable) // @ game+0x2248d50
	void SetMinDesiredWidth(float InMinDesiredWidth); // Function Solarland.SolarTextBlock.SetMinDesiredWidth // (Native|Public|BlueprintCallable) // @ game+0x2248cc0
	void SetMargin(struct FMargin InMargin); // Function Solarland.SolarTextBlock.SetMargin // (Native|Public|BlueprintCallable) // @ game+0x2248c30
	void SetLocTextID(int32_t InLocTextID); // Function Solarland.SolarTextBlock.SetLocTextID // (Native|Public|BlueprintCallable) // @ game+0x2248ba0
	void SetLocLangTextData(struct FText InText, bool InEnableLocText, int32_t InLocTextID, enum class ESolarSupportLanguages InPreviewLang, struct FSlateFontSizeForLang InSlateFontSizeForLang); // Function Solarland.SolarTextBlock.SetLocLangTextData // (Native|Public|BlueprintCallable) // @ game+0x2248940
	void SetLineHeightPercentage(float InLineHeightPercentage); // Function Solarland.SolarTextBlock.SetLineHeightPercentage // (Native|Public|BlueprintCallable) // @ game+0x1554100
	void SetFont(struct FSlateFontInfo InFontInfo); // Function Solarland.SolarTextBlock.SetFont // (Native|Public|BlueprintCallable) // @ game+0x2248820
	void SetColorAndOpacity(struct FSlateColor InColorAndOpacity); // Function Solarland.SolarTextBlock.SetColorAndOpacity // (Native|Public|BlueprintCallable) // @ game+0x2248700
	void SetAutoWrapText(bool InAutoTextWrap); // Function Solarland.SolarTextBlock.SetAutoWrapText // (Native|Public|BlueprintCallable) // @ game+0x1564840
	struct FVector2D GetTextSize(); // Function Solarland.SolarTextBlock.GetTextSize // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2247c40
	struct FText GetText(); // Function Solarland.SolarTextBlock.GetText // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2247ba0
	struct UMaterialInstanceDynamic* GetDynamicOutlineMaterial(); // Function Solarland.SolarTextBlock.GetDynamicOutlineMaterial // (Native|Public|BlueprintCallable) // @ game+0x22479f0
	struct UMaterialInstanceDynamic* GetDynamicFontMaterial(); // Function Solarland.SolarTextBlock.GetDynamicFontMaterial // (Native|Public|BlueprintCallable) // @ game+0x22479c0
};

// Class Solarland.SolarTimeLineManager
// Size: 0x288 (Inherited: 0x228)
struct ASolarTimeLineManager : AActor {
	char pad_228[0x60]; // 0x228(0x60)

	void NotifyWeatherCHange(int32_t ID); // Function Solarland.SolarTimeLineManager.NotifyWeatherCHange // (Final|Native|Private) // @ game+0x2248000
	void NotifyPoisonShrink(int32_t ID); // Function Solarland.SolarTimeLineManager.NotifyPoisonShrink // (Final|Native|Private) // @ game+0x2247f70
	void NotifyBombing(struct TArray<int32_t> IDs); // Function Solarland.SolarTimeLineManager.NotifyBombing // (Final|Native|Private) // @ game+0x2247e80
	void NotifyAirDrops(int32_t ChestSpawnID); // Function Solarland.SolarTimeLineManager.NotifyAirDrops // (Final|Native|Private) // @ game+0x2247df0
	void Exec_NotifyBombing(int32_t ZoneId); // Function Solarland.SolarTimeLineManager.Exec_NotifyBombing // (Exec|Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarTimerManager
// Size: 0x38 (Inherited: 0x28)
struct USolarTimerManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	bool bFullCleanup; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)

	void UnPauseTimerInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.UnPauseTimerInternal // (Final|Native|Public) // @ game+0x2249410
	void TimerCallbackToLuaInternal(struct FString CallbackKey); // Function Solarland.SolarTimerManager.TimerCallbackToLuaInternal // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FTimerHandle SetTimerForNextTickInternal(struct FString CallbackKey); // Function Solarland.SolarTimerManager.SetTimerForNextTickInternal // (Final|Native|Public) // @ game+0x2249220
	void PauseTimerInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.PauseTimerInternal // (Final|Native|Public) // @ game+0x2248350
	void OnLuaContextCleanup(bool InBFullCleanup); // Function Solarland.SolarTimerManager.OnLuaContextCleanup // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool IsValidTimerInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.IsValidTimerInternal // (Final|Native|Public) // @ game+0x2247d50
	bool IsTimerActiveInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.IsTimerActiveInternal // (Final|Native|Public) // @ game+0x2247cb0
	void ClearTimerInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.ClearTimerInternal // (Final|Native|Public) // @ game+0x2247890
	struct FTimerHandle AddTimerInternal(struct FString CallbackKey, float Rate, bool IsLoop, float InitialStartDelay); // Function Solarland.SolarTimerManager.AddTimerInternal // (Final|Native|Public) // @ game+0x22475f0
};

// Class Solarland.SolarTransformerVehicle
// Size: 0x1500 (Inherited: 0x1380)
struct ASolarTransformerVehicle : ASolarVehiclePawn {
	char pad_1380[0x8]; // 0x1380(0x08)
	struct USolarWheeledVehicleMovement* WheeledMovement; // 0x1388(0x08)
	struct USolarLeggedVehicleMovement* LeggedMovement; // 0x1390(0x08)
	float AdditionalVelocityOnZToLeg; // 0x1398(0x04)
	float MaxVelocityOnXYToWheel; // 0x139c(0x04)
	struct FTransformerSetting TransformerSettings[0x2]; // 0x13a0(0x130)
	enum class ETransformerType CurrentTransformerType; // 0x14d0(0x01)
	char pad_14D1[0x7]; // 0x14d1(0x07)
	struct UCapsuleComponent* VehicleCapsule; // 0x14d8(0x08)
	bool bReplicatedDrift; // 0x14e0(0x01)
	bool bReplicatedRequestJump; // 0x14e1(0x01)
	char pad_14E2[0x16]; // 0x14e2(0x16)
	int32_t LeggedHealthUIID; // 0x14f8(0x04)
	char pad_14FC[0x4]; // 0x14fc(0x04)

	void StatVehicleAutoSteering(bool bInSameDirection); // Function Solarland.SolarTransformerVehicle.StatVehicleAutoSteering // (Net|Native|Event|Protected|NetServer) // @ game+0x2249360
	void SetCurrentWeaponActive(); // Function Solarland.SolarTransformerVehicle.SetCurrentWeaponActive // (Final|Native|Public|BlueprintCallable) // @ game+0x2248800
	void ServerSetIsDrift(bool bInDrift, char InDriveType); // Function Solarland.SolarTransformerVehicle.ServerSetIsDrift // (Net|Native|Event|Protected|NetServer) // @ game+0x2248560
	void OnTransformingFinished(); // Function Solarland.SolarTransformerVehicle.OnTransformingFinished // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnRep_ReplicatedJumpRequest(); // Function Solarland.SolarTransformerVehicle.OnRep_ReplicatedJumpRequest // (Final|Native|Protected) // @ game+0x2248310
	void OnRep_Drift(); // Function Solarland.SolarTransformerVehicle.OnRep_Drift // (Final|Native|Protected) // @ game+0x22482d0
	void OnRep_CurrentTransformerType(enum class ETransformerType PreviousType); // Function Solarland.SolarTransformerVehicle.OnRep_CurrentTransformerType // (Final|Native|Protected) // @ game+0x2248250
};

// Class Solarland.SolarTransformerVehicleAnim
// Size: 0x470 (Inherited: 0x330)
struct USolarTransformerVehicleAnim : USolarVehicleAnimInstance {
	char pad_330[0x8]; // 0x330(0x08)
	enum class ETransformerType TransformerType; // 0x338(0x01)
	char pad_339[0x3]; // 0x339(0x03)
	float UpdateWeaponRotatorAlpha; // 0x33c(0x04)
	struct FVector FLWheelBoneScale; // 0x340(0x0c)
	struct FVector FRWheelBoneScale; // 0x34c(0x0c)
	struct FVector BLWheelBoneScale; // 0x358(0x0c)
	struct FVector BRWheelBoneScale; // 0x364(0x0c)
	struct FVector FLWheelBoneLocation; // 0x370(0x0c)
	struct FVector FRWheelBoneLocation; // 0x37c(0x0c)
	struct FVector BLWheelBoneLocation; // 0x388(0x0c)
	struct FVector BRWheelBoneLocation; // 0x394(0x0c)
	struct FRotator FLWheelBoneRotation; // 0x3a0(0x0c)
	struct FRotator FRWheelBoneRotation; // 0x3ac(0x0c)
	struct FRotator BLWheelBoneRotation; // 0x3b8(0x0c)
	struct FRotator BRWheelBoneRotation; // 0x3c4(0x0c)
	float LeaningDegree; // 0x3d0(0x04)
	enum class EVehicleAnimationState VehicleAnimState; // 0x3d4(0x01)
	char pad_3D5[0x3]; // 0x3d5(0x03)
	float YawDifference; // 0x3d8(0x04)
	enum class EVehicleRotateAnimationType VehicleRotateType; // 0x3dc(0x01)
	char pad_3DD[0x3]; // 0x3dd(0x03)
	struct FVector RotationBlend; // 0x3e0(0x0c)
	struct FVector FLFootIKEffectorLocation; // 0x3ec(0x0c)
	struct FVector FRFootIKEffectorLocation; // 0x3f8(0x0c)
	struct FVector BLFootIKEffectorLocation; // 0x404(0x0c)
	struct FVector BRFootIKEffectorLocation; // 0x410(0x0c)
	float FLFootIKAlpha; // 0x41c(0x04)
	float FRFootIKAlpha; // 0x420(0x04)
	float BLFootIKAlpha; // 0x424(0x04)
	float BRFootIKAlpha; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)
	struct TArray<float> FootRotatorOffsets; // 0x430(0x10)
	float LeftFootLocationX; // 0x440(0x04)
	float RightFootLocationX; // 0x444(0x04)
	struct FVector BodyRelativeLocation; // 0x448(0x0c)
	struct FRotator BodyRelativeRotator; // 0x454(0x0c)
	float ProceduralWalkingAlhpa; // 0x460(0x04)
	char pad_464[0xc]; // 0x464(0x0c)
};

// Class Solarland.SolarTreasureBoxSpawner
// Size: 0x430 (Inherited: 0x390)
struct ASolarTreasureBoxSpawner : ASolarItemSpawner {
	int32_t ChestSpawnID; // 0x390(0x04)
	enum class ETreasureBoxSpawnType TreasureBoxSpawnType; // 0x394(0x01)
	char pad_395[0x3]; // 0x395(0x03)
	struct TArray<struct FSpawonTreasureBoxIdAndWeight> SpawnTreasureBox; // 0x398(0x10)
	char pad_3A8[0x1c]; // 0x3a8(0x1c)
	struct FRandomStream ItemStream; // 0x3c4(0x08)
	char pad_3CC[0x58]; // 0x3cc(0x58)
	struct FSpawnedActorHandle CachedActorHandle; // 0x424(0x04)
	char pad_428[0x8]; // 0x428(0x08)

	int32_t GetTargetTreasureBoxID(); // Function Solarland.SolarTreasureBoxSpawner.GetTargetTreasureBoxID // (Final|Native|Public) // @ game+0x224fb70
	int32_t GetOutcomeIdTreasureBoxId(int32_t ItemID); // Function Solarland.SolarTreasureBoxSpawner.GetOutcomeIdTreasureBoxId // (Final|Native|Public) // @ game+0x224fa20
	struct FSolarItemData CreateItemDataByKey(int32_t ItemID); // Function Solarland.SolarTreasureBoxSpawner.CreateItemDataByKey // (Final|Native|Public) // @ game+0x224f500
};

// Class Solarland.SolarTreatmentComponent
// Size: 0xe0 (Inherited: 0xb0)
struct USolarTreatmentComponent : UActorComponent {
	struct FMulticastInlineDelegate OnCharacterHealthLow; // 0xb0(0x10)
	char pad_C0[0x10]; // 0xc0(0x10)
	struct ASolarCharacter* OwnerCharacter; // 0xd0(0x08)
	char pad_D8[0x8]; // 0xd8(0x08)

	void TryStopTreatment(); // Function Solarland.SolarTreatmentComponent.TryStopTreatment // (Final|Native|Public) // @ game+0x2252cf0
	void TryStatisticsTreatedTimes(); // Function Solarland.SolarTreatmentComponent.TryStatisticsTreatedTimes // (Final|Native|Public) // @ game+0x2252cd0
	void TryStartTreatment(); // Function Solarland.SolarTreatmentComponent.TryStartTreatment // (Final|Native|Public) // @ game+0x2252cb0
	void StopProgress(); // Function Solarland.SolarTreatmentComponent.StopProgress // (Final|Native|Public) // @ game+0x2250a10
	void StartProgress(); // Function Solarland.SolarTreatmentComponent.StartProgress // (Final|Native|Public) // @ game+0x22509f0
	bool IsMedicineEnough(); // Function Solarland.SolarTreatmentComponent.IsMedicineEnough // (Final|Native|Public|Const) // @ game+0x2250240
	bool IsFullHealth(); // Function Solarland.SolarTreatmentComponent.IsFullHealth // (Final|Native|Public|Const) // @ game+0x22501e0
	bool IsAbleToContinueTreatment(); // Function Solarland.SolarTreatmentComponent.IsAbleToContinueTreatment // (Final|Native|Public|Const) // @ game+0x22501b0
	void IncreaseTreatedTimes(); // Function Solarland.SolarTreatmentComponent.IncreaseTreatedTimes // (Final|Native|Public) // @ game+0x2250060
	bool CanStartTreatment(); // Function Solarland.SolarTreatmentComponent.CanStartTreatment // (Event|Public|BlueprintEvent|Const) // @ game+0x25d85b0
	bool CanBeTreated(); // Function Solarland.SolarTreatmentComponent.CanBeTreated // (Final|Native|Public|Const) // @ game+0x224de50
};

// Class Solarland.SolarTreeView
// Size: 0x9a8 (Inherited: 0x9a8)
struct USolarTreeView : UTreeView {
};

// Class Solarland.TutorialGlobalConfig
// Size: 0xd0 (Inherited: 0x30)
struct UTutorialGlobalConfig : UDataAsset {
	bool bSwitch; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TMap<struct FString, enum class ETutorialStage> MapName2TutorialStage; // 0x38(0x50)
	float SubtitleDisappearTime; // 0x88(0x04)
	float AsyncLoadUIDelayTime; // 0x8c(0x04)
	float SameConditionCheckInterval; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
	struct FTutorialLevelConfig TutorialLevelConfig; // 0x98(0x38)

	enum class ETutorialStage GetTutorialStageByLevelName(struct FString LevelName); // Function Solarland.TutorialGlobalConfig.GetTutorialStageByLevelName // (Final|Native|Public|BlueprintCallable) // @ game+0x224fea0
	struct FString GetTutorialLevelMainMapPath(); // Function Solarland.TutorialGlobalConfig.GetTutorialLevelMainMapPath // (Final|Native|Public|BlueprintCallable) // @ game+0x224fdf0
	struct FString GetTutorialLevelMainMapName(); // Function Solarland.TutorialGlobalConfig.GetTutorialLevelMainMapName // (Final|Native|Public|BlueprintCallable) // @ game+0x224fd70
	struct FTutorialLevelConfigData GetTutorialLevelConfigDataByName(struct FString LevelName); // Function Solarland.TutorialGlobalConfig.GetTutorialLevelConfigDataByName // (Final|Native|Public|BlueprintCallable) // @ game+0x224fc40
};

// Class Solarland.SolarTutorialManager
// Size: 0x498 (Inherited: 0x30)
struct USolarTutorialManager : USolarGameManager {
	char pad_30[0x20]; // 0x30(0x20)
	enum class ETutorialStage CurrentTutorialStage; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct FMulticastInlineDelegate OnRegisterEvent; // 0x58(0x10)
	struct FMulticastInlineDelegate OnStepActionBegan; // 0x68(0x10)
	struct FMulticastInlineDelegate OnStepActionEnded; // 0x78(0x10)
	struct FMulticastInlineDelegate OnStepActionReset; // 0x88(0x10)
	struct FMulticastInlineDelegate OnStepActionDisposed; // 0x98(0x10)
	char pad_A8[0x70]; // 0xa8(0x70)
	struct UTutorialGlobalConfig* TutorialGlobalConfig; // 0x118(0x08)
	struct TMap<int32_t, struct FTutorialTableRow> TutorialTableMapRows; // 0x120(0x50)
	struct TArray<struct FTutorialActionTableRow> ActionTableRows; // 0x170(0x10)
	struct TMap<int32_t, struct FTutorialConditionTableRow> ConditionTableMapRows; // 0x180(0x50)
	struct TMap<int32_t, struct UTutorial*> Tutorials; // 0x1d0(0x50)
	char pad_220[0x110]; // 0x220(0x110)
	char bIsConditionCheckCodeParsed : 1; // 0x330(0x01)
	char pad_330_1 : 7; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)
	struct FString TutorialDataTablePath; // 0x338(0x10)
	struct FString ActionDataTablePath; // 0x348(0x10)
	struct FString ConditionDataTablePath; // 0x358(0x10)
	struct FString TutorialGlobalConfigPath; // 0x368(0x10)
	struct TMap<uint16_t, struct FName> OriginCheckFuncNames; // 0x378(0x50)
	struct TMap<uint16_t, struct UFunction*> CheckFuncs; // 0x3c8(0x50)
	char pad_418[0x10]; // 0x418(0x10)
	struct TMap<struct FString, struct FCacheConditionInfo> CacheRanConditions; // 0x428(0x50)
	char pad_478[0x10]; // 0x478(0x10)
	struct UTutorialLevelSaveGame* CurrentTutorialLevelSaveGame; // 0x488(0x08)
	char pad_490[0x8]; // 0x490(0x08)

	struct TArray<struct FString> TriggerWidgetClicked(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerWidgetClicked // (Final|Native|Private|HasOutParms) // @ game+0x2252b80
	struct TArray<struct FString> TriggerWeaponSlotHasSpecifiedItem(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerWeaponSlotHasSpecifiedItem // (Final|Native|Private|HasOutParms) // @ game+0x2252a50
	struct TArray<struct FString> TriggerUseSpecifiedWeaponAbility(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerUseSpecifiedWeaponAbility // (Final|Native|Private|HasOutParms) // @ game+0x2252920
	struct TArray<struct FString> TriggerUseSpecifiedVehicleWeapon(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerUseSpecifiedVehicleWeapon // (Final|Native|Private|HasOutParms) // @ game+0x22527f0
	struct TArray<struct FString> TriggerUseSpecifiedVehicleAbility(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerUseSpecifiedVehicleAbility // (Final|Native|Private|HasOutParms) // @ game+0x22526c0
	struct TArray<struct FString> TriggerTutorialLevelDone(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerTutorialLevelDone // (Final|Native|Private|HasOutParms) // @ game+0x2252590
	void TriggerTutorialInternal(enum class ETutorialTriggerType TriggerID); // Function Solarland.SolarTutorialManager.TriggerTutorialInternal // (Final|Native|Protected) // @ game+0x2252510
	void TriggerTutorialEvents(struct TArray<enum class ETutorialTriggerType>& TriggerTypeArrays, bool bPostTrigger); // Function Solarland.SolarTutorialManager.TriggerTutorialEvents // (Final|Native|Public|HasOutParms) // @ game+0x2252410
	void TriggerTutorialEvent(enum class ETutorialTriggerType TriggerType, bool bPostTrigger); // Function Solarland.SolarTutorialManager.TriggerTutorialEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x2252340
	struct TArray<struct FString> TriggerSprintingContinuously(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerSprintingContinuously // (Final|Native|Private|HasOutParms) // @ game+0x2252210
	struct TArray<struct FString> TriggerSpecifiedPlayerProficiency(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerSpecifiedPlayerProficiency // (Final|Native|Private|HasOutParms) // @ game+0x22520e0
	struct TArray<struct FString> TriggerShieldNotFull(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerShieldNotFull // (Final|Native|Private|HasOutParms) // @ game+0x2251fb0
	struct TArray<struct FString> TriggerRunningStep(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerRunningStep // (Final|Native|Private|HasOutParms) // @ game+0x2251e80
	struct TArray<struct FString> TriggerPlayerUpgradeBattleLevel(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerPlayerUpgradeBattleLevel // (Final|Native|Private|HasOutParms) // @ game+0x2251d50
	struct TArray<struct FString> TriggerPlayerInTargetStage(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerPlayerInTargetStage // (Final|Native|Private|HasOutParms) // @ game+0x2251c20
	struct TArray<struct FString> TriggerPlayerAcountLevel(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerPlayerAcountLevel // (Final|Native|Private|HasOutParms) // @ game+0x2251af0
	struct TArray<struct FString> TriggerOpenTreasureBox(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerOpenTreasureBox // (Final|Native|Private|HasOutParms) // @ game+0x22519c0
	struct TArray<struct FString> TriggerOpenBigMapUMG(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerOpenBigMapUMG // (Final|Native|Private|HasOutParms) // @ game+0x2251890
	struct TArray<struct FString> TriggerNearAirDropBox(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerNearAirDropBox // (Final|Native|Private|HasOutParms) // @ game+0x2251760
	struct TArray<struct FString> TriggerJumpBegin(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerJumpBegin // (Final|Native|Private|HasOutParms) // @ game+0x2251630
	struct TArray<struct FString> TriggerHasUIPanelOpened(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerHasUIPanelOpened // (Final|Native|Private|HasOutParms) // @ game+0x2251500
	struct TArray<struct FString> TriggerHasTakenDamage(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerHasTakenDamage // (Final|Native|Private|HasOutParms) // @ game+0x22513d0
	struct TArray<struct FString> TriggerHasSpecifiedItem(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerHasSpecifiedItem // (Final|Native|Private|HasOutParms) // @ game+0x22512a0
	struct TArray<struct FString> TriggerHasSpecifiedEquipmentByType(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerHasSpecifiedEquipmentByType // (Final|Native|Private|HasOutParms) // @ game+0x2251170
	struct TArray<struct FString> TriggerFeatureUnlock(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerFeatureUnlock // (Final|Native|Private|HasOutParms) // @ game+0x2251040
	struct TArray<struct FString> TriggerEquipSpecifiedWeapon(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerEquipSpecifiedWeapon // (Final|Native|Private|HasOutParms) // @ game+0x2250f10
	struct TArray<struct FString> TriggerBotAIDying(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerBotAIDying // (Final|Native|Private|HasOutParms) // @ game+0x2250de0
	struct TArray<struct FString> TriggerApproachTreasureBox(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerApproachTreasureBox // (Final|Native|Private|HasOutParms) // @ game+0x2250cb0
	struct TArray<struct FString> TriggerAlreadyTriggeredMaxCount(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerAlreadyTriggeredMaxCount // (Final|Native|Private|HasOutParms) // @ game+0x2250b80
	struct TArray<struct FString> TriggerAirDropBoxLanded(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerAirDropBoxLanded // (Final|Native|Private|HasOutParms) // @ game+0x2250a50
	void TickActivatedTutorials(); // Function Solarland.SolarTutorialManager.TickActivatedTutorials // (Final|Native|Protected) // @ game+0x2250a30
	void SetWidgetInteractionFlag(struct FString InWidgetName, enum class EWidgetInteractionFlag InWidgetInteractionFlag); // Function Solarland.SolarTutorialManager.SetWidgetInteractionFlag // (Final|Native|Private) // @ game+0x2250910
	void SetTipsUIInteractionFlag(int32_t TutorialID, bool boolChange); // Function Solarland.SolarTutorialManager.SetTipsUIInteractionFlag // (Final|Native|Private) // @ game+0x2250840
	void SetSignNameBool(struct FString SignName, bool InValue); // Function Solarland.SolarTutorialManager.SetSignNameBool // (Final|Native|Private) // @ game+0x2250760
	void SetFlagNameCount(struct FString FlagName, int32_t Num); // Function Solarland.SolarTutorialManager.SetFlagNameCount // (Final|Native|Private) // @ game+0x2250680
	void SetAirDropBoxLandedAddOneNum(int32_t Value); // Function Solarland.SolarTutorialManager.SetAirDropBoxLandedAddOneNum // (Final|Native|Public) // @ game+0x22505f0
	void SaveTutorialLevelSaveGame(); // Function Solarland.SolarTutorialManager.SaveTutorialLevelSaveGame // (Final|Native|Public|BlueprintCallable) // @ game+0x22505d0
	void SaveLevelTutorialID(struct FString InLevelName, int32_t InTutorialID); // Function Solarland.SolarTutorialManager.SaveLevelTutorialID // (Final|Native|Public|BlueprintCallable) // @ game+0x22504f0
	void SaveLevelTutorialHasFinished(struct FString InLevelName, bool InFinished); // Function Solarland.SolarTutorialManager.SaveLevelTutorialHasFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x2250410
	void SaveLevelPlayerStartTag(struct FString InLevelName, struct FString InPlayerStartTag); // Function Solarland.SolarTutorialManager.SaveLevelPlayerStartTag // (Final|Native|Public|BlueprintCallable) // @ game+0x2250310
	void RequestAddTutorialProgress(int32_t TutorialID, int32_t Progress); // Function Solarland.SolarTutorialManager.RequestAddTutorialProgress // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveOnSingleTutorialStart(int32_t TutorialID); // Function Solarland.SolarTutorialManager.ReceiveOnSingleTutorialStart // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveOnSingleTutorialFinished(int32_t TutorialID); // Function Solarland.SolarTutorialManager.ReceiveOnSingleTutorialFinished // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveLoadTutorialLevelData(); // Function Solarland.SolarTutorialManager.ReceiveLoadTutorialLevelData // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveLoadData(); // Function Solarland.SolarTutorialManager.ReceiveLoadData // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveClearData(); // Function Solarland.SolarTutorialManager.ReceiveClearData // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnPostLoadMap(struct FString LevelName); // Function Solarland.SolarTutorialManager.OnPostLoadMap // (Final|Native|Private) // @ game+0x2250270
	bool IsInTutorialLevel(); // Function Solarland.SolarTutorialManager.IsInTutorialLevel // (Final|Native|Public|Const) // @ game+0x2250210
	void InitGuideActorByActionID(struct TArray<int32_t> ActionIDs, struct ATutorialLevelInteractableActor* TutorialGuideActor); // Function Solarland.SolarTutorialManager.InitGuideActorByActionID // (Final|Native|Public|BlueprintCallable) // @ game+0x2250080
	bool HasAnyTutorialPlaying(); // Function Solarland.SolarTutorialManager.HasAnyTutorialPlaying // (Final|Native|Public) // @ game+0x2250030
	bool HasAnyMandatoryTutorialPlaying(); // Function Solarland.SolarTutorialManager.HasAnyMandatoryTutorialPlaying // (Final|Native|Public) // @ game+0x2250000
	void GM_OpenUI(int32_t ID); // Function Solarland.SolarTutorialManager.GM_OpenUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void GM_CloseUI(int32_t ID); // Function Solarland.SolarTutorialManager.GM_CloseUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	enum class EWidgetInteractionFlag GetWidgetInteractionFlag(struct FString InWidgetName); // Function Solarland.SolarTutorialManager.GetWidgetInteractionFlag // (Final|Native|Private) // @ game+0x224ff50
	int32_t GetTutorialSingleRoundTriggerMax(int32_t TutorialID); // Function Solarland.SolarTutorialManager.GetTutorialSingleRoundTriggerMax // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct UTutorialLevelSaveGame* GetTutorialLevelSaveGame(); // Function Solarland.SolarTutorialManager.GetTutorialLevelSaveGame // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x224fe70
	bool GetTipsUIInteractionFlag(int32_t TutorialID); // Function Solarland.SolarTutorialManager.GetTipsUIInteractionFlag // (Final|Native|Private) // @ game+0x224fba0
	bool GetSignNameBool(struct FString SignName); // Function Solarland.SolarTutorialManager.GetSignNameBool // (Final|Native|Private) // @ game+0x224fac0
	struct UUserWidget* GetPanelUI(struct FString PanelName); // Function Solarland.SolarTutorialManager.GetPanelUI // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetLevelTutorialID(struct FString InLevelName, int32_t DefaultValue); // Function Solarland.SolarTutorialManager.GetLevelTutorialID // (Final|Native|Public|BlueprintCallable) // @ game+0x224f930
	bool GetLevelTutorialHasFinished(struct FString InLevelName, bool DefaultValue); // Function Solarland.SolarTutorialManager.GetLevelTutorialHasFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x224f840
	int32_t GetFlagNameCount(struct FString FlagName); // Function Solarland.SolarTutorialManager.GetFlagNameCount // (Final|Native|Private) // @ game+0x224f790
	char GetCurrentPlayerLevel(); // Function Solarland.SolarTutorialManager.GetCurrentPlayerLevel // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct FTutorialActionTableRow GetActionDataByID(int32_t ActionDataID); // Function Solarland.SolarTutorialManager.GetActionDataByID // (Final|Native|Public) // @ game+0x224f6d0
	struct UWidget* FindWidget(struct TArray<struct FName>& InWidgetLink); // Function Solarland.SolarTutorialManager.FindWidget // (Final|Native|Protected|HasOutParms) // @ game+0x224f610
	void EnterTutorialLevel(struct FString LevelName, int32_t Proficiency); // Function Solarland.SolarTutorialManager.EnterTutorialLevel // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool CheckTutorialTipUIOnClick(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckTutorialTipUIOnClick // (Final|Native|Public|HasOutParms) // @ game+0x224f420
	bool CheckIfWidgetReleased(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWidgetReleased // (Final|Native|Public|HasOutParms) // @ game+0x224f340
	bool CheckIfWidgetPressed(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWidgetPressed // (Final|Native|Public|HasOutParms) // @ game+0x224f260
	bool CheckIfWidgetPlayAnimationFinish(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWidgetPlayAnimationFinish // (Final|Native|Public|HasOutParms) // @ game+0x224f260
	bool CheckIfWidgetClicked(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWidgetClicked // (Final|Native|Public|HasOutParms) // @ game+0x224f180
	bool CheckIfWeaponSlotHasSpecifiedItem(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWeaponSlotHasSpecifiedItem // (Final|Native|Public|HasOutParms) // @ game+0x224f0a0
	bool CheckIfUIPanelOpened(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfUIPanelOpened // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	bool CheckIfTutorialLevelDone(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfTutorialLevelDone // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	bool CheckIfTakeDamage(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfTakeDamage // (Final|Native|Public|HasOutParms) // @ game+0x224efc0
	bool CheckIfSprintingContinuously(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfSprintingContinuously // (Final|Native|Public|HasOutParms) // @ game+0x224eee0
	bool CheckIfSpecifiedPlayerProficiency(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfSpecifiedPlayerProficiency // (Final|Native|Public|HasOutParms) // @ game+0x224ee00
	bool CheckIfShieldNotFull(); // Function Solarland.SolarTutorialManager.CheckIfShieldNotFull // (Final|Native|Public) // @ game+0x224edd0
	bool CheckIfRunningStep(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfRunningStep // (Final|Native|Public|HasOutParms) // @ game+0x224ecf0
	bool CheckIfReloading(); // Function Solarland.SolarTutorialManager.CheckIfReloading // (Final|Native|Public) // @ game+0x224ecc0
	bool CheckIfRechargingShield(); // Function Solarland.SolarTutorialManager.CheckIfRechargingShield // (Final|Native|Public) // @ game+0x224ec90
	bool CheckIfPlayerLevel(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfPlayerLevel // (Final|Native|Public|HasOutParms) // @ game+0x224ebb0
	bool CheckIfPlayerInTargetScene(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfPlayerInTargetScene // (Final|Native|Public|HasOutParms) // @ game+0x224ead0
	bool CheckIfPlayerInBattling(); // Function Solarland.SolarTutorialManager.CheckIfPlayerInBattling // (Final|Native|Public) // @ game+0x224eaa0
	bool CheckIfPlayerBattleLevel(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfPlayerBattleLevel // (Final|Native|Public|HasOutParms) // @ game+0x224e9c0
	bool CheckIfOpenBigMapUMG(); // Function Solarland.SolarTutorialManager.CheckIfOpenBigMapUMG // (Final|Native|Public) // @ game+0x224e990
	bool CheckIfNearAirDropBox(); // Function Solarland.SolarTutorialManager.CheckIfNearAirDropBox // (Final|Native|Public) // @ game+0x224e960
	bool CheckIfJumpBegin(); // Function Solarland.SolarTutorialManager.CheckIfJumpBegin // (Final|Native|Public) // @ game+0x224e930
	bool CheckIfJetFlyingVertically(); // Function Solarland.SolarTutorialManager.CheckIfJetFlyingVertically // (Final|Native|Public) // @ game+0x224e900
	bool CheckIfJetFlyingHorizontally(); // Function Solarland.SolarTutorialManager.CheckIfJetFlyingHorizontally // (Final|Native|Public) // @ game+0x224e8d0
	bool CheckIfInWater(); // Function Solarland.SolarTutorialManager.CheckIfInWater // (Final|Native|Public) // @ game+0x224e8a0
	bool CheckIfInVehicle(); // Function Solarland.SolarTutorialManager.CheckIfInVehicle // (Final|Native|Public) // @ game+0x224e870
	bool CheckIfInAir(); // Function Solarland.SolarTutorialManager.CheckIfInAir // (Final|Native|Public) // @ game+0x224e840
	bool CheckIfHasSpecifiedItem(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfHasSpecifiedItem // (Final|Native|Public|HasOutParms) // @ game+0x224e760
	bool CheckIfHasSpecifiedEquipmentByType(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfHasSpecifiedEquipmentByType // (Final|Native|Public|HasOutParms) // @ game+0x224e680
	bool CheckIfHasSpecifiedEquipmentById(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfHasSpecifiedEquipmentById // (Final|Native|Public|HasOutParms) // @ game+0x224e5a0
	bool CheckIfHasShield(); // Function Solarland.SolarTutorialManager.CheckIfHasShield // (Final|Native|Public) // @ game+0x224e570
	bool CheckIfHasMatched(); // Function Solarland.SolarTutorialManager.CheckIfHasMatched // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool CheckIfGrowTaskInLevelReceivedAnimationFinish(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfGrowTaskInLevelReceivedAnimationFinish // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	bool CheckIfGrowLevelRewardIsInStatus(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfGrowLevelRewardIsInStatus // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	bool CheckIfFeatureUnlock(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfFeatureUnlock // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	bool CheckIfFeatureOpen(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfFeatureOpen // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	bool CheckIfEquipSpecifiedWeapon(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfEquipSpecifiedWeapon // (Final|Native|Public|HasOutParms) // @ game+0x224e490
	bool CheckIfDying(); // Function Solarland.SolarTutorialManager.CheckIfDying // (Final|Native|Public) // @ game+0x224e460
	bool CheckIfDead(); // Function Solarland.SolarTutorialManager.CheckIfDead // (Final|Native|Public) // @ game+0x224e430
	bool CheckIfCurrentWeaponAmmoFull(); // Function Solarland.SolarTutorialManager.CheckIfCurrentWeaponAmmoFull // (Final|Native|Public) // @ game+0x224e400
	bool CheckIfConsumingMedicine(); // Function Solarland.SolarTutorialManager.CheckIfConsumingMedicine // (Final|Native|Public) // @ game+0x224e3d0
	bool CheckIfClaimBattlePassLevelReward(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfClaimBattlePassLevelReward // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	bool CheckIfCanUseSpecifiedWeaponAbility(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfCanUseSpecifiedWeaponAbility // (Final|Native|Public|HasOutParms) // @ game+0x224e2f0
	bool CheckIfCanUseSpecifiedVehicleWeapon(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfCanUseSpecifiedVehicleWeapon // (Final|Native|Public|HasOutParms) // @ game+0x224e210
	bool CheckIfCanUseSpecifiedVehicleAbility(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfCanUseSpecifiedVehicleAbility // (Final|Native|Public|HasOutParms) // @ game+0x224e130
	bool CheckIfCanOpenTreasureBox(); // Function Solarland.SolarTutorialManager.CheckIfCanOpenTreasureBox // (Final|Native|Public) // @ game+0x224e100
	bool CheckIfCanJetFlyVertically(); // Function Solarland.SolarTutorialManager.CheckIfCanJetFlyVertically // (Final|Native|Public) // @ game+0x224e0d0
	bool CheckIfCanJetFlyHorizontally(); // Function Solarland.SolarTutorialManager.CheckIfCanJetFlyHorizontally // (Final|Native|Public) // @ game+0x224e0a0
	bool CheckIfBoughtBattlePass(); // Function Solarland.SolarTutorialManager.CheckIfBoughtBattlePass // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool CheckIfBotAIDying(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfBotAIDying // (Final|Native|Public|HasOutParms) // @ game+0x224dfc0
	bool CheckIfBattlePassLevelGreaterThan(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfBattlePassLevelGreaterThan // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	bool CheckIfApproachElectronicTreasureBox(); // Function Solarland.SolarTutorialManager.CheckIfApproachElectronicTreasureBox // (Final|Native|Public) // @ game+0x224df90
	bool CheckIfAlreadyTriggeredMaxCount(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfAlreadyTriggeredMaxCount // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	bool CheckIfAirDropBoxLanded(); // Function Solarland.SolarTutorialManager.CheckIfAirDropBoxLanded // (Final|Native|Public) // @ game+0x224df60
	bool CheckConsumeItemButtonType(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckConsumeItemButtonType // (Final|Native|Public|HasOutParms) // @ game+0x224de80
	void AddTutorialProgress(int32_t TutorialID, int32_t Progress); // Function Solarland.SolarTutorialManager.AddTutorialProgress // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarUAV
// Size: 0x458 (Inherited: 0x3e0)
struct ASolarUAV : ASummonItemBase {
	bool bShowDebug; // 0x3e0(0x01)
	char pad_3E1[0x3]; // 0x3e1(0x03)
	float DebugLineThickness; // 0x3e4(0x04)
	struct USkeletalMeshComponent* Mesh; // 0x3e8(0x08)
	struct FName AttachCharacterSocketName; // 0x3f0(0x08)
	struct UAnimationAsset* AppearAnim; // 0x3f8(0x08)
	float AppearAnimLength; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct UAnimationAsset* DisappearAnim; // 0x408(0x08)
	float DisppearAnimLength; // 0x410(0x04)
	char pad_414[0xc]; // 0x414(0x0c)
	bool bProbeCollisionConfig; // 0x420(0x01)
	char pad_421[0x3]; // 0x421(0x03)
	float ProbeCollisionInterval; // 0x424(0x04)
	float ProbeCollisionRadius; // 0x428(0x04)
	float AvoidCollisionMaxHeight; // 0x42c(0x04)
	float AvoidCollisionOverTime; // 0x430(0x04)
	float AvoidCollisionCDTime; // 0x434(0x04)
	char pad_438[0x20]; // 0x438(0x20)

	void UAVDestroy(); // Function Solarland.SolarUAV.UAVDestroy // (Native|Public|BlueprintCallable) // @ game+0x1554a00
	void OnCharacterInVehicleTag(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAV.OnCharacterInVehicleTag // (Final|Native|Protected) // @ game+0x2255da0
	void Disappear(); // Function Solarland.SolarUAV.Disappear // (Native|Public|BlueprintCallable) // @ game+0x1554b80
};

// Class Solarland.SolarUAVRescue
// Size: 0x8e0 (Inherited: 0x458)
struct ASolarUAVRescue : ASolarUAV {
	char pad_458[0x21]; // 0x458(0x21)
	enum class EUAVRescueState NewState; // 0x479(0x01)
	char pad_47A[0x6]; // 0x47a(0x06)
	struct UAnimationAsset* SuspendAnim_Active_NotWork; // 0x480(0x08)
	struct UAnimationAsset* SuspendAnim_Active_Work; // 0x488(0x08)
	struct UAnimationAsset* SuspendAnim_Deactive; // 0x490(0x08)
	struct UAnimationAsset* ActiveAnim; // 0x498(0x08)
	struct UAnimationAsset* DeactiveAnim; // 0x4a0(0x08)
	struct UAnimationAsset* BeginWorkAnim; // 0x4a8(0x08)
	struct UAnimationAsset* EndWorkAnim; // 0x4b0(0x08)
	struct UAnimationAsset* ExplodeAnim; // 0x4b8(0x08)
	struct UParticleSystem* ActiveEffect; // 0x4c0(0x08)
	struct UParticleSystem* AppearBeginEffect; // 0x4c8(0x08)
	struct FName AppearBeginEffectSocket; // 0x4d0(0x08)
	struct UParticleSystem* JetEffect; // 0x4d8(0x08)
	struct FName JetEffectSocket; // 0x4e0(0x08)
	char pad_4E8[0x8]; // 0x4e8(0x08)
	struct FTransform JetEffectTrans; // 0x4f0(0x30)
	struct UParticleSystem* ActiveLoopEffect; // 0x520(0x08)
	struct UParticleSystem* ChaActiveEffect; // 0x528(0x08)
	struct UParticleSystem* ExplodeEffect; // 0x530(0x08)
	struct UParticleSystem* DeathVergeEffect; // 0x538(0x08)
	struct FName ChaActiveEffectSocket; // 0x540(0x08)
	float AppearEffectLength; // 0x548(0x04)
	char pad_54C[0x4]; // 0x54c(0x04)
	struct UMaterialInstance* MatAppearing; // 0x550(0x08)
	struct TArray<struct FMatAppearingData> MatAppearingData; // 0x558(0x10)
	struct UMaterialInstance* MatAppearEndBody; // 0x568(0x08)
	struct UMaterialInstance* MatAppearEndEye; // 0x570(0x08)
	struct FString BeginSound; // 0x578(0x10)
	struct FString EndSound; // 0x588(0x10)
	struct FString ActiveChaSound; // 0x598(0x10)
	struct FString ActiveAnimSound; // 0x5a8(0x10)
	struct FString BeginActiveLoopSound; // 0x5b8(0x10)
	struct FString EndActiveLoopSound; // 0x5c8(0x10)
	struct FString DeactiveAnimSound; // 0x5d8(0x10)
	struct FString ExplodeSound; // 0x5e8(0x10)
	struct FString BeginDeathVergeLoopSound; // 0x5f8(0x10)
	struct FString EndDeathVergeLoopSound; // 0x608(0x10)
	float ChaSpeedThreshold; // 0x618(0x04)
	float RotateSpeed; // 0x61c(0x04)
	float YawOffset; // 0x620(0x04)
	char pad_624[0x4]; // 0x624(0x04)
	struct UCurveFloat* ActivatingScaleCurve; // 0x628(0x08)
	struct UCurveFloat* DeactivatingScaleCurve; // 0x630(0x08)
	struct UCurveFloat* TargetSpeedByDistance; // 0x638(0x08)
	float Acceleration; // 0x640(0x04)
	float MaxDistance; // 0x644(0x04)
	char pad_648[0xc]; // 0x648(0x0c)
	struct FVector DefaultLocationOffset; // 0x654(0x0c)
	float TargetLocationOffsetSpeed; // 0x660(0x04)
	char pad_664[0x24]; // 0x664(0x24)
	float ActiveDuration; // 0x688(0x04)
	float ActiveEffectLength; // 0x68c(0x04)
	float DeathVergeHealthThreshold; // 0x690(0x04)
	char pad_694[0x4]; // 0x694(0x04)
	struct FSoftObjectPath UAVIcon; // 0x698(0x18)
	char pad_6B0[0x10]; // 0x6b0(0x10)
	struct UParticleSystemComponent* DeathVergeEffectHandle; // 0x6c0(0x08)
	struct UParticleSystemComponent* ActiveLoopEffectHandle; // 0x6c8(0x08)
	bool bFollowCharacter; // 0x6d0(0x01)
	char pad_6D1[0x2]; // 0x6d1(0x02)
	bool bAppearEnd; // 0x6d3(0x01)
	char pad_6D4[0x1c]; // 0x6d4(0x1c)
	bool bActive; // 0x6f0(0x01)
	bool bPermanent; // 0x6f1(0x01)
	bool bExplodeEffect; // 0x6f2(0x01)
	char pad_6F3[0x25]; // 0x6f3(0x25)
	float HealTickInterval; // 0x718(0x04)
	float HealHealthAmount; // 0x71c(0x04)
	float HealShieldAmount; // 0x720(0x04)
	char pad_724[0x4]; // 0x724(0x04)
	struct UParticleSystem* HealLineEffect; // 0x728(0x08)
	struct FName HealMeshSocket; // 0x730(0x08)
	struct FString BeginHealSound; // 0x738(0x10)
	struct FString BeginHealLoopSound; // 0x748(0x10)
	struct FString EndHealSound; // 0x758(0x10)
	struct FString EndHealLoopSound; // 0x768(0x10)
	struct FString BeginHealHPLoopSound; // 0x778(0x10)
	struct FString EndHealHPLoopSound; // 0x788(0x10)
	struct FString BeginHealShieldLoopSound; // 0x798(0x10)
	struct FString EndHealShieldLoopSound; // 0x7a8(0x10)
	struct UParticleSystemComponent* HealLineEffectHandle; // 0x7b8(0x08)
	char pad_7C0[0x8]; // 0x7c0(0x08)
	struct UParticleSystem* RescueEffect; // 0x7c8(0x08)
	struct UParticleSystem* RescueEffect_Enermy; // 0x7d0(0x08)
	char pad_7D8[0x8]; // 0x7d8(0x08)
	struct FTransform RescueEffectTransform; // 0x7e0(0x30)
	struct FName RescueMeshSocket; // 0x810(0x08)
	float RescueTime; // 0x818(0x04)
	bool bCheckRescueBlock; // 0x81c(0x01)
	char pad_81D[0x3]; // 0x81d(0x03)
	float CheckRescueBlockInteval; // 0x820(0x04)
	char pad_824[0x4]; // 0x824(0x04)
	struct FString BeginRescueLoopSound; // 0x828(0x10)
	struct FString EndRescueLoopSound; // 0x838(0x10)
	struct FString CompleteRescueSound; // 0x848(0x10)
	struct UParticleSystemComponent* RescueEffectHandle; // 0x858(0x08)
	char pad_860[0x10]; // 0x860(0x10)
	struct UMaterialInstanceDynamic* MatInstanceAppearingBody; // 0x870(0x08)
	struct UMaterialInstanceDynamic* MatInstanceAppearingEye; // 0x878(0x08)
	bool bNavigateToOwner; // 0x880(0x01)
	char pad_881[0x3]; // 0x881(0x03)
	float RecordInterval; // 0x884(0x04)
	float NavigateInterval; // 0x888(0x04)
	float BeginNavigateDistance; // 0x88c(0x04)
	float EndNavigateDistance; // 0x890(0x04)
	char pad_894[0x2c]; // 0x894(0x2c)
	struct UGameplayEffect* UAVHealBuffGameplayEffect; // 0x8c0(0x08)
	struct UGameplayEffect* UAVRescueGameplayEffect; // 0x8c8(0x08)
	char pad_8D0[0x10]; // 0x8d0(0x10)

	void TickRescue(float DeltaTime); // Function Solarland.SolarUAVRescue.TickRescue // (Native|Event|Protected|BlueprintEvent) // @ game+0x2256cf0
	void TickNavigate(float DeltaTime); // Function Solarland.SolarUAVRescue.TickNavigate // (Native|Event|Protected|BlueprintEvent) // @ game+0x2256c60
	void TickHeal(float DeltaTime); // Function Solarland.SolarUAVRescue.TickHeal // (Native|Event|Protected|BlueprintEvent) // @ game+0x2256bd0
	void ServerSetRescueBlocked(bool bBlocked); // Function Solarland.SolarUAVRescue.ServerSetRescueBlocked // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2256590
	void OnRescueComplete(); // Function Solarland.SolarUAVRescue.OnRescueComplete // (Final|Native|Private) // @ game+0x2256070
	void OnRep_NewState(); // Function Solarland.SolarUAVRescue.OnRep_NewState // (Final|Native|Protected) // @ game+0x2256050
	void OnRep_Active(); // Function Solarland.SolarUAVRescue.OnRep_Active // (Final|Native|Private) // @ game+0x2256030
	void OnCheckUAVInvisible(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAVRescue.OnCheckUAVInvisible // (Final|Native|Private) // @ game+0x2255f40
	void OnCharacterEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarUAVRescue.OnCharacterEndPlay // (Final|Native|Protected) // @ game+0x2255e70
	void OnCharacterDeathVergeStatusTag(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAVRescue.OnCharacterDeathVergeStatusTag // (Final|Native|Private) // @ game+0x2255cd0
	void OnCharacterDeathStatusTag(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAVRescue.OnCharacterDeathStatusTag // (Final|Native|Private) // @ game+0x2255c00
	float GetRescueTime(); // Function Solarland.SolarUAVRescue.GetRescueTime // (Final|Native|Public|Const) // @ game+0x2255540
};

// Class Solarland.SolarUAVShield
// Size: 0x4c0 (Inherited: 0x458)
struct ASolarUAVShield : ASolarUAV {
	struct ASolarEnergyShield* EnergyShieldClass; // 0x458(0x08)
	struct FTransform EnergyShieldSpawnTransform; // 0x460(0x30)
	struct FString StartSound; // 0x490(0x10)
	struct USpringArmComponent* SpringArm; // 0x4a0(0x08)
	char pad_4A8[0x10]; // 0x4a8(0x10)
	struct ASolarEnergyShield* EnergyShield; // 0x4b8(0x08)

	void OnCharacterDeathVergeStatusTag(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAVShield.OnCharacterDeathVergeStatusTag // (Final|Native|Private) // @ game+0x2255da0
};

// Class Solarland.SolarUDPManager
// Size: 0x50 (Inherited: 0x28)
struct USolarUDPManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	int32_t SendBufferSize; // 0x30(0x04)
	int32_t ReceiveBufferSize; // 0x34(0x04)
	char pad_38[0x18]; // 0x38(0x18)

	void OnMessageReceived(struct TArray<char>& Data); // Function Solarland.SolarUDPManager.OnMessageReceived // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarUIRoot
// Size: 0x348 (Inherited: 0x348)
struct USolarUIRoot : USolarUserWidget {
};

// Class Solarland.SolarUnArmWeapon
// Size: 0x3e0 (Inherited: 0x228)
struct ASolarUnArmWeapon : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	float Angle; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
	struct TArray<enum class EObjectTypeQuery> HitDetectableTypes; // 0x238(0x10)
	float Interval; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)
	struct UUserWidget* Crosshair; // 0x250(0x08)
	struct FSoftObjectPath FireIconPath; // 0x258(0x18)
	struct FGameplayCueTag HitCueTag; // 0x270(0x08)
	struct FSlateBrush FireBtnBrush; // 0x278(0x98)
	struct USolarAbilitySystemComponent* AbilitySystemComponent; // 0x310(0x08)
	char pad_318[0x8]; // 0x318(0x08)
	struct ASolarCharacterBase* AttackTargetCharacter; // 0x320(0x08)
	char pad_328[0x50]; // 0x328(0x50)
	struct FSolarDamageInfo DamageInfo; // 0x378(0x40)
	struct ASolarAbility* MeleeAbilityClass; // 0x3b8(0x08)
	char pad_3C0[0x20]; // 0x3c0(0x20)

	void TryDealMeleeDamage(struct FVector& Location, float DetectSphereRadius); // Function Solarland.SolarUnArmWeapon.TryDealMeleeDamage // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2256d80
	void ServerDealMeleeDamage(struct ASolarCharacterBase* Target, struct FVector ClientHitLoc, bool bHeavyPunch); // Function Solarland.SolarUnArmWeapon.ServerDealMeleeDamage // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x2256420
	bool HitAnyCharacters(struct ASolarCharacterBase*& HitTarget, struct FVector& Location, float& DetectSphereRadius); // Function Solarland.SolarUnArmWeapon.HitAnyCharacters // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2255790
	struct FSlateBrush GetFireButtonBrush(); // Function Solarland.SolarUnArmWeapon.GetFireButtonBrush // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22553b0
	struct ASolarCharacterBase* GetAttackTargetCharacter(); // Function Solarland.SolarUnArmWeapon.GetAttackTargetCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2255390
};

// Class Solarland.SolarUserLuaWidget
// Size: 0x348 (Inherited: 0x348)
struct USolarUserLuaWidget : USolarUserWidget {

	void OnInitWidgetLuaLogic(); // Function Solarland.SolarUserLuaWidget.OnInitWidgetLuaLogic // (Native|Event|Public|BlueprintEvent) // @ game+0x15480b0
	void InitWidgetLuaLogic(); // Function Solarland.SolarUserLuaWidget.InitWidgetLuaLogic // (Final|Native|Public|BlueprintCallable) // @ game+0x22558d0
};

// Class Solarland.SolarUserWidgetSettings
// Size: 0x110 (Inherited: 0x38)
struct USolarUserWidgetSettings : UDeveloperSettings {
	struct FSoftObjectPath SolarImage_Mat_Normal_91; // 0x38(0x18)
	struct FSoftObjectPath SolarImage_Mat_Mirror_91; // 0x50(0x18)
	struct FSoftObjectPath SolarImage_Mat_Quarter_91; // 0x68(0x18)
	struct FSoftObjectPath SolarImage_Mat_Normal_181; // 0x80(0x18)
	struct FSoftObjectPath SolarImage_Mat_Mirror_181; // 0x98(0x18)
	struct FSoftObjectPath SolarImage_Mat_Quarter_181; // 0xb0(0x18)
	struct FSoftObjectPath SolarImage_Mat_Normal_361; // 0xc8(0x18)
	struct FSoftObjectPath SolarImage_Mat_Mirror_361; // 0xe0(0x18)
	struct FSoftObjectPath SolarImage_Mat_Quarter_361; // 0xf8(0x18)
};

// Class Solarland.SolarAyncTask
// Size: 0x38 (Inherited: 0x28)
struct USolarAyncTask : UObject {
	struct FMulticastInlineDelegate OnAsyncTask; // 0x28(0x10)
};

// Class Solarland.SolarHelper
// Size: 0x28 (Inherited: 0x28)
struct USolarHelper : UObject {

	void OnAsyncTask__DelegateSignature(); // DelegateFunction Solarland.SolarHelper.OnAsyncTask__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	struct FString GetUE4LogFilePath(); // Function Solarland.SolarHelper.GetUE4LogFilePath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9b1e70
	struct FString GetSavedPath(); // Function Solarland.SolarHelper.GetSavedPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x93f910
	struct FString GetProjectPath(); // Function Solarland.SolarHelper.GetProjectPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9b1df0
	struct FString GetGamePersistentDownloadDir(); // Function Solarland.SolarHelper.GetGamePersistentDownloadDir // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9b0e70
	struct FString GetFileText(struct FString Path); // Function Solarland.SolarHelper.GetFileText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x225b4e0
	struct TArray<char> GetFileBinary(struct FString Path); // Function Solarland.SolarHelper.GetFileBinary // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x225b400
	bool CleanAllCacheData(); // Function Solarland.SolarHelper.CleanAllCacheData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x225aad0
};

// Class Solarland.SolarUtils
// Size: 0x28 (Inherited: 0x28)
struct USolarUtils : UObject {

	struct UTextureRenderTarget2D* WidgetToTexture(struct UUserWidget* Widget, struct FVector2D& DrawSize); // Function Solarland.SolarUtils.WidgetToTexture // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x225db30
	struct FVector2D TransformScreenPositionToLocal(struct UObject* WorldContextObject, struct FVector2D& InScreenPositon, struct FVector2D AnchorsVector); // Function Solarland.SolarUtils.TransformScreenPositionToLocal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x225d870
	void PostAkEvent(struct UAkComponent* InAkComponent, struct ASolarCharacter* InCharacter, struct FString InControlledSoundName, struct FString InTeammateSoundName, struct FString InEnemySoundName); // Function Solarland.SolarUtils.PostAkEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x225c780
	bool NeedOptimizeShow(struct UObject* WorldContext, struct FVector Location, float Radius, float BackThreshold); // Function Solarland.SolarUtils.NeedOptimizeShow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x225bec0
	struct FString GetAndroidSavedPngPath(); // Function Solarland.SolarUtils.GetAndroidSavedPngPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x225b2f0
	bool ExportRenderTarget2DAsPNG(struct UTextureRenderTarget2D* TexRT, struct FString TotalFileName); // Function Solarland.SolarUtils.ExportRenderTarget2DAsPNG // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x225b1a0
	void ExportImageToSystemAlbum(struct FString InFilePath); // Function Solarland.SolarUtils.ExportImageToSystemAlbum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2070e60
};

// Class Solarland.SolarUWSettlementBase
// Size: 0x358 (Inherited: 0x348)
struct USolarUWSettlementBase : USolarUserWidget {
	int32_t MvpCharacterID; // 0x348(0x04)
	int32_t MvpSkinID; // 0x34c(0x04)
	struct TWeakObjectPtr<struct USettlementStageManager> SettlementStageManager; // 0x350(0x08)

	void SetStageManager(struct USettlementStageManager* InStageManager); // Function Solarland.SolarUWSettlementBase.SetStageManager // (Final|Native|Public) // @ game+0x225d5b0
	void PlayMvpCharacterVoice(); // Function Solarland.SolarUWSettlementBase.PlayMvpCharacterVoice // (Final|Native|Public) // @ game+0x225c6b0
};

// Class Solarland.SolarVaultSystemSettings
// Size: 0x250 (Inherited: 0x38)
struct USolarVaultSystemSettings : UDeveloperSettings {
	float MaxFacingAngle2D; // 0x38(0x04)
	float MinFallingVeloZ; // 0x3c(0x04)
	float MaxFallingVeloZ; // 0x40(0x04)
	float VaultFallingVeloAngleTolerance; // 0x44(0x04)
	bool bEnableAutoVaultWhileFalling; // 0x48(0x01)
	bool bPreventAutoVaultToFalling; // 0x49(0x01)
	char pad_4A[0x2]; // 0x4a(0x02)
	float AutoMaxFacingAngle2D; // 0x4c(0x04)
	float AutoVaultDistThreshold; // 0x50(0x04)
	float JoystickForwardRange; // 0x54(0x04)
	float JoystickBackwardRange; // 0x58(0x04)
	bool bEnableWallRun; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	struct FVector WallRunForce; // 0x60(0x0c)
	float WallRunDuration; // 0x6c(0x04)
	float MinWallRunTriggerHeight; // 0x70(0x04)
	float WallRunDistThreshold; // 0x74(0x04)
	float WallRunFallingVeloAngleTolerance; // 0x78(0x04)
	bool bEnableAutoWallRun; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
	float AutoWallRunDistThreshold; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct TMap<enum class EObstacleDetectorType, struct FDetectorShapeParams> DetectorShapeParams; // 0x88(0x50)
	float PlatformNorAngleTolerance; // 0xd8(0x04)
	float VaultWallNorAngleTolerance; // 0xdc(0x04)
	float MinPlatformWidth; // 0xe0(0x04)
	float EdgeOffset; // 0xe4(0x04)
	float TraceTolerance; // 0xe8(0x04)
	float MaxIllegalCornerHeight; // 0xec(0x04)
	float MaxIllegalCornerWidth; // 0xf0(0x04)
	float CancelDistFromWall; // 0xf4(0x04)
	float CapsuleHalfHeightScaler; // 0xf8(0x04)
	float WallRunWallNorAngleTolerance; // 0xfc(0x04)
	float WallRunWallNorNegAngleTolerance; // 0x100(0x04)
	float WallRunBumpMaxHeight; // 0x104(0x04)
	float WallRunBumpAngle2D; // 0x108(0x04)
	float VeloThreshold; // 0x10c(0x04)
	struct TMap<enum class EVaultType, struct FVector> WarpTargetOffsets; // 0x110(0x50)
	char pad_160[0x50]; // 0x160(0x50)
	struct FName LandWarpTargetName; // 0x1b0(0x08)
	struct FName HandWarpTargetName; // 0x1b8(0x08)
	struct FName FootWarpTargetName; // 0x1c0(0x08)
	float ServerDistThreshold; // 0x1c8(0x04)
	float TargetSelectRange; // 0x1cc(0x04)
	float TargetSelectAngle; // 0x1d0(0x04)
	float ChaseLowerLimit; // 0x1d4(0x04)
	float DistanceWeight; // 0x1d8(0x04)
	float AngleWeight; // 0x1dc(0x04)
	struct FName EnemyWarpTargetName; // 0x1e0(0x08)
	struct TSoftClassPtr<UObject> TrackWidgetClass; // 0x1e8(0x28)
	float CapsuleShrinkScale; // 0x210(0x04)
	bool bAdjustMeshZForAdaptingCapsuleShrink; // 0x214(0x01)
	char pad_215[0x3]; // 0x215(0x03)
	float DurationToResetMeshZAdjustment; // 0x218(0x04)
	float FollowDanceRange; // 0x21c(0x04)
	float FollowDanceCheckInterval; // 0x220(0x04)
	char pad_224[0x2c]; // 0x224(0x2c)

	struct USolarVaultSystemSettings* Get(); // Function Solarland.SolarVaultSystemSettings.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x225b280
};

// Class Solarland.SolarVehicleAbilitySystemComponent
// Size: 0x1310 (Inherited: 0x12f8)
struct USolarVehicleAbilitySystemComponent : UAbilitySystemComponent {
	char pad_12F8[0x18]; // 0x12f8(0x18)
};

// Class Solarland.WheeledVehicleAnim
// Size: 0x28 (Inherited: 0x28)
struct UWheeledVehicleAnim : UInterface {
};

// Class Solarland.LeggedVehicleAnim
// Size: 0x28 (Inherited: 0x28)
struct ULeggedVehicleAnim : UInterface {
};

// Class Solarland.SolarVehicleAttributeSet
// Size: 0xa0 (Inherited: 0x30)
struct USolarVehicleAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData CurrentVehicleHealth; // 0x30(0x10)
	struct FGameplayAttributeData MaxVehicleHealth; // 0x40(0x10)
	struct FGameplayAttributeData MaxBrokenHealth; // 0x50(0x10)
	struct FGameplayAttributeData StealthMaterialPercent; // 0x60(0x10)
	struct FGameplayAttributeData SpeedMultiplier; // 0x70(0x10)
	struct FGameplayAttributeData CurrentVehicleWholeShield; // 0x80(0x10)
	struct FGameplayAttributeData MaxVehicleWholeShield; // 0x90(0x10)

	void OnRep_StealthMaterialPercent(struct FGameplayAttributeData& OldStealthMaterialPercent); // Function Solarland.SolarVehicleAttributeSet.OnRep_StealthMaterialPercent // (Native|Protected|HasOutParms) // @ game+0x1fd4a10
	void OnRep_SpeedMultiplier(struct FGameplayAttributeData& OldSpeedMultiplier); // Function Solarland.SolarVehicleAttributeSet.OnRep_SpeedMultiplier // (Native|Protected|HasOutParms) // @ game+0x1fd46e0
	void OnRep_MaxVehicleWholeShield(struct FGameplayAttributeData& OldMaxVehicleWholeShield); // Function Solarland.SolarVehicleAttributeSet.OnRep_MaxVehicleWholeShield // (Native|Protected|HasOutParms) // @ game+0x1fdb9b0
	void OnRep_MaxVehicleHealth(struct FGameplayAttributeData& OldMaxVehicleHealth); // Function Solarland.SolarVehicleAttributeSet.OnRep_MaxVehicleHealth // (Native|Protected|HasOutParms) // @ game+0x1fb1fe0
	void OnRep_MaxBrokenHealth(struct FGameplayAttributeData& OldMaxBrokenHealth); // Function Solarland.SolarVehicleAttributeSet.OnRep_MaxBrokenHealth // (Native|Protected|HasOutParms) // @ game+0x1fd4c10
	void OnRep_CurrentVehicleWholeShield(struct FGameplayAttributeData& OldVehicleWholeShield); // Function Solarland.SolarVehicleAttributeSet.OnRep_CurrentVehicleWholeShield // (Native|Protected|HasOutParms) // @ game+0x1fd4b60
	void OnRep_CurrentVehicleHealth(struct FGameplayAttributeData& OldVehicleHealth); // Function Solarland.SolarVehicleAttributeSet.OnRep_CurrentVehicleHealth // (Native|Protected|HasOutParms) // @ game+0x1fb2090
};

// Class Solarland.SolarVehicleCameraComponent
// Size: 0x9f0 (Inherited: 0x9c0)
struct USolarVehicleCameraComponent : USolarCameraComponent {
	struct ASolarVehiclePawn* Vehicle; // 0x9b8(0x08)
	struct USolarVehicleSpringArmComponent* VehicleSpringArm; // 0x9c0(0x08)
	char pad_9D0[0x10]; // 0x9d0(0x10)
	struct TArray<struct UVehicleCameraDataAsset*> CameraDataAssets; // 0x9e0(0x10)
};

// Class Solarland.SolarVehicleGameplayAbility
// Size: 0x4d8 (Inherited: 0x400)
struct USolarVehicleGameplayAbility : UGameplayAbility {
	bool bCancelAfterVacateSeat; // 0x400(0x01)
	bool bCancelManually; // 0x401(0x01)
	char AbilityIndex; // 0x402(0x01)
	char pad_403[0x5]; // 0x403(0x05)
	struct FGameplayTagContainer GameplayCueTags; // 0x408(0x20)
	struct FString AbilityActivateVirationHeString; // 0x428(0x10)
	struct FString AbilityEndVirationHeString; // 0x438(0x10)
	bool bCheckInstigatorBeforeActivation; // 0x448(0x01)
	bool bActivateAbilityOnGranted; // 0x449(0x01)
	char pad_44A[0x2]; // 0x44a(0x02)
	float DurationTime; // 0x44c(0x04)
	struct UGameplayEffect* ActivateEffect; // 0x450(0x08)
	struct TSoftObjectPtr<UTexture2D> AbilityIcon; // 0x458(0x28)
	struct TSoftObjectPtr<UTexture2D> AdditionalAbilityIcon; // 0x480(0x28)
	int32_t AbilityDescription; // 0x4a8(0x04)
	char pad_4AC[0x4]; // 0x4ac(0x04)
	struct FString AbilityTextType; // 0x4b0(0x10)
	float DamageToVehicle; // 0x4c0(0x04)
	float DamageToCharacter; // 0x4c4(0x04)
	char pad_4C8[0x10]; // 0x4c8(0x10)
};

// Class Solarland.SolarVehicleGA_Dash
// Size: 0x4e0 (Inherited: 0x4d8)
struct USolarVehicleGA_Dash : USolarVehicleGameplayAbility {
	float HorizontalDashSpeed; // 0x4d8(0x04)
	float VerticalDashSpeed; // 0x4dc(0x04)
};

// Class Solarland.SolarVehicleGA_EMP
// Size: 0x4f0 (Inherited: 0x4d8)
struct USolarVehicleGA_EMP : USolarVehicleGameplayAbility {
	struct ASolarSkill_EMP* EMPActorClass; // 0x4d8(0x08)
	struct UGameplayEffect* ApplyToTargetGameplayEffectClass; // 0x4e0(0x08)
	int32_t EMPLevel; // 0x4e8(0x04)
	char pad_4EC[0x4]; // 0x4ec(0x04)
};

// Class Solarland.SolarVehicleGA_EquipWeapon
// Size: 0x520 (Inherited: 0x4d8)
struct USolarVehicleGA_EquipWeapon : USolarVehicleGameplayAbility {
	struct UVehicleCameraDataAsset* CameraDataAsset; // 0x4d8(0x08)
	float EquipDelayTimer; // 0x4e0(0x04)
	float MaxDegreeBetweenMeshUpAndGloblaUp; // 0x4e4(0x04)
	struct TArray<struct FVehicleEquipWeaponOverlapBox> EquipWeaponOverlapBoxes; // 0x4e8(0x10)
	struct TArray<struct FVehicleEquipWeaponOverlapCapsule> EquipWeaponOverlapCapsules; // 0x4f8(0x10)
	int32_t FailToEquipWeaponNotice; // 0x508(0x04)
	bool bSendMeshRelativeTransform; // 0x50c(0x01)
	char pad_50D[0x3]; // 0x50d(0x03)
	int32_t WeaponSeatIndex; // 0x510(0x04)
	char pad_514[0xc]; // 0x514(0x0c)
};

// Class Solarland.SolarVehicleGA_HoverFly
// Size: 0x4e8 (Inherited: 0x4d8)
struct USolarVehicleGA_HoverFly : USolarVehicleGameplayAbility {
	float MaxFlyHeight; // 0x4d8(0x04)
	float MinimumTime; // 0x4dc(0x04)
	float MaximumTime; // 0x4e0(0x04)
	char pad_4E4[0x4]; // 0x4e4(0x04)
};

// Class Solarland.SolarVehicleGA_HoverJump
// Size: 0x4f0 (Inherited: 0x4d8)
struct USolarVehicleGA_HoverJump : USolarVehicleGameplayAbility {
	float HoverJumpHeight; // 0x4d8(0x04)
	float GravityScale; // 0x4dc(0x04)
	float ServerEndTimerWhenNotReceiveBuffer; // 0x4e0(0x04)
	char pad_4E4[0x4]; // 0x4e4(0x04)
	struct USolarVehicleAT_HoverJump* HoverJumpTask; // 0x4e8(0x08)
};

// Class Solarland.SolarVehicleAT_HoverJump
// Size: 0x90 (Inherited: 0x80)
struct USolarVehicleAT_HoverJump : UAbilityTask {
	char pad_80[0x10]; // 0x80(0x10)
};

// Class Solarland.SolarVehicleGA_HoverRolling
// Size: 0x4f0 (Inherited: 0x4d8)
struct USolarVehicleGA_HoverRolling : USolarVehicleGameplayAbility {
	float RollForwardDegree; // 0x4d8(0x04)
	float RollBackDegree; // 0x4dc(0x04)
	float RollForwardDistance; // 0x4e0(0x04)
	float RollForwardDuration; // 0x4e4(0x04)
	float RollHorizontalDistance; // 0x4e8(0x04)
	char pad_4EC[0x4]; // 0x4ec(0x04)
};

// Class Solarland.SolarVehicleGA_IronManLaser
// Size: 0x4f0 (Inherited: 0x4d8)
struct USolarVehicleGA_IronManLaser : USolarVehicleGameplayAbility {
	float TraceLength; // 0x4d8(0x04)
	float TraceLengthScaleOnServer; // 0x4dc(0x04)
	float MaxFadingLaserLifeTime; // 0x4e0(0x04)
	char pad_4E4[0x4]; // 0x4e4(0x04)
	struct UGameplayEffect* EffectToDriver; // 0x4e8(0x08)
};

// Class Solarland.SolarVehicleAT_IronManLaser
// Size: 0xd0 (Inherited: 0x80)
struct USolarVehicleAT_IronManLaser : UAbilityTask {
	char pad_80[0x50]; // 0x80(0x50)

	void OnNotifyEndQueryActor(struct FName NotifyName, struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload); // Function Solarland.SolarVehicleAT_IronManLaser.OnNotifyEndQueryActor // (Final|Native|Private|HasOutParms) // @ game+0x22634d0
	void OnNotifyBeginQueryActor(struct FName NotifyName, struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload); // Function Solarland.SolarVehicleAT_IronManLaser.OnNotifyBeginQueryActor // (Final|Native|Private|HasOutParms) // @ game+0x22633e0
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Solarland.SolarVehicleAT_IronManLaser.OnMontageEnded // (Final|Native|Private) // @ game+0x2263310
};

// Class Solarland.SolarVehicleGA_Jump
// Size: 0x4e0 (Inherited: 0x4d8)
struct USolarVehicleGA_Jump : USolarVehicleGameplayAbility {
	float LandedDamageRadius; // 0x4d8(0x04)
	float LandedDamageHeight; // 0x4dc(0x04)

	void ApplyDamageOnLanding(struct FHitResult& LandedHit); // Function Solarland.SolarVehicleGA_Jump.ApplyDamageOnLanding // (Final|Native|Public|HasOutParms) // @ game+0x2262f00
};

// Class Solarland.SolarVehicleGA_NOS
// Size: 0x508 (Inherited: 0x4d8)
struct USolarVehicleGA_NOS : USolarVehicleGameplayAbility {
	struct FName VerticalAxisName; // 0x4d8(0x08)
	struct FName HorizontalAxisName; // 0x4e0(0x08)
	float VerticalAxisValueForCancel; // 0x4e8(0x04)
	float JoyStickCancelDegree; // 0x4ec(0x04)
	float CancelTimeForInput; // 0x4f0(0x04)
	float CancelTimeForHit; // 0x4f4(0x04)
	float CancelSpeedForHit; // 0x4f8(0x04)
	char pad_4FC[0x4]; // 0x4fc(0x04)
	struct USolarVehicleAT_NOS* NosTask; // 0x500(0x08)
};

// Class Solarland.SolarVehicleAT_NOS
// Size: 0x90 (Inherited: 0x80)
struct USolarVehicleAT_NOS : UAbilityTask {
	char pad_80[0x10]; // 0x80(0x10)

	void OnHitDuringNos(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarVehicleAT_NOS.OnHitDuringNos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2263130
};

// Class Solarland.SolarVehicleGA_PrecisionShoot
// Size: 0x4d8 (Inherited: 0x4d8)
struct USolarVehicleGA_PrecisionShoot : USolarVehicleGameplayAbility {
};

// Class Solarland.SolarVehicleGA_Radar
// Size: 0x4e8 (Inherited: 0x4d8)
struct USolarVehicleGA_Radar : USolarVehicleGameplayAbility {
	struct ASolarRadarBase* RadarClass; // 0x4d8(0x08)
	char pad_4E0[0x8]; // 0x4e0(0x08)
};

// Class Solarland.SolarVehicleGA_SeatEject
// Size: 0x500 (Inherited: 0x4d8)
struct USolarVehicleGA_SeatEject : USolarVehicleGameplayAbility {
	struct FRotator EjectRotation; // 0x4d8(0x0c)
	struct FVehicleEjectParams EjectParams; // 0x4e4(0x10)
	struct FGameplayTag GameplayCueTag; // 0x4f4(0x08)
	char pad_4FC[0x4]; // 0x4fc(0x04)
};

// Class Solarland.SolarVehicleGA_SelfHealing
// Size: 0x4e0 (Inherited: 0x4d8)
struct USolarVehicleGA_SelfHealing : USolarVehicleGameplayAbility {
	uint32_t FullHealthNotifyId; // 0x4d8(0x04)
	char pad_4DC[0x4]; // 0x4dc(0x04)
};

// Class Solarland.SolarVehicleGA_ShieldTrigger
// Size: 0x4d8 (Inherited: 0x4d8)
struct USolarVehicleGA_ShieldTrigger : USolarVehicleGameplayAbility {
};

// Class Solarland.SolarVehicleGA_Smoke
// Size: 0x4e0 (Inherited: 0x4d8)
struct USolarVehicleGA_Smoke : USolarVehicleGameplayAbility {
	struct ASolarVehicleSmoke* VehicleSmoke; // 0x4d8(0x08)
};

// Class Solarland.SolarVehicleGA_Stealth
// Size: 0x500 (Inherited: 0x4d8)
struct USolarVehicleGA_Stealth : USolarVehicleGameplayAbility {
	char pad_4D8[0x28]; // 0x4d8(0x28)

	void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarVehicleGA_Stealth.OnPlayerGetOnVehicle // (Final|Native|Private) // @ game+0x2263690
	void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarVehicleGA_Stealth.OnPlayerGetOffVehicle // (Final|Native|Private) // @ game+0x22635c0
	void OnCancelStealthByPassenger(); // Function Solarland.SolarVehicleGA_Stealth.OnCancelStealthByPassenger // (Final|Native|Public) // @ game+0x22630d0
};

// Class Solarland.SolarVehicleGA_WeaponFire
// Size: 0x4f0 (Inherited: 0x4d8)
struct USolarVehicleGA_WeaponFire : USolarVehicleGameplayAbility {
	char pad_4D8[0x18]; // 0x4d8(0x18)

	void OnFireTaskEnd(); // Function Solarland.SolarVehicleGA_WeaponFire.OnFireTaskEnd // (Final|Native|Private) // @ game+0x2263110
	void OnCtrlTaskEnd(); // Function Solarland.SolarVehicleGA_WeaponFire.OnCtrlTaskEnd // (Final|Native|Private) // @ game+0x22630f0
	void DoFireTask(); // Function Solarland.SolarVehicleGA_WeaponFire.DoFireTask // (Final|Native|Private) // @ game+0x2262fe0
};

// Class Solarland.SolarVehicleGA_WeaponReload
// Size: 0x4e8 (Inherited: 0x4d8)
struct USolarVehicleGA_WeaponReload : USolarVehicleGameplayAbility {
	char pad_4D8[0x10]; // 0x4d8(0x10)
};

// Class Solarland.SolarVehicleGA_WheelTransform
// Size: 0x530 (Inherited: 0x4d8)
struct USolarVehicleGA_WheelTransform : USolarVehicleGameplayAbility {
	struct TArray<struct UGameplayEffect*> WheeledEffects; // 0x4d8(0x10)
	struct TArray<struct UGameplayEffect*> LeggedEffects; // 0x4e8(0x10)
	char pad_4F8[0x10]; // 0x4f8(0x10)
	int32_t InhibitTransformNoticeIDByBrokenWeakPointNums; // 0x508(0x04)
	bool bCheckBrokenWeakPointNumConfig; // 0x50c(0x01)
	char pad_50D[0x3]; // 0x50d(0x03)
	int32_t InhibitTransformIfSurpassBrokenWeakPointNumConfig; // 0x510(0x04)
	int32_t InhibitTransformNoticeIDByBlock; // 0x514(0x04)
	struct FVector TransformToWheelBoxExtent; // 0x518(0x0c)
	float TransformToWheelOverlapOffset; // 0x524(0x04)
	float MaxFallingSpeedForTransformingWheel; // 0x528(0x04)
	int32_t InhibitTransformNoticeIDByFallingSpeed; // 0x52c(0x04)
};

// Class Solarland.SolarVehicleGA_WholeShield
// Size: 0x4f0 (Inherited: 0x4d8)
struct USolarVehicleGA_WholeShield : USolarVehicleGameplayAbility {
	char pad_4D8[0x18]; // 0x4d8(0x18)
};

// Class Solarland.SolarVehicleGA_ZombieTruck
// Size: 0x4e0 (Inherited: 0x4d8)
struct USolarVehicleGA_ZombieTruck : USolarVehicleGameplayAbility {
	float PlatformAttachDegree; // 0x4d8(0x04)
	char pad_4DC[0x4]; // 0x4dc(0x04)
};

// Class Solarland.SolarVehicleWeapon
// Size: 0x12b0 (Inherited: 0xa90)
struct ASolarVehicleWeapon : ASolarWeapon {
	char pad_A90[0x8]; // 0xa90(0x08)
	float MaxWeaponPitch; // 0xa98(0x04)
	float MinWeaponPitch; // 0xa9c(0x04)
	float MaxWeaponYaw; // 0xaa0(0x04)
	float MinWeaponYaw; // 0xaa4(0x04)
	float PitchFollowSpeed; // 0xaa8(0x04)
	float YawFollowSpeed; // 0xaac(0x04)
	float SimulationSmoothLerpSpeed; // 0xab0(0x04)
	float SimulationSmoothLerpThreshold; // 0xab4(0x04)
	bool bAbsoluteRotator; // 0xab8(0x01)
	bool bHasScope; // 0xab9(0x01)
	bool bHiddenMesh; // 0xaba(0x01)
	char pad_ABB[0x1]; // 0xabb(0x01)
	struct FVector ScopeCameraOffset; // 0xabc(0x0c)
	struct FVector ScopeTargetOffset; // 0xac8(0x0c)
	float ScopeCameraDistance; // 0xad4(0x04)
	float ScopeBlendTime; // 0xad8(0x04)
	char pad_ADC[0x4]; // 0xadc(0x04)
	struct UVehicleCameraDataAsset* ScopeCameraData; // 0xae0(0x08)
	float ScopeFOVSwitchSpeed; // 0xae8(0x04)
	float QuickAdsFireDelay; // 0xaec(0x04)
	enum class EVehicleWeaponScopeType DefaultWeaponScopeType; // 0xaf0(0x01)
	char pad_AF1[0x7]; // 0xaf1(0x07)
	struct UVehicleWeaponScopeWidget* ScopeUI; // 0xaf8(0x08)
	float PitchCameraOffset; // 0xb00(0x04)
	bool bCameraFocusWeapon; // 0xb04(0x01)
	bool bUseNormalCameraMode; // 0xb05(0x01)
	enum class EWeaponFireModeType FireType; // 0xb06(0x01)
	char pad_B07[0x1]; // 0xb07(0x01)
	struct FName FireSocketName; // 0xb08(0x08)
	float UpdateShotStartLocThreshold; // 0xb10(0x04)
	enum class EAxis FireAixsType; // 0xb14(0x01)
	char pad_B15[0x3]; // 0xb15(0x03)
	struct FName TurretVSocketName; // 0xb18(0x08)
	struct FName TurretHSocketName; // 0xb20(0x08)
	float ShootTolerance; // 0xb28(0x04)
	char pad_B2C[0x4]; // 0xb2c(0x04)
	struct ASolarVehiclePawn* AttachedVehicle; // 0xb30(0x08)
	struct ASolarCharacter* WeaponOwner; // 0xb38(0x08)
	bool bVehicleWeaponScopeOpen; // 0xb40(0x01)
	bool bActivedWeapon; // 0xb41(0x01)
	char pad_B42[0x2]; // 0xb42(0x02)
	uint32_t RotationYawAndPitchPacket; // 0xb44(0x04)
	char pad_B48[0x18]; // 0xb48(0x18)
	struct USkeletalMeshComponent* VehicleMesh; // 0xb60(0x08)
	struct TSoftClassPtr<UObject> VehicleStencilClass; // 0xb68(0x28)
	struct USkeletalMeshComponent* VehicleStencilNew; // 0xb90(0x08)
	struct FName AttachBoneName; // 0xb98(0x08)
	struct TWeakObjectPtr<struct ASolarCharacter> CahedLastOwner; // 0xba0(0x08)
	char pad_BA8[0x338]; // 0xba8(0x338)
	char bUseAssistLock : 1; // 0xee0(0x01)
	char bShowAssistLockUI : 1; // 0xee0(0x01)
	char pad_EE0_2 : 6; // 0xee0(0x01)
	char pad_EE1[0x3]; // 0xee1(0x03)
	struct FVector2D AssistLockImageSize; // 0xee4(0x08)
	struct FVector2D PCAssistLockImageSize; // 0xeec(0x08)
	char bAutoLockSpreadSwitch : 1; // 0xef4(0x01)
	char pad_EF4_1 : 7; // 0xef4(0x01)
	char pad_EF5[0x3]; // 0xef5(0x03)
	float AutoLockSpreadDecPerSecond; // 0xef8(0x04)
	float PreSelectProgress; // 0xefc(0x04)
	struct FRuntimeFloatCurve ProgressUpgradeSpeedCurve; // 0xf00(0x88)
	enum class EAssistLockState AssistLockState; // 0xf88(0x01)
	bool bSimulateWeaponFireSocket; // 0xf89(0x01)
	char pad_F8A[0x2]; // 0xf8a(0x02)
	float TriggerSmoothReticleDistance; // 0xf8c(0x04)
	struct FVector2D SmoothReticleSpeed; // 0xf90(0x08)
	char pad_F98[0x8]; // 0xf98(0x08)
	struct FTransform CachedWeaponRelativeTransform; // 0xfa0(0x30)
	struct FTransform CachedFireMuzzleTransform; // 0xfd0(0x30)
	struct FTransform CachedTurretVSocketTransform; // 0x1000(0x30)
	struct FTransform CachedTurretHSocketTransform; // 0x1030(0x30)
	float SimulateMuzzleDistanceThreshold; // 0x1060(0x04)
	char pad_1064[0x5c]; // 0x1064(0x5c)
	struct ASolarBullet* VehicleWeaponPrimaryOverrideBulletClass; // 0x10c0(0x08)
	struct ASolarBullet* VehicleWeaponSecondaryOverrideBulletClass; // 0x10c8(0x08)
	struct ASolarBullet* VehicleWeaponPrimaryOverrideTraceBulletClass; // 0x10d0(0x08)
	struct FGameplayTagContainer BlockVehicleWeaponFireTags; // 0x10d8(0x20)
	char pad_10F8[0x19]; // 0x10f8(0x19)
	bool bEnablePreAimingLaser; // 0x1111(0x01)
	bool bNotOptTickIntervalPreAimingActive; // 0x1112(0x01)
	char pad_1113[0x1]; // 0x1113(0x01)
	struct FName PreAimingLaserLaunchScoket; // 0x1114(0x08)
	char pad_111C[0x4]; // 0x111c(0x04)
	struct TSoftObjectPtr<UParticleSystem> PreAimingLaserFX; // 0x1120(0x28)
	struct TSoftObjectPtr<UParticleSystem> PreAimingLaserEnermyFX; // 0x1148(0x28)
	int32_t PreAimingLaserChagringPhase; // 0x1170(0x04)
	char pad_1174[0x4]; // 0x1174(0x04)
	struct UParticleSystemComponent* PreAimingLaserEffect; // 0x1178(0x08)
	bool bEnableBackupAmmo; // 0x1180(0x01)
	char pad_1181[0x3]; // 0x1181(0x03)
	int32_t BackupAmmoFireCost; // 0x1184(0x04)
	int32_t MaxBackupAmmo; // 0x1188(0x04)
	float ReloadBackupAmmoInterval; // 0x118c(0x04)
	int32_t ReloadBackupAmmoNum; // 0x1190(0x04)
	int32_t CurrentBackupAmmo; // 0x1194(0x04)
	char pad_1198[0x8]; // 0x1198(0x08)
	bool bEnableRechamber; // 0x11a0(0x01)
	char pad_11A1[0x3]; // 0x11a1(0x03)
	float PlayRechamberFinishTime; // 0x11a4(0x04)
	char pad_11A8[0x8]; // 0x11a8(0x08)
	struct FString RechamberStartAndStopSound; // 0x11b0(0x10)
	struct FString RechamberFinishSound; // 0x11c0(0x10)
	struct FVehicleVFX RechamberAlertVFX; // 0x11d0(0x90)
	int32_t RechamberAlertMaterialIndex; // 0x1260(0x04)
	bool bKeepWeaponStateAfterUncontrolled; // 0x1264(0x01)
	char pad_1265[0x3]; // 0x1265(0x03)
	struct FString ReloadSoundName1P; // 0x1268(0x10)
	struct FString ReloadSoundName3P; // 0x1278(0x10)
	struct FString ReloadSoundName3PEnemy; // 0x1288(0x10)
	bool bReloadingAfterUncontrol; // 0x1298(0x01)
	char pad_1299[0x7]; // 0x1299(0x07)
	struct USolarVehicleGameplayAbility* ReloadAbilityClass; // 0x12a0(0x08)
	char pad_12A8[0x8]; // 0x12a8(0x08)

	void VehicleWeaponOpenScope(); // Function Solarland.SolarVehicleWeapon.VehicleWeaponOpenScope // (Final|Native|Public) // @ game+0x226a630
	void VehicleWeaponCloseScope(); // Function Solarland.SolarVehicleWeapon.VehicleWeaponCloseScope // (Final|Native|Public) // @ game+0x226a610
	void ServerUpdateVehicleWeaponRotate(uint32_t PackedRotation); // Function Solarland.SolarVehicleWeapon.ServerUpdateVehicleWeaponRotate // (Net|Native|Event|Protected|NetServer) // @ game+0x226a3a0
	void ServerSendCurveShotHit(uint32_t SpawnID, float InTime, struct ASolarPlayerController* InPlayerController, struct FHitResult InHit); // Function Solarland.SolarVehicleWeapon.ServerSendCurveShotHit // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x226a210
	void ServerCancelVehicleFireAbility(struct FGameplayAbilitySpecHandle InAbilityHandle); // Function Solarland.SolarVehicleWeapon.ServerCancelVehicleFireAbility // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x226a180
	void ServerAddWeaponFireTagToCharacter(struct ASolarCharacter* InFiredCharacter); // Function Solarland.SolarVehicleWeapon.ServerAddWeaponFireTagToCharacter // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x226a0f0
	void ResetWeaponRotation(float DeltaTime); // Function Solarland.SolarVehicleWeapon.ResetWeaponRotation // (Final|Native|Public|BlueprintCallable) // @ game+0x2269fa0
	void OnVehicleWeaponUnControlled(); // Function Solarland.SolarVehicleWeapon.OnVehicleWeaponUnControlled // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnVehicleWeaponControlled(); // Function Solarland.SolarVehicleWeapon.OnVehicleWeaponControlled // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnStencilLoaded(); // Function Solarland.SolarVehicleWeapon.OnStencilLoaded // (Final|Native|Public) // @ game+0x2269c20
	void OnRep_BackupAmmoChanged(int32_t InOldAmmo); // Function Solarland.SolarVehicleWeapon.OnRep_BackupAmmoChanged // (Final|Native|Protected) // @ game+0x2269b90
	void LocallyVehicleWeaponTick(float DeltaTime); // Function Solarland.SolarVehicleWeapon.LocallyVehicleWeaponTick // (Native|Protected) // @ game+0x22699a0
	bool IsPlayerLocallyControlledWeapon(); // Function Solarland.SolarVehicleWeapon.IsPlayerLocallyControlledWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2269970
	void InitializeVehicleWeapon(struct ASolarVehiclePawn* VehicleWeaponOwner, struct FName& WeaponAttachSocket); // Function Solarland.SolarVehicleWeapon.InitializeVehicleWeapon // (Native|Protected|HasOutParms) // @ game+0x2269890
	struct FVector GetShotTargetLocation(); // Function Solarland.SolarVehicleWeapon.GetShotTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2269830
	enum class EWeaponFireModeType GetFireType(); // Function Solarland.SolarVehicleWeapon.GetFireType // (Final|Native|Public|Const) // @ game+0x2269810
	struct FVector GetAimTargetLocation(); // Function Solarland.SolarVehicleWeapon.GetAimTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x22697d0
	void ClientFinishedWeaponReload(); // Function Solarland.SolarVehicleWeapon.ClientFinishedWeaponReload // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1555a80
	void ClientDrawDebugString(struct FVector TextLocation, struct FString Text, struct FColor TextColor, float Duration); // Function Solarland.SolarVehicleWeapon.ClientDrawDebugString // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x22695b0
	bool CheckCanOpenScope(); // Function Solarland.SolarVehicleWeapon.CheckCanOpenScope // (Native|Public) // @ game+0x2269580
	bool CanEnterFireState(); // Function Solarland.SolarVehicleWeapon.CanEnterFireState // (Native|Public) // @ game+0x2269550
};

// Class Solarland.SolarVehicleGatlingWeapon
// Size: 0x12b0 (Inherited: 0x12b0)
struct ASolarVehicleGatlingWeapon : ASolarVehicleWeapon {
};

// Class Solarland.SolarVehicleGC_BrokenDanger
// Size: 0x80 (Inherited: 0x50)
struct USolarVehicleGC_BrokenDanger : UGameplayCueNotify_Static {
	struct TSoftObjectPtr<UMaterialInterface> SourceMaterial; // 0x50(0x28)
	char pad_78[0x8]; // 0x78(0x08)
};

// Class Solarland.SolarVehicleGC_EquipWeapon
// Size: 0x50 (Inherited: 0x50)
struct USolarVehicleGC_EquipWeapon : UGameplayCueNotify_Static {
};

// Class Solarland.SolarVehicleGC_HoverJump
// Size: 0x60 (Inherited: 0x50)
struct USolarVehicleGC_HoverJump : UGameplayCueNotify_Static {
	struct TArray<struct FVehicleVFX> HoverJumpVFXes; // 0x50(0x10)
};

// Class Solarland.SolarVehicleGC_ZombieTruck
// Size: 0x50 (Inherited: 0x50)
struct USolarVehicleGC_ZombieTruck : UGameplayCueNotify_Static {
};

// Class Solarland.SolarVehicleGCNotify_Actor
// Size: 0x2a0 (Inherited: 0x298)
struct ASolarVehicleGCNotify_Actor : AGameplayCueNotify_Actor {
	char pad_298[0x8]; // 0x298(0x08)
};

// Class Solarland.SolarVehicleHealthWidget
// Size: 0x498 (Inherited: 0x348)
struct USolarVehicleHealthWidget : USolarUserWidget {
	struct TMap<int32_t, struct FVehicleHealthResource> VehicleHealthResourceMap; // 0x348(0x50)
	struct UProgressBar* ProgressBar_Health; // 0x398(0x08)
	struct UTextBlock* Txt_Health; // 0x3a0(0x08)
	struct UTextBlock* Txt_Health_percent; // 0x3a8(0x08)
	struct UImage* Img_Health; // 0x3b0(0x08)
	struct UCanvasPanel* UI_Vehicle_Health_Anim; // 0x3b8(0x08)
	struct UWidgetAnimation* CarHealth_Loop_Anim; // 0x3c0(0x08)
	struct TArray<struct UImage*> WeakPointImgs; // 0x3c8(0x10)
	struct FLinearColor VehicleNormalColor; // 0x3d8(0x10)
	struct FLinearColor VehicleDamageColor; // 0x3e8(0x10)
	struct FLinearColor VehicleBrokenColor; // 0x3f8(0x10)
	struct FLinearColor VehicleFillImageNormalColor; // 0x408(0x10)
	struct FLinearColor VehicleFillImageDamageColor; // 0x418(0x10)
	struct FLinearColor VehicleFillImageBrokenColor; // 0x428(0x10)
	struct FLinearColor WeakNormalColor; // 0x438(0x10)
	struct FLinearColor WeakDamageColor; // 0x448(0x10)
	struct FLinearColor WeakBrokenColor; // 0x458(0x10)
	struct FLinearColor RepairingColor; // 0x468(0x10)
	char pad_478[0x20]; // 0x478(0x20)

	void InitHealthUI(struct ASolarVehiclePawn* InVehiclePawn, bool bInDriveControl); // Function Solarland.SolarVehicleHealthWidget.InitHealthUI // (Final|Native|Public|BlueprintCallable) // @ game+0x2263000
};

// Class Solarland.SolarVehicleHoverWeapon
// Size: 0x1300 (Inherited: 0x12b0)
struct ASolarVehicleHoverWeapon : ASolarVehicleWeapon {
	float MoveDelayTime; // 0x12a8(0x04)
	float InterpSpeed; // 0x12ac(0x04)
	struct FVector WeaponOpenOffset; // 0x12b0(0x0c)
	struct UCurveFloat* WeaponHoverOffsetCurve; // 0x12c0(0x08)
	char pad_12CC[0x34]; // 0x12cc(0x34)
};

// Class Solarland.WheeledVehicleInterface
// Size: 0x28 (Inherited: 0x28)
struct UWheeledVehicleInterface : UInterface {
};

// Class Solarland.VehicleWeaponAnimInterface
// Size: 0x28 (Inherited: 0x28)
struct UVehicleWeaponAnimInterface : UInterface {
};

// Class Solarland.SolarVehicleIronManWeapon
// Size: 0x1300 (Inherited: 0x12b0)
struct ASolarVehicleIronManWeapon : ASolarVehicleWeapon {
	struct TSoftObjectPtr<UAnimMontage> DriverStandAttackRight; // 0x12a8(0x28)
	struct TSoftObjectPtr<UAnimMontage> DriverLieAttackRight; // 0x12d0(0x28)
	struct FName AttackSectionName; // 0x12f8(0x08)

	struct USkeletalMeshComponent* GetDriverCharacterMesh(); // Function Solarland.SolarVehicleIronManWeapon.GetDriverCharacterMesh // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x2265d80
};

// Class Solarland.SolarVehicleLegTurretWeapon
// Size: 0x1300 (Inherited: 0x12b0)
struct ASolarVehicleLegTurretWeapon : ASolarVehicleWeapon {
	struct TArray<struct FBoneIKPreset> TargetIKSettings; // 0x12a8(0x10)
	float IKBlendSpeed; // 0x12b8(0x04)
	struct FName LeftMuzzleName; // 0x12bc(0x08)
	struct FName RightMuzzleName; // 0x12c4(0x08)
	struct FVector TargetLeftBoneIK; // 0x12cc(0x0c)
	struct FVector TargetRightBoneIK; // 0x12d8(0x0c)
	struct FVector CurrentLeftBoneIK; // 0x12e4(0x0c)
	struct FVector CurrentRightBoneIK; // 0x12f0(0x0c)
};

// Class Solarland.SolarVehicleNosGCNotify_Actor
// Size: 0x2a0 (Inherited: 0x2a0)
struct ASolarVehicleNosGCNotify_Actor : ASolarVehicleGCNotify_Actor {
};

// Class Solarland.SolarVehicleRocketLauncherWeapon
// Size: 0x16d0 (Inherited: 0x12b0)
struct ASolarVehicleRocketLauncherWeapon : ASolarVehicleWeapon {
	struct TArray<struct FBombingAreaData> BombingAreaDatas; // 0x12a8(0x10)
	enum class ERocketFireMode RocketFireMode; // 0x12b8(0x01)
	struct TMap<int32_t, struct FBombingAreaAsset> BombingAreaAssetMap; // 0x12c0(0x50)
	char pad_1311[0x19f]; // 0x1311(0x19f)
	struct FBombingAreaAsset PreviewRangeAsset; // 0x14b0(0x60)
	struct FBombingAreaAsset BombingAreaAimAsset; // 0x1510(0x60)
	struct FBombingAreaAsset BombingAreaWarningAsset; // 0x1570(0x60)
	struct TSoftObjectPtr<UStaticMesh> AlertLineMeshClass; // 0x15d0(0x28)
	struct TSoftObjectPtr<UParticleSystem> FireMuzzleParticle; // 0x15f8(0x28)
	float BombingAreaBlendTime; // 0x1620(0x04)
	struct FFireModeSetting RocketFireModeSettings[0x2]; // 0x1624(0x70)
	float ResetOwnerTimer; // 0x1694(0x04)
	float SpawnRocketHight; // 0x1698(0x04)
	char pad_169C[0x4]; // 0x169c(0x04)
	struct TArray<struct FName> MuzzleSocketNames; // 0x16a0(0x10)
	struct FString RocketLaunchSound_1P; // 0x16b0(0x10)
	struct FString RocketLaunchSound_3P; // 0x16c0(0x10)

	void ServerRocketLauncherRealFire(int32_t InFireCounter); // Function Solarland.SolarVehicleRocketLauncherWeapon.ServerRocketLauncherRealFire // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2266170
	void ServerActivateRocketLauncherFire(struct FVector_NetQuantize InTargetLocation, int32_t InFireCount); // Function Solarland.SolarVehicleRocketLauncherWeapon.ServerActivateRocketLauncherFire // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x22660a0
	void OnRocketLauncherRealFire(int32_t InFireCounter); // Function Solarland.SolarVehicleRocketLauncherWeapon.OnRocketLauncherRealFire // (Final|Native|Public) // @ game+0x2266010
	void OnRep_RocketSpawnerChanged(); // Function Solarland.SolarVehicleRocketLauncherWeapon.OnRep_RocketSpawnerChanged // (Final|Native|Protected) // @ game+0x2265fd0
	void OnRep_RocketFireModeChanged(); // Function Solarland.SolarVehicleRocketLauncherWeapon.OnRep_RocketFireModeChanged // (Final|Native|Protected) // @ game+0x2265fb0
	void OnLocallyActiveFire(int32_t InFireCount); // Function Solarland.SolarVehicleRocketLauncherWeapon.OnLocallyActiveFire // (Final|Native|Public) // @ game+0x2265f20
	void MulticastRocketLauncherRealFire(int32_t InFireCounter); // Function Solarland.SolarVehicleRocketLauncherWeapon.MulticastRocketLauncherRealFire // (Net|Native|Event|NetMulticast|Public) // @ game+0x2265e70
	void MulticastPrepareRocketSpawn(struct FVector_NetQuantize InLocation, enum class ERocketFireMode InFireMode); // Function Solarland.SolarVehicleRocketLauncherWeapon.MulticastPrepareRocketSpawn // (Net|Native|Event|NetMulticast|Protected) // @ game+0x2265db0
};

// Class Solarland.SolarVehicleSettings
// Size: 0x218 (Inherited: 0x38)
struct USolarVehicleSettings : UDeveloperSettings {
	float HpLowerLimitInNormalStatus; // 0x38(0x04)
	float HpLowerLimitInDamagedStatus; // 0x3c(0x04)
	float VehicleHitTimer; // 0x40(0x04)
	float ReplicatedDelayTimer; // 0x44(0x04)
	float WaterToDestoryTime; // 0x48(0x04)
	float MaxWarningTweenRate; // 0x4c(0x04)
	float MinWarningTweenRate; // 0x50(0x04)
	float MinDangerWarningOpacity; // 0x54(0x04)
	float MinProgressBarWarningOpacity; // 0x58(0x04)
	float VehicleBurningSpendTimer; // 0x5c(0x04)
	float VehicleBurningDeltaTime; // 0x60(0x04)
	float DisableOverlapTimer; // 0x64(0x04)
	float ResetOwnerTimer; // 0x68(0x04)
	int32_t MeshLodLevelForDefaultDeviceLocalPlayer; // 0x6c(0x04)
	int32_t MeshLodLevelForLowDeviceLocalPlayer; // 0x70(0x04)
	float AutoBrakeTimerWithoutDriver; // 0x74(0x04)
	struct FName WeakPointVFXParamterName; // 0x78(0x08)
	float WeakPointVFXDefaultValue; // 0x80(0x04)
	float WeakPointVFXStartValue; // 0x84(0x04)
	float WeakPointVFXTargetValue; // 0x88(0x04)
	float WeakPointVFXDuration; // 0x8c(0x04)
	struct FName LeftFootLocationXCurve; // 0x90(0x08)
	struct FName RightFootLocationXCurve; // 0x98(0x08)
	struct FName LeftFootLocationZCurve; // 0xa0(0x08)
	struct FName RightFootLocationZCurve; // 0xa8(0x08)
	float WeaponMagnifiers[0x4]; // 0xb0(0x10)
	struct USolarVehicleGameplayAbility* FireAbilityClass; // 0xc0(0x08)
	float VehicleScopeFovBlendTime; // 0xc8(0x04)
	float VehicleOutShootFovCoefficients[0x8]; // 0xcc(0x20)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TSoftObjectPtr<UMaterialInterface> VehiclePreviewDissolveMat; // 0xf0(0x28)
	struct TSoftObjectPtr<UMaterialInterface> VehiclePreviewFresnelMat; // 0x118(0x28)
	struct TSoftObjectPtr<UCurveVector> VehiclePreviewDissolveCurve; // 0x140(0x28)
	struct TSoftObjectPtr<UCurveVector> VehiclePreviewFresnelCurve; // 0x168(0x28)
	float VehiclePreviewDelayShowSeconds; // 0x190(0x04)
	int32_t VehiclePreviewMeshSortPriority; // 0x194(0x04)
	int32_t VehiclePreviewMirrorMeshSortPriority; // 0x198(0x04)
	int32_t VehiclePreviewVFXSortPriority; // 0x19c(0x04)
	int32_t VehiclePreviewMirrorVFXSortPriority; // 0x1a0(0x04)
	char VehiclePreviewPlayAnimSound[0xa]; // 0x1a4(0x0a)
	char pad_1AE[0x2]; // 0x1ae(0x02)
	float VehicleHitTimerForAntiCheating; // 0x1b0(0x04)
	char pad_1B4[0x4]; // 0x1b4(0x04)
	struct TMap<enum class ESolarShakeMainType, float> VehicleVibrationMultiplier; // 0x1b8(0x50)
	float ForceUpdateProceduralAnimationToTargetTimeThreshold; // 0x208(0x04)
	int32_t ServerBufferCheckFrameInterval; // 0x20c(0x04)
	float ServerBufferCheckTimeInterval; // 0x210(0x04)
	int32_t ServerBufferCheckCount; // 0x214(0x04)

	struct USolarVehicleSettings* Get(); // Function Solarland.SolarVehicleSettings.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2265d10
};

// Class Solarland.SolarVehicleSiegeWeapon
// Size: 0x13c0 (Inherited: 0x12b0)
struct ASolarVehicleSiegeWeapon : ASolarVehicleWeapon {
	struct TSoftObjectPtr<UParticleSystem> BulletTargetAreaInSameTeam; // 0x12a8(0x28)
	struct TSoftObjectPtr<UMaterialInterface> BulletDecalMaterialInSameTeam; // 0x12d0(0x28)
	struct TSoftObjectPtr<UParticleSystem> BulletTargetAreaInEnemy; // 0x12f8(0x28)
	struct TSoftObjectPtr<UMaterialInterface> BulletDecalMaterialInEnemy; // 0x1320(0x28)
	float AreaParticleScale; // 0x1348(0x04)
	struct FVector AreaDecalSize; // 0x134c(0x0c)
	float AreaFadeOutTime; // 0x1358(0x04)
	struct FName AreaFadeOutName; // 0x135c(0x08)
	float AreaDisplayDistance; // 0x1364(0x04)
	float AreaBlockThreshold; // 0x1368(0x04)
	struct TMap<struct FFireUniqueID, struct FBulletExplodedAreaData> BulletAreaParticleMap; // 0x1370(0x50)

	void OnBulletSpawned(struct FPredictProjectilePathResult& InHitResult); // Function Solarland.SolarVehicleSiegeWeapon.OnBulletSpawned // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarVehicleSmoke
// Size: 0x3e8 (Inherited: 0x228)
struct ASolarVehicleSmoke : AActor {
	float Duration; // 0x228(0x04)
	char pad_22C[0x4]; // 0x22c(0x04)
	struct FRuntimeFloatCurve AppearCurve; // 0x230(0x88)
	struct FRuntimeFloatCurve DisappearCurve; // 0x2b8(0x88)
	struct TSoftObjectPtr<UParticleSystem> SmokeEffect; // 0x340(0x28)
	struct UAkComponent* AkAudioComponent; // 0x368(0x08)
	struct FName SmokeFadeName; // 0x370(0x08)
	struct FString SoundBegin; // 0x378(0x10)
	struct FString SoundLoop; // 0x388(0x10)
	struct FString SoundLoopEnd; // 0x398(0x10)
	int32_t SmokeTranslucentSortPriority; // 0x3a8(0x04)
	char pad_3AC[0x4]; // 0x3ac(0x04)
	struct UParticleSystemComponent* SmokeEffectComp; // 0x3b0(0x08)
	char pad_3B8[0x8]; // 0x3b8(0x08)
	bool bSmokeWaitToDestory; // 0x3c0(0x01)
	char pad_3C1[0x27]; // 0x3c1(0x27)

	void OnRep_SmokeWaitToDestory(); // Function Solarland.SolarVehicleSmoke.OnRep_SmokeWaitToDestory // (Final|Native|Protected) // @ game+0x2265ff0
	void OnEffectPlayOver(); // Function Solarland.SolarVehicleSmoke.OnEffectPlayOver // (Final|Native|Protected) // @ game+0x2265f00
};

// Class Solarland.SolarVehicleSoundDataAsset
// Size: 0x608 (Inherited: 0x30)
struct USolarVehicleSoundDataAsset : UDataAsset {
	struct FString Engine_3P; // 0x30(0x10)
	struct FString Engine_3P_Enemy; // 0x40(0x10)
	struct FString Engine_Down_3P; // 0x50(0x10)
	struct FString Engine_Down_3P_Enemy; // 0x60(0x10)
	struct FString Engine_RTPC; // 0x70(0x10)
	struct FString Engine_Stop_3P; // 0x80(0x10)
	struct FString Engine_Stop_3P_Enemy; // 0x90(0x10)
	struct FString Engine_Input_RTPC; // 0xa0(0x10)
	float MaxMoveSpeed; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct FString MoveSpeed_Acc_RTPC; // 0xb8(0x10)
	struct FString Tire_3P; // 0xc8(0x10)
	struct FString Tire_3P_Enemy; // 0xd8(0x10)
	struct FString Tire_End_3P; // 0xe8(0x10)
	struct FString Tire_End_3P_Enemy; // 0xf8(0x10)
	struct FString Tire_RTPC; // 0x108(0x10)
	struct FString Tire_Group; // 0x118(0x10)
	struct TMap<enum class EPhysicalSurface, struct FString> Tire_States; // 0x128(0x50)
	bool bUseEngineRpm; // 0x178(0x01)
	char pad_179[0x7]; // 0x179(0x07)
	struct FString Vehicle_Collision_3P; // 0x180(0x10)
	struct FString Vehicle_Collision_3P_Enemy; // 0x190(0x10)
	struct FString Vehicle_Collision_RTPC; // 0x1a0(0x10)
	struct FString Play_Booster_3P; // 0x1b0(0x10)
	struct FString Play_Booster_3P_Enemy; // 0x1c0(0x10)
	struct FString Stop_Booster_3P; // 0x1d0(0x10)
	struct FString Stop_Booster_3P_Enemy; // 0x1e0(0x10)
	struct FString Vehicle_Speedboard_1P; // 0x1f0(0x10)
	struct FString Vehicle_Speedboard_3P; // 0x200(0x10)
	struct FString Vehicle_Speedboard_3P_Enemy; // 0x210(0x10)
	struct FString Vehicle_Eject_1P; // 0x220(0x10)
	struct FString Vehicle_Eject_3P; // 0x230(0x10)
	struct FString Vehicle_Eject_3P_Enemy; // 0x240(0x10)
	struct FString Play_Vehicle_Destroyed; // 0x250(0x10)
	struct FString Weakpoint_Broken_3P; // 0x260(0x10)
	struct FString Weakpoint_Broken_3P_Enemy; // 0x270(0x10)
	struct FString Weakpoint_Fixed_3P; // 0x280(0x10)
	struct FString Weakpoint_Fixed_3P_Enemy; // 0x290(0x10)
	struct FString Engine_Start_3P; // 0x2a0(0x10)
	struct FString Engine_Start_3P_Enemy; // 0x2b0(0x10)
	struct FString Braking_Loop_RTPC; // 0x2c0(0x10)
	struct FString Play_Braking_Loop_3P; // 0x2d0(0x10)
	struct FString Play_Braking_Loop_3P_Enemy; // 0x2e0(0x10)
	struct FString Stop_Braking_Loop_3P; // 0x2f0(0x10)
	struct FString Stop_Braking_Loop_3P_Enemy; // 0x300(0x10)
	float BrakingLoopSoundDegree; // 0x310(0x04)
	float BrakingLoopSoundSpeed; // 0x314(0x04)
	struct FString Play_Reverse_Loop; // 0x318(0x10)
	struct FString Stop_Reverse_Loop; // 0x328(0x10)
	struct FString Drift_RTPC; // 0x338(0x10)
	struct FString Drift_Start; // 0x348(0x10)
	struct FString Drift_Stop; // 0x358(0x10)
	char SpeedDifferenceInKmThresholdForHitSound; // 0x368(0x01)
	char pad_369[0x7]; // 0x369(0x07)
	struct FString Play_SelfHealing_3P; // 0x370(0x10)
	struct FString Stop_SelfHealing_3P; // 0x380(0x10)
	struct FString Play_vehicle_crash_ground_3P; // 0x390(0x10)
	struct FString Play_vehicle_crash_ground_3P_enemy; // 0x3a0(0x10)
	struct FString Vehicle_Crash_Ground_RTPC; // 0x3b0(0x10)
	float VehicleCrashGroundRtpcMultiplier; // 0x3c0(0x04)
	char pad_3C4[0x4]; // 0x3c4(0x04)
	struct FString Play_vehicle_crash_water_3P; // 0x3c8(0x10)
	struct FString Play_vehicle_crash_water_3P_enemy; // 0x3d8(0x10)
	struct FString Play_vehicle_fixing_weakpoint_3P; // 0x3e8(0x10)
	struct FString Stop_vehicle_fixing_weakpoint_3P; // 0x3f8(0x10)
	struct FString Play_VehicleWholdShieldBegin_Start_1P; // 0x408(0x10)
	struct FString Play_VehicleWholdShieldBegin_Loop_1P; // 0x418(0x10)
	struct FString Stop_VehicleWholdShieldBegin_Start_3P; // 0x428(0x10)
	struct FString Stop_VehicleWholdShieldBegin_Loop_3P; // 0x438(0x10)
	struct FString Play_VehicleWholdShieldEnd_Start_1P; // 0x448(0x10)
	struct FString Play_VehicleWholdShieldEnd_Loop_1P; // 0x458(0x10)
	struct FString Stop_VehicleWholdShieldEnd_Start_3P; // 0x468(0x10)
	struct FString Stop_VehicleWholdShieldEnd_Loop_3P; // 0x478(0x10)
	struct FString Play_HitVehicleWholdShield_1P; // 0x488(0x10)
	struct FString Play_HitVehicleWholdShield_3P; // 0x498(0x10)
	struct FString HoverJumpOnActive1P; // 0x4a8(0x10)
	struct FString HoverJumpOnActive3P; // 0x4b8(0x10)
	struct FString HoverJumpWhileActive1P; // 0x4c8(0x10)
	struct FString HoverJumpWhileActive3P; // 0x4d8(0x10)
	struct FString HoverJumpOnRemove1P; // 0x4e8(0x10)
	struct FString HoverJumpOnRemove3P; // 0x4f8(0x10)
	struct FString Play_VehicleTrumpet_1P; // 0x508(0x10)
	struct FString Play_VehicleTrumpet_3P; // 0x518(0x10)
	struct FString Stop_VehicleTrumpet_1P; // 0x528(0x10)
	struct FString Stop_VehicleTrumpet_3P; // 0x538(0x10)
	struct FString Play_vehicle_common_braking_loop_3P; // 0x548(0x10)
	struct FString Play_vehicle_common_braking_loop_3P_enemy; // 0x558(0x10)
	struct FString Stop_vehicle_common_braking_loop_3P; // 0x568(0x10)
	struct FString Stop_vehicle_common_braking_loop_3P_enemy; // 0x578(0x10)
	struct FString Play_Vehicle_UpShift_3P; // 0x588(0x10)
	struct FString Play_Vehicle_UpShift_3P_Enemy; // 0x598(0x10)
	struct FString Play_Vehicle_DownShift_3P; // 0x5a8(0x10)
	struct FString Play_Vehicle_DownShift_3P_Enemy; // 0x5b8(0x10)
	struct FString Play_IronMan_Laser_Hit; // 0x5c8(0x10)
	struct FString FootPlant; // 0x5d8(0x10)
	struct FString Landing_3P; // 0x5e8(0x10)
	struct FString Landing_3P_Enemy; // 0x5f8(0x10)
};

// Class Solarland.SolarVehicleSpawnEffect
// Size: 0x260 (Inherited: 0x228)
struct ASolarVehicleSpawnEffect : AActor {
	struct UBoxComponent* BoxCollision; // 0x228(0x08)
	struct FName EffectMaterialParameterName; // 0x230(0x08)
	struct TArray<struct UStaticMeshComponent*> EffectMeshComponentArray; // 0x238(0x10)
	int32_t VehicleID; // 0x248(0x04)
	struct FVector BoxExtent; // 0x24c(0x0c)
	float EffectTime; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)

	struct UStaticMesh* GetVehicleMesh(int32_t InVehicleID); // Function Solarland.SolarVehicleSpawnEffect.GetVehicleMesh // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarVehicleSpawner
// Size: 0x430 (Inherited: 0x390)
struct ASolarVehicleSpawner : ASolarItemSpawner {
	char pad_390[0x4]; // 0x390(0x04)
	int32_t SpawnID; // 0x394(0x04)
	enum class EVehicleSpawnType VehicleSpawnType; // 0x398(0x01)
	char pad_399[0x7]; // 0x399(0x07)
	bool bVehicleRefresh; // 0x3a0(0x01)
	char pad_3A1[0x3]; // 0x3a1(0x03)
	int32_t VehicleRefreshSecond; // 0x3a4(0x04)
	bool bVehicleRefreshRand; // 0x3a8(0x01)
	bool bVehicleRefreshWaitPreBroken; // 0x3a9(0x01)
	char pad_3AA[0x6]; // 0x3aa(0x06)
	int64_t VehicleRefreshCheckRoleDisSquared; // 0x3b0(0x08)
	struct TArray<enum class EObjectTypeQuery> VehicleCheckObjectTypes; // 0x3b8(0x10)
	struct FVector VehicleCheckBoxSize; // 0x3c8(0x0c)
	char pad_3D4[0x1c]; // 0x3d4(0x1c)
	struct TSoftClassPtr<UObject> VehicleSpawnEffectClass; // 0x3f0(0x28)
	struct ASolarVehicleSpawnEffect* VehicleSpawnEffect; // 0x418(0x08)
	char pad_420[0x8]; // 0x420(0x08)
	struct FSpawnedActorHandle CachedActorHandle; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)

	void StartVehicleRefreshTimer(); // Function Solarland.SolarVehicleSpawner.StartVehicleRefreshTimer // (Final|Native|Protected) // @ game+0x226a5d0
	void PlayVehicleSpawnEffectFinished(); // Function Solarland.SolarVehicleSpawner.PlayVehicleSpawnEffectFinished // (Final|Native|Protected) // @ game+0x2269e60
	void OnVehicleRefreshCheck(); // Function Solarland.SolarVehicleSpawner.OnVehicleRefreshCheck // (Final|Native|Protected) // @ game+0x2269c60
	void OnVehicleRefresh(); // Function Solarland.SolarVehicleSpawner.OnVehicleRefresh // (Final|Native|Protected) // @ game+0x2269c40
	void OnPreVehicleDriverGetOn(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarVehicleSpawner.OnPreVehicleDriverGetOn // (Final|Native|Protected) // @ game+0x2269ac0
	void OnPreVehicleDestroyed(struct AActor* DestroyedActor); // Function Solarland.SolarVehicleSpawner.OnPreVehicleDestroyed // (Final|Native|Protected) // @ game+0x2269a30
};

// Class Solarland.SolarVehicleSpringArmComponent
// Size: 0x440 (Inherited: 0x400)
struct USolarVehicleSpringArmComponent : USolarSpringArmComponent {
	struct USolarVehicleCameraComponent* VehicleCamera; // 0x3f8(0x08)
	struct ASolarVehiclePawn* VehiclePawn; // 0x400(0x08)
	char pad_410[0x30]; // 0x410(0x30)
};

// Class Solarland.SolarVehicleStateMachine
// Size: 0x98 (Inherited: 0x28)
struct USolarVehicleStateMachine : UObject {
	struct ASolarVehiclePawn* Owner; // 0x28(0x08)
	struct USolarLeggedVehicleMovement* MovementComponent; // 0x30(0x08)
	char pad_38[0x60]; // 0x38(0x60)
};

// Class Solarland.SolarVehicleSubsystem
// Size: 0xa0 (Inherited: 0x30)
struct USolarVehicleSubsystem : UWorldSubsystem {
	struct FMulticastInlineDelegate OnVehicleSpawned; // 0x30(0x10)
	struct FMulticastInlineDelegate OnVehicleDestroyed; // 0x40(0x10)
	char pad_50[0x50]; // 0x50(0x50)

	void GetActiveVehicleList(struct TArray<struct AActor*>& OutActiveVehicles); // Function Solarland.SolarVehicleSubsystem.GetActiveVehicleList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2269720
};

// Class Solarland.SolarVehicleWeakPointComponent
// Size: 0x600 (Inherited: 0x600)
struct USolarVehicleWeakPointComponent : UStaticMeshComponent {
};

// Class Solarland.SolarVibrateManager
// Size: 0xc0 (Inherited: 0x30)
struct USolarVibrateManager : USolarGameManager {
	char pad_30[0x20]; // 0x30(0x20)
	struct UGameplayVibrateDataAsset* GameplayVibrateDataAsset; // 0x50(0x08)
	struct TMap<enum class EGameplayVibrateCategory, enum class EGameplayVibrateIntensity> CurrentVibrateCategoryIntensity; // 0x58(0x50)
	struct UDataTable* WeaponVibrateTable; // 0xa8(0x08)
	struct UVibrateConfig* VibrateConfig; // 0xb0(0x08)
	enum class EWeaponVibrateFactor WeaponVibrateFactor; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	float CacheWeaponChargeTime; // 0xbc(0x04)

	void Stop(); // Function Solarland.SolarVibrateManager.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x226a5f0
	void SetWeaponVibrateFactor(); // Function Solarland.SolarVibrateManager.SetWeaponVibrateFactor // (Final|Native|Public) // @ game+0x226a5b0
	void SetVibrateAbilityEnable(bool bOnEnable); // Function Solarland.SolarVibrateManager.SetVibrateAbilityEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x226a520
	void SetGameplayVibrateIntensityByUserSetting(); // Function Solarland.SolarVibrateManager.SetGameplayVibrateIntensityByUserSetting // (Final|Native|Protected) // @ game+0x226a500
	void SetGameplayVibrateIntensity(enum class EGameplayVibrateCategory Category, enum class EGameplayVibrateIntensity Intensity); // Function Solarland.SolarVibrateManager.SetGameplayVibrateIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x226a430
	void SendLoopParam(int32_t Amplitude, int32_t Interval); // Function Solarland.SolarVibrateManager.SendLoopParam // (Final|Native|Public|BlueprintCallable) // @ game+0x226a020
	void PlayWeaponVibrate(int32_t InWeaponID, enum class EWeaponVibrateType InType, float InChargeTime); // Function Solarland.SolarVibrateManager.PlayWeaponVibrate // (Final|Native|Public) // @ game+0x2269e80
	void Play(struct FString Name, int32_t Duration, int32_t Loop, int32_t Priority, int32_t Interval, int32_t Amplitude); // Function Solarland.SolarVibrateManager.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x2269c80
	bool GetVibrateAbilityEnable(); // Function Solarland.SolarVibrateManager.GetVibrateAbilityEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x2269860
};

// Class Solarland.SolarVirtualBulletAKComponent
// Size: 0x510 (Inherited: 0x500)
struct USolarVirtualBulletAKComponent : UAkComponent {
	char pad_500[0x10]; // 0x500(0x10)
};

// Class Solarland.SolarVirtualBulletCollector
// Size: 0x160 (Inherited: 0xb0)
struct USolarVirtualBulletCollector : UActorComponent {
	struct ASolarWeapon* CacheWeapon; // 0xb0(0x08)
	struct ASolarCharacterBase* CacheCharacter; // 0xb8(0x08)
	struct UWorld* CacheWorld; // 0xc0(0x08)
	struct TArray<struct FSolarVirtualBullet> Bullets; // 0xc8(0x10)
	struct TArray<struct FSolarVirtualBullet> PendingBulletsInSimulated; // 0xd8(0x10)
	struct TArray<struct FSolarVirtualBullet> BulletsInSimulated; // 0xe8(0x10)
	struct TArray<struct FSolarVirtualBullet> BulletsInDedicatedServer; // 0xf8(0x10)
	char pad_108[0x50]; // 0x108(0x50)
	struct ASolarBullet* EffectBulletCDO; // 0x158(0x08)
};

// Class Solarland.SolarWarmGameComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USolarWarmGameComponent : UActorComponent {

	bool IsWarmGame(); // Function Solarland.SolarWarmGameComponent.IsWarmGame // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void GetAIPickResult(struct TArray<int32_t>& InCharactetIDs, int32_t& OutCharacterID, int32_t& OutSkinId); // Function Solarland.SolarWarmGameComponent.GetAIPickResult // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarWaterActorNew
// Size: 0x240 (Inherited: 0x238)
struct ASolarWaterActorNew : AStaticMeshActor {
	struct FSpawnedActorHandle CachedActorHandle; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)

	void OnExitWaterSurface(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarWaterActorNew.OnExitWaterSurface // (Final|Native|Protected) // @ game+0x2274a60
	void OnEnterWaterSurface(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarWaterActorNew.OnEnterWaterSurface // (Final|Native|Protected|HasOutParms) // @ game+0x2274840
	float GetWaterLineHeight(); // Function Solarland.SolarWaterActorNew.GetWaterLineHeight // (Final|Native|Public|Const) // @ game+0x2273700
};

// Class Solarland.ParticleLoopListener
// Size: 0x40 (Inherited: 0x28)
struct UParticleLoopListener : UObject {
	char pad_28[0x18]; // 0x28(0x18)

	void OnParticleFinished(struct UParticleSystemComponent* PS); // Function Solarland.ParticleLoopListener.OnParticleFinished // (Final|Native|Public) // @ game+0x2274ce0
};

// Class Solarland.SolarWeaponAbilityBlackHole
// Size: 0x6d0 (Inherited: 0x3e0)
struct ASolarWeaponAbilityBlackHole : ASummonItemBase {
	char pad_3E0[0x8]; // 0x3e0(0x08)
	struct USphereComponent* CoreComponent; // 0x3e8(0x08)
	struct TMap<struct TWeakObjectPtr<struct AActor>, struct FSolarBlackHoleTestActorInfo> TestActorMap; // 0x3f0(0x50)
	struct FName CoreTag; // 0x440(0x08)
	struct TArray<enum class EActorRegisterType> TestTypes; // 0x448(0x10)
	float TestRadius; // 0x458(0x04)
	float ForbidAttractiveDistance; // 0x45c(0x04)
	float AttractiveSpeedWhenNoInput; // 0x460(0x04)
	float AttractiveSpeedFactorForCharacterInWater; // 0x464(0x04)
	struct FRuntimeFloatCurve MaxAttractiveSpeedReduceCurve; // 0x468(0x88)
	struct FRuntimeFloatCurve AttractiveSpeedReduceAngleWeightCurve; // 0x4f0(0x88)
	struct FGameplayEffectSpecHandle ToSelfGameplayEffectHandle; // 0x578(0x10)
	struct FGameplayEffectSpecHandle ToTargetGameplayEffectHandle; // 0x588(0x10)
	struct TMap<enum class ESolarBlackHoleParticle, struct FSolarBlackHoleParticleInfo> ParticleInfoTable; // 0x598(0x50)
	char pad_5E8[0x10]; // 0x5e8(0x10)
	enum class ESolarBlackHoleState CurrentBlackHoleState; // 0x5f8(0x01)
	char pad_5F9[0xb]; // 0x5f9(0x0b)
	float BlackHoleReadyDuration; // 0x604(0x04)
	float BlackHoleActiveDuration; // 0x608(0x04)
	float BlackHoleEndDuration; // 0x60c(0x04)
	struct UGameplayEffect* ZeroSpeedGameplayEffectClass; // 0x610(0x08)
	struct FGameplayTag ForceAttractiveTag; // 0x618(0x08)
	struct TMap<struct AActor*, float> ClassTypeDamageValueMap; // 0x620(0x50)
	struct TArray<struct USplineComponent*> CardSplineArray; // 0x670(0x10)
	char pad_680[0x8]; // 0x680(0x08)
	struct TArray<struct AActor*> CardArray; // 0x688(0x10)
	char pad_698[0x8]; // 0x698(0x08)
	struct FVector CardStartLocation; // 0x6a0(0x0c)
	char pad_6AC[0xc]; // 0x6ac(0x0c)
	float CardSpeed; // 0x6b8(0x04)
	char pad_6BC[0x4]; // 0x6bc(0x04)
	struct AActor* CardClass; // 0x6c0(0x08)
	float DefaultCardPathLength; // 0x6c8(0x04)
	char pad_6CC[0x4]; // 0x6cc(0x04)

	void OnTestActorEndPlay(struct AActor* InActor, enum class EEndPlayReason InEndPlayReason); // Function Solarland.SolarWeaponAbilityBlackHole.OnTestActorEndPlay // (Final|Native|Protected) // @ game+0x227b840
};

// Class Solarland.SolarWeaponAbilityTemp
// Size: 0x320 (Inherited: 0x310)
struct ASolarWeaponAbilityTemp : ASolarAbility {
	struct UGameplayAbility* GameplayAbilityClass; // 0x308(0x08)
	struct FGameplayAbilitySpecHandle GameplayAbilitySpecHandle; // 0x310(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)
};

// Class Solarland.SolarWeaponAT_TaskBase
// Size: 0xb0 (Inherited: 0x80)
struct USolarWeaponAT_TaskBase : USolarAbilityTask {
	struct FMulticastInlineDelegate OnTaskEnd; // 0x80(0x10)
	struct UGameplayAbility* OwnerAbility; // 0x90(0x08)
	struct ASolarCharacter* TaskCharacter; // 0x98(0x08)
	struct UWeaponSystemBase* TaskWeaponSysBase; // 0xa0(0x08)
	char pad_A8[0x8]; // 0xa8(0x08)

	struct USolarWeaponAT_TaskBase* CreateTaskDynamically(struct USolarWeaponAT_TaskBase* RealClass, struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct ASolarCharacter* InCharacter); // Function Solarland.SolarWeaponAT_TaskBase.CreateTaskDynamically // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x227a070
};

// Class Solarland.SolarWeaponAT_CtrlFireBase
// Size: 0xc0 (Inherited: 0xb0)
struct USolarWeaponAT_CtrlFireBase : USolarWeaponAT_TaskBase {
	struct FMulticastInlineDelegate OnDoFire; // 0xb0(0x10)
};

// Class Solarland.SolarWeaponAT_CtrlFireCharge
// Size: 0xc0 (Inherited: 0xc0)
struct USolarWeaponAT_CtrlFireCharge : USolarWeaponAT_CtrlFireBase {
};

// Class Solarland.SolarWeaponAT_CtrlFireGatling
// Size: 0xc8 (Inherited: 0xc0)
struct USolarWeaponAT_CtrlFireGatling : USolarWeaponAT_CtrlFireBase {
	char pad_C0[0x8]; // 0xc0(0x08)
};

// Class Solarland.SolarWeaponAT_FireBase
// Size: 0xe0 (Inherited: 0xb0)
struct USolarWeaponAT_FireBase : USolarWeaponAT_TaskBase {
	char pad_B0[0x18]; // 0xb0(0x18)
	struct UAmmoConfig* Ammo; // 0xc8(0x08)
	char pad_D0[0x10]; // 0xd0(0x10)

	void K2_RequireEndFireTask(); // Function Solarland.SolarWeaponAT_FireBase.K2_RequireEndFireTask // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void K2_RealFireTick(float DeltaTime); // Function Solarland.SolarWeaponAT_FireBase.K2_RealFireTick // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void K2_PrepareRealFire(); // Function Solarland.SolarWeaponAT_FireBase.K2_PrepareRealFire // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void K2_ActivateRealFire(); // Function Solarland.SolarWeaponAT_FireBase.K2_ActivateRealFire // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarWeaponAT_FireBurst
// Size: 0x100 (Inherited: 0xe0)
struct USolarWeaponAT_FireBurst : USolarWeaponAT_FireBase {
	int32_t BurstMaxCount; // 0xe0(0x04)
	float BurstFireInterval; // 0xe4(0x04)
	float FireGroupInterval; // 0xe8(0x04)
	bool bAutoNextBurst; // 0xec(0x01)
	char pad_ED[0x13]; // 0xed(0x13)
};

// Class Solarland.WeaponFireLaserCollector
// Size: 0x240 (Inherited: 0xb0)
struct UWeaponFireLaserCollector : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct ASolarWeapon* OwnerWeapon; // 0xb8(0x08)
	struct UAkComponent* FireAkComponent; // 0xc0(0x08)
	struct UAkComponent* ImpactAkComponent; // 0xc8(0x08)
	struct FWeaponFireLaserElement ActElement; // 0xd0(0x48)
	struct TArray<struct FWeaponFireLaserElement> FadingElements; // 0x118(0x10)
	char pad_128[0x18]; // 0x128(0x18)
	struct UParticleSystem* ExplodeEffectParticle; // 0x140(0x08)
	struct UParticleSystem* DecalsEffectParticle; // 0x148(0x08)
	struct TArray<struct UParticleSystemComponent*> CacheParticles; // 0x150(0x10)
	char pad_160[0xe0]; // 0x160(0xe0)
};

// Class Solarland.SolarWeaponAT_FireLaser
// Size: 0x230 (Inherited: 0xe0)
struct USolarWeaponAT_FireLaser : USolarWeaponAT_FireBase {
	float LaserMaxTime; // 0xe0(0x04)
	int32_t DamageCount; // 0xe4(0x04)
	struct UGameplayEffect* VehicleBlockEffect; // 0xe8(0x08)
	struct UCurveFloat* LaserAttackCurve; // 0xf0(0x08)
	struct UParticleSystem* LaserEffectParticle; // 0xf8(0x08)
	struct UCurveFloat* LaserEffectCurve; // 0x100(0x08)
	struct UParticleSystem* ExplodeEffectParticle; // 0x108(0x08)
	struct FTransform ExplodeEffectTransform; // 0x110(0x30)
	struct UParticleSystem* DecalsEffectParticle; // 0x140(0x08)
	char pad_148[0x8]; // 0x148(0x08)
	struct FTransform DecalEffectTransform; // 0x150(0x30)
	float UpdateExplodeInterval; // 0x180(0x04)
	float UpdateSimInterval; // 0x184(0x04)
	float LaserEffectFadeSpeed; // 0x188(0x04)
	float MaxFadingLifeTime; // 0x18c(0x04)
	float UIAnimLength; // 0x190(0x04)
	char pad_194[0x4]; // 0x194(0x04)
	struct FString LaserFireSound; // 0x198(0x10)
	struct FString LaserStopSound; // 0x1a8(0x10)
	struct FString LaserBigSound; // 0x1b8(0x10)
	struct FString LaserImpactFireSound; // 0x1c8(0x10)
	struct FString LaserImpactStopSound; // 0x1d8(0x10)
	struct FString LaserImpactBigSound; // 0x1e8(0x10)
	bool bShowLaserDamageDebug; // 0x1f8(0x01)
	char pad_1F9[0x3]; // 0x1f9(0x03)
	struct FName BeamLifeTimeParamName; // 0x1fc(0x08)
	struct FName BeamSizeParamName; // 0x204(0x08)
	char pad_20C[0x24]; // 0x20c(0x24)

	struct USolarWeaponAT_FireLaser* CreateTask(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct ASolarCharacter* InCharacter); // Function Solarland.SolarWeaponAT_FireLaser.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2279f70
};

// Class Solarland.SolarWeaponAT_FireNormal
// Size: 0xe0 (Inherited: 0xe0)
struct USolarWeaponAT_FireNormal : USolarWeaponAT_FireBase {
};

// Class Solarland.SolarWeaponAT_FireRocket
// Size: 0x100 (Inherited: 0xe0)
struct USolarWeaponAT_FireRocket : USolarWeaponAT_FireBase {
	float PerRocketInterval; // 0xe0(0x04)
	float FireGroupInterval; // 0xe4(0x04)
	struct ASolarVehicleRocketLauncherWeapon* RocketLauncherWeapon; // 0xe8(0x08)
	char pad_F0[0x10]; // 0xf0(0x10)
};

// Class Solarland.SolarWeaponAT_FireSingle
// Size: 0xe8 (Inherited: 0xe0)
struct USolarWeaponAT_FireSingle : USolarWeaponAT_FireBase {
	bool bAutoNextFire; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
};

// Class Solarland.SolarWeaponAT_FireSkill
// Size: 0xe0 (Inherited: 0xe0)
struct USolarWeaponAT_FireSkill : USolarWeaponAT_FireBase {
};

// Class Solarland.SolarWeaponAT_FireSummon
// Size: 0xe8 (Inherited: 0xe0)
struct USolarWeaponAT_FireSummon : USolarWeaponAT_FireBase {
	char pad_E0[0x8]; // 0xe0(0x08)
};

// Class Solarland.SolarWeaponAT_WaitStateForEvent
// Size: 0xb8 (Inherited: 0x80)
struct USolarWeaponAT_WaitStateForEvent : USolarAbilityTask {
	char pad_80[0x38]; // 0x80(0x38)
};

// Class Solarland.SolarWeaponBattleWidgetMobile
// Size: 0x620 (Inherited: 0x348)
struct USolarWeaponBattleWidgetMobile : USolarUserWidget {
	struct TArray<struct UUserWidget*> WeaponSlotWidgets; // 0x348(0x10)
	struct TMap<struct FString, struct UWidget*> ExcelLayoutWidgetMap; // 0x358(0x50)
	struct TMap<int32_t, struct FString> CharacterStateMap; // 0x3a8(0x50)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> CurrentActivedPlayerWeapon; // 0x3f8(0x08)
	int32_t SkillCDTimeTextLocalizationID; // 0x400(0x04)
	char pad_404[0xa4]; // 0x404(0xa4)
	struct UExpWidget* WP_Exp; // 0x4a8(0x08)
	struct USolarWeaponSkillWidget* FireActiveControl; // 0x4b0(0x08)
	struct USolarMovablePad* SecondaryFirePad; // 0x4b8(0x08)
	struct UImage* SecondaryFireIcon; // 0x4c0(0x08)
	struct UWidgetSwitcher* WGS_Fire_Left; // 0x4c8(0x08)
	struct UButton* BT_Weapon_Exit; // 0x4d0(0x08)
	struct UButton* Btn_RoleAbility_Cancel; // 0x4d8(0x08)
	struct URoleSkillWidget* SuperSkill; // 0x4e0(0x08)
	struct URoleSkillWidget* TacticalSkill; // 0x4e8(0x08)
	struct UButton* BT_Fire_Left; // 0x4f0(0x08)
	struct UButton* BT_AutoScopeFire_Left; // 0x4f8(0x08)
	struct UButton* BT_Cancel_Left; // 0x500(0x08)
	struct UButton* BT_Cancel_Right; // 0x508(0x08)
	struct UButton* BT_Cancel_QuickAds; // 0x510(0x08)
	struct UButton* BT_Reload_2; // 0x518(0x08)
	struct USolarMovablePad* GunsightPad; // 0x520(0x08)
	struct UCheckBox* GunsightImageCheckBox; // 0x528(0x08)
	struct UCanvasPanel* Panel_Fire_Right; // 0x530(0x08)
	struct UCanvasPanel* Panel_QuickADS; // 0x538(0x08)
	struct UWidgetSwitcher* WGS_QuickAds; // 0x540(0x08)
	struct UWidgetSwitcher* WGS_Fire_Right; // 0x548(0x08)
	struct USolarMovablePad* QuickAdsFirePad; // 0x550(0x08)
	struct UCanvasPanel* Panel_Fire; // 0x558(0x08)
	struct UCanvasPanel* Panel_Reload; // 0x560(0x08)
	struct UCanvasPanel* Panel_Gunsight; // 0x568(0x08)
	struct UCanvasPanel* Panel_Weapon_2; // 0x570(0x08)
	struct UCanvasPanel* Panel_Weapon_3; // 0x578(0x08)
	struct UCanvasPanel* Panel_SuperSkill; // 0x580(0x08)
	struct UCanvasPanel* Panel_TacticalSkill; // 0x588(0x08)
	struct UImage* FireIconRight; // 0x590(0x08)
	struct UImage* FireIconLeft; // 0x598(0x08)
	struct USolarMovablePad* FirePadRight; // 0x5a0(0x08)
	struct USolarMovablePad* AutoScopeFirePadRight; // 0x5a8(0x08)
	struct USolarWeaponSlotWidgetMobile* WP_Slot0; // 0x5b0(0x08)
	struct USolarWeaponSlotWidgetMobile* WP_Slot1; // 0x5b8(0x08)
	struct USolarWeaponSlotWidgetMobile* WP_Slot2; // 0x5c0(0x08)
	struct UWidgetAnimation* Enter_Anim; // 0x5c8(0x08)
	struct UWidgetAnimation* Exit_Anim; // 0x5d0(0x08)
	struct UCanvasPanel* Weapon_UI; // 0x5d8(0x08)
	struct USolarTextBlock* Txt_NextLvDMG; // 0x5e0(0x08)
	struct UCanvasPanel* Panel_NextLv_Content; // 0x5e8(0x08)
	char pad_5F0[0x8]; // 0x5f0(0x08)
	struct USolarAdapterWidget* Panel_Weapon_1_KeyMapping; // 0x5f8(0x08)
	struct USolarAdapterWidget* Panel_Weapon_2_KeyMapping; // 0x600(0x08)
	struct USolarAdapterWidget* Panel_Weapon_3_KeyMapping; // 0x608(0x08)
	struct TArray<struct USolarAdapterWidget*> WeaponKeyMappingArray; // 0x610(0x10)

	void SetWidgetVisiblityByCharacterState(int32_t InCharacterState); // Function Solarland.SolarWeaponBattleWidgetMobile.SetWidgetVisiblityByCharacterState // (Final|Native|Public) // @ game+0x227c470
	void SetWidgetVisiblityByActionID(int32_t InActionID, bool InbVisible); // Function Solarland.SolarWeaponBattleWidgetMobile.SetWidgetVisiblityByActionID // (Final|Native|Public) // @ game+0x227c3a0
	void OnWeaponUpgrade(struct ASolarPlayerWeapon* InPlayerWeapon); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponUpgrade // (Final|Native|Protected) // @ game+0x227c310
	void OnWeaponSlotUpdateParts(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotUpdateParts // (Final|Native|Protected) // @ game+0x227c280
	void OnWeaponSlotUpdateAmmo(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotUpdateAmmo // (Final|Native|Protected) // @ game+0x227c1f0
	void OnWeaponSlotToggleOverload(int32_t InWeaponSlotID, bool InbEnter); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotToggleOverload // (Final|Native|Protected) // @ game+0x227c120
	void OnWeaponSlotSetSkillPoint(int32_t InWeaponSlotID, bool InbCDFinished, int32_t InSkillPoint); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotSetSkillPoint // (Final|Native|Protected) // @ game+0x227c010
	void OnWeaponSlotQuitReload(int32_t InWeaponSlotID, bool InbFinishReload); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotQuitReload // (Final|Native|Protected) // @ game+0x227bf40
	void OnWeaponSlotInsufficientAmmo(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotInsufficientAmmo // (Final|Native|Protected) // @ game+0x227beb0
	void OnWeaponSlotEquip(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotEquip // (Final|Native|Protected) // @ game+0x227bde0
	void OnWeaponSlotEnterSkillCD(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotEnterSkillCD // (Final|Native|Protected) // @ game+0x227bd50
	void OnWeaponSlotEnterReload(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotEnterReload // (Final|Native|Protected) // @ game+0x227bcc0
	void OnWeaponSlotAddEXP(int32_t InWeaponSlotID, int32_t InExp); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotAddEXP // (Final|Native|Protected) // @ game+0x227bbf0
	void OnWeaponSlotActive(int32_t InWeaponSlotID, struct AActor* InActiveWeapon); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotActive // (Final|Native|Protected) // @ game+0x227bb20
	void OnWeaponSetScopeButtonRotatableEvent(bool bInCanRotate); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSetScopeButtonRotatableEvent // (Final|Native|Protected) // @ game+0x227ba90
	void OnWeaponSetAutoScopeFireButtonIcon(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSetAutoScopeFireButtonIcon // (Final|Native|Protected) // @ game+0x227ba70
	void OnWeaponRefreshFireButtonState(struct UWeaponSystemPlayerBase* WeaponSys, bool bInForceRefresh); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponRefreshFireButtonState // (Final|Native|Protected) // @ game+0x227b9a0
	void OnWeaponChangeAimIconState(bool bInOpenScope); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponChangeAimIconState // (Final|Native|Protected) // @ game+0x227b910
	void OnSwitchEMP(struct ASolarCharacter* InCharacter, bool InbSwitchOnEMP); // Function Solarland.SolarWeaponBattleWidgetMobile.OnSwitchEMP // (Final|Native|Protected) // @ game+0x227b770
	void OnRoleAbilityHideHUD(bool bHide); // Function Solarland.SolarWeaponBattleWidgetMobile.OnRoleAbilityHideHUD // (Final|Native|Protected) // @ game+0x227b6e0
	void OnReleasedSkillCancelButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedSkillCancelButton // (Final|Native|Protected) // @ game+0x227b6c0
	void OnReleasedSkillButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedSkillButton // (Final|Native|Protected|HasOutParms) // @ game+0x227b520
	void OnReleasedRighrFireButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedRighrFireButton // (Final|Native|Protected|HasOutParms) // @ game+0x227b380
	void OnReleasedReloadeButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedReloadeButton // (Final|Native|Protected) // @ game+0x227b360
	void OnReleasedQuickAdsButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedQuickAdsButton // (Final|Native|Protected|HasOutParms) // @ game+0x227b1c0
	void OnReleasedLeftFireButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedLeftFireButton // (Final|Native|Protected) // @ game+0x227b1a0
	void OnReleasedCancelRightButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedCancelRightButton // (Final|Native|Protected) // @ game+0x227b180
	void OnReleasedCancelQuickAdsButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedCancelQuickAdsButton // (Final|Native|Protected) // @ game+0x227b160
	void OnReleasedAllFireButtons(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedAllFireButtons // (Final|Native|Protected) // @ game+0x227b140
	void OnPressedSkillCancelButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedSkillCancelButton // (Final|Native|Protected) // @ game+0x227b120
	void OnPressedSkillButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedSkillButton // (Final|Native|Protected|HasOutParms) // @ game+0x227af80
	void OnPressedRightFireButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedRightFireButton // (Final|Native|Protected|HasOutParms) // @ game+0x227ade0
	void OnPressedReloadButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedReloadButton // (Final|Native|Protected) // @ game+0x227adc0
	void OnPressedQuickAdsButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedQuickAdsButton // (Final|Native|Protected|HasOutParms) // @ game+0x227ac20
	void OnPressedLeftFireButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedLeftFireButton // (Final|Native|Protected) // @ game+0x227ac00
	void OnPressedGunSightButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedGunSightButton // (Final|Native|Protected|HasOutParms) // @ game+0x227aa60
	void OnPressedCancelRightButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedCancelRightButton // (Final|Native|Protected) // @ game+0x227aa40
	void OnPressedCancelQuickAdsButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedCancelQuickAdsButton // (Final|Native|Protected) // @ game+0x227aa20
	void OnExitSpectateMode(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnExitSpectateMode // (Final|Native|Protected) // @ game+0x2003a10
	void OnEnterSpectateMode(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnEnterSpectateMode // (Final|Native|Protected) // @ game+0x1fb1b30
	void OnEnterParachuting(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnEnterParachuting // (Final|Native|Protected) // @ game+0x227aa00
	void OnEnterCruising(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnEnterCruising // (Final|Native|Protected) // @ game+0x227a9e0
	void OnControllerCharacterSet(struct ASolarCharacter* ControlledCharacter); // Function Solarland.SolarWeaponBattleWidgetMobile.OnControllerCharacterSet // (Final|Native|Protected) // @ game+0x227a950
	void OnChangeSkydiveFlyState(struct ASolarCharacter* InCharacter); // Function Solarland.SolarWeaponBattleWidgetMobile.OnChangeSkydiveFlyState // (Final|Native|Protected) // @ game+0x227a8c0
	void OnChangeDriveState(enum class EDriveState InDriveState); // Function Solarland.SolarWeaponBattleWidgetMobile.OnChangeDriveState // (Final|Native|Protected) // @ game+0x227a840
	void OnChangeCharacterSwimState(bool InbSwmming); // Function Solarland.SolarWeaponBattleWidgetMobile.OnChangeCharacterSwimState // (Final|Native|Protected) // @ game+0x227a7b0
	bool IsAutoFire(); // Function Solarland.SolarWeaponBattleWidgetMobile.IsAutoFire // (Final|Native|Protected|Const) // @ game+0x227a780
	struct TArray<struct UUserWidget*> GetWeaponWidgets(); // Function Solarland.SolarWeaponBattleWidgetMobile.GetWeaponWidgets // (Native|Event|Protected|BlueprintEvent) // @ game+0x227a700
	bool GetSkillPointData(struct AActor* InWeapon, bool& OutbCD, int32_t& OutSkillPoint, int32_t& OutSkillMaxPoint); // Function Solarland.SolarWeaponBattleWidgetMobile.GetSkillPointData // (Final|Native|Protected|HasOutParms) // @ game+0x227a560
	bool GetSkillButtonBrush(struct AActor* InWeapon, struct FSlateBrush& OutBrush); // Function Solarland.SolarWeaponBattleWidgetMobile.GetSkillButtonBrush // (Final|Native|Protected|HasOutParms) // @ game+0x227a390
	bool GetFireButtonBrush(struct AActor* InWeapon, struct FSlateBrush& OutBrush); // Function Solarland.SolarWeaponBattleWidgetMobile.GetFireButtonBrush // (Final|Native|Protected|HasOutParms) // @ game+0x227a1c0
};

// Class Solarland.SolarWeaponBattleWidgetPC
// Size: 0x450 (Inherited: 0x348)
struct USolarWeaponBattleWidgetPC : USolarUserWidget {
	struct UImage* SecondaryFireIcon; // 0x348(0x08)
	struct UUserWidget* UI_Component_Keyboard; // 0x350(0x08)
	struct UWidgetActiveControl* FireActiveControl; // 0x358(0x08)
	struct USolarWeaponSlotWidgetPC* WP_Slot0; // 0x360(0x08)
	struct USolarWeaponSlotWidgetPC* WP_Slot1; // 0x368(0x08)
	struct USolarWeaponSlotWidgetPC* WP_Slot2; // 0x370(0x08)
	struct UHorizontalBox* Tips_Reload; // 0x378(0x08)
	struct USolarTextBlock* SolarTextBlock_2; // 0x380(0x08)
	float DisplayReloadTipAmmoRate; // 0x388(0x04)
	float DisplayReloadTipDuration; // 0x38c(0x04)
	struct FSlateColor CanReloadTipColor; // 0x390(0x28)
	struct FSlateColor CannotReloadTipColor; // 0x3b8(0x28)
	char pad_3E0[0x40]; // 0x3e0(0x40)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> CurrentActiveWeapon; // 0x420(0x08)
	struct TArray<struct USolarWeaponSlotWidgetPC*> WeaponSlotWidgets; // 0x428(0x10)
	bool bCanDisplayReloadTip; // 0x438(0x01)
	char pad_439[0x7]; // 0x439(0x07)
	struct FTimerHandle ReloadTipTimerHandle; // 0x440(0x08)
	struct FTimerHandle UpdateWeaponSkillCDTimerHandle; // 0x448(0x08)

	void OnUpdateWeaponParts(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetPC.OnUpdateWeaponParts // (Final|Native|Private) // @ game+0x227f070
	void OnUpdateAmmo(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetPC.OnUpdateAmmo // (Final|Native|Private) // @ game+0x227efe0
	void OnSetSkillPoint(int32_t InWeaponSlotID, bool InbSkillCDEnd, int32_t InSkillPoint); // Function Solarland.SolarWeaponBattleWidgetPC.OnSetSkillPoint // (Final|Native|Private) // @ game+0x227eed0
	void OnQuitReload(int32_t InWeaponSlotID, bool InbFinishReload); // Function Solarland.SolarWeaponBattleWidgetPC.OnQuitReload // (Final|Native|Private) // @ game+0x227ee00
	void OnEquipWeapon(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarWeaponBattleWidgetPC.OnEquipWeapon // (Final|Native|Private) // @ game+0x227ed30
	void OnEnterSkillCD(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetPC.OnEnterSkillCD // (Final|Native|Private) // @ game+0x227eca0
	void OnEnterReload(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetPC.OnEnterReload // (Final|Native|Private) // @ game+0x227ec10
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.SolarWeaponBattleWidgetPC.OnDrivingStateChanged // (Final|Native|Private) // @ game+0x227eb90
	void OnActiveWeapon(int32_t InWeaponSlotID, struct AActor* InActiveWeapon); // Function Solarland.SolarWeaponBattleWidgetPC.OnActiveWeapon // (Final|Native|Private) // @ game+0x227eac0
};

// Class Solarland.SolarWeaponCrosshairPanelWidget
// Size: 0x440 (Inherited: 0x348)
struct USolarWeaponCrosshairPanelWidget : USolarUserWidget {
	struct UUserWidget* HUD_Reload; // 0x348(0x08)
	struct UImage* HUD_Forbid; // 0x350(0x08)
	struct UWidgetSwitcher* HUD_Overload; // 0x358(0x08)
	struct UUserWidget* HUD_ChargeProgress; // 0x360(0x08)
	struct UFeedbackWidget* HUD_Feedback; // 0x368(0x08)
	struct UCanvasPanel* Panel_CrosshairSlot; // 0x370(0x08)
	struct UCanvasPanel* Panel_BulletContainerSlot; // 0x378(0x08)
	struct USolarWeaponNoAmmoAlertWidget* HUD_NoAmmoAlert; // 0x380(0x08)
	struct USolarWeaponNoAmmoAlertWidget* HUD_RechamberHint; // 0x388(0x08)
	struct TMap<struct UUserWidget*, struct UUserWidget*> CrosshairWidgetPool; // 0x390(0x50)
	struct FSolarWeaponCrosshairData CurrentWeaponCrosshairData; // 0x3e0(0x38)
	struct UCrossHairWidget* ActiveCrosshair; // 0x418(0x08)
	struct USolarWeaponBulletContainerWidget* ActiveBulletContainer; // 0x420(0x08)
	struct USolarWeaponRechamberWidget* ActiveRechamberWidget; // 0x428(0x08)
	enum class ECrossHairState CurrentCrosshairState; // 0x430(0x01)
	enum class ECrossHairState LastCrosshairState; // 0x431(0x01)
	char pad_432[0xe]; // 0x432(0x0e)

	void RemoveWeaponWidget(struct UUserWidget* CrosshairWidgetToRemove, bool bInRemainCache); // Function Solarland.SolarWeaponCrosshairPanelWidget.RemoveWeaponWidget // (Final|Native|Public) // @ game+0x227f190
	void RemoveActiveWeaponWidget(bool bRemianCache); // Function Solarland.SolarWeaponCrosshairPanelWidget.RemoveActiveWeaponWidget // (Final|Native|Public) // @ game+0x227f100
	void ClearAllWeaponWidget(); // Function Solarland.SolarWeaponCrosshairPanelWidget.ClearAllWeaponWidget // (Final|Native|Public) // @ game+0x227ea40
	struct UUserWidget* AddWeaponRechamberWidgetToPanel(struct UUserWidget* InWidgetClass); // Function Solarland.SolarWeaponCrosshairPanelWidget.AddWeaponRechamberWidgetToPanel // (Final|Native|Public) // @ game+0x227e9a0
	struct UUserWidget* AddWeaponCrosshairToPanel(struct UUserWidget* InWidgetClass); // Function Solarland.SolarWeaponCrosshairPanelWidget.AddWeaponCrosshairToPanel // (Final|Native|Public) // @ game+0x227e900
	void AddWeaponCrosshairAndBulletContainer(struct AActor* InWeapon, struct FSolarWeaponCrosshairData& InWeaponCrosshairData); // Function Solarland.SolarWeaponCrosshairPanelWidget.AddWeaponCrosshairAndBulletContainer // (Final|Native|Public|HasOutParms) // @ game+0x227e7c0
	struct UUserWidget* AddWeaponBulletContainerToPanel(struct UUserWidget* InWidgetClass); // Function Solarland.SolarWeaponCrosshairPanelWidget.AddWeaponBulletContainerToPanel // (Final|Native|Public) // @ game+0x227e720
};

// Class Solarland.SolarWeaponFireInputResolver
// Size: 0x88 (Inherited: 0x28)
struct USolarWeaponFireInputResolver : UObject {
	char pad_28[0x60]; // 0x28(0x60)

	enum class ESolarWeaponFireInputButtonState GetRightFireButtonState(); // Function Solarland.SolarWeaponFireInputResolver.GetRightFireButtonState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x227eaa0
	enum class ESolarWeaponFireInputButtonState GetQuickAdsButtonState(); // Function Solarland.SolarWeaponFireInputResolver.GetQuickAdsButtonState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x227ea80
	enum class ESolarWeaponFireInputButtonState GetLeftFireButtonState(); // Function Solarland.SolarWeaponFireInputResolver.GetLeftFireButtonState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x227ea60
};

// Class Solarland.SolarWeaponGA_Rocket
// Size: 0x4a8 (Inherited: 0x460)
struct USolarWeaponGA_Rocket : USolarCharacterGameplayAbility {
	struct FGameplayTag CueTag; // 0x460(0x08)
	float LifeTime; // 0x468(0x04)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct FTimerHandle LifeTimeEndTimerHandle; // 0x470(0x08)
	enum class ESkillAnimType SkillAnimType; // 0x478(0x01)
	char pad_479[0x3]; // 0x479(0x03)
	float DelayEndAbilityTime; // 0x47c(0x04)
	struct UUserWidget* InCrossHairClass; // 0x480(0x08)
	struct ASolarBurstRocketBullet* BurstBulletClass; // 0x488(0x08)
	struct ASolarBurstRocketBullet* CacheBurstBullet; // 0x490(0x08)
	char pad_498[0x8]; // 0x498(0x08)
	struct UCrossHairWidget* CrossHairWidget; // 0x4a0(0x08)

	void SetLifeTime(float InLifeTime); // Function Solarland.SolarWeaponGA_Rocket.SetLifeTime // (Final|Native|Public|BlueprintCallable) // @ game+0x227f260
	void OnStartRocketAbility(struct ASolarCharacter* Character); // Function Solarland.SolarWeaponGA_Rocket.OnStartRocketAbility // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnEndRocketAbility(struct ASolarCharacter* Character); // Function Solarland.SolarWeaponGA_Rocket.OnEndRocketAbility // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarWeaponGameplayAbility
// Size: 0x428 (Inherited: 0x418)
struct USolarWeaponGameplayAbility : USolarGameplayAbility {
	struct FGameplayTag CueTag; // 0x418(0x08)
	float LifeTime; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)

	void SetLifeTime(float InLifeTime); // Function Solarland.SolarWeaponGameplayAbility.SetLifeTime // (Final|Native|Public|BlueprintCallable) // @ game+0x2282a00
};

// Class Solarland.SolarWeaponInternalSetting
// Size: 0xb0 (Inherited: 0x38)
struct USolarWeaponInternalSetting : UDeveloperSettings {
	struct FSoftObjectPath GlobalWeaponConfig; // 0x38(0x18)
	struct FSoftObjectPath UnArmWeaponClassPath; // 0x50(0x18)
	struct FSoftObjectPath WeaponDataTable; // 0x68(0x18)
	struct FSoftObjectPath WeaponAppearanceDataTable; // 0x80(0x18)
	struct FSoftObjectPath DefaultProjectileSplineClassPath; // 0x98(0x18)
};

// Class Solarland.SolarWeaponMergeMeshManager
// Size: 0x38 (Inherited: 0x28)
struct USolarWeaponMergeMeshManager : UObject {
	struct TArray<struct FWeaponMergeMeshStruct> MergeMeshArray; // 0x28(0x10)
};

// Class Solarland.SolarWeaponNoAmmoAlertWidget
// Size: 0x398 (Inherited: 0x348)
struct USolarWeaponNoAmmoAlertWidget : USolarUserWidget {
	struct TMap<enum class EWeaponType, struct FSolarNoAmmoAlertWidgetLayout> NoAmmoAlertLayout; // 0x348(0x50)

	struct UWidgetAnimation* K2_GetAlertAnim(); // Function Solarland.SolarWeaponNoAmmoAlertWidget.K2_GetAlertAnim // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarWeaponPartEffectTipWidget
// Size: 0x388 (Inherited: 0x348)
struct USolarWeaponPartEffectTipWidget : USolarUserWidget {
	struct UWidgetAnimation* Anim_Bubble_UP; // 0x348(0x08)
	struct UWidgetAnimation* Anim_Bubble_Down; // 0x350(0x08)
	struct UWidgetAnimation* Anim_Exit_UP; // 0x358(0x08)
	struct UWidgetAnimation* Anim_Exit_Down; // 0x360(0x08)
	struct USolarTextBlock* Txt_Effect; // 0x368(0x08)
	struct USolarTextBlock* Txt_Percent; // 0x370(0x08)
	bool bTipToUp; // 0x378(0x01)
	char pad_379[0x3]; // 0x379(0x03)
	float TipDuration; // 0x37c(0x04)
	float TipTimer; // 0x380(0x04)
	bool bContinueShowTip; // 0x384(0x01)
	bool bPlayExitAnimation; // 0x385(0x01)
	char pad_386[0x2]; // 0x386(0x02)

	void ChangeTipDirection(bool InbToUp); // Function Solarland.SolarWeaponPartEffectTipWidget.ChangeTipDirection // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarWeaponPenertrableInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarWeaponPenertrableInterface : UInterface {

	void ReceiveHitResult(struct FHitResult& InHitResult); // Function Solarland.SolarWeaponPenertrableInterface.ReceiveHitResult // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2282920
};

// Class Solarland.SolarWeaponProjectileSpline
// Size: 0x250 (Inherited: 0x228)
struct ASolarWeaponProjectileSpline : AActor {
	struct USplineComponent* Spline; // 0x228(0x08)
	char pad_230[0x8]; // 0x230(0x08)
	struct USplineMeshComponent* SplineMeshComponentCache; // 0x238(0x08)
	struct UStaticMeshComponent* PreviewedStaticMesh; // 0x240(0x08)
	struct USceneComponent* PreviewRoot; // 0x248(0x08)

	void ShowHitPointAt(struct FVector& Loc); // Function Solarland.SolarWeaponProjectileSpline.ShowHitPointAt // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x25d85b0
	void SetPreviewTransform(struct FVector& PreviewLoc, struct FVector& PreviewUpDir, struct FVector& PreviewScale); // Function Solarland.SolarWeaponProjectileSpline.SetPreviewTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2282b10
	void SetPoints(struct TArray<struct FVector>& Points); // Function Solarland.SolarWeaponProjectileSpline.SetPoints // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void SetNeedUpdateDisplayThrowTrajectory(bool Value); // Function Solarland.SolarWeaponProjectileSpline.SetNeedUpdateDisplayThrowTrajectory // (Final|Native|Public|BlueprintCallable) // @ game+0x2282a80
	void K2_OnDisplaySummonPreview(); // Function Solarland.SolarWeaponProjectileSpline.K2_OnDisplaySummonPreview // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void HideHitPoint(); // Function Solarland.SolarWeaponProjectileSpline.HideHitPoint // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void HideAllSummonPreview(); // Function Solarland.SolarWeaponProjectileSpline.HideAllSummonPreview // (Native|Event|Public|BlueprintEvent) // @ game+0x1554600
	void Hide(); // Function Solarland.SolarWeaponProjectileSpline.Hide // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct USplineMeshComponent* GetSplineMeshComponent(); // Function Solarland.SolarWeaponProjectileSpline.GetSplineMeshComponent // (Event|Protected|BlueprintEvent|Const) // @ game+0x25d85b0
	void DrawSplineMesh(struct TArray<struct FVector>& InPredictPoints); // Function Solarland.SolarWeaponProjectileSpline.DrawSplineMesh // (Final|Native|Public|HasOutParms) // @ game+0x2281af0
	void ChangeSummonPreviewAttachParent(); // Function Solarland.SolarWeaponProjectileSpline.ChangeSummonPreviewAttachParent // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarWeaponPropertySlotWidget
// Size: 0x3b8 (Inherited: 0x348)
struct USolarWeaponPropertySlotWidget : USolarUserWidget {
	struct TArray<struct UWidget*> LockWidgetsCache; // 0x348(0x10)
	struct UImage* PropertyIconBackgroundCache; // 0x358(0x08)
	struct UImage* PropertyIconBorderCache; // 0x360(0x08)
	struct UImage* PropertyIconCache; // 0x368(0x08)
	struct FSoftObjectPath PropertyEmptyIconPath; // 0x370(0x18)
	struct FLinearColor PropertyIconBorderInvalidColor; // 0x388(0x10)
	struct FLinearColor PropertyIconBackgroundInvalidColor; // 0x398(0x10)
	struct FLinearColor PropertyIconBackgroundValidColor; // 0x3a8(0x10)

	void UpdatePropertySlot(struct FUpgradeSlotStruct& InSlotData); // Function Solarland.SolarWeaponPropertySlotWidget.UpdatePropertySlot // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2282e20
	struct UImage* GetPropertyIconCache(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconCache // (Final|Native|Protected|BlueprintCallable) // @ game+0x2281f50
	struct UImage* GetPropertyIconBorderCache(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconBorderCache // (Final|Native|Protected|BlueprintCallable) // @ game+0x2281f20
	struct UImage* GetPropertyIconBorder(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconBorder // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct UImage* GetPropertyIconBackgroundCache(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconBackgroundCache // (Final|Native|Protected|BlueprintCallable) // @ game+0x2281ef0
	struct UImage* GetPropertyIconBackground(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconBackground // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct UImage* GetPropertyIcon(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIcon // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct TArray<struct UWidget*> GetLockWidgetsCache(); // Function Solarland.SolarWeaponPropertySlotWidget.GetLockWidgetsCache // (Final|Native|Protected|BlueprintCallable) // @ game+0x2281e70
	struct TArray<struct UWidget*> GetLockWidgets(); // Function Solarland.SolarWeaponPropertySlotWidget.GetLockWidgets // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.SolarWeaponRechamberWidget
// Size: 0x360 (Inherited: 0x348)
struct USolarWeaponRechamberWidget : USolarUserWidget {
	struct UImage* img_FireCD; // 0x348(0x08)
	struct UWidgetAnimation* EmptyBullet_Anim; // 0x350(0x08)
	struct UMaterialInstanceDynamic* ProgressMaterial; // 0x358(0x08)
};

// Class Solarland.WidgetActiveControl
// Size: 0x448 (Inherited: 0x348)
struct UWidgetActiveControl : USolarUserWidget {
	struct UNamedSlot* ControlledWidget; // 0x348(0x08)
	struct UImage* Progress_Grid; // 0x350(0x08)
	struct UImage* BT_CD_Prompt; // 0x358(0x08)
	struct UImage* BT_Mask_Grid_Forbidden; // 0x360(0x08)
	struct UImage* BT_Icon_Grid_Forbidden; // 0x368(0x08)
	struct USolarTextBlock* BT_Txt_CD; // 0x370(0x08)
	struct UGaugeImage* Progress_CD_Mask; // 0x378(0x08)
	struct UCanvasPanel* LightAngel; // 0x380(0x08)
	struct UImage* img_Quick; // 0x388(0x08)
	struct UWidgetAnimation* Anim_BT_CD_Prompt; // 0x390(0x08)
	struct UWidgetAnimation* Anim_Loop_Lightning; // 0x398(0x08)
	struct UWidgetAnimation* Anim_Loop_Flicker; // 0x3a0(0x08)
	struct UMaterialInterface* GridSource; // 0x3a8(0x08)
	struct UObject* CDMaskSource; // 0x3b0(0x08)
	struct UMaterialInterface* PromptSource; // 0x3b8(0x08)
	struct UObject* ForbiddenIconSource; // 0x3c0(0x08)
	struct UObject* ForbiddenMaskSource; // 0x3c8(0x08)
	bool bUseEnableForActive; // 0x3d0(0x01)
	char pad_3D1[0x3]; // 0x3d1(0x03)
	int32_t GridNumber; // 0x3d4(0x04)
	int32_t CDTimerPrecision; // 0x3d8(0x04)
	float GridConsumedEffectSpeed; // 0x3dc(0x04)
	struct FLinearColor CDTxtColorSpeedup; // 0x3e0(0x10)
	struct FLinearColor CDTxtColorNormal; // 0x3f0(0x10)
	struct UTextBlock* GridCountTextBlockCache; // 0x400(0x08)
	struct UCanvasPanel* PanelDisableCache; // 0x408(0x08)
	char pad_410[0x10]; // 0x410(0x10)
	bool bWidgetActive; // 0x420(0x01)
	char pad_421[0x7]; // 0x421(0x07)
	struct UMaterialInstanceDynamic* GridMaterial; // 0x428(0x08)
	bool bNeedUpdateGrid; // 0x430(0x01)
	bool bNeedUpdateGridEffect; // 0x431(0x01)
	char pad_432[0x2]; // 0x432(0x02)
	float GridPercent; // 0x434(0x04)
	float GridEffectPercent; // 0x438(0x04)
	bool bGridVisualForbidden; // 0x43c(0x01)
	bool bNeedUpdateCD; // 0x43d(0x01)
	char pad_43E[0x2]; // 0x43e(0x02)
	float CDPercent; // 0x440(0x04)
	bool bCDVisualForbidden; // 0x444(0x01)
	bool bPlayingCDAnim; // 0x445(0x01)
	char pad_446[0x2]; // 0x446(0x02)

	void UpdateGridPercent(float Percent); // Function Solarland.WidgetActiveControl.UpdateGridPercent // (Final|Native|Protected|BlueprintCallable) // @ game+0x22cac40
	void UpdateGridEffectPercent(float Percent); // Function Solarland.WidgetActiveControl.UpdateGridEffectPercent // (Final|Native|Protected|BlueprintCallable) // @ game+0x22cabc0
	void UpdateCDText(struct FString Value); // Function Solarland.WidgetActiveControl.UpdateCDText // (Final|Native|Public|BlueprintCallable) // @ game+0x22cab20
	void UpdateCDFloatAsText(float Value); // Function Solarland.WidgetActiveControl.UpdateCDFloatAsText // (Final|Native|Protected|BlueprintCallable) // @ game+0x22caaa0
	void UpdateCD(float Percent); // Function Solarland.WidgetActiveControl.UpdateCD // (Final|Native|Protected|BlueprintCallable) // @ game+0x22caa20
	void StopUpdateGrid(); // Function Solarland.WidgetActiveControl.StopUpdateGrid // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1548190
	void StopCD(bool bPlayPrompt); // Function Solarland.WidgetActiveControl.StopCD // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x22ca930
	void StartUpdateGrid(); // Function Solarland.WidgetActiveControl.StartUpdateGrid // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1548090
	void StartCD(); // Function Solarland.WidgetActiveControl.StartCD // (Final|Native|Public|BlueprintCallable) // @ game+0x22ca910
	bool ShouldWidgetActive(); // Function Solarland.WidgetActiveControl.ShouldWidgetActive // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x22ca830
	bool ShouldVisualForbiddenNew(); // Function Solarland.WidgetActiveControl.ShouldVisualForbiddenNew // (Final|Native|Public|BlueprintCallable) // @ game+0x22ca800
	bool ShouldVisualForbidden(); // Function Solarland.WidgetActiveControl.ShouldVisualForbidden // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x22ca7d0
	void SetTotalGrid(int32_t NewGridNum); // Function Solarland.WidgetActiveControl.SetTotalGrid // (Final|Native|Public|BlueprintCallable) // @ game+0x22ca740
	void SetGridNewPercent(float RestPercent); // Function Solarland.WidgetActiveControl.SetGridNewPercent // (Final|Native|Public|BlueprintCallable) // @ game+0x22ca5a0
	void SetGridForbiddenVisualNew(bool bForbidden); // Function Solarland.WidgetActiveControl.SetGridForbiddenVisualNew // (Native|Protected|BlueprintCallable) // @ game+0x22ca510
	void SetGridForbiddenVisual(bool bForbidden); // Function Solarland.WidgetActiveControl.SetGridForbiddenVisual // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1ffcb10
	void SetGridCountText(int32_t InCount); // Function Solarland.WidgetActiveControl.SetGridCountText // (Final|Native|Public|BlueprintCallable) // @ game+0x22ca480
	void SetCoolingDownVisual(bool bInCD); // Function Solarland.WidgetActiveControl.SetCoolingDownVisual // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x228cd20
	void SetControlledWidgetActive(bool bActive); // Function Solarland.WidgetActiveControl.SetControlledWidgetActive // (Final|Native|Public|BlueprintCallable) // @ game+0x22ca360
	void PlayCooledDownAnim(); // Function Solarland.WidgetActiveControl.PlayCooledDownAnim // (Final|Native|Protected|BlueprintCallable) // @ game+0x22c9d60
	bool IsEnoughOneGrid(); // Function Solarland.WidgetActiveControl.IsEnoughOneGrid // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x22c9a60
	bool IsCooledDown(); // Function Solarland.WidgetActiveControl.IsCooledDown // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x22c9960
	void HideCooledDownPrompt(); // Function Solarland.WidgetActiveControl.HideCooledDownPrompt // (Final|Native|Private) // @ game+0x22c9810
	struct UTextBlock* GetGridCountTextBlock(); // Function Solarland.WidgetActiveControl.GetGridCountTextBlock // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	struct UCanvasPanel* GetDisablePanel(); // Function Solarland.WidgetActiveControl.GetDisablePanel // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ForceStopCD(); // Function Solarland.WidgetActiveControl.ForceStopCD // (Final|Native|Public|BlueprintCallable) // @ game+0x22c8fa0
};

// Class Solarland.SolarWeaponSkillWidget
// Size: 0x470 (Inherited: 0x448)
struct USolarWeaponSkillWidget : UWidgetActiveControl {
	struct UWidgetAnimation* Anim_EMP_Exit; // 0x448(0x08)
	struct UWidgetAnimation* Anim_EMP_Enter; // 0x450(0x08)
	struct UImage* img_SkillBg; // 0x458(0x08)
	struct USolarTextBlock* Txt_SkillType; // 0x460(0x08)
	struct UOverlay* Panel_Skill; // 0x468(0x08)
};

// Class Solarland.SolarWeaponSlotWidgetMobile
// Size: 0x5b0 (Inherited: 0x348)
struct USolarWeaponSlotWidgetMobile : USolarUserWidget {
	struct TMap<enum class EShootingOpt, int32_t> ShootModeNames; // 0x348(0x50)
	int32_t SlotID; // 0x398(0x04)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> SlotOwnerPlayerWeapon; // 0x39c(0x08)
	char pad_3A4[0x24]; // 0x3a4(0x24)
	float ClipTextBlockCheckedOpacity; // 0x3c8(0x04)
	float ClipTextBlockUnCheckedOpacity; // 0x3cc(0x04)
	bool bHideWidgetWhenNoWeapon; // 0x3d0(0x01)
	char pad_3D1[0x7]; // 0x3d1(0x07)
	struct TMap<int32_t, struct FSolarTablesData_ItemWeaponParts> WeaponPartsItemTableCache; // 0x3d8(0x50)
	struct TArray<struct UUIWeaponPartWidget*> WeaponPartsWidgets; // 0x428(0x10)
	int32_t LevelTextLocalizationID; // 0x438(0x04)
	int32_t SkillCDTextLocalizationID; // 0x43c(0x04)
	int32_t IncreaseDamageTextLocalizationID; // 0x440(0x04)
	int32_t LevelUpDamageTextLocalizationID; // 0x444(0x04)
	struct FLinearColor AmmoNotEnoughColor; // 0x448(0x10)
	struct FLinearColor ExtraAmmoColor; // 0x458(0x10)
	struct UWidgetAnimation* FX_Weapon_Reload_Progress; // 0x468(0x08)
	struct UWidgetAnimation* FX_Weapon_Reload; // 0x470(0x08)
	struct UWidgetAnimation* FX_Weapon_AmmoEmpty; // 0x478(0x08)
	struct UCheckBox* CheckBox_WP; // 0x480(0x08)
	struct UTextBlock* Text_WP_Bullte; // 0x488(0x08)
	struct UTextBlock* Text_WP_Clip; // 0x490(0x08)
	struct UImage* Img_WP; // 0x498(0x08)
	struct UCanvasPanel* Panel_WP_Unarm; // 0x4a0(0x08)
	struct UHorizontalBox* HorizontalBox_WP_Clip; // 0x4a8(0x08)
	struct UWidget* Panel_Part; // 0x4b0(0x08)
	struct UImage* Img_Bg; // 0x4b8(0x08)
	struct UImage* img_Bg_Border; // 0x4c0(0x08)
	struct UImage* img_Bg_Gradient; // 0x4c8(0x08)
	struct UOverlay* Overlay_Bg; // 0x4d0(0x08)
	struct UImage* img_NotSelect; // 0x4d8(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part; // 0x4e0(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_2; // 0x4e8(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_3; // 0x4f0(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_4; // 0x4f8(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_5; // 0x500(0x08)
	struct USolarTextBlock* Txt_SkillCD; // 0x508(0x08)
	struct UWidgetAnimation* LevelUp_Anim; // 0x510(0x08)
	struct UImage* Img_Frame_VX; // 0x518(0x08)
	struct UImage* Img_BG_Light; // 0x520(0x08)
	struct UImage* Img_BG_Light_2; // 0x528(0x08)
	struct UImage* MI_Frame_VX; // 0x530(0x08)
	struct UImage* img_Select; // 0x538(0x08)
	struct UCanvasPanel* Panel_DMG; // 0x540(0x08)
	struct USolarTextBlock* Txt_WeaponDMG; // 0x548(0x08)
	struct UImage* IMG_DMG_BG_00; // 0x550(0x08)
	struct UImage* IMG_DMG_BG_01; // 0x558(0x08)
	struct USolarTextBlock* Txt_Upgrade; // 0x560(0x08)
	struct UImage* FX_ReLoadA_001; // 0x568(0x08)
	struct UProgressBar* ProgressBar_128; // 0x570(0x08)
	float PartEffectTipDuration; // 0x578(0x04)
	char pad_57C[0x4]; // 0x57c(0x04)
	struct USolarWeaponPartEffectTipWidget* UI_Weapon_Update; // 0x580(0x08)
	struct UCanvasPanel* PartEffectPanelUp; // 0x588(0x08)
	struct UCanvasPanel* PartEffectPanelDown; // 0x590(0x08)
	struct TArray<struct FSolarWeaponPartEffectDesc> PartEffectTipArray; // 0x598(0x10)
	struct TWeakObjectPtr<struct USolarAdapterWidget> KeyboardTip; // 0x5a8(0x08)

	void SetWeaponSlotPartsVisibility(bool InbVisible); // Function Solarland.SolarWeaponSlotWidgetMobile.SetWeaponSlotPartsVisibility // (Final|Native|Protected|BlueprintCallable) // @ game+0x2282d90
	void SetWeaponSlotAmmoCount(); // Function Solarland.SolarWeaponSlotWidgetMobile.SetWeaponSlotAmmoCount // (Final|Native|Protected|BlueprintCallable) // @ game+0x2282d70
	void SetWeaponQualityByLevel(int32_t InWeaponLevel); // Function Solarland.SolarWeaponSlotWidgetMobile.SetWeaponQualityByLevel // (Final|Native|Protected|BlueprintCallable) // @ game+0x2282c50
	void OnWeaponUpgrade(int32_t InLevel, uint32_t InWeaponUniqueID); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponUpgrade // (Final|Native|Protected) // @ game+0x2282850
	void OnWeaponUpdateOverload(float InProgress); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponUpdateOverload // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnWeaponUpdateAmmoCount(int32_t InFireModeType, struct ASolarWeapon* InWeapon); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponUpdateAmmoCount // (Final|Native|Public) // @ game+0x2282780
	void OnWeaponToggleOverload(bool InbEnterOverload, uint32_t InWeaponUniqueID); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponToggleOverload // (Final|Native|Protected) // @ game+0x22826b0
	void OnWeaponQuitReload(bool bInSuccess); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponQuitReload // (Native|Event|Public|BlueprintEvent) // @ game+0x2282620
	void OnWeaponInsufficientAmmo(); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponInsufficientAmmo // (Native|Event|Public|BlueprintEvent) // @ game+0x1547f70
	void OnToggleCheckedState(bool InbChecked); // Function Solarland.SolarWeaponSlotWidgetMobile.OnToggleCheckedState // (Final|Native|Protected) // @ game+0x22823f0
	void OnLoadWeaponAssetsCompleted(); // Function Solarland.SolarWeaponSlotWidgetMobile.OnLoadWeaponAssetsCompleted // (Final|Native|Protected) // @ game+0x22823d0
	void OnCharacterSet(struct ASolarCharacter* InCharacter); // Function Solarland.SolarWeaponSlotWidgetMobile.OnCharacterSet // (Final|Native|Protected) // @ game+0x2282340
	void OnCharacterLevelUp(int32_t InNewLevel, int32_t InOldLevel); // Function Solarland.SolarWeaponSlotWidgetMobile.OnCharacterLevelUp // (Final|Native|Protected) // @ game+0x2282270
	void K2_OnSetWeapon(struct ASolarPlayerWeapon* InPlayerWeapon); // Function Solarland.SolarWeaponSlotWidgetMobile.K2_OnSetWeapon // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void K2_OnCharacterLevelUp(int32_t InLevel); // Function Solarland.SolarWeaponSlotWidgetMobile.K2_OnCharacterLevelUp // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void K2_OnActiveWeapon(bool bInActive); // Function Solarland.SolarWeaponSlotWidgetMobile.K2_OnActiveWeapon // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	bool IsDisplayCompleteInfo(); // Function Solarland.SolarWeaponSlotWidgetMobile.IsDisplayCompleteInfo // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2282240
	struct UTexture2D* GetWeaponTexture(); // Function Solarland.SolarWeaponSlotWidgetMobile.GetWeaponTexture // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2282210
	struct FString GetWeaponShootModeName(); // Function Solarland.SolarWeaponSlotWidgetMobile.GetWeaponShootModeName // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2282190
	struct FText GetWeaponName(); // Function Solarland.SolarWeaponSlotWidgetMobile.GetWeaponName // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x22820f0
	int32_t GetWeaponLevel(); // Function Solarland.SolarWeaponSlotWidgetMobile.GetWeaponLevel // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x22820c0
	bool GetWeaponAmmoData(int32_t& OutClipAmmoCount, int32_t& OutExtraAmmoCount, int32_t& OutSpareAmmoCount); // Function Solarland.SolarWeaponSlotWidgetMobile.GetWeaponAmmoData // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2281f80
	struct FString GetLocalizationDataByID(int32_t InLocalizationID); // Function Solarland.SolarWeaponSlotWidgetMobile.GetLocalizationDataByID // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2281d90
	void GetLevelText(int32_t InLocalizationLevelID, struct FString InReplaceText, struct FString& OutHeadText, struct FString& OutTailText); // Function Solarland.SolarWeaponSlotWidgetMobile.GetLevelText // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2281ba0
	void ClearLoadWeaponAssetsTimer(); // Function Solarland.SolarWeaponSlotWidgetMobile.ClearLoadWeaponAssetsTimer // (Final|Native|Protected) // @ game+0x2281ad0
	void AsyncRequestLoadWeaponAssets(); // Function Solarland.SolarWeaponSlotWidgetMobile.AsyncRequestLoadWeaponAssets // (Final|Native|Protected) // @ game+0x2281ab0
};

// Class Solarland.SolarWeaponSlotWidgetPC
// Size: 0x510 (Inherited: 0x348)
struct USolarWeaponSlotWidgetPC : USolarUserWidget {
	struct FString KeyActionName; // 0x348(0x10)
	struct UImage* Img_WP; // 0x358(0x08)
	struct USolarComponentKeyWidget* UI_Component_Keyboard; // 0x360(0x08)
	struct UCanvasPanel* HorizontalBox_WP_Clip; // 0x368(0x08)
	struct UTextBlock* Text_WP_Clip; // 0x370(0x08)
	struct UTextBlock* Text_WP_Clip_2; // 0x378(0x08)
	struct UHorizontalBox* HorizontalBox_Lv; // 0x380(0x08)
	struct UTextBlock* Txt_Lvl_Head; // 0x388(0x08)
	struct UTextBlock* Txt_Level; // 0x390(0x08)
	struct UTextBlock* Txt_Lvl_Tail; // 0x398(0x08)
	struct USolarTextBlock* Txt_FireMode; // 0x3a0(0x08)
	struct UCanvasPanel* Panel_Part; // 0x3a8(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_2; // 0x3b0(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_3; // 0x3b8(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_4; // 0x3c0(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_5; // 0x3c8(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_6; // 0x3d0(0x08)
	struct UCanvasPanel* Panel_WP_Unarm; // 0x3d8(0x08)
	struct UImage* img_Bg_Border; // 0x3e0(0x08)
	struct UImage* img_Bg_Black; // 0x3e8(0x08)
	struct UImage* img_Bg_Gradient; // 0x3f0(0x08)
	struct UImage* img_NotSelect; // 0x3f8(0x08)
	struct UOverlay* Overlay_Bg; // 0x400(0x08)
	int32_t LevelLocalizationID; // 0x408(0x04)
	char pad_40C[0x4]; // 0x40c(0x04)
	struct FString LevelVariate; // 0x410(0x10)
	struct TMap<enum class EShootingOpt, int32_t> ShootModeLocalizationIDMap; // 0x420(0x50)
	struct TArray<struct FLinearColor> WeaponQualityColors; // 0x470(0x10)
	struct TArray<struct FLinearColor> WeaponBGQualityColors; // 0x480(0x10)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> SlotWeapon; // 0x490(0x08)
	char pad_498[0x10]; // 0x498(0x10)
	struct FTimerHandle LoadWeaponIconTimerHandle; // 0x4a8(0x08)
	struct TArray<struct UUIWeaponPartWidget*> WeaponPartWidgets; // 0x4b0(0x10)
	struct TMap<int32_t, struct FSolarTablesData_ItemWeaponParts> WeaponPartsItemTableCache; // 0x4c0(0x50)

	void SetWeaponSlot(struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarWeaponSlotWidgetPC.SetWeaponSlot // (Final|Native|Public) // @ game+0x2282ce0
	void OnUpgradeWeapon(int32_t InLevel, uint32_t InWeaponUniqueID); // Function Solarland.SolarWeaponSlotWidgetPC.OnUpgradeWeapon // (Final|Native|Private) // @ game+0x2282550
	void OnUpdateAmmo(int32_t InFireModeType, struct ASolarWeapon* InWeapon); // Function Solarland.SolarWeaponSlotWidgetPC.OnUpdateAmmo // (Final|Native|Private) // @ game+0x2282480
	void ActiveWeaponSlot(bool InbActive); // Function Solarland.SolarWeaponSlotWidgetPC.ActiveWeaponSlot // (Final|Native|Public) // @ game+0x2281a20
};

// Class Solarland.SolarWeaponSubsystem
// Size: 0x250 (Inherited: 0x30)
struct USolarWeaponSubsystem : UWorldSubsystem {
	char pad_30[0x180]; // 0x30(0x180)
	struct TMap<struct UObject*, struct ASolarWeaponProjectileSpline*> CacheSolarWeaponProjectileSplineMap; // 0x1b0(0x50)
	struct TMap<int32_t, struct FSolarTablesData_ItemWeaponParts> WeaponPartsItemTableCache; // 0x200(0x50)

	bool DiscardWeaponFromBackpack(struct ASolarWeapon* InPendingWeapon); // Function Solarland.SolarWeaponSubsystem.DiscardWeaponFromBackpack // (Final|Native|Public|BlueprintCallable) // @ game+0x2285a80
};

// Class Solarland.SolarWheeledVehicleMovement
// Size: 0x978 (Inherited: 0x138)
struct USolarWheeledVehicleMovement : UPawnMovementComponent {
	float LowFrameRateDeltaTime; // 0x138(0x04)
	float MinLocationDiffForSuspensionTrace; // 0x13c(0x04)
	float Mass; // 0x140(0x04)
	float CenterOfMassOffsetOnZ; // 0x144(0x04)
	float CenterOfMassOffsetOnX; // 0x148(0x04)
	float SuspensionClampRatioInLowFrame; // 0x14c(0x04)
	struct FRuntimeFloatCurve AccelerationCurve; // 0x150(0x88)
	struct FRuntimeFloatCurve AccelerationCurveReverse; // 0x1d8(0x88)
	int32_t ReverseEvaluationAccuracy; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
	struct FRuntimeFloatCurve SteerAngleLimit; // 0x268(0x88)
	struct FRuntimeFloatCurve SteeringResetSpeed; // 0x2f0(0x88)
	struct FRuntimeFloatCurve SteeringSpeed; // 0x378(0x88)
	struct FRuntimeFloatCurve SteeringFraction; // 0x400(0x88)
	struct FRuntimeFloatCurve SteerAngleMutiplier; // 0x488(0x88)
	float LowSteeringSpeed; // 0x510(0x04)
	float LowSteeringSpeedAccelerationMultiplier; // 0x514(0x04)
	float LowSteeringSpeedAngleLimitMultiplier; // 0x518(0x04)
	float LowSpeedSteeringThresholdOnHorizontalInput; // 0x51c(0x04)
	float FlightStabilizationDamping; // 0x520(0x04)
	float LateralFrictionWhenOnlySteeringWheelsOnGround; // 0x524(0x04)
	struct TArray<struct FWheelData> Wheels; // 0x528(0x10)
	float RotationMinAngle; // 0x538(0x04)
	float MaxPitchRotation; // 0x53c(0x04)
	float MaxRollRotation; // 0x540(0x04)
	float RotationTimeLimit; // 0x544(0x04)
	bool bOpenTimeLimit; // 0x548(0x01)
	char pad_549[0x3]; // 0x549(0x03)
	float PitchTorqueInDegree; // 0x54c(0x04)
	float RollTorqueInDegree; // 0x550(0x04)
	float TorqueForUpsideDown; // 0x554(0x04)
	float MaxAngularVelocityInAir; // 0x558(0x04)
	float TorqueLerpAcceleration; // 0x55c(0x04)
	float BalanceAngularVelocityWheelsOnGround; // 0x560(0x04)
	char pad_564[0x4]; // 0x564(0x04)
	struct UCurveFloat* DustEffectScaleCurve; // 0x568(0x08)
	struct TMap<enum class EPhysicalSurface, struct TSoftObjectPtr<UParticleSystem>> BrokenWheelDustEffect; // 0x570(0x50)
	float WheelDecelerationInBrakeLock; // 0x5c0(0x04)
	float WheelLerpSpeedInSlip; // 0x5c4(0x04)
	float GravityAcceleration; // 0x5c8(0x04)
	float GravityAccelerationInAir; // 0x5cc(0x04)
	float MinHeightForGravityAccelerationInAir; // 0x5d0(0x04)
	float MaxHeightForGravityAccelerationInAir; // 0x5d4(0x04)
	float GravityTransitionDuration; // 0x5d8(0x04)
	float MaxStaticDegree; // 0x5dc(0x04)
	struct FRuntimeFloatCurve GravityMultiplierForAcceleration; // 0x5e0(0x88)
	float DecelerationUnderWater; // 0x668(0x04)
	bool bAutoSteeringEnabled; // 0x66c(0x01)
	char pad_66D[0x3]; // 0x66d(0x03)
	float AutoSteeringThresholdTime; // 0x670(0x04)
	float AutoSteeringSpeedThreshold; // 0x674(0x04)
	float AutoSteeringTraceRadius; // 0x678(0x04)
	struct FVector LeftAutoSteeringTraceStart; // 0x67c(0x0c)
	struct FVector RightAutoSteeringTraceStart; // 0x688(0x0c)
	float LeftToRightTangentDegree; // 0x694(0x04)
	float AutoSteeringAngleLimit; // 0x698(0x04)
	float AutoSteeringSpeed; // 0x69c(0x04)
	float AutoSteeringResetSpeed; // 0x6a0(0x04)
	float AutoSteeringLimitInputY; // 0x6a4(0x04)
	float ThrottleInputThreshold; // 0x6a8(0x04)
	char pad_6AC[0x4]; // 0x6ac(0x04)
	struct FRuntimeFloatCurve SteerInputCurve; // 0x6b0(0x88)
	float BrakeDelayTime; // 0x738(0x04)
	float ThrottleReleaseDelayTime; // 0x73c(0x04)
	float MicroThrottleInputThreshold; // 0x740(0x04)
	float MicroThrottleInputSpeed; // 0x744(0x04)
	float SteeringLimitMultiplierInDrift; // 0x748(0x04)
	float AccelerationMultiplierInDrift; // 0x74c(0x04)
	float AccelerationInDriftLerpSpeed; // 0x750(0x04)
	float AccelerationOutDriftLerpSpeed; // 0x754(0x04)
	float MinDriftSpeed; // 0x758(0x04)
	float DriftCompensationRate; // 0x75c(0x04)
	float DriftCancelTimeWithoutInput; // 0x760(0x04)
	char pad_764[0x4]; // 0x764(0x04)
	struct TMap<enum class EPhysicalSurface, struct TSoftObjectPtr<UParticleSystem>> DriftParticles; // 0x768(0x50)
	float TimerForAntiStuck; // 0x7b8(0x04)
	float StuckAcceleration; // 0x7bc(0x04)
	float StuckAccelerationLerpSpeed; // 0x7c0(0x04)
	float MinAntiRollThreshold; // 0x7c4(0x04)
	float MaxAntiRollThreshold; // 0x7c8(0x04)
	char pad_7CC[0x4]; // 0x7cc(0x04)
	struct TArray<struct FGearSetting> ForwardGears; // 0x7d0(0x10)
	float ReverseRpm; // 0x7e0(0x04)
	float SlipRpmMultiplier; // 0x7e4(0x04)
	float RpmSlipSpeed; // 0x7e8(0x04)
	float BurnoutDelayTime; // 0x7ec(0x04)
	float BurnoutSoundRatio; // 0x7f0(0x04)
	char pad_7F4[0x13c]; // 0x7f4(0x13c)
	struct ASolarVehiclePawn* VehiclePawn; // 0x930(0x08)
	struct USkeletalMeshComponent* VehicleMesh; // 0x938(0x08)
	float InputVecXForRotateInAir; // 0x940(0x04)
	float InputVecYForRotateInAir; // 0x944(0x04)
	float BalanceRotateSpendTime; // 0x948(0x04)
	float InputRotateSpendTime; // 0x94c(0x04)
	struct TArray<char> InAirWheelsIndex; // 0x950(0x10)
	char pad_960[0x10]; // 0x960(0x10)
	struct UAkComponent* AkAudioComponent; // 0x970(0x08)

	void SetIsDrift(bool bInDrift, bool bResetDrift); // Function Solarland.SolarWheeledVehicleMovement.SetIsDrift // (Final|Native|Public|BlueprintCallable) // @ game+0x2286190
	void SetIsBurnout(bool bInBurnout); // Function Solarland.SolarWheeledVehicleMovement.SetIsBurnout // (Final|Native|Public) // @ game+0x2286100
	void SetDriveType(enum class EWheeledVehicleDriveUserType InType); // Function Solarland.SolarWheeledVehicleMovement.SetDriveType // (Final|Native|Static|Public) // @ game+0x2286090
	void SetCanAutoSteering(bool bCan); // Function Solarland.SolarWheeledVehicleMovement.SetCanAutoSteering // (Final|Native|Static|Public) // @ game+0x2286010
	void SetCanAdjustInAir(bool bCan); // Function Solarland.SolarWheeledVehicleMovement.SetCanAdjustInAir // (Final|Native|Static|Public) // @ game+0x2285f90
	void OnVehicleSkinSoundUpdate(struct USolarVehicleSoundDataAsset* OldVehicleSoundDataAsset, struct USolarVehicleSoundDataAsset* NewVehicleSoundDataAsset); // Function Solarland.SolarWheeledVehicleMovement.OnVehicleSkinSoundUpdate // (Final|Native|Protected) // @ game+0x2285e30
	void OnVehicleHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarWheeledVehicleMovement.OnVehicleHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2285c50
	void OnDriverGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarWheeledVehicleMovement.OnDriverGetOffVehicle // (Final|Native|Protected) // @ game+0x2285b40
};

// Class Solarland.SolarWheeledVehicleStencilAnimInstance
// Size: 0x350 (Inherited: 0x270)
struct USolarWheeledVehicleStencilAnimInstance : UAnimInstance {
	struct FVector FLWheelBoneScale; // 0x268(0x0c)
	struct FVector FRWheelBoneScale; // 0x274(0x0c)
	struct FVector MLWheelBoneScale; // 0x280(0x0c)
	struct FVector MRWheelBoneScale; // 0x28c(0x0c)
	struct FVector BLWheelBoneScale; // 0x298(0x0c)
	struct FVector BRWheelBoneScale; // 0x2a4(0x0c)
	struct FVector FLWheelBoneLocation; // 0x2b0(0x0c)
	struct FVector FRWheelBoneLocation; // 0x2bc(0x0c)
	struct FVector MLWheelBoneLocation; // 0x2c8(0x0c)
	struct FVector MRWheelBoneLocation; // 0x2d4(0x0c)
	struct FVector BLWheelBoneLocation; // 0x2e0(0x0c)
	struct FVector BRWheelBoneLocation; // 0x2ec(0x0c)
	struct FRotator FLWheelBoneRotation; // 0x2f8(0x0c)
	struct FRotator FRWheelBoneRotation; // 0x304(0x0c)
	struct FRotator MLWheelBoneRotation; // 0x310(0x0c)
	struct FRotator MRWheelBoneRotation; // 0x31c(0x0c)
	struct FRotator BLWheelBoneRotation; // 0x328(0x0c)
	struct FRotator BRWheelBoneRotation; // 0x334(0x0c)
	struct TWeakObjectPtr<struct USolarWheeledVehicleAnimInstance> VehicleAnim; // 0x340(0x08)
};

// Class Solarland.SolarWidgetExitCallbackProxy
// Size: 0x40 (Inherited: 0x28)
struct USolarWidgetExitCallbackProxy : UObject {
	char pad_28[0x18]; // 0x28(0x18)

	void OnAnimationFinished(); // Function Solarland.SolarWidgetExitCallbackProxy.OnAnimationFinished // (Final|Native|Protected) // @ game+0x2285b20
};

// Class Solarland.SolarWorldSettings
// Size: 0x480 (Inherited: 0x400)
struct ASolarWorldSettings : AWorldSettings {
	int32_t MapID; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct FSoftObjectPath PreloadAssets; // 0x408(0x18)
	bool bAsyncPreload; // 0x420(0x01)
	bool bHoldAllMips; // 0x421(0x01)
	char pad_422[0x6]; // 0x422(0x06)
	struct USolarPostProcessSettingItem* PostProcessItemClass; // 0x428(0x08)
	int32_t CurrentActiveColorThemeIndex; // 0x430(0x04)
	int32_t SolarMapTypeValue; // 0x434(0x04)
	bool MapEnableLowMemoryGraphOpt; // 0x438(0x01)
	char pad_439[0x7]; // 0x439(0x07)
	struct FTransform SpectatorPawnStartPoint; // 0x440(0x30)
	struct USolarPostProcessSettingItem* PostProcessItem; // 0x470(0x08)
	char pad_478[0x8]; // 0x478(0x08)
};

// Class Solarland.SolarZiplineObj
// Size: 0x2f0 (Inherited: 0x228)
struct ASolarZiplineObj : AActor {
	struct FGameplayTag ZipTriggerTag; // 0x228(0x08)
	struct FGameplayTag ZippingStatusTag; // 0x230(0x08)
	struct FName ZipActionName; // 0x238(0x08)
	struct FZiplineObjData ZiplineObjData; // 0x240(0x74)
	char pad_2B4[0x4]; // 0x2b4(0x04)
	struct UBoxComponent* ASideCollisionComp; // 0x2b8(0x08)
	struct UBoxComponent* BSideCollisionComp; // 0x2c0(0x08)
	struct UBoxComponent* CableCollisionComp; // 0x2c8(0x08)
	struct TWeakObjectPtr<struct ASolarCharacter> InstigateCharacter; // 0x2d0(0x08)
	struct TArray<struct ASolarCharacter*> SlidingCharacters; // 0x2d8(0x10)
	char pad_2E8[0x4]; // 0x2e8(0x04)
	enum class EZiplineSide BeginningSide; // 0x2ec(0x01)
	char pad_2ED[0x3]; // 0x2ed(0x03)

	void OnRep_SlidingCharacters(); // Function Solarland.SolarZiplineObj.OnRep_SlidingCharacters // (Final|Native|Protected) // @ game+0x8e9ae0
	void OnEndOverlap(struct AActor* OtherActor, enum class EZiplineSide InSide); // Function Solarland.SolarZiplineObj.OnEndOverlap // (Final|Native|Protected) // @ game+0x228cb70
	void OnCableEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarZiplineObj.OnCableEndOverlap // (Final|Native|Protected) // @ game+0x228ca10
	void OnCableBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarZiplineObj.OnCableBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x228c7f0
	void OnBSideEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarZiplineObj.OnBSideEndOverlap // (Final|Native|Protected) // @ game+0x228c5c0
	void OnBSideBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarZiplineObj.OnBSideBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x228c3a0
	void OnBeginOverlap(struct AActor* OtherActor, enum class EZiplineSide InSide); // Function Solarland.SolarZiplineObj.OnBeginOverlap // (Final|Native|Protected) // @ game+0x228c720
	void OnASideEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarZiplineObj.OnASideEndOverlap // (Final|Native|Protected) // @ game+0x228c240
	void OnASideBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarZiplineObj.OnASideBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x228c020
	void K2_OnZiplineEndOverlap(struct ASolarCharacter* InCharacter); // Function Solarland.SolarZiplineObj.K2_OnZiplineEndOverlap // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void K2_OnZiplineBeginOverlap(struct ASolarCharacter* InCharacter); // Function Solarland.SolarZiplineObj.K2_OnZiplineBeginOverlap // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void K2_OnGoZip(struct ASolarCharacter* InCharacter); // Function Solarland.SolarZiplineObj.K2_OnGoZip // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void GoZip(); // Function Solarland.SolarZiplineObj.GoZip // (Final|Native|Protected) // @ game+0x228bfd0
};

// Class Solarland.SpatializeInfo
// Size: 0x230 (Inherited: 0x228)
struct ASpatializeInfo : AInfo {
	char pad_228[0x8]; // 0x228(0x08)
};

// Class Solarland.SpatializeInfoTrack
// Size: 0x478 (Inherited: 0x230)
struct ASpatializeInfoTrack : ASpatializeInfo {
	struct FTrackArray TrackArray; // 0x230(0x130)
	char pad_360[0x8c]; // 0x360(0x8c)
	float Timeout; // 0x3ec(0x04)
	float MinRevealDistance; // 0x3f0(0x04)
	int32_t MaxTrackNum; // 0x3f4(0x04)
	struct TMap<struct FTrackItem, struct A3DMeshWidgetTrack*> CurTrackWidgets; // 0x3f8(0x50)
	char pad_448[0x30]; // 0x448(0x30)

	void UpdateWidgets(bool bFromNetUpdate); // Function Solarland.SpatializeInfoTrack.UpdateWidgets // (Final|Native|Private) // @ game+0x228d250
};

// Class Solarland.StripBulletContainer
// Size: 0x400 (Inherited: 0x3b8)
struct UStripBulletContainer : USolarWeaponBulletContainerWidget {
	struct UImage* AmmoGauge_BG; // 0x3b8(0x08)
	struct UGaugeImage* AmmoGauge; // 0x3c0(0x08)
	struct UImage* AmmoGauge_Empty; // 0x3c8(0x08)
	struct UImage* AmmoGauge_Light; // 0x3d0(0x08)
	struct UCanvasPanel* BulletLightSlot; // 0x3d8(0x08)
	struct UWidgetAnimation* Gauge_Anim; // 0x3e0(0x08)
	struct UWidgetAnimation* Battle_Light_Anim; // 0x3e8(0x08)
	struct UWidgetAnimation* Recharge_Empty_Anim; // 0x3f0(0x08)
	char pad_3F8[0x8]; // 0x3f8(0x08)

	void ReceiveUpdateBulletEvent(float AmmoProgress, bool bIsReloading, bool bIsFirstIn, bool bIsQuitReload); // Function Solarland.StripBulletContainer.ReceiveUpdateBulletEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x228cdb0
	void ReceiveUpdateAllBulletEvent(); // Function Solarland.StripBulletContainer.ReceiveUpdateAllBulletEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0xb9afb0
	void ReceiveReloadFinishEvent(bool bIsReloadSuccess); // Function Solarland.StripBulletContainer.ReceiveReloadFinishEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x228cd20
};

// Class Solarland.SolarStrongholdNamesConfig
// Size: 0x80 (Inherited: 0x30)
struct USolarStrongholdNamesConfig : UDataAsset {
	struct TMap<struct FString, struct FVector4> NamesMap; // 0x30(0x50)
};

// Class Solarland.STutorialLevelGameMode
// Size: 0x588 (Inherited: 0x588)
struct ASTutorialLevelGameMode : ASBattleGameMode {

	void OnReady(); // Function Solarland.STutorialLevelGameMode.OnReady // (Final|Native|Private) // @ game+0x228cc40
};

// Class Solarland.STutorialLevelGameState
// Size: 0x440 (Inherited: 0x440)
struct ASTutorialLevelGameState : ASolarGameState {
};

// Class Solarland.SubPoolOfHomeActor
// Size: 0x50 (Inherited: 0x28)
struct USubPoolOfHomeActor : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct ASolarHomeActor*> UseActors; // 0x30(0x10)
	struct TArray<struct ASolarHomeActor*> UnUseActors; // 0x40(0x10)
};

// Class Solarland.SummonItemHealPile
// Size: 0x600 (Inherited: 0x3e0)
struct ASummonItemHealPile : ASummonItemBase {
	struct TArray<struct FChargingInfo> ChargingInfoList; // 0x3e0(0x10)
	enum class EActorRegisterType ActorRegisterType; // 0x3f0(0x01)
	char pad_3F1[0x7]; // 0x3f1(0x07)
	struct USphereComponent* CollisionComp; // 0x3f8(0x08)
	struct UStaticMeshComponent* NormalMesh; // 0x400(0x08)
	float SphereRadius; // 0x408(0x04)
	int32_t OwnerTeam; // 0x40c(0x04)
	struct FVector TestOverlapDestroyBoxExtent; // 0x410(0x0c)
	char pad_41C[0x4]; // 0x41c(0x04)
	struct UParticleSystemComponent* RangeLoopEffect; // 0x420(0x08)
	struct TArray<struct UParticleSystemComponent*> ChargeParticleEffects; // 0x428(0x10)
	float HealQuantity; // 0x438(0x04)
	float HealFrequency; // 0x43c(0x04)
	char pad_440[0x8]; // 0x440(0x08)
	struct UMaterialInstanceDynamic* DynamicMatHealPile; // 0x448(0x08)
	struct FSoftObjectPath NormalMeshPath; // 0x450(0x18)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleStartPath; // 0x468(0x28)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleLoopPath; // 0x490(0x28)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleEndPath; // 0x4b8(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleStartPath; // 0x4e0(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleLoopPath; // 0x508(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleEndPath; // 0x530(0x28)
	struct FVector RangeEffectScale; // 0x558(0x0c)
	char pad_564[0x4]; // 0x564(0x04)
	struct FSoftObjectPath ChargeParticleEffectPath; // 0x568(0x18)
	struct FVector BeamStartPos; // 0x580(0x0c)
	char pad_58C[0x4]; // 0x58c(0x04)
	struct FSoftObjectPath OutlineMatPath; // 0x590(0x18)
	struct UParticleSystem* BoomEffect; // 0x5a8(0x08)
	char pad_5B0[0x28]; // 0x5b0(0x28)
	struct USolarAkGameObject* SolarAkGameObject; // 0x5d8(0x08)
	char pad_5E0[0x10]; // 0x5e0(0x10)
	struct FTimerHandle ServerChargingTimerHandle; // 0x5f0(0x08)
	struct FTimerHandle ClientChargingTimerHandle; // 0x5f8(0x08)

	void TestDestroy(); // Function Solarland.SummonItemHealPile.TestDestroy // (Final|Native|Public) // @ game+0x2290b90
	void SetIsActivated(bool bActivated); // Function Solarland.SummonItemHealPile.SetIsActivated // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ServerSetHealingPile(bool bEnter, struct ASolarCharacter* ChargingCharacter); // Function Solarland.SummonItemHealPile.ServerSetHealingPile // (Final|Native|Public) // @ game+0x2290830
	void RemoveChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SummonItemHealPile.RemoveChargeParticle // (Final|Native|Public|BlueprintCallable) // @ game+0x22907a0
	void RemoveAllEffects(); // Function Solarland.SummonItemHealPile.RemoveAllEffects // (Final|Native|Public|BlueprintCallable) // @ game+0x2290780
	void ReceiveNormalMeshLoadedEvent(); // Function Solarland.SummonItemHealPile.ReceiveNormalMeshLoadedEvent // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveChargingPileInitialize(); // Function Solarland.SummonItemHealPile.ReceiveChargingPileInitialize // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnUntrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SummonItemHealPile.OnUntrigger // (Final|Native|Public) // @ game+0x2290570
	void OnTrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SummonItemHealPile.OnTrigger // (Final|Native|Public|HasOutParms) // @ game+0x2290350
	void OnRep_ChargingInfoListChanged(); // Function Solarland.SummonItemHealPile.OnRep_ChargingInfoListChanged // (Final|Native|Public) // @ game+0x22902f0
	bool IsOwnerTeammate(); // Function Solarland.SummonItemHealPile.IsOwnerTeammate // (Final|Native|Public|BlueprintCallable) // @ game+0x2290070
	void CreateChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SummonItemHealPile.CreateChargeParticle // (Final|Native|Public|BlueprintCallable) // @ game+0x228fcb0
	void ClientRemoveChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SummonItemHealPile.ClientRemoveChargeParticle // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x228fc20
	void ClientHealPileSound(struct ASolarCharacter* ChargingCharacter, enum class EPileHealingType HealingType); // Function Solarland.SummonItemHealPile.ClientHealPileSound // (Net|Native|Event|NetMulticast|Public|NetClient) // @ game+0x228fb50
};

// Class Solarland.SummonItemTurretAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct USummonItemTurretAnimInstance : UAnimInstance {
	bool bReady; // 0x268(0x01)
	bool bLocking; // 0x269(0x01)
	bool bFiring; // 0x26a(0x01)
	struct FRotator AimRotate; // 0x26c(0x0c)
	char pad_27F[0x1]; // 0x27f(0x01)
};

// Class Solarland.WeaponAnimationComponent
// Size: 0x110 (Inherited: 0xb0)
struct UWeaponAnimationComponent : UActorComponent {
	struct UWeaponAnimInstance* WeaponAnimInstance; // 0xb0(0x08)
	struct ASolarWeapon* MyWeapon; // 0xb8(0x08)
	struct TMap<enum class EWeaponAnimState, struct UAnimSequence*> AnimSequenceMap; // 0xc0(0x50)

	void SRecieveProto_SwitchStateAction(struct FString paramters); // Function Solarland.WeaponAnimationComponent.SRecieveProto_SwitchStateAction // (Final|Native|Protected) // @ game+0x20a3480
	void SetWeaponAnimState(enum class EWeaponAnimState InWeaponAnimState, float InAnimPlaySpeed); // Function Solarland.WeaponAnimationComponent.SetWeaponAnimState // (Final|Native|Public) // @ game+0x22abf10
	void PostWeaponAnimStateToSimulation(enum class EWeaponAnimState InWeaponAnimState, float InAnimPlaySpeed, bool bForceSetAnimState); // Function Solarland.WeaponAnimationComponent.PostWeaponAnimStateToSimulation // (Final|Native|Protected) // @ game+0x22ac4f0
	void InternalSetWeaponAnimState(enum class EWeaponAnimState InWeaponAnimState, float InAnimPlaySpeed); // Function Solarland.WeaponAnimationComponent.InternalSetWeaponAnimState // (Final|Native|Protected) // @ game+0x22abf10
	void InitSkeletaMesh(struct USkeletalMeshComponent* Mesh); // Function Solarland.WeaponAnimationComponent.InitSkeletaMesh // (Native|Public) // @ game+0x22abe80
	void GotoState(enum class EWeaponAnimState State, float Interval); // Function Solarland.WeaponAnimationComponent.GotoState // (Final|Native|Public) // @ game+0x22abd60
	void CRecieveProto_SwitchStateAction(bool bAutonomous, struct FString paramters); // Function Solarland.WeaponAnimationComponent.CRecieveProto_SwitchStateAction // (Final|Native|Protected) // @ game+0x22abba0
};

// Class Solarland.SummonWeaponAnimationComponent
// Size: 0x118 (Inherited: 0x110)
struct USummonWeaponAnimationComponent : UWeaponAnimationComponent {
	char pad_110[0x8]; // 0x110(0x08)
};

// Class Solarland.WeaponAnimInstance
// Size: 0x2d0 (Inherited: 0x270)
struct UWeaponAnimInstance : UAnimInstance {
	bool bInterrupt; // 0x268(0x01)
	bool bReload; // 0x269(0x01)
	bool bOverload; // 0x26a(0x01)
	bool bBolt; // 0x26b(0x01)
	struct TArray<struct FAnimMsgData> MsgArray; // 0x270(0x10)
	struct FAnimMsgData CurrentMsg; // 0x280(0x08)
	bool bCurrentMsgUsed; // 0x288(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	struct UAnimSequence* IdleAnim; // 0x290(0x08)
	struct UAnimSequence* FireAnim; // 0x298(0x08)
	struct UAnimSequence* AltFireAnim; // 0x2a0(0x08)
	struct UAnimSequence* ReloadAnim; // 0x2a8(0x08)
	struct UAnimSequence* OverloadAnim; // 0x2b0(0x08)
	struct UAnimSequence* OpenScopeAnim; // 0x2b8(0x08)
	struct UAnimSequence* CloseScopeAnim; // 0x2c0(0x08)
	struct UAnimSequence* BoltAnim; // 0x2c8(0x08)

	bool SwitchStateCheck(enum class EWeaponAnimState CheckState); // Function Solarland.WeaponAnimInstance.SwitchStateCheck // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x22acd00
	void SetInterruptIsTrue(); // Function Solarland.WeaponAnimInstance.SetInterruptIsTrue // (Final|Native|Public) // @ game+0x22ac820
	bool RouterNodeJudge(); // Function Solarland.WeaponAnimInstance.RouterNodeJudge // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x22ac650
	void OnQuitState(enum class EWeaponAnimState State); // Function Solarland.WeaponAnimInstance.OnQuitState // (Final|Native|Public|BlueprintCallable) // @ game+0x22ac260
	void OnEnterState(enum class EWeaponAnimState State); // Function Solarland.WeaponAnimInstance.OnEnterState // (Final|Native|Public|BlueprintCallable) // @ game+0x22ac040
	void Interrupt(); // Function Solarland.WeaponAnimInstance.Interrupt // (Final|Native|Public|BlueprintCallable) // @ game+0x22abfe0
	bool HasMsg(); // Function Solarland.WeaponAnimInstance.HasMsg // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x22abe50
	bool ConsumMsg(); // Function Solarland.WeaponAnimInstance.ConsumMsg // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x22abc90
	bool AddMsg(enum class EWeaponAnimState State, float Speed); // Function Solarland.WeaponAnimInstance.AddMsg // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x22abaa0
};

// Class Solarland.SummonWeaponAnimInstance
// Size: 0x2e0 (Inherited: 0x2d0)
struct USummonWeaponAnimInstance : UWeaponAnimInstance {
	float ViewYaw; // 0x2d0(0x04)
	float ViewPitch; // 0x2d4(0x04)
	bool IsLocked; // 0x2d8(0x01)
	bool IsFire; // 0x2d9(0x01)
	bool bAppearCompleted; // 0x2da(0x01)
	bool bTransform; // 0x2db(0x01)
	char pad_2DC[0x4]; // 0x2dc(0x04)
};

// Class Solarland.SWarmUpGameMode
// Size: 0x6f0 (Inherited: 0x6f0)
struct ASWarmUpGameMode : ASCustomGameMode {
};

// Class Solarland.SWarmUpGameState
// Size: 0x578 (Inherited: 0x578)
struct ASWarmUpGameState : ASCustomGameState {
};

// Class Solarland.SwitchEffectStaticMeshComponent
// Size: 0x730 (Inherited: 0x600)
struct USwitchEffectStaticMeshComponent : UStaticMeshComponent {
	struct TSoftObjectPtr<UCurveVector> DissolveCurvePath; // 0x600(0x28)
	struct TSoftObjectPtr<UMaterialInterface> DissolveMatPath; // 0x628(0x28)
	struct TSoftObjectPtr<UCurveVector> FresnelCurvePath; // 0x650(0x28)
	struct TSoftObjectPtr<UMaterialInterface> FresnelMatPath; // 0x678(0x28)
	bool bIsShowSwitchParticleEffect; // 0x6a0(0x01)
	char pad_6A1[0x7]; // 0x6a1(0x07)
	struct TSoftObjectPtr<UParticleSystem> SwitchParticleEffectPath; // 0x6a8(0x28)
	char pad_6D0[0x8]; // 0x6d0(0x08)
	float SwitchEffectInterval; // 0x6d8(0x04)
	float SelfDelayShowSeconds; // 0x6dc(0x04)
	struct UStaticMeshComponent* DissovleMeshComponent; // 0x6e0(0x08)
	struct TArray<struct UMaterialInstanceDynamic*> DissovleMaterials; // 0x6e8(0x10)
	struct UStaticMeshComponent* FresnelMeshComponent; // 0x6f8(0x08)
	struct TArray<struct UMaterialInstanceDynamic*> FresnelMaterials; // 0x700(0x10)
	char pad_710[0x20]; // 0x710(0x20)

	void StopSwitchEffect(); // Function Solarland.SwitchEffectStaticMeshComponent.StopSwitchEffect // (Final|Native|Public) // @ game+0x2290b70
	void PlaySwitchEffect(); // Function Solarland.SwitchEffectStaticMeshComponent.PlaySwitchEffect // (Final|Native|Public) // @ game+0x2290760
};

// Class Solarland.TalentDataAsset
// Size: 0xa0 (Inherited: 0x30)
struct UTalentDataAsset : UPrimaryDataAsset {
	struct FSoftClassPath TalentClassPath; // 0x30(0x18)
	struct FSoftObjectPath TalentIconPath; // 0x48(0x18)
	struct FText TalentName; // 0x60(0x18)
	int32_t NameTextID; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FText TalentDescription; // 0x80(0x18)
	int32_t DescriptionTextID; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.TeamBoostProjectile
// Size: 0x288 (Inherited: 0x228)
struct ATeamBoostProjectile : AActor {
	float BaseMoveSpeed; // 0x228(0x04)
	float MaxMoveSpeed; // 0x22c(0x04)
	float MoveAcceleration; // 0x230(0x04)
	float HeightOffset; // 0x234(0x04)
	float FinishDistance; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)
	struct TArray<struct FActorParticleEffectSpawnInfo> ProjectileParticleSpawnInfos; // 0x240(0x10)
	struct TArray<struct UParticleSystemComponent*> ProjectileParticleComponents; // 0x250(0x10)
	struct TWeakObjectPtr<struct ASolarCharacter> TargetCharacter; // 0x260(0x08)
	char pad_268[0x20]; // 0x268(0x20)

	void OnRep_TargetCharacter(); // Function Solarland.TeamBoostProjectile.OnRep_TargetCharacter // (Final|Native|Private) // @ game+0x2290330
};

// Class Solarland.TeammateHUD
// Size: 0x398 (Inherited: 0x348)
struct UTeammateHUD : USolarUserWidget {
	struct USolarTextBlock* Txt_Distance; // 0x348(0x08)
	struct USolarTextBlock* Txt_Distance_Unit; // 0x350(0x08)
	struct UUIComponentNationalFlag* NationalFlag; // 0x358(0x08)
	struct UTextBlock* Txt_NickName; // 0x360(0x08)
	struct UImage* BTN_Rescue; // 0x368(0x08)
	struct UWidget* Img_UVASign; // 0x370(0x08)
	struct FString PlayerNameSeparator; // 0x378(0x10)
	char pad_388[0x10]; // 0x388(0x10)

	void UpdateName(struct FString InNickName); // Function Solarland.TeammateHUD.UpdateName // (Final|Native|Protected) // @ game+0x2290cb0
	void UpdateMemberNum(char PosInTeam); // Function Solarland.TeammateHUD.UpdateMemberNum // (Final|Native|Protected) // @ game+0x2290c30
	void UpdateDistance(float InDis); // Function Solarland.TeammateHUD.UpdateDistance // (Final|Native|Protected) // @ game+0x2290bb0
	void SetRescueVisibility(bool bShow); // Function Solarland.TeammateHUD.SetRescueVisibility // (Final|Native|Protected) // @ game+0x2290990
	void SetDodgeDisplay(bool bShow); // Function Solarland.TeammateHUD.SetDodgeDisplay // (Final|Native|Protected) // @ game+0x2290900
	void RefreshPosInTeam(char PosInTeam, struct FTeamMemberColor& ColorConfig); // Function Solarland.TeammateHUD.RefreshPosInTeam // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshIsSkydivingCaptain(bool bIsCaptain); // Function Solarland.TeammateHUD.RefreshIsSkydivingCaptain // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OuterSetDistanceDisplay(bool bShown); // Function Solarland.TeammateHUD.OuterSetDistanceDisplay // (Final|Native|Protected) // @ game+0x22906d0
	void OnLocalPlayerSkydivingCaptainChanged(int32_t TeamIndex, struct FString playerName, bool bIsLocalPlayer); // Function Solarland.TeammateHUD.OnLocalPlayerSkydivingCaptainChanged // (Final|Native|Protected) // @ game+0x22901a0
	void OnClickBTN_Rescue(); // Function Solarland.TeammateHUD.OnClickBTN_Rescue // (Final|Native|Protected) // @ game+0x2290180
};

// Class Solarland.TeammateTalentWidget
// Size: 0x378 (Inherited: 0x348)
struct UTeammateTalentWidget : USolarUserWidget {
	struct UImage* Img_Icon_Ability; // 0x348(0x08)
	struct UImage* Img_Icon_CD; // 0x350(0x08)
	struct UGaugeImage* Progress_CD_Mask; // 0x358(0x08)
	struct UWidgetAnimation* Anim_TalentShow; // 0x360(0x08)
	struct UWidgetAnimation* Anim_Cooldown; // 0x368(0x08)
	char pad_370[0x8]; // 0x370(0x08)

	void SetTalentState(enum class ETalentState InTalentUIState, float InAdditionalParam); // Function Solarland.TeammateTalentWidget.SetTalentState // (Final|Native|Public|BlueprintCallable) // @ game+0x2290aa0
	void SetTalentIconByID(char InTalentID); // Function Solarland.TeammateTalentWidget.SetTalentIconByID // (Final|Native|Public|BlueprintCallable) // @ game+0x2290a20
};

// Class Solarland.TechDesignUIOperationDispatcher
// Size: 0x1458 (Inherited: 0x1288)
struct UTechDesignUIOperationDispatcher : UHUDDispatcherBase {
	struct FDelegate OnWidgetAddToBattleUIRequest; // 0x1288(0x10)
	struct FDelegate OnWidgetAddToBackpackUIRequest; // 0x1298(0x10)
	struct FDelegate OnWidgetAddToMapUIRequest; // 0x12a8(0x10)
	struct FDelegate OnClearBattleUISlotRequest; // 0x12b8(0x10)
	struct FDelegate OnClearBackpackUISlotRequest; // 0x12c8(0x10)
	struct FDelegate OnClearMapUISlotRequest; // 0x12d8(0x10)
	struct FDelegate OnSetBattleUISubItemVisibilityByGameMode; // 0x12e8(0x10)
	struct FDelegate RegisterCustomMapMarkToMiniMap; // 0x12f8(0x10)
	struct FDelegate RegisterCustomMapMarkToBigMap; // 0x1308(0x10)
	struct FDelegate RemoveCustomMapMarkFromMiniMap; // 0x1318(0x10)
	struct FDelegate RemoveCustomMapMarkFromBigMap; // 0x1328(0x10)
	struct FDelegate RegisterCustomRotBarMark; // 0x1338(0x10)
	struct FDelegate RemoveCustomRotBarMark; // 0x1348(0x10)
	struct FMulticastInlineDelegate OnAllPlayerNavVisibilityChanged; // 0x1358(0x10)
	struct FMulticastInlineDelegate OnBattleUIVisibilityChanged; // 0x1368(0x10)
	struct FMulticastInlineDelegate OnPowerBarVisibilityChanged; // 0x1378(0x10)
	struct FMulticastInlineDelegate OnRotationBarVisibilityChanged; // 0x1388(0x10)
	struct FMulticastInlineDelegate OnMiniMapFovChangeRequested; // 0x1398(0x10)
	struct FDelegate OnMiniMapInitMarkIconRequested; // 0x13a8(0x10)
	struct FDelegate OnBigMapAddDotLineRequested; // 0x13b8(0x10)
	struct FDelegate OnMiniMapAddDotLineRequested; // 0x13c8(0x10)
	struct FMulticastInlineDelegate OnBigMapRemoveDotLineRequested; // 0x13d8(0x10)
	struct FMulticastInlineDelegate OnMiniMapRemoveDotLineRequested; // 0x13e8(0x10)
	struct FDelegate RegisterPositionMark; // 0x13f8(0x10)
	struct FDelegate RegisterActorMark; // 0x1408(0x10)
	struct FMulticastInlineDelegate OnBattleUIVisibilityHasChanged; // 0x1418(0x10)
	struct FDelegate OnGettingCanvasPositionOnBattleUI; // 0x1428(0x10)
	struct FDelegate OnGettingWidgetRenderTransOnBattleUI; // 0x1438(0x10)
	struct FDelegate OnGettingTextOnBackpackUI; // 0x1448(0x10)

	void SimpleTDDelegate__DelegateSignature(); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.SimpleTDDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	void OnWidgetVisibilityHasChanged__DelegateSignature(bool bVisible); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnWidgetVisibilityHasChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	struct FString OnWidgetAddToBattleUIRequest__DelegateSignature(struct UPanelSlot*& Result, struct UWidget* WidgetForAdd, struct FName& PanelNameToAdd, bool bReplaceOld); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnWidgetAddToBattleUIRequest__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x25d85b0
	struct FString OnSetBattleUISubItemVisibilityByGameMode__DelegateSignature(enum class ECustomGameModeTypeForUI GameModeType); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnSetBattleUISubItemVisibilityByGameMode__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	struct FString OnRegisterPositionMarkRequested__DelegateSignature(struct UActorMarkBase*& Result, struct UActorMarkBase* MarkClass, struct FVector& Position); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnRegisterPositionMarkRequested__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x25d85b0
	struct FString OnRegisterActorMarkRequested__DelegateSignature(struct UActorMarkBase*& Result, struct UActorMarkBase* MarkClass, struct AActor* FollowActor); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnRegisterActorMarkRequested__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x25d85b0
	struct UMapMarkBase* OnMiniMapInitMarkIconRequested__DelegateSignature(struct UMapMarkBase* MapMarkClass, struct FVector2D& Pivot, int32_t ZOrder); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnMiniMapInitMarkIconRequested__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x25d85b0
	void OnMiniMapFovChangeRequested__DelegateSignature(float TargetFOV, float PlayTime, bool bWithIconScale); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnMiniMapFovChangeRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	int32_t OnMapAddDotLineRequested__DelegateSignature(struct AActor* StartPointActor, struct AActor* EndPointActor, struct FLinearColor DotLineColor); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnMapAddDotLineRequested__DelegateSignature // (Public|Delegate|HasDefaults) // @ game+0x25d85b0
	struct FString OnGettingWidgetTransRequest__DelegateSignature(struct FWidgetTransform& Result, struct FName& WidgetName); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnGettingWidgetTransRequest__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x25d85b0
	struct FString OnGettingVector2DRequest__DelegateSignature(struct FVector2D& Result, struct FName& WidgetName); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnGettingVector2DRequest__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x25d85b0
	struct FString OnGettingTextRequest__DelegateSignature(struct FText& Result, struct FName& TextBlockName); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnGettingTextRequest__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void OnCustomRotationBarMarkRemoved__DelegateSignature(struct URotationBarMarkWidget* MarkToRemove); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnCustomRotationBarMarkRemoved__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	struct URotationBarMarkWidget* OnCustomRotationBarMarkRegistered__DelegateSignature(struct URotationBarMarkWidget* RotationBarMarkClass, struct FVector& MarkPos, int32_t ZOrder); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnCustomRotationBarMarkRegistered__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x25d85b0
	void OnCustomMapMarkRemoved__DelegateSignature(struct UMapMarkBase* MarkToRemove); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnCustomMapMarkRemoved__DelegateSignature // (Public|Delegate) // @ game+0x25d85b0
	struct UMapMarkBase* OnCustomMapMarkRegistered__DelegateSignature(struct UMapMarkBase* MapMarkClass, struct FVector2D& MarkPos, bool bSupportEdge, bool bSupportEdgeInBigMap, int32_t ZOrder); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnCustomMapMarkRegistered__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x25d85b0
	struct FString OnClearBattleUISlotRequest__DelegateSignature(struct FName& PanelNameToClear); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnClearBattleUISlotRequest__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x25d85b0
	void IntTDDelegate__DelegateSignature(int32_t Value); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.IntTDDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
	bool GetWidgetRenderTransOnBattleUI(struct FWidgetTransform& Result, struct FName WidgetName); // Function Solarland.TechDesignUIOperationDispatcher.GetWidgetRenderTransOnBattleUI // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x228ff40
	bool GetTextOnBackpackUI(struct FText& Result, struct FName TextBlockName); // Function Solarland.TechDesignUIOperationDispatcher.GetTextOnBackpackUI // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x228fe20
	bool GetCanvasPositionOnBattleUI(struct FVector2D& Result, struct FName ChildName); // Function Solarland.TechDesignUIOperationDispatcher.GetCanvasPositionOnBattleUI // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x228fd40
	void BroadcastRotationBarVisibilityChanged(bool bVisible); // Function Solarland.TechDesignUIOperationDispatcher.BroadcastRotationBarVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x228fac0
	void BroadcastPowerBarVisibilityChanged(bool bVisible); // Function Solarland.TechDesignUIOperationDispatcher.BroadcastPowerBarVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x228fa30
	void BroadcastBattleUIVisibilityChanged(bool bVisible); // Function Solarland.TechDesignUIOperationDispatcher.BroadcastBattleUIVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x228f9a0
	void BroadcastAllPlayerNavVisibilityChanged(bool bVisible); // Function Solarland.TechDesignUIOperationDispatcher.BroadcastAllPlayerNavVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x228f910
	void BoolTDDelegate__DelegateSignature(bool bValue); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.BoolTDDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x25d85b0
};

// Class Solarland.Temp_BigMap
// Size: 0x350 (Inherited: 0x348)
struct UTemp_BigMap : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)

	void OnBigMapVisibilitySet(bool bVisible); // Function Solarland.Temp_BigMap.OnBigMapVisibilitySet // (Final|Native|Protected|BlueprintCallable) // @ game+0x2294ee0
	struct FString ClearWidgetInPanel(struct FName& InPanelName); // Function Solarland.Temp_BigMap.ClearWidgetInPanel // (Final|Native|Protected|HasOutParms) // @ game+0x22942e0
	struct FString AddWidgetToPanel(struct UPanelSlot*& OutResult, struct UWidget* InWidget, struct FName& InPanelName, bool bReplaceOld); // Function Solarland.Temp_BigMap.AddWidgetToPanel // (Final|Native|Protected|HasOutParms) // @ game+0x2293f20
};

// Class Solarland.Temp_Settings
// Size: 0x350 (Inherited: 0x348)
struct UTemp_Settings : USolarUserWidget {
	char pad_348[0x8]; // 0x348(0x08)

	void SaveAndQuit(); // Function Solarland.Temp_Settings.SaveAndQuit // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnSettingRequestOpened(int32_t InOwnerType); // Function Solarland.Temp_Settings.OnSettingRequestOpened // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.Temp_SolarBattleControl
// Size: 0x4a8 (Inherited: 0x348)
struct UTemp_SolarBattleControl : USolarUserWidget {
	char pad_348[0xc8]; // 0x348(0xc8)
	struct TMap<struct FString, struct UObject*> IconMap; // 0x410(0x50)
	char pad_460[0x8]; // 0x460(0x08)
	struct UUserWidget* UI_KillInfo_A; // 0x468(0x08)
	struct UUserWidget* UI_KillInfo_B; // 0x470(0x08)
	char pad_478[0x10]; // 0x478(0x10)
	struct FString RevengeIconName; // 0x488(0x10)
	struct USolarAdapterWidget* Panel_Shortcut; // 0x498(0x08)
	struct UImage* Image_UnderWater; // 0x4a0(0x08)

	struct FString SetBattleUISubItemVisibilityByGameMode(enum class ECustomGameModeTypeForUI GameModeType); // Function Solarland.Temp_SolarBattleControl.SetBattleUISubItemVisibilityByGameMode // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnToggleCursorVisibility(bool bIsVisible); // Function Solarland.Temp_SolarBattleControl.OnToggleCursorVisibility // (Final|Native|Protected) // @ game+0x22950d0
	struct UUserWidget* OnHomeGetSelf(); // Function Solarland.Temp_SolarBattleControl.OnHomeGetSelf // (Final|Native|Protected) // @ game+0x2295060
	void OnHideFromLua(); // Function Solarland.Temp_SolarBattleControl.OnHideFromLua // (Final|Native|Protected) // @ game+0x2295040
	void OnBattleUIVisibilityChanged(bool bVisible); // Function Solarland.Temp_SolarBattleControl.OnBattleUIVisibilityChanged // (Final|Native|Protected) // @ game+0x202ea70
	struct FString GetRenderTransPosition(struct FWidgetTransform& OutResult, struct FName& InPanelName); // Function Solarland.Temp_SolarBattleControl.GetRenderTransPosition // (Final|Native|Protected|HasOutParms) // @ game+0x2294bb0
	struct FString GetCanvasPosition(struct FVector2D& OutResult, struct FName& ChildName); // Function Solarland.Temp_SolarBattleControl.GetCanvasPosition // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2294a50
	struct FString ClearWidgetInPanel(struct FName& InPanelName); // Function Solarland.Temp_SolarBattleControl.ClearWidgetInPanel // (Final|Native|Protected|HasOutParms) // @ game+0x22943c0
	struct FString AddWidgetToPanel(struct UPanelSlot*& OutResult, struct UWidget* InWidget, struct FName& InPanelName, bool bReplaceOld); // Function Solarland.Temp_SolarBattleControl.AddWidgetToPanel // (Final|Native|Protected|HasOutParms) // @ game+0x2294100
};

// Class Solarland.TimedEffectController
// Size: 0x40 (Inherited: 0x28)
struct UTimedEffectController : UActorEffectController {
	float FadeInTime; // 0x28(0x04)
	float KeepTime; // 0x2c(0x04)
	float FadeOutTime; // 0x30(0x04)
	char pad_34[0xc]; // 0x34(0x0c)
};

// Class Solarland.Tutorial
// Size: 0x130 (Inherited: 0x28)
struct UTutorial : UObject {
	char pad_28[0x38]; // 0x28(0x38)
	struct FTutorialTableRow Data; // 0x60(0x98)
	struct UTutorialTriggerCondition* TriggerConditionBP; // 0xf8(0x08)
	struct UTutorialTaskSequenceAction* TutorialTask; // 0x100(0x08)
	char pad_108[0x28]; // 0x108(0x28)

	void Stop(); // Function Solarland.Tutorial.Stop // (Final|Native|Public) // @ game+0x2295ae0
	void OnSingleTaskFinish(); // Function Solarland.Tutorial.OnSingleTaskFinish // (Final|Native|Private) // @ game+0x22950b0
	struct FTutorialTableRow GetTableRowData(); // Function Solarland.Tutorial.GetTableRowData // (Final|Native|Public|Const) // @ game+0x2294d60
	int32_t GetCurrentFinishNum(); // Function Solarland.Tutorial.GetCurrentFinishNum // (Final|Native|Public|Const) // @ game+0xb9f760
};

// Class Solarland.TutorialCondition
// Size: 0x28 (Inherited: 0x28)
struct UTutorialCondition : UObject {

	struct FString GetWorldName(); // Function Solarland.TutorialCondition.GetWorldName // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2294de0
	struct ASolarCharacter* GetPlayer(); // Function Solarland.TutorialCondition.GetPlayer // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2294b80
};

// Class Solarland.TutorialActionCondition
// Size: 0x1f8 (Inherited: 0x28)
struct UTutorialActionCondition : UTutorialCondition {
	struct FTutorialActionTableRow ActionData; // 0x28(0x1d0)

	void SpawnFixedAreaInteractActor(int32_t SpawnerID, struct ATutorialLevelInteractableActor*& OutActor); // Function Solarland.TutorialActionCondition.SpawnFixedAreaInteractActor // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x22959d0
	void OnReset(); // Function Solarland.TutorialActionCondition.OnReset // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnEnd(); // Function Solarland.TutorialActionCondition.OnEnd // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnBegin(); // Function Solarland.TutorialActionCondition.OnBegin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct USolarTutorialManager* GetSolarTutorialManager(); // Function Solarland.TutorialActionCondition.GetSolarTutorialManager // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2294d30
	void GetBotAIsOnVehicle(struct TArray<int32_t> SpawnerIds, struct TArray<struct ASolarBotAIControllerOnVehicle*>& OutBotAI); // Function Solarland.TutorialActionCondition.GetBotAIsOnVehicle // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x22948f0
	void GetBotAIs(struct TArray<int32_t> SpawnerIds, struct TArray<struct ASolarBotAIControllerInGuide*>& OutBotAI); // Function Solarland.TutorialActionCondition.GetBotAIs // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x2294790
	void GetAllActorsOfClass(struct AActor* ActorClass, struct TArray<struct AActor*>& OutActors); // Function Solarland.TutorialActionCondition.GetAllActorsOfClass // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x22946a0
	bool CheckSatisfy(); // Function Solarland.TutorialActionCondition.CheckSatisfy // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.TutorialLevelInteractableActor
// Size: 0x228 (Inherited: 0x228)
struct ATutorialLevelInteractableActor : AActor {

	void UnregisterEvent(); // Function Solarland.TutorialLevelInteractableActor.UnregisterEvent // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RegisterEvent(); // Function Solarland.TutorialLevelInteractableActor.RegisterEvent // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct USolarTutorialManager* GetSolarTutorialManager(); // Function Solarland.TutorialLevelInteractableActor.GetSolarTutorialManager // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2294d30
};

// Class Solarland.TutorialLevelSaveGame
// Size: 0x80 (Inherited: 0x28)
struct UTutorialLevelSaveGame : USaveGame {
	struct TMap<struct FString, struct FTutorialLevelSaveData> TutorialLevelSaveDatas; // 0x28(0x50)
	enum class EPlayerProficiency PlayerProficiency; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Solarland.TutorialLevelSpawner
// Size: 0x250 (Inherited: 0x228)
struct ATutorialLevelSpawner : AActor {
	int32_t SpawnerID; // 0x228(0x04)
	struct FVector BoxExtent; // 0x22c(0x0c)
	bool bSpawnBeginPlay; // 0x238(0x01)
	char pad_239[0x3]; // 0x239(0x03)
	float DelayTime; // 0x23c(0x04)
	struct ATutorialLevelInteractableActor* InteractableActorClass; // 0x240(0x08)
	char pad_248[0x8]; // 0x248(0x08)

	struct ATutorialLevelInteractableActor* SpawnInteractActor(); // Function Solarland.TutorialLevelSpawner.SpawnInteractActor // (Final|Native|Public|BlueprintCallable) // @ game+0x2295ab0
};

// Class Solarland.TutorialLevelSplineComponent
// Size: 0x6a0 (Inherited: 0x630)
struct UTutorialLevelSplineComponent : USplineComponent {
	struct TMap<enum class ESplineMeshType, struct FSplineMeshDetails> SplineMeshMap; // 0x630(0x50)
	struct UTutorialLevelSplineComponent* FollowingSpline; // 0x680(0x08)
	struct TArray<struct USplineMeshComponent*> SplineMeshComponents; // 0x688(0x10)
	char pad_698[0x8]; // 0x698(0x08)

	void SetMeshsVisibility(bool bNewVisibility, bool bPropagateToChildren); // Function Solarland.TutorialLevelSplineComponent.SetMeshsVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x2295690
	void SetFollowingSpline(struct UTutorialLevelSplineComponent* InFollowingSpline); // Function Solarland.TutorialLevelSplineComponent.SetFollowingSpline // (Final|Native|Public|BlueprintCallable) // @ game+0x2295600
	void CreateSplineMesh(); // Function Solarland.TutorialLevelSplineComponent.CreateSplineMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x22944a0
};

// Class Solarland.TutorialStepAction
// Size: 0x280 (Inherited: 0x70)
struct UTutorialStepAction : UActionNode {
	char pad_70[0x28]; // 0x70(0x28)
	int32_t OwnerTutorialID; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct FTutorialActionTableRow Data; // 0xa0(0x1d0)
	struct UTutorialActionCondition* InterruptConditionBP; // 0x270(0x08)
	struct UTutorialActionCondition* EndConditionBP; // 0x278(0x08)

	void StartRepeatOperation(); // Function Solarland.TutorialStepAction.StartRepeatOperation // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void SpawnBotAIsOnVehicle(struct TArray<int32_t> SpawnerIds); // Function Solarland.TutorialStepAction.SpawnBotAIsOnVehicle // (Final|Native|Protected|BlueprintCallable) // @ game+0x22958e0
	void SpawnBotAIs(struct TArray<int32_t> SpawnerIds); // Function Solarland.TutorialStepAction.SpawnBotAIs // (Final|Native|Protected|BlueprintCallable) // @ game+0x22957f0
	void ShowUI(); // Function Solarland.TutorialStepAction.ShowUI // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void RepeatOperation(); // Function Solarland.TutorialStepAction.RepeatOperation // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveTick(float DeltaTime); // Function Solarland.TutorialStepAction.ReceiveTick // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveSetupData(); // Function Solarland.TutorialStepAction.ReceiveSetupData // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveOnReset(); // Function Solarland.TutorialStepAction.ReceiveOnReset // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveOnEnd(); // Function Solarland.TutorialStepAction.ReceiveOnEnd // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveOnBegin(); // Function Solarland.TutorialStepAction.ReceiveOnBegin // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void ReceiveMinExecuteTimeUp(); // Function Solarland.TutorialStepAction.ReceiveMinExecuteTimeUp // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnResetEvent(); // Function Solarland.TutorialStepAction.OnResetEvent // (Final|Native|Private) // @ game+0x2295090
	void OnEndedEvent(); // Function Solarland.TutorialStepAction.OnEndedEvent // (Final|Native|Private) // @ game+0x2295020
	void OnDisposedEvent(); // Function Solarland.TutorialStepAction.OnDisposedEvent // (Final|Native|Private) // @ game+0x2295000
	void OnBeganEvent(); // Function Solarland.TutorialStepAction.OnBeganEvent // (Final|Native|Private) // @ game+0x2294ec0
	struct FTutorialActionTableRow GetTableRowData(); // Function Solarland.TutorialStepAction.GetTableRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2294da0
	void DestoryBotAIsOnVehicle(struct TArray<int32_t> SpawnerIds); // Function Solarland.TutorialStepAction.DestoryBotAIsOnVehicle // (Final|Native|Protected|BlueprintCallable) // @ game+0x22945b0
	void DestoryBotAIs(struct TArray<int32_t> SpawnerIds); // Function Solarland.TutorialStepAction.DestoryBotAIs // (Final|Native|Protected|BlueprintCallable) // @ game+0x22944c0
};

// Class Solarland.TutorialTaskSequenceAction
// Size: 0x90 (Inherited: 0x90)
struct UTutorialTaskSequenceAction : USequenceNode {
};

// Class Solarland.TutorialTriggerCondition
// Size: 0x28 (Inherited: 0x28)
struct UTutorialTriggerCondition : UTutorialCondition {

	struct USolarTutorialManager* GetSolarTutorialManager(); // Function Solarland.TutorialTriggerCondition.GetSolarTutorialManager // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2294d30
	bool CheckSatisfy(struct FTutorialTableRow& InData); // Function Solarland.TutorialTriggerCondition.CheckSatisfy // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.TweenBase
// Size: 0x2d8 (Inherited: 0x260)
struct UTweenBase : UUserWidget {
	bool AutoPlay; // 0x260(0x01)
	char pad_261[0x3]; // 0x261(0x03)
	float Interval; // 0x264(0x04)
	bool bLoop; // 0x268(0x01)
	bool bEndHide; // 0x269(0x01)
	char pad_26A[0x26]; // 0x26a(0x26)
	struct FMulticastInlineDelegate OnTweenStart; // 0x290(0x10)
	struct FMulticastInlineDelegate OnTweenStop; // 0x2a0(0x10)
	char pad_2B0[0x10]; // 0x2b0(0x10)
	struct UWidget* LinkWidget; // 0x2c0(0x08)
	char pad_2C8[0x4]; // 0x2c8(0x04)
	float Progress; // 0x2cc(0x04)
	char pad_2D0[0x8]; // 0x2d0(0x08)

	void Stop(); // Function Solarland.TweenBase.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x2295b00
	void Reset(); // Function Solarland.TweenBase.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0x22955e0
	void Play(); // Function Solarland.TweenBase.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x2295530
	void InitAndPlay(); // Function Solarland.TweenBase.InitAndPlay // (Final|Native|Public|BlueprintCallable) // @ game+0x2294e80
	void Init(); // Function Solarland.TweenBase.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x2294e60
};

// Class Solarland.TweenImage
// Size: 0x3d0 (Inherited: 0x2d8)
struct UTweenImage : UTweenBase {
	struct UImage* TargetImg; // 0x2d8(0x08)
	struct FUIScaleTween ScaleTween; // 0x2e0(0x40)
	struct FUIPositionTween PostionTween; // 0x320(0x40)
	struct FImageColorTween ColorTween; // 0x360(0x48)
	struct FUIRenderOpacityTween OpacityTween; // 0x3a8(0x28)

	void InitImageTween(); // Function Solarland.TweenImage.InitImageTween // (Final|Native|Public|BlueprintCallable) // @ game+0x2294ea0
};

// Class Solarland.TweenText
// Size: 0x3a8 (Inherited: 0x2d8)
struct UTweenText : UTweenBase {
	struct UTextBlock* TargetText; // 0x2d8(0x08)
	struct FUIScaleTween ScaleTween; // 0x2e0(0x40)
	struct FUIPositionTween PostionTween; // 0x320(0x40)
	struct FTextColorTween ColorTween; // 0x360(0x48)
};

// Class Solarland.TweenWidget
// Size: 0x388 (Inherited: 0x2d8)
struct UTweenWidget : UTweenBase {
	struct UWidget* TargetWidget; // 0x2d8(0x08)
	struct FUIScaleTween ScaleTween; // 0x2e0(0x40)
	struct FUIPositionTween PostionTween; // 0x320(0x40)
	struct FUIRenderOpacityTween OpacityTween; // 0x360(0x28)
};

// Class Solarland.UIBackpackWeaponWidget
// Size: 0x4e8 (Inherited: 0x348)
struct UUIBackpackWeaponWidget : USolarUserWidget {
	struct UButton* BtnWeapon; // 0x348(0x08)
	struct UCanvasPanel* Panel_Empty; // 0x350(0x08)
	struct UCanvasPanel* Panel_Info; // 0x358(0x08)
	struct UHorizontalBox* HorizontalBox_Name; // 0x360(0x08)
	struct UHorizontalBox* HorizontalBox_Ammo; // 0x368(0x08)
	struct UImage* Img_Bg; // 0x370(0x08)
	struct UImage* Img_DragDetect; // 0x378(0x08)
	struct UUIDragWidget* Drag_Weapon; // 0x380(0x08)
	struct USolarTextBlock* Txt_Name; // 0x388(0x08)
	struct USolarTextBlock* Txt_BulletNum; // 0x390(0x08)
	struct USolarTextBlock* Txt_BulletSum; // 0x398(0x08)
	struct USolarTextBlock* Txt_Range; // 0x3a0(0x08)
	struct USolarTextBlock* Txt_Difficulty; // 0x3a8(0x08)
	struct UVerticalBox* Weapon_Detail; // 0x3b0(0x08)
	struct USolarTextBlock* Txt_Weapon_Type; // 0x3b8(0x08)
	struct USolarTextBlock* Txt_DMGNum; // 0x3c0(0x08)
	struct UImage* Img_BulletIcon; // 0x3c8(0x08)
	struct UHorizontalBox* Weapon_Parts_New; // 0x3d0(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Muzzle; // 0x3d8(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Grip; // 0x3e0(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Clip; // 0x3e8(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Scope; // 0x3f0(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_GunStock; // 0x3f8(0x08)
	int32_t weaponid; // 0x400(0x04)
	uint32_t WeaponUniqueID; // 0x404(0x04)
	int32_t WeaponSlot; // 0x408(0x04)
	int32_t WeaponAmmoNum; // 0x40c(0x04)
	int32_t WeaponExtraAmmoNum; // 0x410(0x04)
	enum class EWidgetPassiveMode WeaponPassiveMode; // 0x414(0x01)
	char pad_415[0x3]; // 0x415(0x03)
	struct TMap<enum class EWeaponType, int32_t> WeaponType2TextIdMap; // 0x418(0x50)
	struct TMap<enum class EWeaponType, struct FSoftObjectPath> WeaponType2BulltSpMap; // 0x468(0x50)
	struct FVector2D ImgSkillSize; // 0x4b8(0x08)
	char pad_4C0[0x4]; // 0x4c0(0x04)
	struct TWeakObjectPtr<struct ASolarPlayerNormalWeapon> OwnerWeapon; // 0x4c4(0x08)
	char pad_4CC[0x1c]; // 0x4cc(0x1c)

	void UpdatePassiveMode(); // Function Solarland.UIBackpackWeaponWidget.UpdatePassiveMode // (Final|Native|Protected) // @ game+0x2295b20
	void SetWidgetPassiveMode(enum class EWidgetPassiveMode InMode); // Function Solarland.UIBackpackWeaponWidget.SetWidgetPassiveMode // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void SetWeaponSlot(int32_t InWeaponSlot); // Function Solarland.UIBackpackWeaponWidget.SetWeaponSlot // (Final|Native|Public) // @ game+0x2295760
	void RefreshBySlot(int32_t InWeaponSlot); // Function Solarland.UIBackpackWeaponWidget.RefreshBySlot // (Final|Native|Public) // @ game+0x2295550
	void OnWeaponUpdateAmmoCount(int32_t InFireModeType, struct ASolarWeapon* InWeapon); // Function Solarland.UIBackpackWeaponWidget.OnWeaponUpdateAmmoCount // (Final|Native|Protected) // @ game+0x2295460
	void OnWeaponSlotUpdateAmmo(int32_t InWeaponSlotID); // Function Solarland.UIBackpackWeaponWidget.OnWeaponSlotUpdateAmmo // (Final|Native|Protected) // @ game+0x22953d0
	void OnWeaponSlotQuitReload(int32_t InWeaponSlotID, bool InbFinishReload); // Function Solarland.UIBackpackWeaponWidget.OnWeaponSlotQuitReload // (Final|Native|Protected) // @ game+0x2295300
	void OnWeaponPartChanged(int32_t InWeaponID); // Function Solarland.UIBackpackWeaponWidget.OnWeaponPartChanged // (Final|Native|Protected) // @ game+0x2295270
	void OnWeaponAmmoChanged(int32_t InWeaponSlot, int32_t InCurrNum, int32_t MaxNum); // Function Solarland.UIBackpackWeaponWidget.OnWeaponAmmoChanged // (Final|Native|Protected) // @ game+0x2295160
	void OnCharacterLevelChanged(int32_t NewLevel); // Function Solarland.UIBackpackWeaponWidget.OnCharacterLevelChanged // (Final|Native|Protected) // @ game+0x2294f70
};

// Class Solarland.UIBackpackWidget
// Size: 0x5f8 (Inherited: 0x348)
struct UUIBackpackWidget : USolarUserWidget {
	struct UUIWeaponPartWidget* Weapon_Part_Muzzle; // 0x348(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Grip; // 0x350(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Clip; // 0x358(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Scope; // 0x360(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_GunStock; // 0x368(0x08)
	struct URichTextBlock* TextBlock_item_2; // 0x370(0x08)
	struct URichTextBlock* TextBlock_item_3; // 0x378(0x08)
	struct URichTextBlock* TextBlock_item_4; // 0x380(0x08)
	struct URichTextBlock* TextBlock_item_5; // 0x388(0x08)
	struct URichTextBlock* TextBlock_item_6; // 0x390(0x08)
	struct URichTextBlock* TextBlock_item_7; // 0x398(0x08)
	struct URichTextBlock* TextBlock_item_8; // 0x3a0(0x08)
	struct URichTextBlock* TextBlock_item_9; // 0x3a8(0x08)
	struct URichTextBlock* TextBlock_item_10; // 0x3b0(0x08)
	struct UUIDragWidget* dragitem_item_2; // 0x3b8(0x08)
	struct UUIDragWidget* dragitem_item_3; // 0x3c0(0x08)
	struct UUIDragWidget* dragitem_item_4; // 0x3c8(0x08)
	struct UUIDragWidget* dragitem_item_5; // 0x3d0(0x08)
	struct UUIDragWidget* dragitem_item_6; // 0x3d8(0x08)
	struct UUIDragWidget* dragitem_item_7; // 0x3e0(0x08)
	struct UUIDragWidget* dragitem_item_8; // 0x3e8(0x08)
	struct UUIDragWidget* dragitem_item_9; // 0x3f0(0x08)
	struct UUIDragWidget* dragitem_item_10; // 0x3f8(0x08)
	struct UUIDragWidget* dragitem_Relive; // 0x400(0x08)
	struct UUIBackpackWeaponWidget* Weapon_A; // 0x408(0x08)
	struct UUIBackpackWeaponWidget* Weapon_B; // 0x410(0x08)
	struct UUIDragWidget* dragitem_Summon; // 0x418(0x08)
	struct UCanvasPanel* Panel_Empty; // 0x420(0x08)
	struct UImage* Img_Summon_Bg; // 0x428(0x08)
	struct UUIDragWidget* dragitem_equip_2; // 0x430(0x08)
	struct UUIDragWidget* dragitem_equip_3; // 0x438(0x08)
	struct UUIDragWidget* dragitem_equip_4; // 0x440(0x08)
	struct UUIDragWidget* dragitem_equip_5; // 0x448(0x08)
	struct UImage* Item_BG_2; // 0x450(0x08)
	struct UImage* Item_BG_3; // 0x458(0x08)
	struct UImage* Item_BG_4; // 0x460(0x08)
	struct UImage* Item_BG_5; // 0x468(0x08)
	struct UImage* Item_Quality_BG_2; // 0x470(0x08)
	struct UImage* Item_Quality_BG_3; // 0x478(0x08)
	struct UImage* Item_Quality_BG_4; // 0x480(0x08)
	struct UImage* Item_Quality_BG_5; // 0x488(0x08)
	struct UImage* Equip_Icon_2; // 0x490(0x08)
	struct UImage* Equip_Icon_3; // 0x498(0x08)
	struct UImage* Equip_Icon_4; // 0x4a0(0x08)
	struct UImage* Equip_Icon_5; // 0x4a8(0x08)
	struct UButton* BtnShield; // 0x4b0(0x08)
	struct UButton* BtnBattery; // 0x4b8(0x08)
	struct UButton* BtnHorPush; // 0x4c0(0x08)
	struct UButton* BtnVerPush; // 0x4c8(0x08)
	struct UButton* BtnRespawn; // 0x4d0(0x08)
	struct UButton* BtnSpecial; // 0x4d8(0x08)
	struct UButton* BtnSMGAmmo; // 0x4e0(0x08)
	struct USolarTextBlock* Txt_Relive; // 0x4e8(0x08)
	struct UImage* Relive_Quality_BG; // 0x4f0(0x08)
	struct UOverlay* Relive; // 0x4f8(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Mode; // 0x500(0x08)
	struct UCanvasPanel* PickupPosition; // 0x508(0x08)
	struct UButton* Button_Close; // 0x510(0x08)
	struct UUIDropMaskWidget* OnDropMask; // 0x518(0x08)
	struct UUIDropMaskWidget* OnDropMask_2; // 0x520(0x08)
	struct FString Style_ItemNum; // 0x528(0x10)
	struct FString Style_MaxNum; // 0x538(0x10)
	struct FString EquipTexPrePath; // 0x548(0x10)
	bool bWeaponPartInit; // 0x558(0x01)
	char pad_559[0x7]; // 0x559(0x07)
	struct TArray<int32_t> ItemIDArray; // 0x560(0x10)
	struct TArray<struct URichTextBlock*> ItemTextArray; // 0x570(0x10)
	struct TArray<struct UUIDragWidget*> ItemDragWidgetArray; // 0x580(0x10)
	struct TArray<enum class EItemType> EquipTypeArray; // 0x590(0x10)
	struct TArray<struct UUIDragWidget*> EquipDragWidgetArray; // 0x5a0(0x10)
	struct TArray<struct UImage*> EquipBGArray; // 0x5b0(0x10)
	struct TArray<struct UImage*> EquipQualityBGArray; // 0x5c0(0x10)
	struct TArray<struct UImage*> EquipIconArray; // 0x5d0(0x10)
	struct TArray<struct UButton*> EquipBtnArray; // 0x5e0(0x10)
	int32_t MaxUpgradeLevel; // 0x5f0(0x04)
	char pad_5F4[0x4]; // 0x5f4(0x04)

	void UpdateReviveItemDisplay(); // Function Solarland.UIBackpackWidget.UpdateReviveItemDisplay // (Final|Native|Protected) // @ game+0x2299420
	void UpdateLevelProgress(float Level); // Function Solarland.UIBackpackWidget.UpdateLevelProgress // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void ShowWeaponUI(); // Function Solarland.UIBackpackWidget.ShowWeaponUI // (Final|Native|Protected|BlueprintCallable) // @ game+0x2299290
	void ShowWeaponPartsUI(); // Function Solarland.UIBackpackWidget.ShowWeaponPartsUI // (Final|Native|Protected|BlueprintCallable) // @ game+0x2299270
	void ShowItemUI(); // Function Solarland.UIBackpackWidget.ShowItemUI // (Final|Native|Protected|BlueprintCallable) // @ game+0x2299250
	void ShowHomeItemUI(); // Function Solarland.UIBackpackWidget.ShowHomeItemUI // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void ShowEquipUI(); // Function Solarland.UIBackpackWidget.ShowEquipUI // (Final|Native|Protected|BlueprintCallable) // @ game+0x2298ef0
	void RefreshUpgradeRewardsDetail(int32_t Level, struct TArray<enum class EClassLevelUpRewardType>& RewardTypeArray, struct TArray<struct FSoftObjectPath>& IconPathArray, struct TArray<struct FString>& DescriptionArray); // Function Solarland.UIBackpackWidget.RefreshUpgradeRewardsDetail // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshTacticalSkillInfo(struct FString Name, struct FString Description, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.UIBackpackWidget.RefreshTacticalSkillInfo // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshSuperSkillInfo(struct FString Name, struct FString Description, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.UIBackpackWidget.RefreshSuperSkillInfo // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshSummonWeapon(); // Function Solarland.UIBackpackWidget.RefreshSummonWeapon // (Final|Native|Protected|BlueprintCallable) // @ game+0x2298ed0
	void RefreshPassiveSkillInfo(struct FString Name, struct FString Description, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.UIBackpackWidget.RefreshPassiveSkillInfo // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshCharacterNameAndIcon(struct FString Name, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.UIBackpackWidget.RefreshCharacterNameAndIcon // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void OnWeaponWidgetClicked(); // Function Solarland.UIBackpackWidget.OnWeaponWidgetClicked // (Final|Native|Protected|Const) // @ game+0x2298ce0
	void OnSetDropMaskVisibility(bool bVisible); // Function Solarland.UIBackpackWidget.OnSetDropMaskVisibility // (Final|Native|Protected) // @ game+0x22989d0
	void OnPlayerStateRep(enum class EPlayerStateRepType RepType, struct APlayerState* PlayerState); // Function Solarland.UIBackpackWidget.OnPlayerStateRep // (Final|Native|Protected) // @ game+0x2298900
	void OnCharacterLevelExpChanged(int32_t NewLevel, float NewExpRatio); // Function Solarland.UIBackpackWidget.OnCharacterLevelExpChanged // (Final|Native|Protected) // @ game+0x2298810
	void OnCharacterIDSet(int32_t CharacterId); // Function Solarland.UIBackpackWidget.OnCharacterIDSet // (Final|Native|Protected) // @ game+0x2298780
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.UIBackpackWidget.OnCharacterDead // (Final|Native|Protected) // @ game+0x22986f0
	void OnBtnVerPushClicked(); // Function Solarland.UIBackpackWidget.OnBtnVerPushClicked // (Final|Native|Protected|Const) // @ game+0x22986d0
	void OnBtnSpecialClicked(); // Function Solarland.UIBackpackWidget.OnBtnSpecialClicked // (Final|Native|Protected|Const) // @ game+0x22986b0
	void OnBtnShieldClicked(); // Function Solarland.UIBackpackWidget.OnBtnShieldClicked // (Final|Native|Protected|Const) // @ game+0x2298690
	void OnBtnRespawnClicked(); // Function Solarland.UIBackpackWidget.OnBtnRespawnClicked // (Final|Native|Protected|Const) // @ game+0x2298670
	void OnBtnHorPushClicked(); // Function Solarland.UIBackpackWidget.OnBtnHorPushClicked // (Final|Native|Protected|Const) // @ game+0x2298650
	void OnBtnCloseClicked(); // Function Solarland.UIBackpackWidget.OnBtnCloseClicked // (Final|Native|Protected) // @ game+0x2298630
	void OnBtnBatteryClicked(); // Function Solarland.UIBackpackWidget.OnBtnBatteryClicked // (Final|Native|Protected|Const) // @ game+0x2298610
	void OnBackpackVisibilitySet(bool bInVisible); // Function Solarland.UIBackpackWidget.OnBackpackVisibilitySet // (Final|Native|Protected) // @ game+0x2298580
	void OnBackpackModeChanged(int32_t ModeIndex); // Function Solarland.UIBackpackWidget.OnBackpackModeChanged // (Final|Native|Protected) // @ game+0x22984f0
	void InitDefaultWeaponPart(); // Function Solarland.UIBackpackWidget.InitDefaultWeaponPart // (Final|Native|Protected|BlueprintCallable) // @ game+0x22984d0
	void HideUpgradeDetail(int32_t Level); // Function Solarland.UIBackpackWidget.HideUpgradeDetail // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	struct FString ClearWidgetInPanel(struct FName& InPanelName); // Function Solarland.UIBackpackWidget.ClearWidgetInPanel // (Final|Native|Protected|HasOutParms) // @ game+0x22942e0
	void BindDelegates(); // Function Solarland.UIBackpackWidget.BindDelegates // (Final|Native|Protected) // @ game+0x22984b0
	struct FString AddWidgetToPanel(struct UPanelSlot*& OutResult, struct UWidget* InWidget, struct FName& InPanelName, bool bReplaceOld); // Function Solarland.UIBackpackWidget.AddWidgetToPanel // (Final|Native|Protected|HasOutParms) // @ game+0x2293f20
};

// Class Solarland.UIComponentNationalFlag
// Size: 0x378 (Inherited: 0x348)
struct UUIComponentNationalFlag : USolarUserWidget {
	struct FVector2D NationalFlagSize; // 0x348(0x08)
	struct FVector2D ClanFlagSize; // 0x350(0x08)
	bool bIgnoreAccountFlagSwitch; // 0x358(0x01)
	char pad_359[0x7]; // 0x359(0x07)
	struct UImage* Img_FlagIcon; // 0x360(0x08)
	struct USolarImageURL* Img_ClanFlag; // 0x368(0x08)
	int32_t CurFlagId; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)

	void SetNationalFlagType(); // Function Solarland.UIComponentNationalFlag.SetNationalFlagType // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void SetClanFlagType(); // Function Solarland.UIComponentNationalFlag.SetClanFlagType // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void RefreshFlagByPath(struct FString TextureFullPath); // Function Solarland.UIComponentNationalFlag.RefreshFlagByPath // (Final|Native|Public|BlueprintCallable) // @ game+0x2298e30
	void RefreshFlag(int32_t InFlagID); // Function Solarland.UIComponentNationalFlag.RefreshFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x2298da0
	void RefreshClanFlagByPath(struct FString TextureFullPath); // Function Solarland.UIComponentNationalFlag.RefreshClanFlagByPath // (Final|Native|Public|BlueprintCallable) // @ game+0x2298d00
	void LoadClanFlagByUrl(); // Function Solarland.UIComponentNationalFlag.LoadClanFlagByUrl // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	bool IsExclusiveFlagId(int32_t InFlagID); // Function Solarland.UIComponentNationalFlag.IsExclusiveFlagId // (Event|Protected|BlueprintEvent|Const) // @ game+0x25d85b0
};

// Class Solarland.UIComponentPlayerName
// Size: 0x348 (Inherited: 0x348)
struct UUIComponentPlayerName : USolarUserWidget {

	void UpdatePlayerNameAndStyle(struct FString NickName, char VipType, bool bCheat, bool bKilled); // Function Solarland.UIComponentPlayerName.UpdatePlayerNameAndStyle // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetVip(char VipType); // Function Solarland.UIComponentPlayerName.SetVip // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetTextColorAndOpacity(struct FSlateColor InColor); // Function Solarland.UIComponentPlayerName.SetTextColorAndOpacity // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetText(struct FString Content); // Function Solarland.UIComponentPlayerName.SetText // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetStyle(char VipType, bool bCheat, bool bKilled); // Function Solarland.UIComponentPlayerName.SetStyle // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetDeath(bool bDeath); // Function Solarland.UIComponentPlayerName.SetDeath // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetCheater(bool bCheat); // Function Solarland.UIComponentPlayerName.SetCheater // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.UICustomNoticeLayerWidget
// Size: 0x508 (Inherited: 0x348)
struct UUICustomNoticeLayerWidget : USolarUserWidget {
	struct TMap<enum class ECustomNoticeType, struct UCanvasPanel*> NoticePanel; // 0x348(0x50)
	char pad_398[0xa0]; // 0x398(0xa0)
	struct TMap<enum class ECustomNoticeColor, struct FNoticeColorData> NoticeColor; // 0x438(0x50)
	struct UCustomNoticeTable* NoticeConfig; // 0x488(0x08)
	struct UCustomNoticeImageTable* NoticeImageConfig; // 0x490(0x08)
	struct FSoftObjectPath GlobalKillNoticeWidgetPath; // 0x498(0x18)
	int32_t GlobalKillMaxShowNum; // 0x4b0(0x04)
	int32_t GlobalKillNoticeBeginPosX; // 0x4b4(0x04)
	int32_t GlobalKillNoticeBeginPosY; // 0x4b8(0x04)
	int32_t GlobalKillNoticeInterval; // 0x4bc(0x04)
	char pad_4C0[0x28]; // 0x4c0(0x28)
	struct TWeakObjectPtr<struct UBattleNoticePickup> PickUpNoticeNormalPtr; // 0x4e8(0x08)
	struct TWeakObjectPtr<struct UBattleNoticePickup> PickUpNoticeHomePtr; // 0x4f0(0x08)
	struct TWeakObjectPtr<struct UBattleNoticeEquipReplace> EquipReplaceNoticePtr; // 0x4f8(0x08)
	char pad_500[0x4]; // 0x500(0x04)
	int32_t SkydivingCaptainNoticeId; // 0x504(0x04)

	void UpdateGlobalKillNoticePosition(); // Function Solarland.UICustomNoticeLayerWidget.UpdateGlobalKillNoticePosition // (Native|Event|Protected|BlueprintEvent) // @ game+0x15480b0
	void ShowWidgetAsync(struct FNoticeData& NoticeData); // Function Solarland.UICustomNoticeLayerWidget.ShowWidgetAsync // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x22992b0
	void ShowGameNoticeCustom(struct FString NoticeText, enum class ECustomNoticeType NoticeType, struct UUINoticeBase* NoticeClass, float NoticeTime, enum class ECustomNoticeColor NoticeColor, struct UPaperSprite* NoticeIcon); // Function Solarland.UICustomNoticeLayerWidget.ShowGameNoticeCustom // (Final|Native|Public|BlueprintCallable) // @ game+0x2299060
	void ShowGameNoticeByID(int32_t NoticeId, struct TMap<struct FString, struct FString>& Param); // Function Solarland.UICustomNoticeLayerWidget.ShowGameNoticeByID // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2298f10
	void OnSkydivingCaptainChanged(int32_t TeamIndex, struct FString playerName, bool IsLocalPlayer); // Function Solarland.UICustomNoticeLayerWidget.OnSkydivingCaptainChanged // (Final|Native|Protected) // @ game+0x2298bb0
	void OnShowHUDGameNotice(int32_t InNoticeID, struct FHUDNoticeParams& InNoticeParams); // Function Solarland.UICustomNoticeLayerWidget.OnShowHUDGameNotice // (Final|Native|Protected|HasOutParms) // @ game+0x2298a60
	void OnPickUpNoticeAnimFinished(); // Function Solarland.UICustomNoticeLayerWidget.OnPickUpNoticeAnimFinished // (Final|Native|Private) // @ game+0x22988e0
	void InitNoticePanel(); // Function Solarland.UICustomNoticeLayerWidget.InitNoticePanel // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.UIDefenderPlaerShowWidget
// Size: 0x3d0 (Inherited: 0x348)
struct UUIDefenderPlaerShowWidget : USolarUserWidget {
	struct UScaleBox* ScaleBox_Card; // 0x348(0x08)
	struct FString playerName; // 0x350(0x10)
	int32_t Level; // 0x360(0x04)
	int32_t RankLevelID; // 0x364(0x04)
	int32_t PlayerGender; // 0x368(0x04)
	bool bIsMyTeam; // 0x36c(0x01)
	char pad_36D[0x3]; // 0x36d(0x03)
	int32_t PlayerSeat; // 0x370(0x04)
	bool bIsMySelf; // 0x374(0x01)
	char pad_375[0x3]; // 0x375(0x03)
	int32_t CardPose; // 0x378(0x04)
	int32_t Cardbackground; // 0x37c(0x04)
	struct TArray<struct FExpRankMedalData> AllExpRankMedalData; // 0x380(0x10)
	int32_t CharacterExp; // 0x390(0x04)
	char pad_394[0x4]; // 0x394(0x04)
	struct TArray<struct FMedalInfo> TargetCardMedalArray; // 0x398(0x10)
	struct ASolarPlayerState* PlayerState; // 0x3a8(0x08)
	struct ASolarBusinessCardCharacter* RTCharacter; // 0x3b0(0x08)
	struct AActor* RTCharacterBackground; // 0x3b8(0x08)
	struct FVector RTLocation; // 0x3c0(0x0c)
	char pad_3CC[0x4]; // 0x3cc(0x04)

	void SetPlayerShowInfo(struct ASolarPlayerState* PS, bool bIsSelf, int32_t Seat, bool bIsSelfTeam, int32_t SelfLevel, struct FVector CardRTLocation); // Function Solarland.UIDefenderPlaerShowWidget.SetPlayerShowInfo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x229ebf0
	void SetPlayerBusinessInfo(struct ASolarPlayerState* PS, int32_t PlayerNumber, struct FExpRankMedalData ExpRankMedalData); // Function Solarland.UIDefenderPlaerShowWidget.SetPlayerBusinessInfo // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetCharacterSkin(); // Function Solarland.UIDefenderPlaerShowWidget.SetCharacterSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void SetBusinessCard(int32_t PoseId, int32_t BackgroundId, int32_t SkinId, struct UScaleBox* ParentPanel); // Function Solarland.UIDefenderPlaerShowWidget.SetBusinessCard // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnRefreshWidget(); // Function Solarland.UIDefenderPlaerShowWidget.OnRefreshWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x229dad0
	struct FString GetNameCardCharacterPathByCharacterIDAndCardPose(int32_t CharacterId, int32_t CardPoseID); // Function Solarland.UIDefenderPlaerShowWidget.GetNameCardCharacterPathByCharacterIDAndCardPose // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.UIDefenderTeamShowWidget
// Size: 0x468 (Inherited: 0x348)
struct UUIDefenderTeamShowWidget : USolarUserWidget {
	struct UUIDefenderPlaerShowWidget* Player_2; // 0x348(0x08)
	struct UUIDefenderPlaerShowWidget* Player_3; // 0x350(0x08)
	struct UUIDefenderPlaerShowWidget* Player_4; // 0x358(0x08)
	struct UUIDefenderPlaerShowWidget* Player_5; // 0x360(0x08)
	struct UWidgetAnimation* Exit_Anim; // 0x368(0x08)
	int32_t PlayerNum; // 0x370(0x04)
	bool bIsMyTeam; // 0x374(0x01)
	char pad_375[0x3]; // 0x375(0x03)
	struct FName LevelName; // 0x378(0x08)
	struct FString ActorName_2; // 0x380(0x10)
	struct FString ActorName_3; // 0x390(0x10)
	struct FString ActorName_4; // 0x3a0(0x10)
	struct FString ActorName_5; // 0x3b0(0x10)
	struct FString CameraName_2; // 0x3c0(0x10)
	struct FString CameraName_3; // 0x3d0(0x10)
	struct FString CameraName_4; // 0x3e0(0x10)
	struct FString CameraName_5; // 0x3f0(0x10)
	struct TArray<struct ASolarPlayerState*> MyTeamPlayerState; // 0x400(0x10)
	struct TArray<struct ASolarPlayerState*> DefenderTeamPlayerState; // 0x410(0x10)
	struct TArray<struct UUIDefenderPlaerShowWidget*> ShowWidget; // 0x420(0x10)
	struct TArray<struct AActor*> OutActors; // 0x430(0x10)
	struct TArray<struct ASceneCapture2D*> OutSceneCapture2Ds; // 0x440(0x10)
	struct TArray<struct FWidgetTransform> Transforms; // 0x450(0x10)
	char pad_460[0x8]; // 0x460(0x08)

	void UpdateOpeningShow(enum class EDefenderTeamType TeamType); // Function Solarland.UIDefenderTeamShowWidget.UpdateOpeningShow // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SwitchTeamShow(enum class EDefenderTeamType TeamType); // Function Solarland.UIDefenderTeamShowWidget.SwitchTeamShow // (Final|Native|Public|BlueprintCallable) // @ game+0x229f4d0
	void ShowPlayerInfo(); // Function Solarland.UIDefenderTeamShowWidget.ShowPlayerInfo // (Final|Native|Public) // @ game+0x229f4b0
	void SetMyTeamPlayerState(struct TArray<struct ASolarPlayerState*>& TeamPlayerState); // Function Solarland.UIDefenderTeamShowWidget.SetMyTeamPlayerState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x229eb40
	void SetDefenderTeamPlayerState(struct TArray<struct ASolarPlayerState*>& TeamPlayerState); // Function Solarland.UIDefenderTeamShowWidget.SetDefenderTeamPlayerState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x229ddf0
	void CloseDefenderTeamShowWidget(); // Function Solarland.UIDefenderTeamShowWidget.CloseDefenderTeamShowWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x229c9c0
};

// Class Solarland.UIDragWidget
// Size: 0x430 (Inherited: 0x348)
struct UUIDragWidget : USolarUserWidget {
	char pad_348[0x10]; // 0x348(0x10)
	struct UImage* ItemImage; // 0x358(0x08)
	struct USizeBox* WidgetSize; // 0x360(0x08)
	struct FSlateBrush ImageOuter; // 0x368(0x98)
	int32_t ItemID; // 0x400(0x04)
	int32_t ItemNum; // 0x404(0x04)
	enum class EItemType ItemType; // 0x408(0x04)
	char pad_40C[0x4]; // 0x40c(0x04)
	struct FString ItemName; // 0x410(0x10)
	int32_t WeaponSlot; // 0x420(0x04)
	struct FVector2D OffsetVec; // 0x424(0x08)
	char pad_42C[0x4]; // 0x42c(0x04)

	void SetDragWidgetSize(struct FVector2D InSize); // Function Solarland.UIDragWidget.SetDragWidgetSize // (Final|Native|Public|HasDefaults) // @ game+0x229e380
	void SetDragWeaponSlot(int32_t InWeaponSlot); // Function Solarland.UIDragWidget.SetDragWeaponSlot // (Final|Native|Public) // @ game+0x229e2f0
	void SetDragItemData(int32_t InID, int32_t InNum, int32_t InItemType, struct FString InItemName); // Function Solarland.UIDragWidget.SetDragItemData // (Final|Native|Public) // @ game+0x229e180
	void SetDragImageRenderScale(struct FVector2D InScale); // Function Solarland.UIDragWidget.SetDragImageRenderScale // (Final|Native|Public|HasDefaults) // @ game+0x229e100
	void SetDragImageBrushFromTexture(struct UTexture2D* InTexture2D, bool InMatchSize); // Function Solarland.UIDragWidget.SetDragImageBrushFromTexture // (Final|Native|Public) // @ game+0x229e030
	void SetDragImageBrush(struct FSlateBrush& InBrush); // Function Solarland.UIDragWidget.SetDragImageBrush // (Final|Native|Public|HasOutParms) // @ game+0x229dea0
	void OnEndDragDropCall(bool InVisibility); // Function Solarland.UIDragWidget.OnEndDragDropCall // (Final|Native|Protected) // @ game+0x229da20
	void BindDelegates(); // Function Solarland.UIDragWidget.BindDelegates // (Final|Native|Protected) // @ game+0x229c7f0
};

// Class Solarland.UIDropMaskWidget
// Size: 0x350 (Inherited: 0x348)
struct UUIDropMaskWidget : USolarUserWidget {
	struct USolarDragDropOperation* OperationData; // 0x348(0x08)

	void OnDropMutiItem(int32_t InItemID, int32_t InTotalCount); // Function Solarland.UIDropMaskWidget.OnDropMutiItem // (Final|Native|Protected) // @ game+0x229d950
	void OnDropConfirmHandle(); // Function Solarland.UIDropMaskWidget.OnDropConfirmHandle // (Final|Native|Protected) // @ game+0x229d930
};

// Class Solarland.UIEmojiContainer
// Size: 0x398 (Inherited: 0x348)
struct UUIEmojiContainer : USolarUserWidget {
	char pad_348[0x10]; // 0x348(0x10)
	struct UCanvasPanel* Panel; // 0x358(0x08)
	char pad_360[0x10]; // 0x360(0x10)
	struct USolarUserWidget* CommonEmojiBubbleSubClass; // 0x370(0x08)
	int32_t PreCreateEmojiNum; // 0x378(0x04)
	char pad_37C[0x4]; // 0x37c(0x04)
	struct FSoftObjectPath EmojiTablePath; // 0x380(0x18)
};

// Class Solarland.UIGlobalConfig
// Size: 0x120 (Inherited: 0x30)
struct UUIGlobalConfig : UDataAsset {
	struct TMap<char, struct FTeamMemberColor> TeamMemberColors; // 0x30(0x50)
	struct TMap<char, struct FItemQualityData> ItemQualityData; // 0x80(0x50)
	struct TMap<char, struct FOBTeamColor> OBTeamColors; // 0xd0(0x50)

	struct FOBTeamColor GetOBTeamColor(int32_t TeamNum); // Function Solarland.UIGlobalConfig.GetOBTeamColor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x229cc80
};

// Class Solarland.UILayerBase
// Size: 0x280 (Inherited: 0x260)
struct UUILayerBase : UUserWidget {
	struct UCanvasPanel* InGameBaseUILayer; // 0x260(0x08)
	struct UCanvasPanel* VirtualControllerLayer; // 0x268(0x08)
	struct UCanvasPanel* InGamePopupLayer; // 0x270(0x08)
	struct UCanvasPanel* OutGameUILayer; // 0x278(0x08)
};

// Class Solarland.UIManager
// Size: 0x138 (Inherited: 0x30)
struct UUIManager : USolarGameManager {
	char pad_30[0x38]; // 0x30(0x38)
	struct TArray<struct FDelegate> OnBigMapOpenDelegateGroup; // 0x68(0x10)
	struct TArray<struct FDelegate> OnBigMapVisibilityChangedDelegateGroup; // 0x78(0x10)
	struct UDataTable* BattleWidgetSettings; // 0x88(0x08)
	struct USolarUIRoot* SolarUIRoot; // 0x90(0x08)
	struct TArray<struct FDestroyObjectStruct> NeedToDestroyObjects; // 0x98(0x10)
	char pad_A8[0x90]; // 0xa8(0x90)

	void WatchReference(); // Function Solarland.UIManager.WatchReference // (Final|Native|Public) // @ game+0x229f7c0
	void WatchAllReference(); // Function Solarland.UIManager.WatchAllReference // (Final|Native|Public) // @ game+0x229f7a0
	void UpdateButtonSprite(struct UButton* TargetButton, struct FString AtlasType, struct FString NormalSpName, struct FString PressedSpName, struct FString HoveredSpName, struct FString DisableSpName); // Function Solarland.UIManager.UpdateButtonSprite // (Final|Native|Static|Public) // @ game+0x229f570
	void TriggerDelegate(); // Function Solarland.UIManager.TriggerDelegate // (Final|Native|Public) // @ game+0x229f550
	struct USolarUserWidget* ShowUIByName(struct FString InName, int32_t RootID); // Function Solarland.UIManager.ShowUIByName // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetWidgetLayout(struct UWidget* InWidget, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY); // Function Solarland.UIManager.SetWidgetLayout // (Final|Native|Static|Public) // @ game+0x229f170
	void SetWidgetChildrenLayout(struct UUserWidget* InRootWidget, struct FName& PanelAliasName, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY); // Function Solarland.UIManager.SetWidgetChildrenLayout // (Final|Native|Static|Public|HasOutParms) // @ game+0x229ede0
	struct USolarUserWidget* SetUIActive(struct USolarUserWidget* InWidget, bool Inactive); // Function Solarland.UIManager.SetUIActive // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetMaterialInstanceParams(struct UImage* Image, struct FString ParamName, float Value); // Function Solarland.UIManager.SetMaterialInstanceParams // (Final|Native|Static|Public) // @ game+0x229ea20
	void SetMaterialInstanceColor(struct UImage* Image, struct FString ParamName, struct FLinearColor& Value); // Function Solarland.UIManager.SetMaterialInstanceColor // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x229e900
	void SetLoadingUIByLevelAndDisplay(int32_t InModelID, int32_t InLevel, int32_t InMapIndex, bool InDisableCustomLoading); // Function Solarland.UIManager.SetLoadingUIByLevelAndDisplay // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetImageTintColor(struct UImage* Img, struct FLinearColor& InColor); // Function Solarland.UIManager.SetImageTintColor // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x229e840
	void SetImageTexture(struct UImage* Img, struct UTexture2D* Texture); // Function Solarland.UIManager.SetImageTexture // (Final|Native|Static|Public) // @ game+0x229e780
	void SetImageFromTextureOrSprite(struct UImage* DstImage, struct FSoftObjectPath& Path, bool bMatchSize); // Function Solarland.UIManager.SetImageFromTextureOrSprite // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x229e650
	void SetImageColor(struct UImage* Img, float R, float G, float B, float A); // Function Solarland.UIManager.SetImageColor // (Final|Native|Static|Public) // @ game+0x229e4c0
	void SetFireInputStyle(struct UFireInputWidget* FireInput, struct USlateWidgetStyleAsset* Style); // Function Solarland.UIManager.SetFireInputStyle // (Final|Native|Static|Public) // @ game+0x229e400
	void SetCheckedState(struct UCheckBox* Box, enum class ECheckBoxState State); // Function Solarland.UIManager.SetCheckedState // (Final|Native|Static|Public) // @ game+0x229dd30
	void SetCheckboxStyle(struct UCheckBox* CheckBox, struct USlateWidgetStyleAsset* Style); // Function Solarland.UIManager.SetCheckboxStyle // (Final|Native|Static|Public) // @ game+0x229dc70
	void SetCheckBoxIsChecked(struct UCheckBox* CheckBox, bool Checked); // Function Solarland.UIManager.SetCheckBoxIsChecked // (Final|Native|Static|Public) // @ game+0x229dbb0
	void SetButtonStyle(struct UButton* Btn, struct USlateWidgetStyleAsset* Style); // Function Solarland.UIManager.SetButtonStyle // (Final|Native|Static|Public) // @ game+0x229daf0
	void RemoveAllWidgets(); // Function Solarland.UIManager.RemoveAllWidgets // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OpenUIGM(struct FString UIID, int32_t RootID); // Function Solarland.UIManager.OpenUIGM // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OpenConfirmUIInLua(int32_t ConfirmID); // Function Solarland.UIManager.OpenConfirmUIInLua // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnLuaHotReloadFileChanged(struct FString LuaSysPath, struct FString LuaPathName); // Function Solarland.UIManager.OnLuaHotReloadFileChanged // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnInitLuaHotReload(); // Function Solarland.UIManager.OnInitLuaHotReload // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnGameManagersInitialized(); // Function Solarland.UIManager.OnGameManagersInitialized // (Final|Native|Protected) // @ game+0x229dab0
	void OnClientStartGame(); // Function Solarland.UIManager.OnClientStartGame // (Final|Native|Protected) // @ game+0x229d910
	void LuaCloseUI(struct FString MapName); // Function Solarland.UIManager.LuaCloseUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct UTexture2D* LoadTexture2DBySoftPath(struct FSoftObjectPath& Path); // Function Solarland.UIManager.LoadTexture2DBySoftPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x229d860
	struct UTexture2D* LoadTexture2DByPath(struct UObject* InOuter, struct FString FullPath); // Function Solarland.UIManager.LoadTexture2DByPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x229d780
	struct UTexture2D* LoadTexture2D(struct UObject* InOuter, struct FString TextureType, struct FString TexName); // Function Solarland.UIManager.LoadTexture2D // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x229d640
	struct UTexture2D* LoadQualityBG(struct UObject* InOuter, int32_t InQuality); // Function Solarland.UIManager.LoadQualityBG // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x229d570
	struct UPaperSprite* LoadPaperSprite(struct UObject* InOuter, struct FString AtlasPath, struct FString SpName); // Function Solarland.UIManager.LoadPaperSprite // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x229d430
	struct UMaterialInterface* LoadMaterialInstance(struct UObject* InOuter, struct FString MaterialType, struct FString MaterialName); // Function Solarland.UIManager.LoadMaterialInstance // (Final|Native|Static|Public) // @ game+0x229d2f0
	bool IsWidgetVisibleForDisplay(struct UWidget* InWidget); // Function Solarland.UIManager.IsWidgetVisibleForDisplay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x229d260
	void InvalidateWidgetPrepass(struct UWidget* InWidget); // Function Solarland.UIManager.InvalidateWidgetPrepass // (Final|Native|Static|Public) // @ game+0x229d1e0
	void InitLvlTextWidget(struct UTextBlock* InHeadTextWidget, struct UTextBlock* InTrailTextWidget); // Function Solarland.UIManager.InitLvlTextWidget // (Final|Native|Static|Public) // @ game+0x229d120
	struct ASolarCharacter* GetWidgetOwningCharacter(struct UWidget* InWidget); // Function Solarland.UIManager.GetWidgetOwningCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x229d090
	struct FString GetWeaponTextureFullPath(struct FString& IconPath); // Function Solarland.UIManager.GetWeaponTextureFullPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x229cfa0
	struct UUserWidget* GetUIPanel(struct FString MapName); // Function Solarland.UIManager.GetUIPanel // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FString GetTexture2DFullPath(struct FString& PrePath, struct FString& IconPath); // Function Solarland.UIManager.GetTexture2DFullPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x229ce40
	struct FString GetQualityBGFullPath(int32_t InQuality, bool bWithSuffix); // Function Solarland.UIManager.GetQualityBGFullPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x229cd30
	struct UTexture2D* GetPlayerAvatarByID(int32_t PlayerAvatarID); // Function Solarland.UIManager.GetPlayerAvatarByID // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t GetLobbyID(); // Function Solarland.UIManager.GetLobbyID // (Event|Public|BlueprintEvent|Const) // @ game+0x25d85b0
	bool GetCheckBoxIsChecked(struct UCheckBox* CheckBox); // Function Solarland.UIManager.GetCheckBoxIsChecked // (Final|Native|Static|Public) // @ game+0x229cbf0
	struct UCanvasPanelSlot* GetCanvasPanelSlotForWidget(struct UWidget* Widget); // Function Solarland.UIManager.GetCanvasPanelSlotForWidget // (Final|Native|Static|Public) // @ game+0x229cb60
	struct FCustomWidget_TableRow GetBattleWidgetSetting(struct FString ConfigName); // Function Solarland.UIManager.GetBattleWidgetSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x229c9e0
	struct UUserWidget* GetBattleBackpackWidget(); // Function Solarland.UIManager.GetBattleBackpackWidget // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ExitSpectateMode(); // Function Solarland.UIManager.ExitSpectateMode // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void EnterSpectateMode(); // Function Solarland.UIManager.EnterSpectateMode // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void CloseUIGM(struct FString UIID); // Function Solarland.UIManager.CloseUIGM // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void CloseLoadingUI(); // Function Solarland.UIManager.CloseLoadingUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FMargin ClampInScreenOffsets(struct UWidget* WorldContextObject, struct FMargin& Offsets, struct FAnchors& Anchors, struct FVector2D& Alignment); // Function Solarland.UIManager.ClampInScreenOffsets // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x229c810
};

// Class Solarland.UIMassDiscardWidget
// Size: 0x3a8 (Inherited: 0x348)
struct UUIMassDiscardWidget : USolarUserWidget {
	char pad_348[0x20]; // 0x348(0x20)
	struct UButton* Button_Increase; // 0x368(0x08)
	struct UButton* Button_Decrease; // 0x370(0x08)
	struct UComponentButtonBaseWidget* Button_Confirm; // 0x378(0x08)
	struct UComponentButtonBaseWidget* Button_Cancel; // 0x380(0x08)
	struct USlider* Slider_Quantity; // 0x388(0x08)
	struct UProgressBar* ProgressBar_Quantity; // 0x390(0x08)
	struct UTextBlock* Text_Quantity; // 0x398(0x08)
	struct UTextBlock* Text_Total; // 0x3a0(0x08)

	void SetDiscardItemData(int32_t InItemID, int32_t InTotalCount); // Function Solarland.UIMassDiscardWidget.SetDiscardItemData // (Final|Native|Protected) // @ game+0x22a3d90
	void OnSliderValueChanged(float InValue); // Function Solarland.UIMassDiscardWidget.OnSliderValueChanged // (Final|Native|Protected) // @ game+0x22a3970
	void OnLongPressUpdate(); // Function Solarland.UIMassDiscardWidget.OnLongPressUpdate // (Final|Native|Protected) // @ game+0x22a3810
	void OnDiscardItemNumChanged(); // Function Solarland.UIMassDiscardWidget.OnDiscardItemNumChanged // (Final|Native|Protected) // @ game+0x22a3760
	void OnBtnIncreaseReleased(); // Function Solarland.UIMassDiscardWidget.OnBtnIncreaseReleased // (Final|Native|Protected) // @ game+0x22a3670
	void OnBtnIncreasePressed(); // Function Solarland.UIMassDiscardWidget.OnBtnIncreasePressed // (Final|Native|Protected) // @ game+0x22a36b0
	void OnBtnIncreaseClicked(); // Function Solarland.UIMassDiscardWidget.OnBtnIncreaseClicked // (Final|Native|Protected) // @ game+0x22a3690
	void OnBtnDecreaseReleased(); // Function Solarland.UIMassDiscardWidget.OnBtnDecreaseReleased // (Final|Native|Protected) // @ game+0x22a3670
	void OnBtnDecreasePressed(); // Function Solarland.UIMassDiscardWidget.OnBtnDecreasePressed // (Final|Native|Protected) // @ game+0x22a3650
	void OnBtnDecreaseClicked(); // Function Solarland.UIMassDiscardWidget.OnBtnDecreaseClicked // (Final|Native|Protected) // @ game+0x22a3630
	void OnBtnConfirmClicked(); // Function Solarland.UIMassDiscardWidget.OnBtnConfirmClicked // (Final|Native|Protected) // @ game+0x22a3610
	void OnBtnCancelClicked(); // Function Solarland.UIMassDiscardWidget.OnBtnCancelClicked // (Final|Native|Protected) // @ game+0x22a35f0
	void InitWidgets(); // Function Solarland.UIMassDiscardWidget.InitWidgets // (Final|Native|Protected) // @ game+0x22a3490
	void BindDelegates(); // Function Solarland.UIMassDiscardWidget.BindDelegates // (Final|Native|Protected) // @ game+0x22a3160
};

// Class Solarland.UINavigationManager
// Size: 0xc0 (Inherited: 0x30)
struct UUINavigationManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct TMap<struct FString, struct USolarUserWidget*> WidgetOpenedMap; // 0x38(0x50)
	struct TArray<struct USolarUserWidget*> TmpRemovedWidgets; // 0x88(0x10)
	struct TArray<struct TWeakObjectPtr<struct USolarUserWidget>> CachedCreatedWidgets; // 0x98(0x10)
	char pad_A8[0x10]; // 0xa8(0x10)
	struct USolarUIRoot* SolarUIRoot; // 0xb8(0x08)

	void UnbindCustomControlDefine(struct USolarUserWidget* PanelWidget, struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.UnbindCustomControlDefine // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct USolarUserWidget* ShowUIBySubClass(struct USolarUserWidget* SubClass, enum class EUIRoot RootID); // Function Solarland.UINavigationManager.ShowUIBySubClass // (Final|Native|Public) // @ game+0x22a4180
	bool ShowPanelUI(struct USolarUserWidget* createWidget, struct FString UniqueWidgetKey); // Function Solarland.UINavigationManager.ShowPanelUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RemoveUserWidgetLuaRef(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.RemoveUserWidgetLuaRef // (Final|Native|Public) // @ game+0x22a3ad0
	void RemoveUIFromOpenedMap(struct FString UniqueWidgetKey); // Function Solarland.UINavigationManager.RemoveUIFromOpenedMap // (Final|Native|Public) // @ game+0x22a3a30
	void RemoveAllSolarWidgets(); // Function Solarland.UINavigationManager.RemoveAllSolarWidgets // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void PrePooledWidgetReset(struct UUserWidget* UserWidget); // Function Solarland.UINavigationManager.PrePooledWidgetReset // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnShowPanelUI(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.OnShowPanelUI // (Final|Native|Protected) // @ game+0x22a38e0
	void OnPostLoadMapInitUIRoot(struct UWorld* InWorld); // Function Solarland.UINavigationManager.OnPostLoadMapInitUIRoot // (Final|Native|Public) // @ game+0x912e20
	void OnOpenPanelUI(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.OnOpenPanelUI // (Final|Native|Protected) // @ game+0x22a3830
	void OnHidePanelUI(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.OnHidePanelUI // (Final|Native|Protected) // @ game+0x22a3780
	void OnDisplayMetricsChanged(); // Function Solarland.UINavigationManager.OnDisplayMetricsChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnClosePanelUI(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.OnClosePanelUI // (Final|Native|Protected) // @ game+0x22a36d0
	bool IsUserWidgetInScope(struct USolarUserWidget*& Class, enum class EScope& OutCurScope, enum class EScope& OutDstScope); // Function Solarland.UINavigationManager.IsUserWidgetInScope // (Final|Native|Public|HasOutParms|Const) // @ game+0x22a34b0
	struct USolarUserWidget* GetShowTopWidget(); // Function Solarland.UINavigationManager.GetShowTopWidget // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct UUserWidget* GetOpenedWidget(struct FString UniqueWidgetKey); // Function Solarland.UINavigationManager.GetOpenedWidget // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void CloseUIBySubClass(struct USolarUserWidget* SubClass); // Function Solarland.UINavigationManager.CloseUIBySubClass // (Final|Native|Public) // @ game+0x22a32b0
	void ClosePanelUI(struct USolarUserWidget* closeWidget, struct FString UniqueWidgetKey); // Function Solarland.UINavigationManager.ClosePanelUI // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ClearNonPersistentWidget(); // Function Solarland.UINavigationManager.ClearNonPersistentWidget // (Final|Native|Public) // @ game+0x22a3250
	void ClearAllOpenedWidget(); // Function Solarland.UINavigationManager.ClearAllOpenedWidget // (Final|Native|Public) // @ game+0x22a3230
	void BindWidgetVisibilityChangedEvent(struct FDelegate& VisibilityChangedEvent); // Function Solarland.UINavigationManager.BindWidgetVisibilityChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x22a3180
	void BindCustomControlDefine(struct USolarUserWidget* PanelWidget, struct USolarUserWidget* UserWidget, struct FString FullPath); // Function Solarland.UINavigationManager.BindCustomControlDefine // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void BatchRemovedWidgets(bool bRemoveAll); // Function Solarland.UINavigationManager.BatchRemovedWidgets // (Final|Native|Public) // @ game+0x22a30d0
	void AddUIToOpenedMap(struct FString UniqueWidgetKey, struct USolarUserWidget* Widget); // Function Solarland.UINavigationManager.AddUIToOpenedMap // (Final|Native|Public) // @ game+0x22a2ff0
	void AddBatchRemovedWidget(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.AddBatchRemovedWidget // (Final|Native|Public) // @ game+0x22a2f60
};

// Class Solarland.UINotice_TaskComplete
// Size: 0x3a8 (Inherited: 0x370)
struct UUINotice_TaskComplete : UUINoticeBase {
	struct UWidgetAnimation* FinishTaskAnim; // 0x370(0x08)
	struct UWidgetAnimation* ExitTaskAnim; // 0x378(0x08)
	struct USolarTextBlock* Txt_TaskPercent; // 0x380(0x08)
	struct USolarTextBlock* Txt_TaskDescTex; // 0x388(0x08)
	struct UCanvasPanel* Normal; // 0x390(0x08)
	struct UCanvasPanel* Finish; // 0x398(0x08)
	char pad_3A0[0x8]; // 0x3a0(0x08)

	void OnTaskFinishedAnimEnd(); // Function Solarland.UINotice_TaskComplete.OnTaskFinishedAnimEnd // (Final|Native|Public) // @ game+0x22a39f0
};

// Class Solarland.UINoticeKill
// Size: 0x3e0 (Inherited: 0x370)
struct UUINoticeKill : UUINoticeBase {
	struct UUIComponentPlayerName* UIComponentKillerName; // 0x370(0x08)
	struct UUIComponentPlayerName* UIComponentVictimName; // 0x378(0x08)
	struct USolarImage* KillTypeWidget; // 0x380(0x08)
	struct UImage* WeaponTypeWidget; // 0x388(0x08)
	struct UImage* ImgeKillBar_Special; // 0x390(0x08)
	struct UImage* ImgeKillBar_Common; // 0x398(0x08)
	struct UUIComponentNationalFlag* KillerFlagWidget; // 0x3a0(0x08)
	struct UUIComponentNationalFlag* VictimFlagWidget; // 0x3a8(0x08)
	struct UUserWidget* KillerTeamNumb; // 0x3b0(0x08)
	struct UUserWidget* KilledTeamNumb; // 0x3b8(0x08)
	struct UContentWidget* RevengeContentWidget; // 0x3c0(0x08)
	struct UContentWidget* ShutDownContentWidget; // 0x3c8(0x08)
	struct UContentWidget* KillLeaderWidget; // 0x3d0(0x08)
	struct USolarTextBlock* Txt_PlayerID; // 0x3d8(0x08)

	void SetVictimVipType(char VictimVipType); // Function Solarland.UINoticeKill.SetVictimVipType // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetKillerVipType(char KillerVipType); // Function Solarland.UINoticeKill.SetKillerVipType // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	int32_t RefreshSwticher(); // Function Solarland.UINoticeKill.RefreshSwticher // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.UINoticeKillCombo
// Size: 0x3c8 (Inherited: 0x370)
struct UUINoticeKillCombo : UUINoticeBase {
	enum class ELocalNoticeType LocalNoticeType; // 0x370(0x01)
	char pad_371[0x7]; // 0x371(0x07)
	struct UWidgetSwitcher* WidgetSwitcher_1; // 0x378(0x08)
	struct UImage* Img_KillEffect; // 0x380(0x08)
	struct UCanvasPanel* Panel_KillEffectInfo; // 0x388(0x08)
	struct USolarTextBlock* Text_KillEffectInfo; // 0x390(0x08)
	struct USolarTextBlock* Text_ShutDownInfo; // 0x398(0x08)
	struct USolarTextBlock* Text_KillerName; // 0x3a0(0x08)
	struct USolarImage* Img_Killer; // 0x3a8(0x08)
	struct USolarTextBlock* Text_KilledName; // 0x3b0(0x08)
	struct USolarImage* Img_Killed; // 0x3b8(0x08)
	struct USolarRichTextBlock* Text_TerminatorName; // 0x3c0(0x08)
};

// Class Solarland.UINoticeKillLeader
// Size: 0x398 (Inherited: 0x370)
struct UUINoticeKillLeader : UUINoticeBase {
	bool bIsKillLeaderShutDown; // 0x370(0x01)
	char pad_371[0x7]; // 0x371(0x07)
	struct UWidgetSwitcher* WidgetSwitcher_1; // 0x378(0x08)
	struct USolarTextBlock* text_killleader; // 0x380(0x08)
	struct USolarTextBlock* Txt_shutdown_killleader; // 0x388(0x08)
	struct USolarTextBlock* Txt_death_name; // 0x390(0x08)
};

// Class Solarland.UINoticeKillLeaderInfo
// Size: 0x378 (Inherited: 0x370)
struct UUINoticeKillLeaderInfo : UUINoticeBase {
	struct USolarTextBlock* Text_KillLeaderInfo; // 0x370(0x08)
};

// Class Solarland.UINoticeKillTotal
// Size: 0x438 (Inherited: 0x370)
struct UUINoticeKillTotal : UUINoticeBase {
	struct UWidgetSwitcher* wgs_combo_phase; // 0x370(0x08)
	struct USolarTextBlock* Text_NickName; // 0x378(0x08)
	int32_t ActiveKillTotalWidgetIndex; // 0x380(0x04)
	char pad_384[0x4]; // 0x384(0x04)
	struct TMap<int32_t, int32_t> KillTotalTextMap; // 0x388(0x50)
	char pad_3D8[0x60]; // 0x3d8(0x60)
};

// Class Solarland.UINoticeReviveDisableHint
// Size: 0x390 (Inherited: 0x370)
struct UUINoticeReviveDisableHint : UUINoticeBase {
	struct USolarTextBlock* Text_CDData; // 0x370(0x08)
	struct UWidgetAnimation* Loop_Anim; // 0x378(0x08)
	char pad_380[0x10]; // 0x380(0x10)
};

// Class Solarland.UINoticeSkydivingCaptain
// Size: 0x370 (Inherited: 0x370)
struct UUINoticeSkydivingCaptain : UUINoticeBase {

	void RefreshContent(int32_t TeamIndex, struct FString playerName, bool IsLocalPlayer); // Function Solarland.UINoticeSkydivingCaptain.RefreshContent // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.UINoticeVictory
// Size: 0x440 (Inherited: 0x370)
struct UUINoticeVictory : UUINoticeBase {
	struct UButton* BtnReturn; // 0x370(0x08)
	struct UImage* Img_Bg; // 0x378(0x08)
	char pad_380[0xa8]; // 0x380(0xa8)
	struct FSoftObjectPath ImgBGPath; // 0x428(0x18)

	void OnReturnBtnClick(); // Function Solarland.UINoticeVictory.OnReturnBtnClick // (Final|Native|Public) // @ game+0x22a38c0
};

// Class Solarland.UINoticeVipPlayerJoin
// Size: 0x388 (Inherited: 0x370)
struct UUINoticeVipPlayerJoin : UUINoticeBase {
	struct UUIComponentPlayerName* UI_Component_PlayerName; // 0x370(0x08)
	struct UTextBlock* Txt_Entrance_Info; // 0x378(0x08)
	struct UUIComponentNationalFlag* FlagWidget; // 0x380(0x08)

	void SetVipType(char VipType); // Function Solarland.UINoticeVipPlayerJoin.SetVipType // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.UIPanelConfig
// Size: 0x78 (Inherited: 0x28)
struct UUIPanelConfig : UObject {
	struct TMap<enum class EUIPanelName, struct FUIPanelConfigEntry> PanelConfigs; // 0x28(0x50)
};

// Class Solarland.UISubsystem
// Size: 0xb0 (Inherited: 0x30)
struct UUISubsystem : UGameInstanceSubsystem {
	struct UUIGlobalConfig* GlobalConfig; // 0x30(0x08)
	struct UUIPanelConfig* UIPanelConfig; // 0x38(0x08)
	struct TMap<struct FString, struct USolarUserWidget*> CacheWidgets; // 0x40(0x50)
	char pad_90[0x20]; // 0x90(0x20)

	void PostInitializeAfterPatch(); // Function Solarland.UISubsystem.PostInitializeAfterPatch // (Final|Native|Public) // @ game+0x22a3a10
};

// Class Solarland.UISystemSettings
// Size: 0xe0 (Inherited: 0x38)
struct UUISystemSettings : UDeveloperSettings {
	int32_t InGameWidgetPoolSize; // 0x38(0x04)
	int32_t VirtualControllerPoolSize; // 0x3c(0x04)
	int32_t InGamePopupPoolSize; // 0x40(0x04)
	int32_t OutGameWidgetPoolSize; // 0x44(0x04)
	struct FSoftObjectPath UIGlobalConfig; // 0x48(0x18)
	struct FSoftClassPath UILayer; // 0x60(0x18)
	struct FSoftClassPath UIPanelConfigClass; // 0x78(0x18)
	struct TMap<struct FGameplayTag, struct FInteractionButtonSpec> InteractionButtons; // 0x90(0x50)
};

// Class Solarland.UIWeaponPartWidget
// Size: 0x460 (Inherited: 0x348)
struct UUIWeaponPartWidget : USolarUserWidget {
	struct UImage* Img_Icon; // 0x348(0x08)
	struct UImage* Img_LevelBg; // 0x350(0x08)
	struct UImage* Img_PartsBg; // 0x358(0x08)
	struct USizeBox* WidgetSize; // 0x360(0x08)
	struct UUserWidget* DragDropWidgetClass; // 0x368(0x08)
	struct FLinearColor ColorNotEquip; // 0x370(0x10)
	struct FLinearColor ColorDisable; // 0x380(0x10)
	struct FLinearColor ColorNormal; // 0x390(0x10)
	struct FLinearColor ColorQuality; // 0x3a0(0x10)
	int32_t ItemID; // 0x3b0(0x04)
	int32_t ItemNum; // 0x3b4(0x04)
	enum class EItemType ItemType; // 0x3b8(0x04)
	char pad_3BC[0x4]; // 0x3bc(0x04)
	struct FString ItemName; // 0x3c0(0x10)
	int32_t WeaponSlot; // 0x3d0(0x04)
	enum class EWeaponPartType WeaponPartType; // 0x3d4(0x01)
	char pad_3D5[0x3]; // 0x3d5(0x03)
	int32_t WeaponPartLevel; // 0x3d8(0x04)
	enum class EWeaponPartType EquippedPartType; // 0x3dc(0x01)
	enum class EUIWeaponPartState CurrentState; // 0x3dd(0x01)
	bool bIsable; // 0x3de(0x01)
	bool bUseHUDIcon; // 0x3df(0x01)
	struct FVector2D OffsetVec; // 0x3e0(0x08)
	struct TMap<int32_t, struct FString> DefaultWeaponPartIconMaps; // 0x3e8(0x50)
	struct FString WeaponPartPrePath; // 0x438(0x10)
	bool bApplyToWeaponSlot; // 0x448(0x01)
	char pad_449[0x3]; // 0x449(0x03)
	struct FLinearColor PartBGDefaultColor; // 0x44c(0x10)
	char pad_45C[0x4]; // 0x45c(0x04)

	void UpdateWidgetByEnable(bool InIsable); // Function Solarland.UIWeaponPartWidget.UpdateWidgetByEnable // (Final|Native|Public) // @ game+0x22a4250
	void SetWidgetSize(struct FVector2D& InSize); // Function Solarland.UIWeaponPartWidget.SetWidgetSize // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x22a40f0
	void SetWeaponSlot(int32_t InWeaponSlot); // Function Solarland.UIWeaponPartWidget.SetWeaponSlot // (Final|Native|Public) // @ game+0x22a4060
	void SetWeaponPartData(int32_t InID, int32_t InNumber); // Function Solarland.UIWeaponPartWidget.SetWeaponPartData // (Final|Native|Public) // @ game+0x22a3f90
	void SetIsEnable(bool InIsable); // Function Solarland.UIWeaponPartWidget.SetIsEnable // (Final|Native|Public) // @ game+0x22a3f00
	void SetBrushFromTexture(struct UTexture2D* InTextureAsset, bool InMatchSize); // Function Solarland.UIWeaponPartWidget.SetBrushFromTexture // (Final|Native|Protected) // @ game+0x22a3c30
	void InitDefaultWeaponPart(enum class EWeaponPartType InWeaponPartType, bool InUseHUDIcon); // Function Solarland.UIWeaponPartWidget.InitDefaultWeaponPart // (Final|Native|Public) // @ game+0x22a33c0
	void ClearWeaponPartData(); // Function Solarland.UIWeaponPartWidget.ClearWeaponPartData // (Final|Native|Public) // @ game+0x22a3270
};

// Class Solarland.SolarBTT_NgaiBotBattle
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_NgaiBotBattle : UBTTask_BlackboardBase {
};

// Class Solarland.VehicleAIPath
// Size: 0x238 (Inherited: 0x228)
struct AVehicleAIPath : AActor {
	struct USplineComponent* PathComponent; // 0x228(0x08)
	int32_t PathId; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
};

// Class Solarland.VehicleAISpawnerInGuide
// Size: 0x280 (Inherited: 0x278)
struct AVehicleAISpawnerInGuide : ASpawnerInGuide {
	float NoDamageLeftHP; // 0x278(0x04)
	int32_t PathId; // 0x27c(0x04)
};

// Class Solarland.VehicleCameraDataAsset
// Size: 0x3c0 (Inherited: 0x30)
struct UVehicleCameraDataAsset : UDataAsset {
	struct FRuntimeFloatCurve TargetArmLengthCurve; // 0x30(0x88)
	float TargetArmLengthInterpSpeed; // 0xb8(0x04)
	struct FVector TargetOffset; // 0xbc(0x0c)
	struct FName TargetOffsetSocket; // 0xc8(0x08)
	bool bTargetOffsetIgnoreRoll; // 0xd0(0x01)
	bool bTargetOffsetIgnorePitch; // 0xd1(0x01)
	bool bCameraRollSameWithVehicleRoll; // 0xd2(0x01)
	char pad_D3[0x1]; // 0xd3(0x01)
	struct FVector SocketOffset; // 0xd4(0x0c)
	float MinPitch; // 0xe0(0x04)
	float MaxPitch; // 0xe4(0x04)
	float MinYaw; // 0xe8(0x04)
	float MaxYaw; // 0xec(0x04)
	struct FRuntimeFloatCurve CameraFovCurve; // 0xf0(0x88)
	float CameraFovInterpSpeed; // 0x178(0x04)
	bool bCameraFollowVehicle; // 0x17c(0x01)
	char pad_17D[0x3]; // 0x17d(0x03)
	float DefaultPitch; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
	struct FRuntimeFloatCurve CameraFollowSpeedCurve; // 0x188(0x88)
	float CameraFollowTimeThreshold; // 0x210(0x04)
	float CameraResetFollowSpeed; // 0x214(0x04)
	float CameraFollowSpeedThreshold; // 0x218(0x04)
	bool bEnableCameraLag; // 0x21c(0x01)
	char pad_21D[0x3]; // 0x21d(0x03)
	struct FRuntimeFloatCurve CameraLagInterpSpeedCurve; // 0x220(0x88)
	struct FRuntimeFloatCurve CameraLagCurve; // 0x2a8(0x88)
	struct FRuntimeFloatCurve AdditionalTargetOffsetOnZ; // 0x330(0x88)
	float BlendTime; // 0x3b8(0x04)
	char pad_3BC[0x4]; // 0x3bc(0x04)
};

// Class Solarland.VehicleCollisionSubsystem
// Size: 0x80 (Inherited: 0x30)
struct UVehicleCollisionSubsystem : UEngineSubsystem {
	char pad_30[0x50]; // 0x30(0x50)
};

// Class Solarland.VehicleMoveWidget
// Size: 0x420 (Inherited: 0x1e0)
struct UVehicleMoveWidget : USolarJoyStick {
	struct FSlateBrush JoyStickThumb; // 0x1e0(0x98)
	struct FSlateBrush JoyStickThumbPress; // 0x278(0x98)
	struct FVector2D ThumbSize; // 0x310(0x08)
	struct FSlateBrush SprintImage; // 0x318(0x98)
	struct FVector2D SprintSize; // 0x3b0(0x08)
	float TriggerPressTime; // 0x3b8(0x04)
	float DistanceSprintImageToCenter; // 0x3bc(0x04)
	float ShowLockSprintIconSectorAngle; // 0x3c0(0x04)
	struct FVector2D VisualSize; // 0x3c4(0x08)
	char pad_3CC[0x14]; // 0x3cc(0x14)
	struct FMulticastInlineDelegate OnSprintIconActive; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnSprintIconHide; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnSprintLockIconActive; // 0x400(0x10)
	struct FMulticastInlineDelegate OnSprintChangeToCenterState; // 0x410(0x10)

	void SetSprintToCenterDistance(float Distance); // Function Solarland.VehicleMoveWidget.SetSprintToCenterDistance // (Final|Native|Public) // @ game+0x22a83d0
	void ResetSprintState(); // Function Solarland.VehicleMoveWidget.ResetSprintState // (Final|Native|Public) // @ game+0x22a83b0
};

// Class Solarland.VehiclePreviewActor
// Size: 0x540 (Inherited: 0x540)
struct AVehiclePreviewActor : APreviewActor {
};

// Class Solarland.SolarVehicleSkinPreviewData
// Size: 0x420 (Inherited: 0x30)
struct USolarVehicleSkinPreviewData : UDataAsset {
	struct FSolarVehicleSkinPreviewMeshInfo VehicleMeshInfo; // 0x30(0xc0)
	struct TArray<struct FSolarVehicleSkinPreviewMeshInfo> WeaponMeshInfos; // 0xf0(0x10)
	struct FSolarVehicleSkinPreviewMeshInfo MirrorMeshInfo; // 0x100(0xc0)
	struct TArray<struct FSolarVehicleSkinPreviewMeshInfo> MirrorWeaponMeshInfos; // 0x1c0(0x10)
	struct TArray<struct FVehicleVFX> VehicleVFXs; // 0x1d0(0x10)
	struct TSoftObjectPtr<UParticleSystem> SwitchParticleEffectPath; // 0x1e0(0x28)
	struct TArray<struct FSolarVehicleMaterialData> VehicleMaterialDataArray; // 0x208(0x10)
	char pad_218[0x8]; // 0x218(0x08)
	struct FTransform PageTransforms[0xa]; // 0x220(0x1e0)
	struct FSolarVehicleSkinPreviewPageInfo PageInfos[0xa]; // 0x400(0x14)
	char pad_414[0xc]; // 0x414(0x0c)
};

// Class Solarland.SolarVehiclePreview
// Size: 0x328 (Inherited: 0x228)
struct ASolarVehiclePreview : AActor {
	struct USkeletalMeshComponent* VehicleMesh; // 0x228(0x08)
	struct USkeletalMeshComponent* DissovleVehicleMesh; // 0x230(0x08)
	struct USkeletalMeshComponent* FresnelVehicleMesh; // 0x238(0x08)
	struct TArray<struct USkeletalMeshComponent*> WeaponMeshes; // 0x240(0x10)
	struct TArray<struct USkeletalMeshComponent*> DissovleWeaponMeshes; // 0x250(0x10)
	struct TArray<struct USkeletalMeshComponent*> FresnelWeaponMeshes; // 0x260(0x10)
	struct USkeletalMeshComponent* MirrorVehicleMesh; // 0x270(0x08)
	struct USkeletalMeshComponent* MirrorDissovleVehicleMesh; // 0x278(0x08)
	struct USkeletalMeshComponent* MirrorFresnelVehicleMesh; // 0x280(0x08)
	struct TArray<struct USkeletalMeshComponent*> MirrorWeaponMeshes; // 0x288(0x10)
	struct TArray<struct USkeletalMeshComponent*> MirrorDissovleWeaponMeshes; // 0x298(0x10)
	struct TArray<struct USkeletalMeshComponent*> MirrorFresnelWeaponMeshes; // 0x2a8(0x10)
	char pad_2B8[0x10]; // 0x2b8(0x10)
	float SwitchEffectInterval; // 0x2c8(0x04)
	char pad_2CC[0xc]; // 0x2cc(0x0c)
	struct TArray<struct FSwitchEffectInfo> DissovleEffectInfos; // 0x2d8(0x10)
	struct TArray<struct FSwitchEffectInfo> FresnelEffectInfos; // 0x2e8(0x10)
	char pad_2F8[0x30]; // 0x2f8(0x30)

	void StartPlayFresnelEffect(); // Function Solarland.SolarVehiclePreview.StartPlayFresnelEffect // (Final|Native|Public) // @ game+0x22a8470
	void StartPlayDissovleEffect(); // Function Solarland.SolarVehiclePreview.StartPlayDissovleEffect // (Final|Native|Public) // @ game+0x22a8450
};

// Class Solarland.VehicleSpeedScreenEffectWidget
// Size: 0x378 (Inherited: 0x350)
struct UVehicleSpeedScreenEffectWidget : USolarScreenEffectWidget {
	struct UOverlay* ScreenVFX; // 0x350(0x08)
	struct UImage* Left; // 0x358(0x08)
	struct UImage* Right; // 0x360(0x08)
	struct UMaterialInstanceDynamic* LeftMID; // 0x368(0x08)
	struct UMaterialInstanceDynamic* RightMID; // 0x370(0x08)
};

// Class Solarland.VehicleStealthGCNotify_Actor
// Size: 0x550 (Inherited: 0x2a0)
struct AVehicleStealthGCNotify_Actor : ASolarVehicleGCNotify_Actor {
	struct UMaterialInterface* StealthMaterial; // 0x2a0(0x08)
	struct FRuntimeFloatCurve NormalStealthCurve; // 0x2a8(0x88)
	char pad_330[0x8]; // 0x330(0x08)
	struct FRuntimeFloatCurve VehicleVelocityCurve; // 0x338(0x88)
	struct FRuntimeFloatCurve VehicleBeDamagedCurve; // 0x3c0(0x88)
	struct FName StealthMaterialParamPowerName; // 0x448(0x08)
	struct FName StealthMaterialParamDistanceName; // 0x450(0x08)
	float StealthMaterialParamDistanceValue; // 0x458(0x04)
	char pad_45C[0x4]; // 0x45c(0x04)
	struct TMap<enum class EStealthParamType, struct FStealthMaterialParams> VehicleStealthParamterSets; // 0x460(0x50)
	char pad_4B0[0x38]; // 0x4b0(0x38)
	struct FString EnterStealthEngine3p; // 0x4e8(0x10)
	struct FString EnterStealthEngine3pEnemy; // 0x4f8(0x10)
	struct FString CancelStealthEngine3p; // 0x508(0x10)
	struct FString CancelStealthEngine3pEnemy; // 0x518(0x10)
	float WarningOtherRange; // 0x528(0x04)
	float WarningOtherRangeOutThreshold; // 0x52c(0x04)
	char pad_530[0x10]; // 0x530(0x10)
	struct TArray<struct FCueContent> CueContents; // 0x540(0x10)

	void OnVehicleSkinUpdate(struct ASolarVehiclePawn* InVehiclePawn); // Function Solarland.VehicleStealthGCNotify_Actor.OnVehicleSkinUpdate // (Final|Native|Private) // @ game+0x22a8320
	void OnToggleStealth(bool bInStealh); // Function Solarland.VehicleStealthGCNotify_Actor.OnToggleStealth // (Final|Native|Protected|BlueprintCallable) // @ game+0x22a8170
	void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.VehicleStealthGCNotify_Actor.OnPlayerGetOnVehicle // (Final|Native|Private) // @ game+0x22a7ff0
	void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.VehicleStealthGCNotify_Actor.OnPlayerGetOffVehicle // (Final|Native|Private) // @ game+0x22a7f20
};

// Class Solarland.VehicleStopArea
// Size: 0x228 (Inherited: 0x228)
struct AVehicleStopArea : AActor {
};

// Class Solarland.VehicleWeaponAnimInstance
// Size: 0x310 (Inherited: 0x2d0)
struct UVehicleWeaponAnimInstance : UWeaponAnimInstance {
	char pad_2D0[0x8]; // 0x2d0(0x08)
	struct FRotator VehicleWeaponPitchRot; // 0x2d8(0x0c)
	struct FRotator VehicleWeaponYawRot; // 0x2e4(0x0c)
	struct FVector LeftBoneIKOffset; // 0x2f0(0x0c)
	struct FVector RightBoneIKOffset; // 0x2fc(0x0c)
	bool bVehicleWeaponReloading; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
};

// Class Solarland.VehicleWeaponCrossHairWidget
// Size: 0x488 (Inherited: 0x300)
struct UVehicleWeaponCrossHairWidget : UCrossHairWidget {
	bool bUseSecondReticle; // 0x300(0x01)
	char pad_301[0x3]; // 0x301(0x03)
	float DirectionRadius; // 0x304(0x04)
	struct UCanvasPanel* SecondReticlePanel; // 0x308(0x08)
	struct UCanvasPanelSlot* SecondReticleSlot; // 0x310(0x08)
	struct UImage* ReticleDirectionImage; // 0x318(0x08)
	struct UCanvasPanelSlot* ReticleDirectionSlot; // 0x320(0x08)
	struct UImage* RangedImage; // 0x328(0x08)
	char pad_330[0x20]; // 0x330(0x20)
	struct USizeBox* AssistLockSizeBox; // 0x350(0x08)
	struct UCanvasPanel* ChangeNewAssistLockPawnPanel; // 0x358(0x08)
	struct UCanvasPanel* EnterLockPawnPanel; // 0x360(0x08)
	char pad_368[0x14]; // 0x368(0x14)
	struct TWeakObjectPtr<struct APawn> AssistLockPawn; // 0x37c(0x08)
	char pad_384[0x4]; // 0x384(0x04)
	struct UGlobalVehicleWeaponConfig* GVehicleWeaponConfig; // 0x388(0x08)
	struct ASolarPlayerController* SolarPlayerController; // 0x390(0x08)
	char pad_398[0x9c]; // 0x398(0x9c)
	float CurProgressOfPreEnterAssistLock; // 0x434(0x04)
	float PreEnterAssistLockSpeed; // 0x438(0x04)
	char pad_43C[0x10]; // 0x43c(0x10)
	float TimeIntervalToCheckBlock; // 0x44c(0x04)
	char pad_450[0x8]; // 0x450(0x08)
	struct UCanvasPanel* DynamicAimCanvas; // 0x458(0x08)
	struct UCanvasPanelSlot* DynamicAimCanvasSlot; // 0x460(0x08)
	float DynamicAimOccludeOpacity; // 0x468(0x04)
	struct FVector2D DynamicAimSmoothSpeed; // 0x46c(0x08)
	char pad_474[0xc]; // 0x474(0x0c)
	bool bAlwaysShowOverload; // 0x480(0x01)
	char pad_481[0x7]; // 0x481(0x07)

	struct FVector2D UpdateAssistLockUIScale(); // Function Solarland.VehicleWeaponCrossHairWidget.UpdateAssistLockUIScale // (BlueprintCosmetic|Native|Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x22a8490
	void UpdateAssistLockStateUI(enum class EAssistLockState InEAssistLockState); // Function Solarland.VehicleWeaponCrossHairWidget.UpdateAssistLockStateUI // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void SetWidgetResources(struct UCanvasPanel*& InSecondReticlePanel, struct UImage*& InReticleDirectionImage, struct UImage*& InRangedImage, struct USizeBox*& InAssistLockSizeBox, struct UCanvasPanel*& InChangeNewAssistLockPawnPanel, struct UCanvasPanel*& InEnterLockPawnPanel, struct UCanvasPanel*& InCanvas_Dynamic); // Function Solarland.VehicleWeaponCrossHairWidget.SetWidgetResources // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnUpdateAimTargetDistance(float InDistance); // Function Solarland.VehicleWeaponCrossHairWidget.OnUpdateAimTargetDistance // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnTransformerWeaponChanged(enum class ETransformerType InType); // Function Solarland.VehicleWeaponCrossHairWidget.OnTransformerWeaponChanged // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void InitAssitLockInfo(struct ASolarVehicleWeapon* VehicleWeapon); // Function Solarland.VehicleWeaponCrossHairWidget.InitAssitLockInfo // (Final|Native|Private) // @ game+0x22a7dc0
	struct UCanvasPanel* GetSecondReticlePanel(); // Function Solarland.VehicleWeaponCrossHairWidget.GetSecondReticlePanel // (Event|Public|BlueprintEvent|Const) // @ game+0x25d85b0
	struct UImage* GetReticleDirectionImage(); // Function Solarland.VehicleWeaponCrossHairWidget.GetReticleDirectionImage // (Event|Public|BlueprintEvent|Const) // @ game+0x25d85b0
};

// Class Solarland.VehicleWeaponScopeWidget
// Size: 0x3e8 (Inherited: 0x348)
struct UVehicleWeaponScopeWidget : USolarUserWidget {
	enum class EVehicleWeaponScopeType PresetScopeType; // 0x348(0x01)
	char pad_349[0x7]; // 0x349(0x07)
	struct UImage* img_Vehicle; // 0x350(0x08)
	struct UImage* Img_Weapon; // 0x358(0x08)
	struct UCanvasPanel* Panel_Pitch; // 0x360(0x08)
	struct UWeaponScopeSliderWidget* Crosshair_Slider; // 0x368(0x08)
	struct USolarCheckBox* Btn_Pitch; // 0x370(0x08)
	struct UCanvasPanel* SecondReticlePanel; // 0x378(0x08)
	struct UCanvasPanel* Panel_BG; // 0x380(0x08)
	struct UCanvasPanel* Panel_Border; // 0x388(0x08)
	struct UImage* ReticleDirection; // 0x390(0x08)
	struct UCanvasPanel* Coredot; // 0x398(0x08)
	struct USolarWeaponRechamberWidget* HUD_CarFireCD_L; // 0x3a0(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x3a8(0x08)
	struct UCanvasPanelSlot* SecondReticleSlot; // 0x3b0(0x08)
	struct UCanvasPanelSlot* ReticleDirectionSlot; // 0x3b8(0x08)
	struct UImage* ProgressImage; // 0x3c0(0x08)
	struct UWidgetAnimation* ProgressAnima; // 0x3c8(0x08)
	struct UMaterialInstanceDynamic* ProgressMaterial; // 0x3d0(0x08)
	char pad_3D8[0x10]; // 0x3d8(0x10)

	void UpdateScopeUI(struct ASolarVehicleWeapon* VehicleWeapon, struct FVehicleWeaponCrossHairInfo& InCrossHairInfo); // Function Solarland.VehicleWeaponScopeWidget.UpdateScopeUI // (Final|Native|Public|HasOutParms) // @ game+0x22a84d0
	void SetChargeProgress(struct UImage*& InProgressImage, struct UWidgetAnimation*& InProgressAnima); // Function Solarland.VehicleWeaponScopeWidget.SetChargeProgress // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x25d85b0
	void OnUpdateChargeProgress(bool InbCharging, int32_t InChargeMode, float InChargeProgress); // Function Solarland.VehicleWeaponScopeWidget.OnUpdateChargeProgress // (Final|Native|Protected) // @ game+0x22a8200
	void OnScopeTriggerChanged(bool bChecked); // Function Solarland.VehicleWeaponScopeWidget.OnScopeTriggerChanged // (Final|Native|Protected) // @ game+0x22a80e0
	void OnScopeOpened(); // Function Solarland.VehicleWeaponScopeWidget.OnScopeOpened // (Final|Native|Public) // @ game+0x22a80c0
	void InitScopeUI(struct ASolarVehiclePawn* InVehicle, bool bSpectate); // Function Solarland.VehicleWeaponScopeWidget.InitScopeUI // (Final|Native|Public) // @ game+0x22a7e50
	void ApplyWeaponCrossHairToScope(struct FVehicleWeaponCrossHairInfo& InCrossHairInfo); // Function Solarland.VehicleWeaponScopeWidget.ApplyWeaponCrossHairToScope // (Final|Native|Protected|HasOutParms) // @ game+0x22a7cf0
};

// Class Solarland.VehicleWholeShieldGCNotify_Actor
// Size: 0x578 (Inherited: 0x2a0)
struct AVehicleWholeShieldGCNotify_Actor : ASolarVehicleGCNotify_Actor {
	struct TSoftObjectPtr<UMaterialInterface> TeammateWholeShieldMaterial; // 0x2a0(0x28)
	struct TSoftObjectPtr<UMaterialInterface> NoTeammateWholeShieldMaterial; // 0x2c8(0x28)
	struct FName StartShieldMaterialParam; // 0x2f0(0x08)
	struct FRuntimeFloatCurve StartShieldCurve; // 0x2f8(0x88)
	struct FName ShieldMaterialChangeParam; // 0x380(0x08)
	struct TMap<float, float> HighShieldChangeRateToMaterialValue; // 0x388(0x50)
	struct TMap<float, float> LowShieldChangeRateToMaterialValue; // 0x3d8(0x50)
	struct FName SphereParameterName; // 0x428(0x08)
	struct FName HitLocaitonParameterName; // 0x430(0x08)
	struct FRuntimeFloatCurve HitEffectDurationCurve; // 0x438(0x88)
	struct TSoftObjectPtr<UParticleSystem> TeammateBulletHitEffect; // 0x4c0(0x28)
	struct TSoftObjectPtr<UParticleSystem> NoTeammateBulletHitEffect; // 0x4e8(0x28)
	struct FVector BulletHitEffectScale; // 0x510(0x0c)
	char pad_51C[0x5c]; // 0x51c(0x5c)

	void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.VehicleWholeShieldGCNotify_Actor.OnPlayerGetOnVehicle // (Final|Native|Private) // @ game+0x22ac190
	void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.VehicleWholeShieldGCNotify_Actor.OnPlayerGetOffVehicle // (Final|Native|Private) // @ game+0x22ac0c0
};

// Class Solarland.VerticalFOVComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UVerticalFOVComponent : UActorComponent {
	float VerticalFOV; // 0xb0(0x04)
	float AspectRatioThreshold; // 0xb4(0x04)
	float HorizontalFOV; // 0xb8(0x04)
	char pad_BC[0xc]; // 0xbc(0x0c)
};

// Class Solarland.VibrateConfig
// Size: 0xa0 (Inherited: 0x30)
struct UVibrateConfig : UDataAsset {
	struct UDataTable* dataTab; // 0x30(0x08)
	struct TMap<enum class EWeaponVibrateFactor, float> WeaponVibrateFactorMap; // 0x38(0x50)
	struct FSoftObjectPath WeaponDataTabPath; // 0x88(0x18)
};

// Class Solarland.VisibilityFlagSettings
// Size: 0x50 (Inherited: 0x38)
struct UVisibilityFlagSettings : UDeveloperSettings {
	struct FGameplayTag DefaultVisibilityFlagTag; // 0x38(0x08)
	struct TArray<struct FGameplayTag> VisibilityFlagTags; // 0x40(0x10)

	int32_t StaticGetVisibilityFlag(struct FGameplayTag& Tag); // Function Solarland.VisibilityFlagSettings.StaticGetVisibilityFlag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x22acc70
	int32_t GetVisibilityFlag(struct FGameplayTag& Tag); // Function Solarland.VisibilityFlagSettings.GetVisibilityFlag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x22abcc0
};

// Class Solarland.VisualSoundConfig
// Size: 0xe8 (Inherited: 0x30)
struct UVisualSoundConfig : UDataAsset {
	char ElemMaxCount; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float VehicleMoveDecidingSpeed; // 0x34(0x04)
	float IgnoredCheckRate; // 0x38(0x04)
	float IgnoredCheckAngle; // 0x3c(0x04)
	float IgnoredCheckDis_PlayerDefault; // 0x40(0x04)
	float IgnoredCheckDis_VehicleDefault; // 0x44(0x04)
	struct TMap<int32_t, float> IgnoredCheckDis_VehicleMap; // 0x48(0x50)
	struct TMap<enum class EBattlePromptType, struct FVisualSoundData> VisualSoundDataMap; // 0x98(0x50)
};

// Class Solarland.WalkWidgetNew
// Size: 0x6d0 (Inherited: 0x1e0)
struct UWalkWidgetNew : USolarJoyStick {
	struct FMulticastInlineDelegate OnSprintChangeToCenterState; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnSprintIconActive; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnSprintIconHide; // 0x200(0x10)
	struct FMulticastInlineDelegate OnSprintLockIconActive; // 0x210(0x10)
	struct FMulticastInlineDelegate OnStartSprintFree; // 0x220(0x10)
	struct FMulticastInlineDelegate OnTerminateSprintFree; // 0x230(0x10)
	struct FSlateBrush JoyStickThumb; // 0x240(0x98)
	struct FSlateBrush JoyStickThumbPress; // 0x2d8(0x98)
	struct FSlateBrush JoyStickBG; // 0x370(0x98)
	struct FSlateBrush SprintImage; // 0x408(0x98)
	struct FSlateBrush UsedSprintImage; // 0x4a0(0x98)
	struct FSlateBrush SprintImageHovered; // 0x538(0x98)
	struct FSlateBrush UsedSprintImageHovered; // 0x5d0(0x98)
	struct FVector2D SprintSize; // 0x668(0x08)
	float TriggerDistanceToSprint; // 0x670(0x04)
	float TriggerDistanceToShowSprint; // 0x674(0x04)
	float ShowSprintIconSectorAngle; // 0x678(0x04)
	float ShowLockSprintIconSectorAngle; // 0x67c(0x04)
	bool bOpenLeftHalfTouch; // 0x680(0x01)
	bool bUseTouchStartOffset; // 0x681(0x01)
	char pad_682[0x2]; // 0x682(0x02)
	struct FVector2D VisualCenter; // 0x684(0x08)
	struct FVector2D VisualSize; // 0x68c(0x08)
	struct FVector2D ThumbSize; // 0x694(0x08)
	struct FVector2D InputScale; // 0x69c(0x08)
	float ActiveOpacity; // 0x6a4(0x04)
	float InactiveOpacity; // 0x6a8(0x04)
	float TimeUntilDeactive; // 0x6ac(0x04)
	bool bPreventReCenter; // 0x6b0(0x01)
	char pad_6B1[0x1f]; // 0x6b1(0x1f)

	void SetSprintToCenterDistance(float Distance); // Function Solarland.WalkWidgetNew.SetSprintToCenterDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x22acbf0
	void SetNewSprintImageResource(struct UObject* NewResource, struct UObject* NewHoveredResource); // Function Solarland.WalkWidgetNew.SetNewSprintImageResource // (Final|Native|Public|BlueprintCallable) // @ game+0x22acb20
	void SetNewSprintImage(struct FSlateBrush& NewImage, struct FSlateBrush& NewHoveredImage); // Function Solarland.WalkWidgetNew.SetNewSprintImage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x22ac840
	void SetCustomizeVisualInfo(struct FVector2D& InPosition, float InScale, float InOpacity); // Function Solarland.WalkWidgetNew.SetCustomizeVisualInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x22ac710
	void SetCanChangeSprintState(bool CanChange); // Function Solarland.WalkWidgetNew.SetCanChangeSprintState // (Final|Native|Public|BlueprintCallable) // @ game+0x22ac680
	void ResetSprintState(); // Function Solarland.WalkWidgetNew.ResetSprintState // (Final|Native|Public|BlueprintCallable) // @ game+0x22ac630
	void ResetSprintImage(); // Function Solarland.WalkWidgetNew.ResetSprintImage // (Final|Native|Public|BlueprintCallable) // @ game+0x22ac610
};

// Class Solarland.WarmGameHeroPickRule
// Size: 0x28 (Inherited: 0x28)
struct UWarmGameHeroPickRule : UHeroPickRuleBase {
};

// Class Solarland.WarmupMatchManager
// Size: 0x260 (Inherited: 0x228)
struct AWarmupMatchManager : AGameManagerBase {
	char pad_228[0x8]; // 0x228(0x08)
	struct FMulticastInlineDelegate MatchSuccessedDelegate; // 0x230(0x10)
	struct FMulticastInlineDelegate MatchInterruptDelegate; // 0x240(0x10)
	float AutoGoToTargetLevelTime; // 0x250(0x04)
	char pad_254[0xc]; // 0x254(0x0c)

	void MatchSuccessed(); // Function Solarland.WarmupMatchManager.MatchSuccessed // (Final|Native|Public) // @ game+0x22ac020
	void MatchInterrupt(); // Function Solarland.WarmupMatchManager.MatchInterrupt // (Final|Native|Public) // @ game+0x22ac000
	void GotoMatchTargetLevel(); // Function Solarland.WarmupMatchManager.GotoMatchTargetLevel // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void AutoGotoMatchTargetLevel(); // Function Solarland.WarmupMatchManager.AutoGotoMatchTargetLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x22abb80
};

// Class Solarland.WeaponAbilityBase
// Size: 0x3b0 (Inherited: 0x310)
struct AWeaponAbilityBase : ASolarAbility {
	struct FHitResult HitResult; // 0x308(0x88)
	bool bClientVaild; // 0x390(0x01)
	bool bServerVaild; // 0x391(0x01)
	bool bLife; // 0x392(0x01)
	float LifeTime; // 0x394(0x04)
	struct AActor* TargetActor; // 0x398(0x08)
	struct TWeakObjectPtr<struct ASolarWeapon> TargetWeapon; // 0x3a4(0x08)
	char pad_3AF[0x1]; // 0x3af(0x01)

	bool HasLife(); // Function Solarland.WeaponAbilityBase.HasLife // (Final|Native|Public|Const) // @ game+0x22abe30
};

// Class Solarland.WeaponAssistAimWeaponConfig
// Size: 0x2d8 (Inherited: 0x30)
struct UWeaponAssistAimWeaponConfig : UDataAsset {
	float MaxTargetDetectionDistance; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct FBaseFollowSpeedByTag> BaseFollowSpeedByTags; // 0x38(0x10)
	struct FGameplayTagRequirements TargetVelocityFollowTagRequirements; // 0x48(0x50)
	float TargetVelocityFollowDeactivationDelay; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct FRuntimeFloatCurve TargetVelocityFollowHorizontalRatioCurve; // 0xa0(0x88)
	struct FRuntimeFloatCurve TargetVelocityFollowVerticalRatioCurve; // 0x128(0x88)
	float TargetVelocityFollowHorizontalRatioCurveScale; // 0x1b0(0x04)
	float TargetVelocityFollowVerticalRatioCurveScale; // 0x1b4(0x04)
	float TargetVelocityFollowMaxHorizontalSpeed; // 0x1b8(0x04)
	float TargetVelocityFollowMaxVerticalSpeed; // 0x1bc(0x04)
	struct FRuntimeFloatCurve TargetVelocityFollowRatioScaleByDistanceCurve; // 0x1c0(0x88)
	struct FRuntimeFloatCurve GlobalSensitivityScaleCurve; // 0x248(0x88)
	float GlobalSensitivityScaleCurveScale; // 0x2d0(0x04)
	char pad_2D4[0x4]; // 0x2d4(0x04)
};

// Class Solarland.WeaponAssistAimConfig
// Size: 0x130 (Inherited: 0x30)
struct UWeaponAssistAimConfig : UDataAsset {
	char AssistAimTargetFlag; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<enum class EObjectTypeQuery> TargetDetectionBlockTypes; // 0x38(0x10)
	struct TArray<enum class EObjectTypeQuery> LockAimingBlockTypes; // 0x48(0x10)
	bool bEnableAssistFollow; // 0x58(0x01)
	bool bEnableGlobalSensitivityScale; // 0x59(0x01)
	char pad_5A[0x6]; // 0x5a(0x06)
	struct FWeaponAssistAimWeaponConfigAll DefaultAssistAimWeaponConfigAll; // 0x60(0x60)
	struct FWeaponAssistAimWeaponConfigAll DefaultAssistAimWeaponConfigAllGamepad; // 0xc0(0x60)
	struct TArray<struct FWeaponAssistAimByCharacterTag> AssistAimWeaponConfigsByCharacterTag; // 0x120(0x10)
};

// Class Solarland.WeaponCameraShakePattern
// Size: 0x30 (Inherited: 0x30)
struct UWeaponCameraShakePattern : USolarPattern {
};

// Class Solarland.WeaponCameraShakePatternRuntime
// Size: 0x30 (Inherited: 0x30)
struct UWeaponCameraShakePatternRuntime : USolarPatternRuntime {
};

// Class Solarland.NormalCameraShakePattern
// Size: 0x38 (Inherited: 0x30)
struct UNormalCameraShakePattern : UWeaponCameraShakePattern {
	struct UCameraShake* ShakeClass; // 0x30(0x08)
};

// Class Solarland.NormalCameraShakePatternRuntime
// Size: 0x30 (Inherited: 0x30)
struct UNormalCameraShakePatternRuntime : UWeaponCameraShakePatternRuntime {
};

// Class Solarland.CameraShakeWithCurvePattern
// Size: 0x48 (Inherited: 0x30)
struct UCameraShakeWithCurvePattern : UWeaponCameraShakePattern {
	struct UCameraShakeWithCurve* ShakeClass; // 0x30(0x08)
	struct UCameraShakeWithCurve* ShakeTemplate; // 0x38(0x08)
	int32_t RandomSeed; // 0x40(0x04)
	int32_t RandomStep; // 0x44(0x04)
};

// Class Solarland.CameraShakeWithCurvePatternRuntime
// Size: 0x30 (Inherited: 0x30)
struct UCameraShakeWithCurvePatternRuntime : UWeaponCameraShakePatternRuntime {
};

// Class Solarland.WeaponChosenWidget
// Size: 0x3e0 (Inherited: 0x348)
struct UWeaponChosenWidget : USolarUserWidget {
	struct USolarButton* Btn_Select; // 0x348(0x08)
	bool bEmpty; // 0x350(0x01)
	bool bSelect; // 0x351(0x01)
	char pad_352[0x8e]; // 0x352(0x8e)

	void SelectSlot(); // Function Solarland.WeaponChosenWidget.SelectSlot // (Final|Native|Protected|BlueprintCallable) // @ game+0x22b1770
	void OnScopeChanged(int32_t InNewScope); // Function Solarland.WeaponChosenWidget.OnScopeChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x22b16e0
	void K2_OnSelected(bool InbSelected); // Function Solarland.WeaponChosenWidget.K2_OnSelected // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void K2_OnReset(); // Function Solarland.WeaponChosenWidget.K2_OnReset // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	void K2_InitWidget(struct FChooseWeaponItemData& InData); // Function Solarland.WeaponChosenWidget.K2_InitWidget // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x25d85b0
	enum class EWeaponEquipSlot K2_GetUsedSlot(); // Function Solarland.WeaponChosenWidget.K2_GetUsedSlot // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x22b1100
};

// Class Solarland.WeaponExtraAttributeSet
// Size: 0x100 (Inherited: 0x30)
struct UWeaponExtraAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData ExtraARMag; // 0x30(0x10)
	struct FGameplayAttributeData ExtraSMGMag; // 0x40(0x10)
	struct FGameplayAttributeData ExtraSGMag; // 0x50(0x10)
	struct FGameplayAttributeData ExtraSRMag; // 0x60(0x10)
	struct FGameplayAttributeData ARLoadSpeedMultiple; // 0x70(0x10)
	struct FGameplayAttributeData SMGLoadSpeedMultiple; // 0x80(0x10)
	struct FGameplayAttributeData SGLoadSpeedMultiple; // 0x90(0x10)
	struct FGameplayAttributeData SRLoadSpeedMultiple; // 0xa0(0x10)
	struct FGameplayAttributeData ARHeadshotDamageMultiple; // 0xb0(0x10)
	struct FGameplayAttributeData SMGHeadshotDamageMultiple; // 0xc0(0x10)
	struct FGameplayAttributeData SGHeadshotDamageMultiple; // 0xd0(0x10)
	struct FGameplayAttributeData SRHeadshotDamageMultiple; // 0xe0(0x10)
	struct FGameplayAttributeData WeaponSkillCDMultiple; // 0xf0(0x10)

	void OnRep_WeaponSkillCDMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_WeaponSkillCDMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x22b1640
	void OnRep_SRLoadSpeedMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_SRLoadSpeedMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x22b15a0
	void OnRep_SMGLoadSpeedMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_SMGLoadSpeedMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x22b1500
	void OnRep_SGLoadSpeedMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_SGLoadSpeedMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x22b1460
	void OnRep_ExtraSRMag(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ExtraSRMag // (Final|Native|Protected|HasOutParms) // @ game+0x22b13c0
	void OnRep_ExtraSMGMag(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ExtraSMGMag // (Final|Native|Protected|HasOutParms) // @ game+0x22b1320
	void OnRep_ExtraSGMag(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ExtraSGMag // (Final|Native|Protected|HasOutParms) // @ game+0x22b1280
	void OnRep_ExtraARMag(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ExtraARMag // (Final|Native|Protected|HasOutParms) // @ game+0x22b11e0
	void OnRep_ARLoadSpeedMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ARLoadSpeedMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x22b1140
};

// Class Solarland.WeaponGrowthManager
// Size: 0x30 (Inherited: 0x28)
struct UWeaponGrowthManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	struct FString GetWeaponBpPath(int32_t ID); // Function Solarland.WeaponGrowthManager.GetWeaponBpPath // (Final|Native|Public) // @ game+0x22b0ff0
};

// Class Solarland.WeaponHitAbility
// Size: 0x3b0 (Inherited: 0x3b0)
struct AWeaponHitAbility : AWeaponAbilityBase {
};

// Class Solarland.WeaponSkinData
// Size: 0x220 (Inherited: 0x30)
struct UWeaponSkinData : UDataAsset {
	enum class EWeaponSkinType WeaponSkinType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FWeaponBodyData WeaponData; // 0x38(0xb0)
	struct TArray<struct FWeaponSkinPartData> WeaponBarMap; // 0xe8(0x10)
	bool WeaponBarLocked; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)
	struct TArray<struct FWeaponSkinPartData> WeaponClipMap; // 0x100(0x10)
	bool WeaponClipLocked; // 0x110(0x01)
	char pad_111[0x7]; // 0x111(0x07)
	struct TArray<struct FWeaponSkinPartData> WeaponGripMap; // 0x118(0x10)
	bool WeaponGripLocked; // 0x128(0x01)
	bool bUseGripIkSocket; // 0x129(0x01)
	char pad_12A[0x6]; // 0x12a(0x06)
	struct TArray<struct FWeaponSkinPartData> WeaponScopeMap; // 0x130(0x10)
	bool WeaponScopeLocked; // 0x140(0x01)
	char pad_141[0x7]; // 0x141(0x07)
	struct TArray<struct FWeaponSkinPartData> WeaponStockMap; // 0x148(0x10)
	bool WeaponStockLocked; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
	struct ASolarBullet* DedicatedBulletEffect; // 0x160(0x08)
	struct ASolarBullet* DedicatedSkillEffect; // 0x168(0x08)
	struct FSoftClassPath DedicatedBulletEffectPath; // 0x170(0x18)
	struct FSoftClassPath DedicatedSkillEffectPath; // 0x188(0x18)
	struct UParticleSystem* DedicatedKillEffect; // 0x1a0(0x08)
	struct FSoftObjectPath DedicatedKillEffectPath; // 0x1a8(0x18)
	struct FSoftObjectPath DedicatedSpecialEffectPath; // 0x1c0(0x18)
	struct UActorEffect* DedicatedDissolvedDeathActorEffect; // 0x1d8(0x08)
	struct FSoftObjectPath DedicatedDissolvedDeathFXPath; // 0x1e0(0x18)
	struct FString PlayAudioEventName; // 0x1f8(0x10)
	struct FString StopAudioEventName; // 0x208(0x10)
	struct UAnimSequence* OutsideAnimation; // 0x218(0x08)

	void ModifyResPath(); // Function Solarland.WeaponSkinData.ModifyResPath // (Final|Native|Public|BlueprintCallable) // @ game+0x22b1120
	bool IsMeshReplace(); // Function Solarland.WeaponSkinData.IsMeshReplace // (Final|Native|Public) // @ game+0x22b10d0
	bool GetPartLockedInfoByType(enum class EWeaponPartType PartType); // Function Solarland.WeaponSkinData.GetPartLockedInfoByType // (Final|Native|Public|Const) // @ game+0x22b0f60
	bool GetPartDataArrayByType(enum class EWeaponPartType PartType, struct TArray<struct FWeaponSkinPartData>& PartDataMap); // Function Solarland.WeaponSkinData.GetPartDataArrayByType // (Final|Native|Public|HasOutParms|Const) // @ game+0x22b0e00
};

// Class Solarland.WeaponPartStaticMeshComponent
// Size: 0x600 (Inherited: 0x600)
struct UWeaponPartStaticMeshComponent : UStaticMeshComponent {
};

// Class Solarland.WeaponPartComp
// Size: 0x6c0 (Inherited: 0x600)
struct UWeaponPartComp : UWeaponPartStaticMeshComponent {
	int32_t PartID; // 0x600(0x04)
	char pad_604[0x4]; // 0x604(0x04)
	struct UWeaponPartDataAsset* PartDataAsset; // 0x608(0x08)
	char pad_610[0xb0]; // 0x610(0xb0)
};

// Class Solarland.WeaponPartClipComp
// Size: 0x6c0 (Inherited: 0x6c0)
struct UWeaponPartClipComp : UWeaponPartComp {

	bool IsSupportExtract(); // Function Solarland.WeaponPartClipComp.IsSupportExtract // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22b5230
	struct FRotator GetHandRotOffset(); // Function Solarland.WeaponPartClipComp.GetHandRotOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x22b4bf0
	struct FVector GetHandLocOffset(); // Function Solarland.WeaponPartClipComp.GetHandLocOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x22b4bb0
	float GetDropLifeSpan(); // Function Solarland.WeaponPartClipComp.GetDropLifeSpan // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22b4b00
	struct FName GetCharacterHandSocket(); // Function Solarland.WeaponPartClipComp.GetCharacterHandSocket // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22b4a50
	struct FName GetCharacterHandInverseSocket(); // Function Solarland.WeaponPartClipComp.GetCharacterHandInverseSocket // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22b4a10
};

// Class Solarland.WeaponPartDataAsset
// Size: 0x120 (Inherited: 0x30)
struct UWeaponPartDataAsset : UDataAsset {
	bool bOnlyData; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<int32_t> OnlyDataForWeaponSkinIDArray; // 0x38(0x10)
	struct FSoftObjectPath ViewStaticMeshPath; // 0x48(0x18)
	struct FTransform PreviewTransform; // 0x60(0x30)
	struct FSoftObjectPath FightStaticMeshPath; // 0x90(0x18)
	struct FSoftObjectPath PartIcon; // 0xa8(0x18)
	struct TMap<int32_t, struct FVector> SpecificScaleMap; // 0xc0(0x50)
	struct UWeaponPartWeaponAttributeDataAsset* WeaponAttributeConfig; // 0x110(0x08)
	char pad_118[0x8]; // 0x118(0x08)
};

// Class Solarland.WeaponPartClipDataAsset
// Size: 0x150 (Inherited: 0x120)
struct UWeaponPartClipDataAsset : UWeaponPartDataAsset {
	bool bSupportExtract; // 0x118(0x01)
	struct FVector HandLocOffsetVector; // 0x11c(0x0c)
	struct FRotator HandRotOffsetRotator; // 0x128(0x0c)
	float DropLifeSpan; // 0x134(0x04)
	struct FName CharacterHandSocket; // 0x138(0x08)
	struct FName CharacterHandInverseSocket; // 0x140(0x08)
	char pad_14D[0x3]; // 0x14d(0x03)
};

// Class Solarland.WeaponPartWeaponAttributeDataAsset
// Size: 0x50 (Inherited: 0x30)
struct UWeaponPartWeaponAttributeDataAsset : UDataAsset {
	struct FWeaponAttributeModifierContainer AttributeModifiers; // 0x30(0x10)
	struct TArray<struct FWeaponPartWeaponAttributeByWeaponType> ModifiersByWeaponType; // 0x40(0x10)
};

// Class Solarland.WeaponPartGripComp
// Size: 0x6c0 (Inherited: 0x6c0)
struct UWeaponPartGripComp : UWeaponPartComp {
};

// Class Solarland.WeaponPartGripDataAsset
// Size: 0x170 (Inherited: 0x120)
struct UWeaponPartGripDataAsset : UWeaponPartDataAsset {
	struct TMap<enum class ECharacterBodyScaleType, struct FWeaponPartGripDataForCharacter> DataForCharacterMap; // 0x118(0x50)
};

// Class Solarland.WeaponPartGunStockComp
// Size: 0x6c0 (Inherited: 0x6c0)
struct UWeaponPartGunStockComp : UWeaponPartComp {
};

// Class Solarland.WeaponPartGunStockDataAsset
// Size: 0x120 (Inherited: 0x120)
struct UWeaponPartGunStockDataAsset : UWeaponPartDataAsset {
};

// Class Solarland.WeaponPartMuzzleComp
// Size: 0x6c0 (Inherited: 0x6c0)
struct UWeaponPartMuzzleComp : UWeaponPartComp {

	bool HasSilencer(); // Function Solarland.WeaponPartMuzzleComp.HasSilencer // (Final|Native|Public|Const) // @ game+0x22b4fc0
	bool HasFlameArrester(); // Function Solarland.WeaponPartMuzzleComp.HasFlameArrester // (Final|Native|Public|Const) // @ game+0x22b4f90
};

// Class Solarland.WeaponPartMuzzleDataAsset
// Size: 0x120 (Inherited: 0x120)
struct UWeaponPartMuzzleDataAsset : UWeaponPartDataAsset {
	bool bSilencer; // 0x118(0x01)
	bool bFlameArrester; // 0x119(0x01)
};

// Class Solarland.WeaponPartsComponent
// Size: 0x148 (Inherited: 0xb0)
struct UWeaponPartsComponent : UActorComponent {
	char pad_B0[0x18]; // 0xb0(0x18)
	struct UWeaponPartScopeComp* ScopeComp; // 0xc8(0x08)
	struct UWeaponPartClipComp* ClipComp; // 0xd0(0x08)
	struct UWeaponPartMuzzleComp* MuzzleComp; // 0xd8(0x08)
	struct UWeaponPartGripComp* GripComp; // 0xe0(0x08)
	struct UWeaponPartGunStockComp* GunStockComp; // 0xe8(0x08)
	struct UStaticMeshComponent* CrossHairPlane; // 0xf0(0x08)
	struct UStaticMeshComponent* RedCrosshairPanel; // 0xf8(0x08)
	bool bQuickScope; // 0x100(0x01)
	char pad_101[0x3]; // 0x101(0x03)
	struct FName ScopeSocket; // 0x104(0x08)
	struct FName GripSocket; // 0x10c(0x08)
	struct FName ClipSocket; // 0x114(0x08)
	struct FName OldClipSocket; // 0x11c(0x08)
	struct FName MuzzleSocket; // 0x124(0x08)
	struct FName GunStockSocket; // 0x12c(0x08)
	char pad_134[0x4]; // 0x134(0x04)
	struct ASolarWeapon* MyWeaponActor; // 0x138(0x08)
	char pad_140[0x8]; // 0x140(0x08)

	void UpdateSinglePartHoldView(struct UWeaponPartComp* PartComp, bool bLocal); // Function Solarland.WeaponPartsComponent.UpdateSinglePartHoldView // (Final|Native|Protected) // @ game+0x22b5720
	void ShowParts(bool Show, enum class EWeaponPartVisibilityChangeFlag Flag); // Function Solarland.WeaponPartsComponent.ShowParts // (Final|Native|Public) // @ game+0x22b5650
	bool IsPartExist(int32_t ID); // Function Solarland.WeaponPartsComponent.IsPartExist // (Final|Native|Protected|Const) // @ game+0x22b5160
	bool IsDefaultPart(int32_t PartID); // Function Solarland.WeaponPartsComponent.IsDefaultPart // (Final|Native|Public|Const) // @ game+0x22b5090
	bool IsAmmoExist(int32_t ID); // Function Solarland.WeaponPartsComponent.IsAmmoExist // (Final|Native|Protected|Const) // @ game+0x22b4ff0
	struct TArray<struct UWeaponPartComp*> GetValidWeaponParts(); // Function Solarland.WeaponPartsComponent.GetValidWeaponParts // (Final|Native|Public|Const) // @ game+0x22b4e40
};

// Class Solarland.WeaponPartScopeComp
// Size: 0x810 (Inherited: 0x6c0)
struct UWeaponPartScopeComp : UWeaponPartComp {
	bool bOpen; // 0x6c0(0x01)
	char pad_6C1[0x3]; // 0x6c1(0x03)
	float FovValue; // 0x6c4(0x04)
	float HipToAdsTime; // 0x6c8(0x04)
	char pad_6CC[0x4]; // 0x6cc(0x04)
	struct UCurveFloat* FovChangeCurve; // 0x6d0(0x08)
	float HitEffectScale; // 0x6d8(0x04)
	char pad_6DC[0x104]; // 0x6dc(0x104)
	struct UMaterialInstance* ScopeCrossHairMaterial; // 0x7e0(0x08)
	struct UStaticMesh* ScopeCrossHairMesh; // 0x7e8(0x08)
	struct UMaterialInstance* ScopeEnemyMakerMaterial; // 0x7f0(0x08)
	struct UStaticMesh* ScopeEnemyMakerMesh; // 0x7f8(0x08)
	struct UStaticMesh* ScopeMeshForFPP; // 0x800(0x08)
	struct UStaticMesh* ScopeMeshForTPP; // 0x808(0x08)

	void OpenScope(float Time); // Function Solarland.WeaponPartScopeComp.OpenScope // (Final|Native|Public) // @ game+0x22b5390
	bool IsOpened(); // Function Solarland.WeaponPartScopeComp.IsOpened // (Final|Native|Public|Const) // @ game+0x22b5130
	enum class EWeaponScopeType GetScopeType(); // Function Solarland.WeaponPartScopeComp.GetScopeType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22b4e10
	struct FVector GetScopeAimCenterPoint(); // Function Solarland.WeaponPartScopeComp.GetScopeAimCenterPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x22b4dd0
	struct FRotator GetFPPRotation(); // Function Solarland.WeaponPartScopeComp.GetFPPRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x22b4b70
	struct FVector GetFPPLocation(); // Function Solarland.WeaponPartScopeComp.GetFPPLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x22b4b30
	float GetDistanceToEyeWhenScope(); // Function Solarland.WeaponPartScopeComp.GetDistanceToEyeWhenScope // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22b4ad0
	void CloseScope(); // Function Solarland.WeaponPartScopeComp.CloseScope // (Final|Native|Public) // @ game+0x22b48e0
};

// Class Solarland.WeaponPartScopeDataAsset
// Size: 0x2f0 (Inherited: 0x120)
struct UWeaponPartScopeDataAsset : UWeaponPartDataAsset {
	enum class EWeaponScopeType TypeID; // 0x118(0x01)
	struct FVector FPPLocation; // 0x11c(0x0c)
	struct FRotator FPPRotation; // 0x128(0x0c)
	float DistanceToEyeWhenScope; // 0x134(0x04)
	bool bShoulderShootChangeScale; // 0x138(0x01)
	float ShoulderShootChangeScale; // 0x13c(0x04)
	struct FName CrosshairSocketName; // 0x140(0x08)
	struct FSoftObjectPath LodXMeshPath; // 0x148(0x18)
	struct FSoftObjectPath ScopeCrossHairMaterialPath; // 0x160(0x18)
	struct FSoftObjectPath ScopeCrossHairMeshPath; // 0x178(0x18)
	bool bVibration; // 0x190(0x01)
	char pad_193[0x5]; // 0x193(0x05)
	struct TMap<int32_t, struct FPartScopeCorrect> CorrectMapData; // 0x198(0x50)
	struct TMap<int32_t, struct FPartScopeCorrect> FPPMapForWeaponSkin; // 0x1e8(0x50)
	struct FSolarAmmoMeshData AmmoMeshData; // 0x238(0x48)
	bool bEnableEnemyMaker; // 0x280(0x01)
	char pad_281[0xf]; // 0x281(0x0f)
	struct FTransform EnemyMakerRelativeTransform; // 0x290(0x30)
	struct FSoftObjectPath ScopeCrossHairRedPointMaterialPath; // 0x2c0(0x18)
	struct FSoftObjectPath ScopeCrossHairRedPointMeshPath; // 0x2d8(0x18)
};

// Class Solarland.RecoverableRecoilPattern
// Size: 0x210 (Inherited: 0x38)
struct URecoverableRecoilPattern : USolarIncreaseAndDecreasePattern {
	bool bLimitMaxOffset; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FVector MaxOffset; // 0x3c(0x0c)
	bool bLimitRecoveryStopOffset; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FVector RecoveryStopOffset; // 0x4c(0x0c)
	float IncreaseTime; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct FRuntimeFloatCurve IncreaseCurve; // 0x60(0x88)
	struct FWeaponRecoilVectorGenerator OffsetGenerator; // 0xe8(0x18)
	struct FRuntimeFloatCurve DecreaseTimeCurve; // 0x100(0x88)
	struct FRuntimeFloatCurve DecreaseRatioCurve; // 0x188(0x88)
};

// Class Solarland.RecoverableRecoilPatternRuntime
// Size: 0x88 (Inherited: 0x50)
struct URecoverableRecoilPatternRuntime : USolarIncreaseAndDecreasePatternRuntime {
	char pad_50[0x38]; // 0x50(0x38)
};

// Class Solarland.WeaponRecoilPattern
// Size: 0x220 (Inherited: 0x210)
struct UWeaponRecoilPattern : URecoverableRecoilPattern {
	bool bEnableRecoveryCorrection; // 0x210(0x01)
	char pad_211[0x3]; // 0x211(0x03)
	struct FRangeFloat HoriRecoveryRangeWithCorrection; // 0x214(0x08)
	char pad_21C[0x4]; // 0x21c(0x04)
};

// Class Solarland.WeaponRecoilPatternRuntime
// Size: 0x98 (Inherited: 0x88)
struct UWeaponRecoilPatternRuntime : URecoverableRecoilPatternRuntime {
	char pad_88[0x10]; // 0x88(0x10)
};

// Class Solarland.WeaponTPPKickPattern
// Size: 0x118 (Inherited: 0x38)
struct UWeaponTPPKickPattern : USolarIncreaseAndDecreasePattern {
	struct FVector MaxOffset; // 0x38(0x0c)
	float IncreaseTime; // 0x44(0x04)
	struct UCurveVector* IncreaseCurve; // 0x48(0x08)
	struct FWeaponRecoilVectorGenerator OffsetGenerator; // 0x50(0x18)
	float DecreaseTime; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
	struct FRuntimeFloatCurve DecreaseRatioCurve; // 0x70(0x88)
	struct UCurveVector* DecreaseOffsetCurve; // 0xf8(0x08)
	struct FWeaponRecoilVectorGenerator DecreaseOffsetGenerator; // 0x100(0x18)
};

// Class Solarland.WeaponTPPKickPatternRuntime
// Size: 0x80 (Inherited: 0x50)
struct UWeaponTPPKickPatternRuntime : USolarIncreaseAndDecreasePatternRuntime {
	char pad_50[0x30]; // 0x50(0x30)
};

// Class Solarland.WeaponGunKickPattern
// Size: 0x268 (Inherited: 0x38)
struct UWeaponGunKickPattern : USolarIncreaseAndDecreasePattern {
	struct FValueCurveBySprayingTime SprayingOffset; // 0x38(0x18)
	struct FValueCurveBySprayingTime SprayingRotation; // 0x50(0x18)
	float SprayingRestartSmoothTime; // 0x68(0x04)
	float SprayingRecoveryTime; // 0x6c(0x04)
	struct FRuntimeFloatCurve SprayingRecoveryRatioCurve; // 0x70(0x88)
	float IncreaseTime; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct FRuntimeFloatCurve IncreaseCurve; // 0x100(0x88)
	struct FVector MaxOffset; // 0x188(0x0c)
	char pad_194[0x4]; // 0x194(0x04)
	struct FWeaponRecoilVectorGenerator OffsetGenerator; // 0x198(0x18)
	struct FRotator MaxRotation; // 0x1b0(0x0c)
	char pad_1BC[0x4]; // 0x1bc(0x04)
	struct FWeaponRecoilRotatorGenerator RotationGenerator; // 0x1c0(0x18)
	float DecreaseTime; // 0x1d8(0x04)
	char pad_1DC[0x4]; // 0x1dc(0x04)
	struct FRuntimeFloatCurve DecreaseRatioCurve; // 0x1e0(0x88)
};

// Class Solarland.WeaponGunKickPatternRuntime
// Size: 0xd8 (Inherited: 0x50)
struct UWeaponGunKickPatternRuntime : USolarIncreaseAndDecreasePatternRuntime {
	char pad_50[0x88]; // 0x50(0x88)
};

// Class Solarland.WeaponRecoilValueGenerator
// Size: 0x28 (Inherited: 0x28)
struct UWeaponRecoilValueGenerator : UObject {
};

// Class Solarland.ConstantValueGenerator
// Size: 0x30 (Inherited: 0x28)
struct UConstantValueGenerator : UWeaponRecoilValueGenerator {
	float Value; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Solarland.RandomRangeValueGenerator
// Size: 0x40 (Inherited: 0x28)
struct URandomRangeValueGenerator : UWeaponRecoilValueGenerator {
	struct FSymmetricRangeFloat ValueRange; // 0x28(0x0c)
	int32_t RandomSeed; // 0x34(0x04)
	int32_t RandomStep; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Solarland.RandomByPerlinNoiseValueGenerator
// Size: 0x40 (Inherited: 0x28)
struct URandomByPerlinNoiseValueGenerator : UWeaponRecoilValueGenerator {
	struct FSymmetricRangeFloat ValueRange; // 0x28(0x0c)
	float NoiseBase; // 0x34(0x04)
	float NoiseFrequency; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Solarland.FixedCurveValueGenerator
// Size: 0xc0 (Inherited: 0x28)
struct UFixedCurveValueGenerator : UWeaponRecoilValueGenerator {
	struct FRuntimeFloatCurve ValueCurve; // 0x28(0x88)
	float ValueScale; // 0xb0(0x04)
	enum class EFixedValueMode ValueMode; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	int32_t RepeatStartIndex; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
};

// Class Solarland.FixedCurveValueByIndexGenerator
// Size: 0xc0 (Inherited: 0x28)
struct UFixedCurveValueByIndexGenerator : UWeaponRecoilValueGenerator {
	struct FRuntimeFloatCurve ValueCurve; // 0x28(0x88)
	float ValueScale; // 0xb0(0x04)
	enum class EFixedValueMode ValueMode; // 0xb4(0x01)
	bool bRepeatable; // 0xb5(0x01)
	char pad_B6[0x2]; // 0xb6(0x02)
	int32_t RepeatStartIndex; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
};

// Class Solarland.FixedPointsValueGenerator
// Size: 0x48 (Inherited: 0x28)
struct UFixedPointsValueGenerator : UWeaponRecoilValueGenerator {
	struct TArray<float> Values; // 0x28(0x10)
	float ValueScale; // 0x38(0x04)
	enum class EFixedValueMode ValueMode; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	int32_t RepeatStartIndex; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Solarland.FixedSectionValueGenerator
// Size: 0x40 (Inherited: 0x28)
struct UFixedSectionValueGenerator : UWeaponRecoilValueGenerator {
	struct TArray<struct FFixedSectionInfo> Sections; // 0x28(0x10)
	int32_t RepeatStartIndex; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Solarland.CompositeValueGenerator
// Size: 0x38 (Inherited: 0x28)
struct UCompositeValueGenerator : UWeaponRecoilValueGenerator {
	struct TArray<struct UWeaponRecoilValueGenerator*> Generators; // 0x28(0x10)
};

// Class Solarland.WeaponryPartBase
// Size: 0x7c0 (Inherited: 0x730)
struct UWeaponryPartBase : USwitchEffectStaticMeshComponent {
	char pad_730[0x8]; // 0x730(0x08)
	int32_t PartID; // 0x738(0x04)
	bool bDataAssetInit; // 0x73c(0x01)
	bool bMeshAssetsInit; // 0x73d(0x01)
	char pad_73E[0x2]; // 0x73e(0x02)
	struct FSoftObjectPath AssetPath; // 0x740(0x18)
	struct UWeaponPartDataAsset* OrginDataAsset; // 0x758(0x08)
	struct UWeaponPartDataAsset* SkinPartDataAsset; // 0x760(0x08)
	struct UStaticMesh* MyStaticMesh; // 0x768(0x08)
	struct UWeaponSkinData* WeaponSkin; // 0x770(0x08)
	struct FWeaponSkinPartData SkinMatchedPartData; // 0x778(0x40)
	char pad_7B8[0x8]; // 0x7b8(0x08)

	void ResetSkin(bool bShowHDMesh); // Function Solarland.WeaponryPartBase.ResetSkin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void RefreshSpecificScale(); // Function Solarland.WeaponryPartBase.RefreshSpecificScale // (Final|Native|Public) // @ game+0x22b92e0
	void PartUninstall(int32_t ID); // Function Solarland.WeaponryPartBase.PartUninstall // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void PartInitialize(int32_t ID, bool bShowHDMesh, bool bDefault); // Function Solarland.WeaponryPartBase.PartInitialize // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void OnInitMeshAssets(); // Function Solarland.WeaponryPartBase.OnInitMeshAssets // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnInitDataAsset(); // Function Solarland.WeaponryPartBase.OnInitDataAsset // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	bool IsValidPart(); // Function Solarland.WeaponryPartBase.IsValidPart // (Native|Public) // @ game+0x22b8f40
	bool HasInitialized(); // Function Solarland.WeaponryPartBase.HasInitialized // (Native|Public|Const) // @ game+0x22b8bd0
	struct TArray<struct FSoftObjectPath> GetSkinNeedLoadAssets(struct UWeaponSkinData* SkinData, bool bShowHDMesh); // Function Solarland.WeaponryPartBase.GetSkinNeedLoadAssets // (Final|Native|Public) // @ game+0x22b8a90
	enum class EWeaponPartType GetPartType(); // Function Solarland.WeaponryPartBase.GetPartType // (Native|Public|Const) // @ game+0x22b8920
	int32_t GetPartID(); // Function Solarland.WeaponryPartBase.GetPartID // (Native|Public|Const) // @ game+0x22b88f0
	struct TArray<struct FSoftObjectPath> GetClientNeedLoadMesh(bool bShowHDMesh); // Function Solarland.WeaponryPartBase.GetClientNeedLoadMesh // (Native|Public) // @ game+0x22b87b0
	struct TArray<struct FSoftObjectPath> GetClientNeedLoadAssets(bool bShowHDMesh); // Function Solarland.WeaponryPartBase.GetClientNeedLoadAssets // (Final|Native|Public) // @ game+0x22b86d0
};

// Class Solarland.WeaponryPartClip
// Size: 0x7c0 (Inherited: 0x7c0)
struct UWeaponryPartClip : UWeaponryPartBase {
};

// Class Solarland.WeaponryPartComponent
// Size: 0x110 (Inherited: 0xb0)
struct UWeaponryPartComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct UWeaponryPartScope* ScopeComp; // 0xb8(0x08)
	struct UWeaponryPartClip* ClipComp; // 0xc0(0x08)
	struct UWeaponryPartMuzzle* MuzzleComp; // 0xc8(0x08)
	struct UWeaponryPartGrip* GripComp; // 0xd0(0x08)
	struct UWeaponryPartGunStock* GunStockComp; // 0xd8(0x08)
	struct FName ScopeSocket; // 0xe0(0x08)
	struct FName GripSocket; // 0xe8(0x08)
	struct FName ClipSocket; // 0xf0(0x08)
	struct FName MuzzleSocket; // 0xf8(0x08)
	struct FName GunStockSocket; // 0x100(0x08)
	struct AWeaponryWeapon* MyWeaponActor; // 0x108(0x08)

	void UpdateSkin(struct UWeaponSkinData* SkinData, bool bShowHDMesh); // Function Solarland.WeaponryPartComponent.UpdateSkin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void UninstallWeaponPart(int32_t PartID); // Function Solarland.WeaponryPartComponent.UninstallWeaponPart // (Final|Native|Public) // @ game+0x22b98f0
	bool SinglePartHasInitilized(struct UWeaponryPartBase* part); // Function Solarland.WeaponryPartComponent.SinglePartHasInitilized // (Final|Native|Public) // @ game+0x22b96b0
	void ShowParts(bool Show); // Function Solarland.WeaponryPartComponent.ShowParts // (Final|Native|Public|BlueprintCallable) // @ game+0x22b9620
	void SetSinglePartSkin(struct UWeaponryPartBase* part, struct UWeaponSkinData* SkinData); // Function Solarland.WeaponryPartComponent.SetSinglePartSkin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ResetSkin(bool bShowHDMesh); // Function Solarland.WeaponryPartComponent.ResetSkin // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	bool ReplaceWeaponPart(int32_t PartID, bool bReplaceRoute); // Function Solarland.WeaponryPartComponent.ReplaceWeaponPart // (Final|Native|Public) // @ game+0x22b9320
	bool IsPartExist(int32_t ID); // Function Solarland.WeaponryPartComponent.IsPartExist // (Event|Public|BlueprintEvent|Const) // @ game+0x25d85b0
	void InitDefaultParts(bool bShowHDMesh); // Function Solarland.WeaponryPartComponent.InitDefaultParts // (Final|Native|Public) // @ game+0x22b8c30
	bool HasInitilizeFinish(); // Function Solarland.WeaponryPartComponent.HasInitilizeFinish // (Final|Native|Public) // @ game+0x22b8c00
	int32_t GetPartsTypeByID(int32_t ID); // Function Solarland.WeaponryPartComponent.GetPartsTypeByID // (Event|Public|BlueprintEvent|Const) // @ game+0x25d85b0
	void AttachToRightSocket(struct UWeaponryPartBase* PartComp); // Function Solarland.WeaponryPartComponent.AttachToRightSocket // (Final|Native|Public) // @ game+0x22b8620
};

// Class Solarland.WeaponryPartGrip
// Size: 0x7c0 (Inherited: 0x7c0)
struct UWeaponryPartGrip : UWeaponryPartBase {
};

// Class Solarland.WeaponryPartGunStock
// Size: 0x7c0 (Inherited: 0x7c0)
struct UWeaponryPartGunStock : UWeaponryPartBase {
};

// Class Solarland.WeaponryPartMuzzle
// Size: 0x7c0 (Inherited: 0x7c0)
struct UWeaponryPartMuzzle : UWeaponryPartBase {
};

// Class Solarland.WeaponryPartScope
// Size: 0x7c0 (Inherited: 0x7c0)
struct UWeaponryPartScope : UWeaponryPartBase {
};

// Class Solarland.WeaponrySkinComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UWeaponrySkinComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct UWeaponSkinData* SkinDataAsset; // 0xb8(0x08)
	struct AWeaponryWeapon* MyWeapon; // 0xc0(0x08)

	struct UWeaponSkinData* GetSkinData(); // Function Solarland.WeaponrySkinComponent.GetSkinData // (Final|Native|Public) // @ game+0x22b8950
};

// Class Solarland.WeaponryWeapon
// Size: 0x660 (Inherited: 0x228)
struct AWeaponryWeapon : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct FTransform PreviewTransform; // 0x230(0x30)
	struct FTransform ScoOffsetTransform; // 0x260(0x30)
	struct FTransform StoOffsetTransform; // 0x290(0x30)
	struct FTransform GriOffsetTransform; // 0x2c0(0x30)
	struct FTransform BarOffsetTransform; // 0x2f0(0x30)
	struct FTransform CliOffsetTransform; // 0x320(0x30)
	struct FTransform ShopPreviewTransform; // 0x350(0x30)
	struct FTransform BattlePassPreviewTransform; // 0x380(0x30)
	struct FTransform GetRewardTransform; // 0x3b0(0x30)
	struct FTransform GrowTaskTransform; // 0x3e0(0x30)
	struct FTransform LuckDrawTransform; // 0x410(0x30)
	struct FTransform CarouselDrawTransform; // 0x440(0x30)
	struct FTransform SupplyBoxDetailTransform; // 0x470(0x30)
	struct FTransform SupplyBoxRaffleTransform; // 0x4a0(0x30)
	struct USingleWeaponConfig* Config; // 0x4d0(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x4d8(0x08)
	char pad_4E0[0x1c]; // 0x4e0(0x1c)
	int32_t weaponid; // 0x4fc(0x04)
	struct FSoftObjectPath FightMeshPath; // 0x500(0x18)
	struct UParticleSystemComponent* SkinSpecialEffect; // 0x518(0x08)
	struct UWeaponryPartComponent* WeaponPartComponent; // 0x520(0x08)
	struct UWeaponrySkinComponent* WeaponSkinComponent; // 0x528(0x08)
	struct TSoftObjectPtr<UCurveVector> DissolveCurvePath; // 0x530(0x28)
	struct TSoftObjectPtr<UMaterialInterface> DissolveMatPath; // 0x558(0x28)
	struct TSoftObjectPtr<UCurveVector> FresnelCurvePath; // 0x580(0x28)
	struct TSoftObjectPtr<UMaterialInterface> FresnelMatPath; // 0x5a8(0x28)
	struct TSoftObjectPtr<UParticleSystem> SwitchParticleEffectPath; // 0x5d0(0x28)
	char pad_5F8[0x8]; // 0x5f8(0x08)
	float SwitchEffectInterval; // 0x600(0x04)
	float SelfDelayShowSeconds; // 0x604(0x04)
	struct FSwitchEffectInfo DissolveEffectInfo; // 0x608(0x18)
	struct FSwitchEffectInfo FresnelEffectInfo; // 0x620(0x18)
	char pad_638[0x28]; // 0x638(0x28)

	void TransformToMirror(struct FTransform OriginalTransform); // Function Solarland.WeaponryWeapon.TransformToMirror // (Final|Native|Public|HasDefaults) // @ game+0x22b9800
	void StopTweenImmediately(struct FVector& DestPos); // Function Solarland.WeaponryWeapon.StopTweenImmediately // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x22b9770
	void SetWeaponSkin(struct UWeaponSkinData* SkinData); // Function Solarland.WeaponryWeapon.SetWeaponSkin // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void SetWeaponMeshVisibility(bool bIsVisible); // Function Solarland.WeaponryWeapon.SetWeaponMeshVisibility // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void SetWeaponMesh(struct USkeletalMesh* NewMesh, bool bWithSwitchEffect); // Function Solarland.WeaponryWeapon.SetWeaponMesh // (Final|Native|Protected) // @ game+0x22b9550
	void SetIsDownloadHDModel(bool InValue); // Function Solarland.WeaponryWeapon.SetIsDownloadHDModel // (Final|Native|Public) // @ game+0x22b9430
	void ResetSkinSpecialEffect(); // Function Solarland.WeaponryWeapon.ResetSkinSpecialEffect // (Final|Native|Public) // @ game+0x22b9410
	void ResetMaterial(); // Function Solarland.WeaponryWeapon.ResetMaterial // (Final|Native|Protected) // @ game+0x22b93f0
	void PostUpdateAppearance(); // Function Solarland.WeaponryWeapon.PostUpdateAppearance // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void PlaySwitchEffect(); // Function Solarland.WeaponryWeapon.PlaySwitchEffect // (Final|Native|Protected) // @ game+0x22b92c0
	void OnWeaponSkinRefresh(bool bValid, int32_t SkinId); // Function Solarland.WeaponryWeapon.OnWeaponSkinRefresh // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void OnWeaponDataInitComplete(); // Function Solarland.WeaponryWeapon.OnWeaponDataInitComplete // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void MoveToSpecifiedPos(struct FVector& DestPos, bool IsDecMode, float BaseValue, float CurveValue); // Function Solarland.WeaponryWeapon.MoveToSpecifiedPos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x22b8f70
	struct UParticleSystemComponent* InternalPlayEffectAttached(struct UParticleSystem* PS, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FAttachedEffectParam Param); // Function Solarland.WeaponryWeapon.InternalPlayEffectAttached // (Final|Native|Protected) // @ game+0x22b8da0
	void InitWeaponConfig(int32_t weaponid, struct FVector DefaultLoc); // Function Solarland.WeaponryWeapon.InitWeaponConfig // (Final|Native|Public|HasDefaults) // @ game+0x22b8cc0
	int32_t GetWeaponID(); // Function Solarland.WeaponryWeapon.GetWeaponID // (Final|Native|Public) // @ game+0x22b8bb0
	struct TArray<struct FSoftObjectPath> GetSkinNeedLoadAssets(struct UWeaponSkinData* SkinData, bool bLoadHDMesh); // Function Solarland.WeaponryWeapon.GetSkinNeedLoadAssets // (Native|Public) // @ game+0x22b8970
	bool GetIsDownloadHDModel(); // Function Solarland.WeaponryWeapon.GetIsDownloadHDModel // (Final|Native|Public) // @ game+0x22b88c0
	struct USingleWeaponConfig* GetCurrentConfig(); // Function Solarland.WeaponryWeapon.GetCurrentConfig // (Final|Native|Public|Const) // @ game+0x22b8890
	void EnqueueUpdateAppearanceCmd(char Cmd, struct FString Params); // Function Solarland.WeaponryWeapon.EnqueueUpdateAppearanceCmd // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void EmptyMeshOverrideMaterials(); // Function Solarland.WeaponryWeapon.EmptyMeshOverrideMaterials // (Final|Native|Public) // @ game+0x22b86b0
};

// Class Solarland.WeaponScanAbility
// Size: 0x498 (Inherited: 0x428)
struct UWeaponScanAbility : USolarWeaponGameplayAbility {
	struct ASolarRadarBase* RadarClass; // 0x428(0x08)
	struct ASolarRadarBase* SpawnedRadar; // 0x430(0x08)
	float EffectRadius; // 0x438(0x04)
	float DelayDisplayTime; // 0x43c(0x04)
	struct UAnimMontage* ExecuteAnimMontage; // 0x440(0x08)
	struct UAnimMontage* ExecuteAnimMontageWithWeapon; // 0x448(0x08)
	bool bExecuteAnimMontageByWeaponStatus; // 0x450(0x01)
	bool bWaitMontageNotifyToSpawnRadar; // 0x451(0x01)
	char pad_452[0x2]; // 0x452(0x02)
	struct FName SpawnRadarMontageNotify; // 0x454(0x08)
	bool bWaitExecuteAnimCompletedSpawnRader; // 0x45c(0x01)
	char pad_45D[0x3]; // 0x45d(0x03)
	struct UGameplayEffect* WaitSpawnGameplayEffect; // 0x460(0x08)
	struct FActiveGameplayEffectHandle ActiveWaitSpawnEffectHandle; // 0x468(0x08)
	struct ASolarCharacter* EffectUser; // 0x470(0x08)
	char pad_478[0x10]; // 0x478(0x10)
	struct TWeakObjectPtr<struct AActor> InstigatorCache; // 0x488(0x08)
	char pad_490[0x8]; // 0x490(0x08)

	void SpawnRadar(); // Function Solarland.WeaponScanAbility.SpawnRadar // (Final|Native|Private) // @ game+0x22b9750
	void RemoveWaitSpawnEffect(); // Function Solarland.WeaponScanAbility.RemoveWaitSpawnEffect // (Final|Native|Private) // @ game+0x22b9300
	void OnMontageNotify(struct FName NotifyName); // Function Solarland.WeaponScanAbility.OnMontageNotify // (Final|Native|Private) // @ game+0x22b9130
	void OnExecuteAnimationCompleted(); // Function Solarland.WeaponScanAbility.OnExecuteAnimationCompleted // (Final|Native|Private) // @ game+0x22b9110
	void OnCharacterReset(); // Function Solarland.WeaponScanAbility.OnCharacterReset // (Final|Native|Private) // @ game+0x22b90f0
	void AddWaitSpawnEffect(); // Function Solarland.WeaponScanAbility.AddWaitSpawnEffect // (Final|Native|Private) // @ game+0x22b8600
	void ActiveRader(); // Function Solarland.WeaponScanAbility.ActiveRader // (Final|Native|Private) // @ game+0x22b85e0
};

// Class Solarland.WeaponScopeSliderWidget
// Size: 0x3a0 (Inherited: 0x348)
struct UWeaponScopeSliderWidget : USolarUserWidget {
	struct TArray<struct FScopeSliderData> ScopeSliderDatas; // 0x348(0x10)
	int32_t ScopeSliderType; // 0x358(0x04)
	float SliderAnimPlaySpeed; // 0x35c(0x04)
	float SliderValueScale; // 0x360(0x04)
	char pad_364[0x4]; // 0x364(0x04)
	struct USlider* Slider_ADS; // 0x368(0x08)
	struct USolarTextBlock* Txt_Scope; // 0x370(0x08)
	struct UWidgetAnimation* Anim_Type0; // 0x378(0x08)
	struct UWidgetAnimation* Anim_Type1; // 0x380(0x08)
	struct UWidgetAnimation* AnimToPlay; // 0x388(0x08)
	char pad_390[0x10]; // 0x390(0x10)

	void SetSliderDisplay(bool bSkipAnimation); // Function Solarland.WeaponScopeSliderWidget.SetSliderDisplay // (Final|Native|Protected) // @ game+0x22b94c0
	void OnSliderValueChangedOnPC(float InValue); // Function Solarland.WeaponScopeSliderWidget.OnSliderValueChangedOnPC // (Final|Native|Protected) // @ game+0x22b9240
	void OnSliderValueChanged(float InValue); // Function Solarland.WeaponScopeSliderWidget.OnSliderValueChanged // (Final|Native|Protected) // @ game+0x22b91c0
};

// Class Solarland.WeaponShootConfig
// Size: 0x430 (Inherited: 0x30)
struct UWeaponShootConfig : UDataAsset {
	bool bEnableNewSpread; // 0x30(0x01)
	bool bEnableNewRecoil; // 0x31(0x01)
	bool bEnableNewWeaponAnim; // 0x32(0x01)
	bool bEnableNewCameraShake; // 0x33(0x01)
	float ShootOriginRange; // 0x34(0x04)
	float StandardShootDistance; // 0x38(0x04)
	struct FVector RotationPivot; // 0x3c(0x0c)
	struct TMap<enum class EWeaponScopeType, struct FVector> RotationPivotMap; // 0x48(0x50)
	float BaseSpread; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct FRuntimeFloatCurve SpreadDistributionCurve; // 0xa0(0x88)
	float AverageSpreadDistribution; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct FRuntimeFloatCurve VisualSpreadScaleCurve; // 0x130(0x88)
	struct TArray<struct FWeaponAttributeModifiersByTag> ModifiersByOwnerTag; // 0x1b8(0x10)
	enum class ESprayingRecoveryMode SprayingRecoveryMode; // 0x1c8(0x01)
	char pad_1C9[0x7]; // 0x1c9(0x07)
	struct FRuntimeFloatCurve SprayingRecoveryCurve; // 0x1d0(0x88)
	struct UWeaponSpreadPattern* SpreadPattern; // 0x258(0x08)
	struct UWeaponRecoilPattern* RecoilPattern; // 0x260(0x08)
	struct UBlendSpace* TPPKickAnimBlendSpace; // 0x268(0x08)
	struct FVector TPPKickBlendSpaceMaxValue; // 0x270(0x0c)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct UWeaponTPPKickPattern* TPPKickPattern; // 0x280(0x08)
	struct TMap<enum class EWeaponScopeType, float> RecoilHoriRecRangeWithCoScaleMap; // 0x288(0x50)
	struct UWeaponGunKickPattern* GunKickPattern; // 0x2d8(0x08)
	struct TMap<enum class EWeaponScopeType, struct FGunKickScale> GunKickScaleMap; // 0x2e0(0x50)
	bool bEnableEndShake; // 0x330(0x01)
	bool bStopEndShakeOnShot; // 0x331(0x01)
	char pad_332[0x6]; // 0x332(0x06)
	struct UCurveVector* EndShakeOffsetCurve; // 0x338(0x08)
	struct UCurveVector* EndShakeRotationCurve; // 0x340(0x08)
	struct UCurveFloat* EndShakeScaleBySpeedCurve; // 0x348(0x08)
	struct UCurveVector* EndShakeScaleByVelocityCurve; // 0x350(0x08)
	float SkewOffsetSmoothSpeed; // 0x358(0x04)
	float SkewRotationSmoothSpeed; // 0x35c(0x04)
	struct TArray<struct FWeaponSkewAdjustment> SkewAdjustments; // 0x360(0x10)
	struct FCrossHairShootConfig DefaultCrossHairConfig; // 0x370(0x10)
	struct TMap<enum class EWeaponScopeType, struct FCrossHairShootConfig> CrossHairConfigMap; // 0x380(0x50)
	struct UWeaponCameraShakePattern* ShakePatternOnShot; // 0x3d0(0x08)
	struct UWeaponCameraShakePattern* ShakePatternOnScopeShot; // 0x3d8(0x08)
	struct TMap<enum class EWeaponScopeType, float> ShakeScaleMapOnScopeShot; // 0x3e0(0x50)
};

// Class Solarland.WeaponSpreadAndRecoil
// Size: 0x140 (Inherited: 0x28)
struct UWeaponSpreadAndRecoil : UObject {
	struct ASolarWeapon* Weapon; // 0x28(0x08)
	char pad_30[0x8]; // 0x30(0x08)
	struct UWeaponSpreadPatternRuntime* SpreadPattern; // 0x38(0x08)
	struct UWeaponRecoilPatternRuntime* RecoilPattern; // 0x40(0x08)
	struct UWeaponTPPKickPatternRuntime* TPPKickPattern; // 0x48(0x08)
	struct UWeaponGunKickPatternRuntime* GunKickPattern; // 0x50(0x08)
	struct URecoverableRecoilPatternRuntime* CrossHairKickPattern; // 0x58(0x08)
	struct UWeaponCameraShakePatternRuntime* ShakePatternOnShot; // 0x60(0x08)
	struct UWeaponCameraShakePatternRuntime* ShakePatternOnScopeShot; // 0x68(0x08)
	char pad_70[0xd0]; // 0x70(0xd0)
};

// Class Solarland.WeaponSpreadPattern
// Size: 0x30 (Inherited: 0x30)
struct UWeaponSpreadPattern : USolarPattern {
};

// Class Solarland.WeaponSpreadPatternRuntime
// Size: 0x30 (Inherited: 0x30)
struct UWeaponSpreadPatternRuntime : USolarPatternRuntime {
};

// Class Solarland.SimpleSpreadPattern
// Size: 0x1f0 (Inherited: 0x30)
struct USimpleSpreadPattern : UWeaponSpreadPattern {
	struct TArray<struct FWeaponAttributeParam> SpreadModifiers; // 0x30(0x10)
	float SpreadScaleIncreaseTime; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct FRuntimeFloatCurve SpreadScaleIncreaseCurve; // 0x48(0x88)
	struct TArray<struct FSpreadScaleIncrease> SpreadScaleIncreases; // 0xd0(0x10)
	struct FRuntimeFloatCurve SpreadScaleDecreaseTimeCurve; // 0xe0(0x88)
	struct FRuntimeFloatCurve SpreadScaleDecreaseRatioCurve; // 0x168(0x88)
};

// Class Solarland.SimpleSpreadPatternRuntime
// Size: 0x68 (Inherited: 0x30)
struct USimpleSpreadPatternRuntime : UWeaponSpreadPatternRuntime {
	char pad_30[0x38]; // 0x30(0x38)
};

// Class Solarland.WeaponSystemAssistAim
// Size: 0x78 (Inherited: 0x28)
struct UWeaponSystemAssistAim : UObject {
	char pad_28[0x28]; // 0x28(0x28)
	struct UWeaponAssistAimWeaponConfig* CurrentAssistAimWpnCfg; // 0x50(0x08)
	char pad_58[0x20]; // 0x58(0x20)

	void RefreshCurrentWeapon(struct ASolarWeapon* Weapon); // Function Solarland.WeaponSystemAssistAim.RefreshCurrentWeapon // (Final|Native|Public) // @ game+0x22be220
	bool Init(struct AActor* InWeaponHolder); // Function Solarland.WeaponSystemAssistAim.Init // (Final|Native|Public) // @ game+0x22bd0e0
	bool GetActive(); // Function Solarland.WeaponSystemAssistAim.GetActive // (Final|Native|Public) // @ game+0x22bcc90
};

// Class Solarland.WeaponSystemAutoFire
// Size: 0xa8 (Inherited: 0x28)
struct UWeaponSystemAutoFire : UObject {
	char pad_28[0x80]; // 0x28(0x80)

	void OnWeaponFire(); // Function Solarland.WeaponSystemAutoFire.OnWeaponFire // (Final|Native|Private) // @ game+0x22bd5a0
};

// Class Solarland.WeaponSystemBase
// Size: 0x180 (Inherited: 0xb0)
struct UWeaponSystemBase : UActorComponent {
	char pad_B0[0x48]; // 0xb0(0x48)
	struct UWeaponSystemAutoFire* WeaponSystemAutoFire; // 0xf8(0x08)
	struct USolarWeaponFireInputResolver* WeaponSystemFireInputResolver; // 0x100(0x08)
	struct UWeaponSystemAssistAim* WeaponSystemAssistAim; // 0x108(0x08)
	struct FWeaponSystemInteract WeaponSysIneract; // 0x110(0x50)
	char pad_160[0x10]; // 0x160(0x10)
	struct AActor* MyPossessPawn; // 0x170(0x08)
	bool bAssistAim; // 0x178(0x01)
	bool bAutoFire; // 0x179(0x01)
	char pad_17A[0x6]; // 0x17a(0x06)

	void WeaponAssistSystemTick(float InDeltaTime); // Function Solarland.WeaponSystemBase.WeaponAssistSystemTick // (Final|Native|Private) // @ game+0x22be8a0
	void SwitchSingleWeaponPressMode(); // Function Solarland.WeaponSystemBase.SwitchSingleWeaponPressMode // (Final|Native|Public|BlueprintCallable) // @ game+0x22be880
	void SwitchScopeButtonRotatableMode(bool bInCanRotate); // Function Solarland.WeaponSystemBase.SwitchScopeButtonRotatableMode // (Final|Native|Public|BlueprintCallable) // @ game+0x22be7f0
	void SwitchDoScopeMode(); // Function Solarland.WeaponSystemBase.SwitchDoScopeMode // (Final|Native|Public|BlueprintCallable) // @ game+0x8e9ae0
	void SwitchAutoScopeEnable(); // Function Solarland.WeaponSystemBase.SwitchAutoScopeEnable // (Native|Public|BlueprintCallable) // @ game+0x1547fb0
	void SwitchAutoFireEnable(); // Function Solarland.WeaponSystemBase.SwitchAutoFireEnable // (Native|Public) // @ game+0x1548090
	void SwitchAutoFire(bool Open); // Function Solarland.WeaponSystemBase.SwitchAutoFire // (Final|Native|Public) // @ game+0x22be760
	void SwitchAssistAim(bool opened); // Function Solarland.WeaponSystemBase.SwitchAssistAim // (Final|Native|Public) // @ game+0x22be6d0
	void SetCurrentActiveWeapon(struct ASolarWeapon* Weapon); // Function Solarland.WeaponSystemBase.SetCurrentActiveWeapon // (Final|Native|Protected) // @ game+0x22be640
	void SetCrosshairVisible(bool InVisible); // Function Solarland.WeaponSystemBase.SetCrosshairVisible // (Native|Public|BlueprintCallable) // @ game+0x22be5b0
	void SetAutoScope(bool bOpen); // Function Solarland.WeaponSystemBase.SetAutoScope // (Final|Native|Public) // @ game+0x22be520
	void ServerPlayNoAmmoSound(); // Function Solarland.WeaponSystemBase.ServerPlayNoAmmoSound // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xc28eb0
	void ReceiveMsgFromPlayer(bool bClient, struct FPlayerWeaponMsg& Msg); // Function Solarland.WeaponSystemBase.ReceiveMsgFromPlayer // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x22bdde0
	void OnTouchScreen(); // Function Solarland.WeaponSystemBase.OnTouchScreen // (Final|Native|Public) // @ game+0x8e9ae0
	void OnToggleAutoFire(); // Function Solarland.WeaponSystemBase.OnToggleAutoFire // (Final|Native|Protected) // @ game+0x1fcf870
	void OnToggleAssistAim(); // Function Solarland.WeaponSystemBase.OnToggleAssistAim // (Final|Native|Protected) // @ game+0x22bd350
	void OnOtherPlayerSpectateMyOwner(); // Function Solarland.WeaponSystemBase.OnOtherPlayerSpectateMyOwner // (Native|Public) // @ game+0x1548150
	void NetMulticastPlayNoAmmoSound(); // Function Solarland.WeaponSystemBase.NetMulticastPlayNoAmmoSound // (Net|Native|Event|NetMulticast|Public) // @ game+0xc28e70
	bool IsUsingSpecialQuickAdsButton(); // Function Solarland.WeaponSystemBase.IsUsingSpecialQuickAdsButton // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22bd250
	struct USolarWeaponFireInputResolver* GetFireInputResolver(); // Function Solarland.WeaponSystemBase.GetFireInputResolver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22bce40
	void GetFireButtonInputState(enum class ESolarWeaponFireInputButtonState& OutLeftFireButton, enum class ESolarWeaponFireInputButtonState& OutRightFireButton, enum class ESolarWeaponFireInputButtonState& OutQuickAdsButton); // Function Solarland.WeaponSystemBase.GetFireButtonInputState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x22bcd00
	struct FWeaponSysStateStruct GetCurrentState(); // Function Solarland.WeaponSystemBase.GetCurrentState // (Final|Native|Public|BlueprintCallable) // @ game+0x22bccc0
	bool CheckAutoFire(bool& canfire); // Function Solarland.WeaponSystemBase.CheckAutoFire // (Final|Native|Protected|HasOutParms) // @ game+0x22bcaf0
};

// Class Solarland.WeaponSystemPlayerBase
// Size: 0x218 (Inherited: 0x180)
struct UWeaponSystemPlayerBase : UWeaponSystemBase {
	char pad_180[0x38]; // 0x180(0x38)
	bool bHasPrimarySlotWeapon; // 0x1b8(0x01)
	bool bHasSecondarySlotWeapon; // 0x1b9(0x01)
	bool bHasTertiarySlotWeapon; // 0x1ba(0x01)
	char pad_1BB[0x1]; // 0x1bb(0x01)
	struct TWeakObjectPtr<struct ASolarUnArmWeapon> Punch; // 0x1bc(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> PrimarySlotWeapon; // 0x1c4(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> SecondarySlotWeapon; // 0x1cc(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> TertiarySlotWeapon; // 0x1d4(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> HeldWeapon; // 0x1dc(0x08)
	char pad_1E4[0x34]; // 0x1e4(0x34)

	void TriggerBoltAnim(); // Function Solarland.WeaponSystemPlayerBase.TriggerBoltAnim // (Final|Native|Public) // @ game+0x8e9ae0
	void SpawnMeleeWeapon(); // Function Solarland.WeaponSystemPlayerBase.SpawnMeleeWeapon // (Final|Native|Protected) // @ game+0x22ca8f0
	void ResetCurrentWeaponFireState(); // Function Solarland.WeaponSystemPlayerBase.ResetCurrentWeaponFireState // (Final|Native|Public) // @ game+0x22c9f20
	void PostBolt(); // Function Solarland.WeaponSystemPlayerBase.PostBolt // (Final|Native|Public) // @ game+0x8e9ae0
	void OpenScopeForSpectator(); // Function Solarland.WeaponSystemPlayerBase.OpenScopeForSpectator // (Native|Public) // @ game+0x15561e0
	void OnRep_TertiarySlotWeapon(); // Function Solarland.WeaponSystemPlayerBase.OnRep_TertiarySlotWeapon // (Final|Native|Protected) // @ game+0x22c9c30
	void OnRep_SecondarySlotWeapon(); // Function Solarland.WeaponSystemPlayerBase.OnRep_SecondarySlotWeapon // (Final|Native|Protected) // @ game+0x22c9c10
	void OnRep_Punch(); // Function Solarland.WeaponSystemPlayerBase.OnRep_Punch // (Final|Native|Protected) // @ game+0x22c9bd0
	void OnRep_PrimarySlotWeapon(); // Function Solarland.WeaponSystemPlayerBase.OnRep_PrimarySlotWeapon // (Final|Native|Protected) // @ game+0x22c9bf0
	void OnRep_HeldWeapon(); // Function Solarland.WeaponSystemPlayerBase.OnRep_HeldWeapon // (Final|Native|Protected) // @ game+0x22c9bd0
	struct ASolarPlayerWeapon* GetWeaponBySlot(int32_t InSlotType); // Function Solarland.WeaponSystemPlayerBase.GetWeaponBySlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22c9740
	struct ASolarUnArmWeapon* GetUnArmWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetUnArmWeapon // (Final|Native|Public|Const) // @ game+0x22c9710
	struct ASolarPlayerWeapon* GetPackSecondaryWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetPackSecondaryWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x22c96b0
	struct ASolarPlayerWeapon* GetPackPrimaryWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetPackPrimaryWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x22c9680
	int32_t GetLastActiveWeaponSlot(); // Function Solarland.WeaponSystemPlayerBase.GetLastActiveWeaponSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x22c9650
	bool GetIsUnArm(); // Function Solarland.WeaponSystemPlayerBase.GetIsUnArm // (Final|Native|Public) // @ game+0x22c9620
	float GetCurrentWeaponReloadTime(int32_t Mode); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeaponReloadTime // (Final|Native|Public) // @ game+0x22c9240
	bool GetCurrentWeaponIsOverloading(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeaponIsOverloading // (Final|Native|Public) // @ game+0x22c9210
	struct UTexture2D* GetCurrentWeaponIcon(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeaponIcon // (Final|Native|Protected) // @ game+0x22c91e0
	float GetCurrentWeaponBoltTime(int32_t Mode); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeaponBoltTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x22c9140
	struct ASolarPlayerWeapon* GetCurrentWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x22c9110
	float GetCurrentSwitchWeaponTime(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentSwitchWeaponTime // (Final|Native|Public) // @ game+0x22c90b0
	int32_t GetCurrentActiveSlot(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentActiveSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x22c9080
	struct UStaticMesh* GetClipMeshOfCurrentWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetClipMeshOfCurrentWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x22c9050
	void GameStatisticsWeaponSkill(int32_t InFireMode); // Function Solarland.WeaponSystemPlayerBase.GameStatisticsWeaponSkill // (Final|Native|Public) // @ game+0x22c8fc0
	void CrosshairQuitReload(); // Function Solarland.WeaponSystemPlayerBase.CrosshairQuitReload // (Native|Public) // @ game+0x1554ce0
	void CrosshairEnterReload(); // Function Solarland.WeaponSystemPlayerBase.CrosshairEnterReload // (Native|Public) // @ game+0x1554cc0
	void CloseScopeForSpectator(); // Function Solarland.WeaponSystemPlayerBase.CloseScopeForSpectator // (Native|Public) // @ game+0x1555000
	void CleanWeaponSlotsUI(); // Function Solarland.WeaponSystemPlayerBase.CleanWeaponSlotsUI // (Final|Native|Public|BlueprintCallable) // @ game+0x22c8f80
};

// Class Solarland.WeaponSystemPlayer
// Size: 0x2b0 (Inherited: 0x218)
struct UWeaponSystemPlayer : UWeaponSystemPlayerBase {
	char pad_218[0x49]; // 0x218(0x49)
	bool bInitializeWeaponSystem; // 0x261(0x01)
	char pad_262[0x12]; // 0x262(0x12)
	float ReloadBlockTimeMax; // 0x274(0x04)
	struct FString ReceviedReloadMessage; // 0x278(0x10)
	char pad_288[0x8]; // 0x288(0x08)
	struct AStaticMeshActor* DroppedClip; // 0x290(0x08)
	struct AStaticMeshActor* ExtractedClip; // 0x298(0x08)
	bool bHoldFire; // 0x2a0(0x01)
	char pad_2A1[0xf]; // 0x2a1(0x0f)

	void TakeOffEquipAttributes(struct ASolarPlayerWeapon* Weapon); // Function Solarland.WeaponSystemPlayer.TakeOffEquipAttributes // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void SwitchFireMode(); // Function Solarland.WeaponSystemPlayer.SwitchFireMode // (Native|Public) // @ game+0x1554ca0
	void ServerSwitch(int8_t InTargetSlot); // Function Solarland.WeaponSystemPlayer.ServerSwitch // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x22be4a0
	void ServerSwap(int8_t InSourceSlot, int8_t InTargetSlot); // Function Solarland.WeaponSystemPlayer.ServerSwap // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x22be3d0
	bool ServerPackDropWeapon(int32_t Slot); // Function Solarland.WeaponSystemPlayer.ServerPackDropWeapon // (Native|Public) // @ game+0x22be330
	void ServerGameStaticsWeaponSkill(int8_t InFireMode); // Function Solarland.WeaponSystemPlayer.ServerGameStaticsWeaponSkill // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x22be2b0
	void RecieveSafeAreaUpdateMsg(int32_t Num); // Function Solarland.WeaponSystemPlayer.RecieveSafeAreaUpdateMsg // (Final|Native|Protected|BlueprintCallable) // @ game+0x22be190
	void RecieveExpPackMsg(int32_t ItemID, int32_t Num); // Function Solarland.WeaponSystemPlayer.RecieveExpPackMsg // (Final|Native|Protected|BlueprintCallable) // @ game+0x22be0c0
	void RecieveExpMsg(bool bClient, int32_t Type, int32_t Num, int32_t Slot); // Function Solarland.WeaponSystemPlayer.RecieveExpMsg // (Final|Native|Protected|BlueprintCallable) // @ game+0x22bdf60
	void RecieveAssistMsg(enum class ESolarCharacterType HitedCharacterType); // Function Solarland.WeaponSystemPlayer.RecieveAssistMsg // (Final|Native|Protected|BlueprintCallable) // @ game+0x22bdee0
	void PutEquipAttributes(struct ASolarPlayerWeapon* Weapon); // Function Solarland.WeaponSystemPlayer.PutEquipAttributes // (Event|Protected|BlueprintEvent) // @ game+0x25d85b0
	void PostAddWeaponEXPMessageWhenKill(int32_t InWeaponSlot, enum class ESolarHitType InHitType, float InDamage, bool InbKillPlayer); // Function Solarland.WeaponSystemPlayer.PostAddWeaponEXPMessageWhenKill // (Final|Native|Protected|BlueprintCallable) // @ game+0x22bdc80
	void OnWeaponUpgrade(int32_t InCurrentLevel, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponUpgrade // (Final|Native|Protected) // @ game+0x22bdbb0
	void OnWeaponUpdateSkillPoint(uint32_t InWeaponUniqueID, bool InbCoolDownFinish, int32_t InCurrentExtraPoint); // Function Solarland.WeaponSystemPlayer.OnWeaponUpdateSkillPoint // (Final|Native|Protected) // @ game+0x22bdaa0
	void OnWeaponUpdatePart(int32_t InNewPartId, int32_t InOldPartID, uint32_t InWeaponUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponUpdatePart // (Final|Native|Protected) // @ game+0x22bd990
	void OnWeaponUpdateExp(float InTotalExp, float InCurrentExp, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponUpdateExp // (Final|Native|Protected) // @ game+0x22bd870
	void OnWeaponUpdateClipCapacity(int32_t InFireMode, struct ASolarWeapon* InWeapon); // Function Solarland.WeaponSystemPlayer.OnWeaponUpdateClipCapacity // (Final|Native|Protected) // @ game+0x22bd7a0
	void OnWeaponSwitchOverload(bool InbSwitchOn, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponSwitchOverload // (Final|Native|Protected) // @ game+0x22bd6d0
	void OnWeaponQuitReload(int32_t InFireMode, bool InbReloadSuccess, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponQuitReload // (Final|Native|Protected) // @ game+0x22bd5c0
	void OnWeaponEnterReload(int32_t InFireMode, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponEnterReload // (Final|Native|Protected) // @ game+0x22bd4d0
	void OnWeaponEnterFireCD(int32_t InFireMode, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponEnterFireCD // (Final|Native|Protected) // @ game+0x22bd400
	void OnWeaponControlled(struct ASolarWeapon* InWeapon); // Function Solarland.WeaponSystemPlayer.OnWeaponControlled // (Final|Native|Protected) // @ game+0x22bd370
	void OnPlayerEnergyUpdate(); // Function Solarland.WeaponSystemPlayer.OnPlayerEnergyUpdate // (Final|Native|Protected) // @ game+0x8e9ae0
	void OnEnterBattleAction(enum class EEnterBattleType battleType); // Function Solarland.WeaponSystemPlayer.OnEnterBattleAction // (Final|Native|Protected) // @ game+0x1fe96d0
	bool IsWeaponAmmoUseEnergy(int32_t Slot, int32_t FireMode); // Function Solarland.WeaponSystemPlayer.IsWeaponAmmoUseEnergy // (Final|Native|Protected) // @ game+0x22bd280
	bool IsReloadBlock(); // Function Solarland.WeaponSystemPlayer.IsReloadBlock // (Final|Native|Protected|Const) // @ game+0x22bd220
	bool IsCurrentWeapon(uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.IsCurrentWeapon // (Final|Native|Protected) // @ game+0x22bd180
	struct ASolarPlayerWeapon* GetWeaponByItemID(int32_t ItemInstanceId); // Function Solarland.WeaponSystemPlayer.GetWeaponByItemID // (Final|Native|Private) // @ game+0x22bd040
	struct ASolarPlayerWeapon* GetWeaponByID(int32_t ID); // Function Solarland.WeaponSystemPlayer.GetWeaponByID // (Final|Native|Protected) // @ game+0x22bcfa0
	int32_t GetSlotByItemID(int64_t InItemThisID); // Function Solarland.WeaponSystemPlayer.GetSlotByItemID // (Final|Native|Protected) // @ game+0x22bcf00
	float GetRetrofitCost(int32_t Slot); // Function Solarland.WeaponSystemPlayer.GetRetrofitCost // (Final|Native|Public|BlueprintCallable) // @ game+0x22bce60
	void ClientRecieveExpMsg(int32_t Type, int32_t Num, int32_t Slot); // Function Solarland.WeaponSystemPlayer.ClientRecieveExpMsg // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x22bcb90
	void ClearWeapons(); // Function Solarland.WeaponSystemPlayer.ClearWeapons // (Native|Public) // @ game+0x1547e50
};

// Class Solarland.WeaponSystemPlayerAI
// Size: 0x218 (Inherited: 0x218)
struct UWeaponSystemPlayerAI : UWeaponSystemPlayerBase {

	bool IsCurrentWeapon(int32_t ID); // Function Solarland.WeaponSystemPlayerAI.IsCurrentWeapon // (Final|Native|Protected) // @ game+0x22c9990
	void ClearWeapons(); // Function Solarland.WeaponSystemPlayerAI.ClearWeapons // (Native|Public) // @ game+0x1547e50
};

// Class Solarland.WeaponSystemVehicleComponent
// Size: 0x298 (Inherited: 0x180)
struct UWeaponSystemVehicleComponent : UWeaponSystemBase {
	struct FWeaponSystemInteract WeaponSystemInteract; // 0x180(0x50)
	char pad_1D0[0x18]; // 0x1d0(0x18)
	struct ASolarVehicleWeapon* CurrentWeapon; // 0x1e8(0x08)
	struct ASolarCharacter* MyPawn; // 0x1f0(0x08)
	char pad_1F8[0x28]; // 0x1f8(0x28)
	struct FWeaponAction WeaponEquipAction; // 0x220(0x08)
	struct FWeaponAction WeaponUnequipAction; // 0x228(0x08)
	struct TMap<struct FName, enum class EVehicleWeaponScopeType> SavedWeaponScopeMap; // 0x230(0x50)
	char pad_280[0x1]; // 0x280(0x01)
	bool bQuickAdsHolding; // 0x281(0x01)
	char pad_282[0xe]; // 0x282(0x0e)
	float QuickAdsPressedTime; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)

	void ServerStatVehicleWeaponFire(int32_t InFireMode); // Function Solarland.WeaponSystemVehicleComponent.ServerStatVehicleWeaponFire // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x22ca090
	void ServerReload(char ModeIndex, int32_t Need); // Function Solarland.WeaponSystemVehicleComponent.ServerReload // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x22c9fc0
	void ServerChangeWeaponScopeType(enum class EVehicleWeaponScopeType InScopeType); // Function Solarland.WeaponSystemVehicleComponent.ServerChangeWeaponScopeType // (Net|Native|Event|Protected|NetServer) // @ game+0x22c9f40
	void OnRep_WeaponUnequipAction(); // Function Solarland.WeaponSystemVehicleComponent.OnRep_WeaponUnequipAction // (Final|Native|Private) // @ game+0x22c9c70
	void OnRep_WeaponEquipAction(); // Function Solarland.WeaponSystemVehicleComponent.OnRep_WeaponEquipAction // (Final|Native|Private) // @ game+0x22c9c50
	void OnRep_CurrentWeapon(struct ASolarVehicleWeapon* PreviousWeapon); // Function Solarland.WeaponSystemVehicleComponent.OnRep_CurrentWeapon // (Final|Native|Public) // @ game+0x22c9b40
	void OnQuickAdsFire(); // Function Solarland.WeaponSystemVehicleComponent.OnQuickAdsFire // (Final|Native|Protected) // @ game+0x22c9b20
	struct ASolarVehicleWeapon* GetCurrentVehicleWeapon(); // Function Solarland.WeaponSystemVehicleComponent.GetCurrentVehicleWeapon // (Final|Native|Public|Const) // @ game+0x22c90e0
};

// Class Solarland.WeaponUIStyleSheet
// Size: 0xc8 (Inherited: 0xc8)
struct UWeaponUIStyleSheet : UDataTable {
};

// Class Solarland.WidgetInputManager
// Size: 0x130 (Inherited: 0x28)
struct UWidgetInputManager : UObject {
	struct FDelegate OnTouchStartDetected; // 0x28(0x10)
	struct FDelegate OnTouchUpdate; // 0x38(0x10)
	struct FDelegate OnTouchEndDetected; // 0x48(0x10)
	struct FDelegate OnPointerStartDetected; // 0x58(0x10)
	struct FDelegate OnPointerUpdate; // 0x68(0x10)
	struct FDelegate OnPointerEndDetected; // 0x78(0x10)
	char pad_88[0x8]; // 0x88(0x08)
	struct TMap<int32_t, struct FVector2D> TouchedList; // 0x90(0x50)
	struct TMap<int32_t, struct FVector2D> PointerList; // 0xe0(0x50)

	struct UWidget* K2_GetManagedWidget(); // Function Solarland.WidgetInputManager.K2_GetManagedWidget // (Final|Native|Protected|BlueprintCallable) // @ game+0x22cd680
	bool GetWidgetTouchedList(struct USolarUserWidget* InWidget, struct TMap<int32_t, struct FVector2D>& OutList); // Function Solarland.WidgetInputManager.GetWidgetTouchedList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x22cd3e0
	bool GetWidgetPointerList(struct USolarUserWidget* InWidget, struct TMap<int32_t, struct FVector2D>& OutList); // Function Solarland.WidgetInputManager.GetWidgetPointerList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x22cd220
};

// Class Solarland.WorldMark_ReviveTeammates
// Size: 0x480 (Inherited: 0x3a0)
struct UWorldMark_ReviveTeammates : UActorMarkBase {
	struct UCanvasPanel* CanvasPanel_1; // 0x3a0(0x08)
	struct UCanvasPanel* Panel; // 0x3a8(0x08)
	struct UScaleBox* ScaleBox_1; // 0x3b0(0x08)
	struct UImage* Img_Light_2; // 0x3b8(0x08)
	struct UImage* img_HeadBg_Shadow; // 0x3c0(0x08)
	struct UImage* img_PlayerHead; // 0x3c8(0x08)
	struct UImage* ProgressCD; // 0x3d0(0x08)
	struct USolarTextBlock* Txt_Recover; // 0x3d8(0x08)
	struct UTextBlock* Distance; // 0x3e0(0x08)
	struct UImage* Img_Arrow; // 0x3e8(0x08)
	struct UWidgetAnimation* Occupy_Anim; // 0x3f0(0x08)
	struct UMaterialInstanceDynamic* CDMaterial; // 0x3f8(0x08)
	struct USolarResurrectionComponent* ResurrectionComp; // 0x400(0x08)
	struct FName ProgressParamName; // 0x408(0x08)
	struct FLinearColor ProgressParamDefaultValue; // 0x410(0x10)
	struct FString TimeParamName; // 0x420(0x10)
	int32_t DistanceLocalTextID; // 0x430(0x04)
	int32_t RecoverLocalTextID; // 0x434(0x04)
	int32_t TimeFormatLocalTextID; // 0x438(0x04)
	char pad_43C[0x4]; // 0x43c(0x04)
	struct FString NotifySoundName; // 0x440(0x10)
	char pad_450[0x30]; // 0x450(0x30)

	void SetPlayerIDAndChangeColor(struct FString PlayerId); // Function Solarland.WorldMark_ReviveTeammates.SetPlayerIDAndChangeColor // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
};

// Class Solarland.WorldMarkButton
// Size: 0x388 (Inherited: 0x348)
struct UWorldMarkButton : USolarUserWidget {
	struct UImage* Select_Arrow; // 0x348(0x08)
	struct UButton* WorldMarkBtn; // 0x350(0x08)
	struct UWidgetSwitcher* Switcher; // 0x358(0x08)
	char pad_360[0x1]; // 0x360(0x01)
	bool bButtonClicked; // 0x361(0x01)
	char pad_362[0x2]; // 0x362(0x02)
	float UnHoveredDis; // 0x364(0x04)
	bool bIfTouchMoveout; // 0x368(0x01)
	bool bIfQuickChatWheelOpened; // 0x369(0x01)
	char pad_36A[0x6]; // 0x36a(0x06)
	struct ASolarHUDInGame* SolarHUDInGame; // 0x370(0x08)
	bool bIfChooseAnyMark; // 0x378(0x01)
	bool bIfPressed; // 0x379(0x01)
	char pad_37A[0x2]; // 0x37a(0x02)
	float LongPressDeltaTime; // 0x37c(0x04)
	char pad_380[0x8]; // 0x380(0x08)

	void SetMarkButtonState(enum class EMarkButtonState NewState); // Function Solarland.WorldMarkButton.SetMarkButtonState // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void ResetButton(); // Function Solarland.WorldMarkButton.ResetButton // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FEventReply ReleaseMouseCapture(); // Function Solarland.WorldMarkButton.ReleaseMouseCapture // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x22ce070
	void RefreshButtonState(bool IsAlreadyBeResponsed); // Function Solarland.WorldMarkButton.RefreshButtonState // (Final|Native|Public|BlueprintCallable) // @ game+0x22cdfc0
	void OnMarkButtonDragSelectEnded(); // Function Solarland.WorldMarkButton.OnMarkButtonDragSelectEnded // (Final|Native|Protected|BlueprintCallable) // @ game+0x22cdc60
	void OnCustomGameStateChanged(enum class ESCMInGameState NewGameState); // Function Solarland.WorldMarkButton.OnCustomGameStateChanged // (Final|Native|Public) // @ game+0x22cdb10
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.WorldMarkButton.OnCharacterDead // (Final|Native|Protected) // @ game+0x22cda80
	void LongPressCheckBegin(); // Function Solarland.WorldMarkButton.LongPressCheckBegin // (Final|Native|Protected|BlueprintCallable) // @ game+0x22cd6b0
	void ClearLongPressCheckTimer(); // Function Solarland.WorldMarkButton.ClearLongPressCheckTimer // (Final|Native|Protected|BlueprintCallable) // @ game+0x22cc820
	struct FEventReply CaptureMouse(); // Function Solarland.WorldMarkButton.CaptureMouse // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x22cc430
};

// Class Solarland.WorldMarkComponent
// Size: 0x1f8 (Inherited: 0xb0)
struct UWorldMarkComponent : UActorComponent {
	char pad_B0[0x18]; // 0xb0(0x18)
	struct ASolarCharacter* Owner; // 0xc8(0x08)
	uint32_t WorldMarkPoolOriginSize; // 0xd0(0x04)
	float MinCheckDistance; // 0xd4(0x04)
	float MaxCheckDistance; // 0xd8(0x04)
	bool AutoMarkIsCoolingDown; // 0xdc(0x01)
	char pad_DD[0x5b]; // 0xdd(0x5b)
	int32_t AttachedToCharacterNumLimit; // 0x138(0x04)
	char pad_13C[0x54]; // 0x13c(0x54)
	struct TArray<struct TWeakObjectPtr<struct UHUD_WorldMark>> ChosenMarksTable; // 0x190(0x10)
	struct TWeakObjectPtr<struct UHUD_WorldMark> CurrentChosenMark; // 0x1a0(0x08)
	char pad_1A8[0x40]; // 0x1a8(0x40)
	struct TArray<struct UHUD_WorldMark*> WorldMarkPool; // 0x1e8(0x10)

	void VehicleNotify(int32_t VehicleID, int32_t NameLocID, struct ASolarPlayerController* Controller); // Function Solarland.WorldMarkComponent.VehicleNotify // (Final|Native|Public) // @ game+0x22ce340
	bool VagueMarkCharacter(); // Function Solarland.WorldMarkComponent.VagueMarkCharacter // (Final|Native|Public) // @ game+0x22ce310
	void UpdateAttachedMarks(); // Function Solarland.WorldMarkComponent.UpdateAttachedMarks // (Final|Native|Public) // @ game+0x22ce2f0
	void UnMarkItemByIDLuaCall(int64_t instanceID); // Function Solarland.WorldMarkComponent.UnMarkItemByIDLuaCall // (Final|Native|Public) // @ game+0x22ce260
	void ResponseChosenMark(); // Function Solarland.WorldMarkComponent.ResponseChosenMark // (Final|Native|Public) // @ game+0x22ce240
	void RemoveItemMarkWhenPlayerPicked(int64_t& InItemInstanceId); // Function Solarland.WorldMarkComponent.RemoveItemMarkWhenPlayerPicked // (Final|Native|Public|HasOutParms) // @ game+0x22ce1b0
	void RemoveAttachedMarkByActors(struct TArray<struct AActor*>& InActors); // Function Solarland.WorldMarkComponent.RemoveAttachedMarkByActors // (Final|Native|Public|HasOutParms) // @ game+0x22ce100
	void ReleaseWorldMarkPool(); // Function Solarland.WorldMarkComponent.ReleaseWorldMarkPool // (Final|Native|Public) // @ game+0x22ce0e0
	void RefreshChosenMark(); // Function Solarland.WorldMarkComponent.RefreshChosenMark // (Final|Native|Public) // @ game+0x22ce050
	void RecycleWorldMark(struct UHUD_WorldMark* WorldMark); // Function Solarland.WorldMarkComponent.RecycleWorldMark // (Final|Native|Public) // @ game+0x22cdf30
	void PushBackQueueGroupMapWidget(enum class EWorldMarkType Type, int32_t PosInTeam, struct UHUD_WorldMark* Widget); // Function Solarland.WorldMarkComponent.PushBackQueueGroupMapWidget // (Final|Native|Public) // @ game+0x22cde20
	struct UHUD_WorldMark* PopQueueGroupMapWidget(enum class EWorldMarkType Type, int32_t PosInTeam); // Function Solarland.WorldMarkComponent.PopQueueGroupMapWidget // (Final|Native|Public) // @ game+0x22cdd50
	void OnVehicleEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.WorldMarkComponent.OnVehicleEndPlay // (Final|Native|Public) // @ game+0x22cdc80
	void OnMarkBeChosen(struct UHUD_WorldMark* MarkWidget, bool IfWasChosen); // Function Solarland.WorldMarkComponent.OnMarkBeChosen // (Final|Native|Public) // @ game+0x22cdb90
	void NotifyThatToFarToMark(); // Function Solarland.WorldMarkComponent.NotifyThatToFarToMark // (Final|Native|Public) // @ game+0x22cda60
	void MarkWarningOnWorld(); // Function Solarland.WorldMarkComponent.MarkWarningOnWorld // (Final|Native|Public) // @ game+0x22cda40
	void MarkQuickChatOnWorld(struct FString IconImg); // Function Solarland.WorldMarkComponent.MarkQuickChatOnWorld // (Final|Native|Public) // @ game+0x22cd9a0
	void MarkPointOnWorld(); // Function Solarland.WorldMarkComponent.MarkPointOnWorld // (Final|Native|Public) // @ game+0x22cd980
	void MarkOnWorldByMinimapPosition(int32_t PosInTeam, struct FVector2D& MinimapPos); // Function Solarland.WorldMarkComponent.MarkOnWorldByMinimapPosition // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x22cd8b0
	void MarkItemInPickupList(struct FVector& ItemLocation, struct FSolarItemData& ItemData); // Function Solarland.WorldMarkComponent.MarkItemInPickupList // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x22cd760
	void MarkActorByAttachToThem(struct AActor* InActor); // Function Solarland.WorldMarkComponent.MarkActorByAttachToThem // (Final|Native|Public) // @ game+0x22cd6d0
	void InteractTypeNotify(enum class EInteractableType Type, struct ASolarPlayerController* Controller); // Function Solarland.WorldMarkComponent.InteractTypeNotify // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	void InitWorldMarkPool(); // Function Solarland.WorldMarkComponent.InitWorldMarkPool // (Final|Native|Public) // @ game+0x22cd660
	void Init(struct ASolarCharacter* Character); // Function Solarland.WorldMarkComponent.Init // (Final|Native|Public) // @ game+0x22cd5d0
	struct UHUD_WorldMarkPanel* GetWorldMarkPanel(); // Function Solarland.WorldMarkComponent.GetWorldMarkPanel // (Final|Native|Public) // @ game+0x22cd5a0
	int32_t GetQuickVoiceLocalizationID(int32_t& VoiceID); // Function Solarland.WorldMarkComponent.GetQuickVoiceLocalizationID // (Final|Native|Public|HasOutParms) // @ game+0x22cd180
	struct FString GetQuickVoiceEventName(int32_t& VoiceID); // Function Solarland.WorldMarkComponent.GetQuickVoiceEventName // (Final|Native|Public|HasOutParms) // @ game+0x22cd0a0
	int32_t GetQueueGroupMapSize(enum class EWorldMarkType Type, int32_t PosInTeam); // Function Solarland.WorldMarkComponent.GetQueueGroupMapSize // (Final|Native|Public) // @ game+0x22ccfd0
	struct FString GetInvalidTypeDefaultIconPath(); // Function Solarland.WorldMarkComponent.GetInvalidTypeDefaultIconPath // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct FString GetInteractiveObjectsFullPath(enum class EInteractableType Type); // Function Solarland.WorldMarkComponent.GetInteractiveObjectsFullPath // (Event|Public|BlueprintEvent) // @ game+0x25d85b0
	struct UHUD_WorldMark* GetFreeWorldMark(); // Function Solarland.WorldMarkComponent.GetFreeWorldMark // (Final|Native|Public) // @ game+0x22ccfa0
	void CreateWorldMarkInternal(int32_t PosInTeam, struct FWorldMarkData& InWorldMarkedData, struct UObject* IconAsset); // Function Solarland.WorldMarkComponent.CreateWorldMarkInternal // (Final|Native|Public|HasOutParms) // @ game+0x22cce30
	void CreateWorldMark(int32_t PosInTeam, struct FWorldMarkData& InWorldMarkedData); // Function Solarland.WorldMarkComponent.CreateWorldMark // (Final|Native|Public|HasOutParms) // @ game+0x22cccf0
	void CreateWarningWidget(struct FWorldMarkData Data, bool NeedSendMessage); // Function Solarland.WorldMarkComponent.CreateWarningWidget // (Final|Native|Public) // @ game+0x22ccb10
	void CreateItemMarkWidget(struct FWorldMarkData& Data); // Function Solarland.WorldMarkComponent.CreateItemMarkWidget // (Final|Native|Public|HasOutParms) // @ game+0x22cca20
	void CreateInvalidWidget(struct FWorldMarkData Data, bool bShouldNotify); // Function Solarland.WorldMarkComponent.CreateInvalidWidget // (Final|Native|Public) // @ game+0x22cc840
	bool CheckMarkPointIsOutOfMap(struct FVector& Location); // Function Solarland.WorldMarkComponent.CheckMarkPointIsOutOfMap // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x22cc780
	bool CheckIfWorldPosValid(struct FWorldMarkData Data, int32_t& PosInTeam); // Function Solarland.WorldMarkComponent.CheckIfWorldPosValid // (Final|Native|Public|HasOutParms) // @ game+0x22cc5a0
	bool CheckIfThisItemBeenMarkedInternal(int32_t instanceID, int32_t PosInTeam); // Function Solarland.WorldMarkComponent.CheckIfThisItemBeenMarkedInternal // (Final|Native|Public) // @ game+0x22cc4d0
	bool CheckAutoMarkDamagingCharacter(); // Function Solarland.WorldMarkComponent.CheckAutoMarkDamagingCharacter // (Final|Native|Public) // @ game+0x22cc4a0
	void AutoMarkDamagingCharacter(); // Function Solarland.WorldMarkComponent.AutoMarkDamagingCharacter // (Final|Native|Public) // @ game+0x22cc410
};

